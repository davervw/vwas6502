
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: work in progress, disassembles itself <<<
     4                          ;;
     5                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     6                          ;; MIT License
     7                          ;;
     8                          ;; Copyright (c) 2024 David R. Van Wagner
     9                          ;; davevw.com
    10                          ;;
    11                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    12                          ;; of this software and associated documentation files (the "Software"), to deal
    13                          ;; in the Software without restriction, including without limitation the rights
    14                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    15                          ;; copies of the Software, and to permit persons to whom the Software is
    16                          ;; furnished to do so, subject to the following conditions:
    17                          ;;
    18                          ;; The above copyright notice and this permission notice shall be included in all
    19                          ;; copies or substantial portions of the Software.
    20                          ;;
    21                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    22                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    23                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    24                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    25                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    26                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    27                          ;; SOFTWARE.
    28                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    29                          
    30                          ;; VWAS2024 (C) 2024 DAVID R. VAN WAGNER
    31                          ;; MIT LICENSE DAVEVW.COM
    32                          ;; _
    33                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    34                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    35                          ;; 1000 (display memory at $1000)
    36                          ;; 1000.2000 (display memory range $1000 to $2000)
    37                          ;; 1000 r (JMP $1000)
    38                          ;; 1000: 01 02 03 (modify memory)
    39                          ;; (NEW SYNTAX)
    40                          ;; 1000 d (disassemble starting at, interactive until q or ESC)
    41                          ;; 1000 a (assemble starting at, interactive until empty line) 
    42                          ;; (FUTURE SYNTAX, not implemented)
    43                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    44                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    45                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    46                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    47                          ;; . (display registers, VICE format or custom? screen editor changeable?)
    48                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    49                          ;; 1000.2000 "filename" 08 save (save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, can abbreviate to s)
    50                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    51                          ;; ? (commands help)
    52                          ;; ? a (list instructions available)
    53                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    54                          ;; ? mode (show addressing modes example syntax for 6502)
    55                          ;;
    56                          ;; (INTERACTIVE ASSEMBLER)
    57                          ;; 1000 _
    58                          ;;      ADC #$12
    59                          ;; 1000 69 12    ADC #$12
    60                          ;; 1002 _
    61                          ;;      JSR $1234
    62                          ;; 1002 20 34 12 JSR $1234
    63                          ;; 1005 _
    64                          ;;      RTS
    65                          ;; 1005 60       RTS
    66                          ;; 1006 _
    67                          ;;      XYZ
    68                          ;;      XYZ ?
    69                          ;; 1006 _
    70                          ;; _
    71                          ;;
    72                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    73                          ;; and can cursor up to revise, 
    74                          ;;
    75                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    76                          ;;
    77                          
    78                          ; global
    79                          inputbuf=$0200
    80                          
    81                          ; kernal/system calls
    82                          charout=$ffd2
    83                          charin=$ffcf ; screen editor
    84                          getkey=$ffe4
    85                          
    86                          ; zeropage
    87                          ptr1=$fb ; and $fc
    88                          ptr2=$fd ; and $fe
    89                          tmp=$ff
    90                          opidx=$22
    91                          inidx=$23
    92                          mode=$24
    93                          size=$25
    94                          ptr3=$26 ; and $27
    95                          count=$a3
    96                          len=$a4
    97                          savepos=$a5
    98                          tmp2=$a6
    99                          flag=$a7
   100                          
   101                          *=$c000
   102                          start:
   103  c000 a91a                   lda #<copyright
   104  c002 a2cb                   ldx #>copyright
   105  c004 2072c2                 jsr strout
   106  c007 2083c2             -   jsr inputline
   107  c00a 2091c2                 jsr parseline
   108  c00d 4c07c0                 jmp -
   109                          
   110                          test: ; all the addressing modes here for testing disassembly
   111  c010 ea                     nop
   112  c011 ad3412                 lda $1234
   113  c014 bd3412                 lda $1234,x
   114  c017 b93412                 lda $1234,y
   115  c01a 0a                     asl
   116  c01b a912                   lda #$12
   117  c01d a112                   lda ($12,x)
   118  c01f b112                   lda ($12),y
   119  c021 6c3412                 jmp ($1234)
   120  c024 d0fe               -   bne -
   121  c026 a512                   lda $12
   122  c028 b512                   lda $12,x
   123  c02a b612                   ldx $12,y
   124  c02c ff                     !byte $FF ; unknown
   125                          
   126                          disassemble:
   127  c02d a917                   lda #23
   128  c02f 85a3                   sta count
   129  c031 a000               -   ldy #0
   130  c033 b1fb                   lda (ptr1),y
   131  c035 2067c0                 jsr find_opcode
   132  c038 20c6c0                 jsr disp_current
   133  c03b a525                   lda size
   134  c03d 1002                   bpl +
   135  c03f a901                   lda #1
   136  c041 18                 +   clc
   137  c042 65fb                   adc ptr1
   138  c044 85fb                   sta ptr1
   139  c046 9002                   bcc +
   140  c048 e6fc                   inc ptr1+1
   141  c04a c6a3               +   dec count
   142  c04c d0e3                   bne -
   143  c04e a5fb                   lda ptr1
   144  c050 a6fc                   ldx ptr1+1
   145  c052 20ffc1                 jsr disphexword
   146  c055 a96c                   lda #<page_disassemble
   147  c057 a2cb                   ldx #>page_disassemble
   148  c059 4c72c2                 jmp strout
   149                          
   150                          compareptrs:
   151  c05c a5fc                   lda ptr1+1
   152  c05e c5fe                   cmp ptr2+1
   153  c060 d004                   bne +
   154  c062 a5fb                   lda ptr1
   155  c064 c5fd                   cmp ptr2
   156  c066 60                 +   rts
   157                          
   158                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   159                          ; and properties updated in ZP globals size,inidx,opidx,mode
   160  c067 a097                   ldy #nopcodes
   161  c069 a296                   ldx #nopcodes-1
   162  c06b dd55c9             -   cmp opcodes,x
   163  c06e f00b                   beq +
   164  c070 ca                     dex
   165  c071 88                     dey
   166  c072 d0f7                   bne -
   167  c074 18                     clc
   168  c075 a9ff                   lda #$FF
   169  c077 aa                     tax
   170  c078 a8                     tay
   171  c079 900a                   bcc ++
   172  c07b bdecc9             +   lda instidx, x
   173  c07e bc83ca                 ldy modeidx, x
   174  c081 208cc0                 jsr getsize
   175  c084 38                     sec
   176  c085 8523               ++  sta inidx
   177  c087 8622                   stx opidx
   178  c089 8424                   sty mode
   179  c08b 60                     rts
   180                          
   181                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   182                              ; result returned in size
   183  c08c 48                     pha
   184  c08d a901                   lda #1
   185  c08f 8525                   sta size
   186  c091 68                     pla
   187  c092 c002                   cpy #2 // Immediate
   188  c094 9008                   bcc +
   189  c096 e625                   inc size
   190  c098 c009                   cpy #9 // Absolute
   191  c09a 9002                   bcc +
   192  c09c e625                   inc size
   193  c09e 60                 +   rts
   194                          
   195                          disp_opcode: ; .A opcode byte
   196  c09f 2067c0                 jsr find_opcode
   197  c0a2 8a                     txa
   198                              ; fall through to display instruction
   199                          
   200                          dispinst: ; .A instruction index 0..55
   201  c0a3 aa                     tax
   202  c0a4 e038                   cpx #ninst
   203  c0a6 b012                   bcs +
   204  c0a8 bd38c8                 lda inst0, x
   205  c0ab 20d2ff                 jsr charout
   206  c0ae bd70c8                 lda inst1, x
   207  c0b1 20d2ff                 jsr charout
   208  c0b4 bda8c8                 lda inst2, x
   209  c0b7 4cd2ff                 jmp charout
   210  c0ba a93f               +   lda #'?'
   211  c0bc 20d2ff                 jsr charout
   212  c0bf 20d2ff                 jsr charout
   213  c0c2 20d2ff                 jsr charout
   214  c0c5 60                     rts
   215                          
   216                          disp_current:
   217  c0c6 a5fb                   lda ptr1
   218  c0c8 a6fc                   ldx ptr1+1
   219  c0ca 20ffc1                 jsr disphexword
   220  c0cd a920                   lda #$20
   221  c0cf 20d2ff                 jsr charout
   222  c0d2 a000                   ldy #0
   223  c0d4 a625                   ldx size
   224  c0d6 b1fb               -   lda (ptr1),y
   225  c0d8 2005c2                 jsr disphexbyte
   226  c0db a920                   lda #$20
   227  c0dd 20d2ff                 jsr charout
   228  c0e0 c8                     iny
   229  c0e1 ca                     dex
   230  c0e2 d0f2                   bne -
   231  c0e4 c003               -   cpy #3
   232  c0e6 f00e                   beq +
   233  c0e8 a920                   lda #$20
   234  c0ea 20d2ff                 jsr charout
   235  c0ed 20d2ff                 jsr charout
   236  c0f0 20d2ff                 jsr charout
   237  c0f3 c8                     iny
   238  c0f4 d0ee                   bne -
   239  c0f6 a523               +   lda inidx
   240  c0f8 20a3c0                 jsr dispinst
   241  c0fb a920                   lda #$20
   242  c0fd 20d2ff                 jsr charout
   243  c100 2008c1                 jsr disp_mode
   244  c103 a90d                   lda #13
   245  c105 4cd2ff                 jmp charout
   246                          
   247                          disp_mode
   248  c108 a524                   lda mode
   249  c10a c90d                   cmp #13
   250  c10c b00a                   bcs +
   251  c10e 0a                     asl
   252  c10f aa                     tax
   253  c110 bde1c8                 lda mode_jmptable+1,x
   254  c113 48                     pha
   255  c114 bde0c8                 lda mode_jmptable,x
   256  c117 48                     pha
   257  c118 60                 +   rts
   258                          
   259                          dispModeAcc:
   260  c119 a941                   lda #'A'
   261  c11b 4cd2ff                 jmp charout
   262                          
   263                          dispModeNone:
   264  c11e 60                     rts
   265                          
   266                          dispModeImm:
   267  c11f a923                   lda #'#'
   268  c121 20d2ff                 jsr charout
   269                          dispModeZP:
   270  c124 a924                   lda #'$'
   271  c126 20d2ff                 jsr charout
   272  c129 a001                   ldy #1
   273  c12b b1fb                   lda (ptr1),y
   274  c12d 4c05c2                 jmp disphexbyte
   275                          
   276                          dispModeIndX:
   277  c130 a928                   lda #'('
   278  c132 20d2ff                 jsr charout
   279  c135 a924                   lda #'$'
   280  c137 20d2ff                 jsr charout
   281  c13a a001                   ldy #1
   282  c13c b1fb                   lda (ptr1),y
   283  c13e 2005c2                 jsr disphexbyte
   284  c141 a92c                   lda #','
   285  c143 20d2ff                 jsr charout
   286  c146 a958                   lda #'X'
   287  c148 20d2ff                 jsr charout
   288  c14b a929                   lda #')'
   289  c14d 4cd2ff                 jmp charout
   290                          
   291                          dispModeIndY:
   292  c150 a928                   lda #'('
   293  c152 20d2ff                 jsr charout
   294  c155 a924                   lda #'$'
   295  c157 20d2ff                 jsr charout
   296  c15a a001                   ldy #1
   297  c15c b1fb                   lda (ptr1),y
   298  c15e 2005c2                 jsr disphexbyte
   299  c161 a929                   lda #')'
   300  c163 20d2ff                 jsr charout
   301  c166 a92c                   lda #','
   302  c168 20d2ff                 jsr charout
   303  c16b a959                   lda #'Y'
   304  c16d 4cd2ff                 jmp charout
   305                          
   306                          dispModeRel:
   307  c170 a924                   lda #'$'
   308  c172 20d2ff                 jsr charout
   309  c175 18                     clc
   310  c176 a5fb                   lda ptr1
   311  c178 6902                   adc #2
   312  c17a 8526                   sta ptr3
   313  c17c a5fc                   lda ptr1+1
   314  c17e 6900                   adc #0
   315  c180 8527                   sta ptr3+1
   316  c182 a001                   ldy #1
   317  c184 b1fb                   lda (ptr1),y
   318  c186 1014                   bpl +
   319                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   320  c188 49ff                   eor #$FF ; inverse
   321  c18a 18                     clc
   322  c18b 6901                   adc #1 ; complete getting absolute value from two's complement
   323  c18d 85ff                   sta tmp
   324  c18f 38                     sec
   325  c190 a526                   lda ptr3
   326  c192 e5ff                   sbc tmp
   327  c194 8526                   sta ptr3
   328  c196 b00d                   bcs ++
   329  c198 c627                   dec ptr3+1
   330  c19a 9009                   bcc ++
   331  c19c 18                 +   clc ; simple case of adding
   332  c19d 6526                   adc ptr3
   333  c19f 8526                   sta ptr3
   334  c1a1 9002                   bcc ++
   335  c1a3 e627                   inc ptr3+1
   336  c1a5 a526               ++  lda ptr3
   337  c1a7 a627                   ldx ptr3+1
   338  c1a9 4cffc1                 jmp disphexword
   339                          
   340                          dispModeZPX:
   341  c1ac 2024c1                 jsr dispModeZP
   342  c1af a92c                   lda #','
   343  c1b1 20d2ff                 jsr charout
   344  c1b4 a958                   lda #'X'
   345  c1b6 4cd2ff                 jmp charout
   346                          
   347                          dispModeZPY:
   348  c1b9 2024c1                 jsr dispModeZP
   349  c1bc a92c                   lda #','
   350  c1be 20d2ff                 jsr charout
   351  c1c1 a959                   lda #'Y'
   352  c1c3 4cd2ff                 jmp charout
   353                          
   354                          dispModeAbs:
   355  c1c6 a924                   lda #'$'
   356  c1c8 20d2ff                 jsr charout
   357  c1cb a001                   ldy #1
   358  c1cd b1fb                   lda (ptr1),y
   359  c1cf 48                     pha
   360  c1d0 c8                     iny
   361  c1d1 b1fb                   lda (ptr1),y
   362  c1d3 aa                     tax
   363  c1d4 68                     pla
   364  c1d5 4cffc1                 jmp disphexword
   365                          
   366                          dispModeAbsX:
   367  c1d8 20c6c1                 jsr dispModeAbs
   368  c1db a92c                   lda #','
   369  c1dd 20d2ff                 jsr charout
   370  c1e0 a958                   lda #'X'
   371  c1e2 4cd2ff                 jmp charout
   372                          
   373                          dispModeAbsY:
   374  c1e5 20c6c1                 jsr dispModeAbs
   375  c1e8 a92c                   lda #','
   376  c1ea 20d2ff                 jsr charout
   377  c1ed a959                   lda #'Y'
   378  c1ef 4cd2ff                 jmp charout
   379                          
   380                          dispModeInd:
   381  c1f2 a928                   lda #'('
   382  c1f4 20d2ff                 jsr charout
   383  c1f7 20c6c1                 jsr dispModeAbs
   384  c1fa a929                   lda #')'
   385  c1fc 4cd2ff                 jmp charout
   386                          
   387                          disphexword: ; .A low, .X high, 0000..FFFF
   388  c1ff 48                     pha
   389  c200 8a                     txa
   390  c201 2005c2                 jsr disphexbyte
   391  c204 68                     pla
   392                              ;fall through to call again
   393                          
   394                          disphexbyte: ; .A 00..FF
   395  c205 48                     pha
   396  c206 4a                     lsr
   397  c207 4a                     lsr
   398  c208 4a                     lsr
   399  c209 4a                     lsr
   400  c20a 200ec2                 jsr disphexnybble
   401  c20d 68                     pla
   402                              ;fall through to call again
   403                          
   404                          disphexnybble: ; .A 0..F
   405  c20e 290f                   and #$0F
   406  c210 0930                   ora #$30
   407  c212 c93a                   cmp #$3A
   408  c214 9002                   bcc +
   409  c216 6906                   adc #$06
   410  c218 4cd2ff             +   jmp charout
   411                          
   412                          inputhexword: ; C set if fails
   413  c21b 98                     tya
   414  c21c aa                     tax ; save buffer pointer in x
   415  c21d 2038c2                 jsr inputhexbyte
   416  c220 b013                   bcs ++ ; failed
   417  c222 85fb               +   sta ptr1 ; assume one byte
   418  c224 a900                   lda #0
   419  c226 85fc                   sta ptr1+1 ; extend to 16 bits
   420  c228 2038c2                 jsr inputhexbyte
   421  c22b b006                   bcs + ; failed
   422  c22d a6fb                   ldx ptr1 ; two bytes so shift the bytes
   423  c22f 86fc                   stx ptr1+1
   424  c231 85fb                   sta ptr1
   425  c233 18                 +   clc
   426  c234 60                     rts
   427  c235 8a                 ++  txa
   428  c236 a8                     tay ; restore buffer pointer
   429  c237 60                     rts
   430                          
   431                          inputhexbyte:
   432  c238 2054c2                 jsr inputhexnybble
   433  c23b b016                   bcs ++
   434  c23d 85ff                   sta tmp
   435  c23f 2054c2                 jsr inputhexnybble
   436  c242 9005                   bcc +
   437  c244 18                     clc ; allow single digit as byte
   438  c245 a5ff                   lda tmp
   439  c247 900a                   bcc ++
   440  c249 06ff               +   asl tmp
   441  c24b 06ff                   asl tmp
   442  c24d 06ff                   asl tmp
   443  c24f 06ff                   asl tmp
   444  c251 05ff                   ora tmp
   445  c253 60                 ++  rts
   446                          
   447                          inputhexnybble:
   448  c254 b90002                 lda $0200,y
   449  c257 297f                   and #$7F
   450  c259 38                     sec
   451  c25a e930                   sbc #$30
   452  c25c 9012                   bcc ++
   453  c25e c90a                   cmp #10
   454  c260 900c                   bcc +
   455  c262 e907                   sbc #7
   456  c264 900a                   bcc ++
   457  c266 c90a                   cmp #10
   458  c268 9006                   bcc ++
   459  c26a c910                   cmp #16
   460  c26c b002                   bcs ++
   461  c26e c8                 +   iny
   462  c26f 60                     rts
   463  c270 38                 ++  sec
   464  c271 60                     rts
   465                          
   466                          strout:
   467  c272 8526                   sta ptr3
   468  c274 8627                   stx ptr3+1
   469  c276 a000                   ldy #0
   470  c278 b126               -   lda (ptr3),y
   471  c27a f006                   beq +
   472  c27c 20d2ff                 jsr charout
   473  c27f c8                     iny
   474  c280 d0f6                   bne -
   475  c282 60                 +   rts
   476                          
   477                          inputline:
   478  c283 a000                   ldy #0
   479  c285 20cfff             -   jsr charin
   480  c288 990002                 sta inputbuf,y
   481  c28b c8                     iny
   482  c28c c90d                   cmp #13
   483  c28e d0f5                   bne -
   484  c290 60                 +   rts
   485                          
   486                          parseline:
   487  c291 c001                   cpy #1
   488  c293 d003                   bne +
   489  c295 4c32c8             -   jmp newline
   490  c298 88                 +   dey
   491  c299 84a4                   sty len
   492                              ; skip whitespace
   493                              ; check for address, put in ptr1
   494                              ; or check for dot, then require address put in ptr2
   495                              ; or check for ?, and optional parameter, execute help
   496                              ; check for whitespace
   497                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   498                              ; check for string, store at start of inputbuf
   499                              ; check for drive number
   500                              ; check for whitespace
   501                              ; check command ":rda?mls", execute command
   502  c29b a000                   ldy #0
   503  c29d 2075c7                 jsr skipspaces
   504  c2a0 c4a4                   cpy len
   505  c2a2 f0f1                   beq -
   506  c2a4 2080c7                 jsr chkdot
   507  c2a7 d003                   bne +
   508  c2a9 4c9ac3                 jmp executedot
   509  c2ac 208bc7             +   jsr chkhelp
   510  c2af d003                   bne +
   511  c2b1 4c9ac3                 jmp executehelp
   512  c2b4 20d5c7             +   jsr chkhexaddr1
   513  c2b7 d003                   bne error
   514  c2b9 4cbfc2                 jmp executeaddr1
   515                          error:
   516  c2bc 4c5ec7                 jmp reporterr
   517                          
   518                          executeaddr1:
   519  c2bf c4a4                   cpy len
   520  c2c1 d003                   bne +
   521  c2c3 4c12c3                 jmp executedisplay1
   522  c2c6 2080c7             +   jsr chkdot
   523  c2c9 d00f                   bne +
   524  c2cb c4a4                   cpy len
   525  c2cd f021                   beq ++
   526  c2cf 20f5c7                 jsr chkhexaddr2
   527  c2d2 d0e8                   bne error
   528  c2d4 18                     clc
   529  c2d5 66a7                   ror flag
   530  c2d7 4c08c3                 jmp executeaddr12
   531  c2da 2075c7             +   jsr skipspaces
   532  c2dd 2096c7                 jsr chkcolon
   533  c2e0 d003                   bne +
   534  c2e2 4c78c3                 jmp executemodify
   535  c2e5 2016c8             +   jsr chkaddr1cmd ; rda, will not return here if cmd
   536  c2e8 20a1c7                 jsr chkfilename
   537  c2eb d0cf                   bne error
   538  c2ed 4c9ac3                 jmp executeloadfilename
   539  c2f0 a5fb               ++  lda ptr1
   540  c2f2 18                     clc
   541  c2f3 69b7                   adc #$b7
   542  c2f5 85fd                   sta ptr2
   543  c2f7 a5fc                   lda ptr1+1
   544  c2f9 6900                   adc #$00
   545  c2fb 85fe                   sta ptr2+1
   546  c2fd 9006                   bcc +
   547  c2ff a9ff                   lda #$ff
   548  c301 85fd                   sta ptr2
   549  c303 85fe                   sta ptr2+1
   550  c305 38                 +   sec
   551  c306 66a7                   ror flag
   552                              ; fall through to executeaddr12
   553                          
   554                          executeaddr12:
   555  c308 c4a4                   cpy len
   556  c30a d003                   bne +
   557  c30c 4c1ac3                 jmp executedisplay12
   558  c30f 4c57c7             +   jmp reportnotimplemented
   559                          
   560                          executedisplay1:
   561  c312 a5fb                   lda ptr1
   562  c314 85fd                   sta ptr2
   563  c316 a5fc                   lda ptr1+1
   564  c318 85fe                   sta ptr2+1
   565                              ; fall through executedisplay12
   566                          
   567                          executedisplay12:
   568  c31a a9ff                   lda #$ff
   569  c31c 85a3                   sta count
   570  c31e e6a3               -   inc count
   571  c320 a5a3                   lda count
   572  c322 2907                   and #$07
   573  c324 d016                   bne +
   574  c326 a90d                   lda #13
   575  c328 20d2ff                 jsr charout
   576  c32b a5fb                   lda ptr1
   577  c32d a6fc                   ldx ptr1+1
   578  c32f 20ffc1                 jsr disphexword
   579  c332 a93a                   lda #':'
   580  c334 20d2ff                 jsr charout
   581  c337 a920                   lda #' '
   582  c339 20d2ff                 jsr charout
   583  c33c a000               +   ldy #0
   584  c33e b1fb                   lda (ptr1),y
   585  c340 2005c2                 jsr disphexbyte
   586  c343 a920                   lda #' '
   587  c345 20d2ff                 jsr charout
   588  c348 e6fb                   inc ptr1
   589  c34a d004                   bne +
   590  c34c e6fc                   inc ptr1+1
   591  c34e f025                   beq ++
   592  c350 205cc0             +   jsr compareptrs
   593  c353 90c9                   bcc -
   594  c355 f0c7                   beq -
   595  c357 24a7                   bit flag
   596  c359 101a                   bpl ++
   597  c35b 2032c8                 jsr newline
   598  c35e a5fb                   lda ptr1
   599  c360 a6fc                   ldx ptr1+1
   600  c362 20ffc1                 jsr disphexword
   601  c365 a92e                   lda #'.'
   602  c367 20d2ff                 jsr charout
   603  c36a a205                   ldx #5
   604  c36c a99d                   lda #157
   605  c36e 20d2ff             -   jsr charout
   606  c371 ca                     dex
   607  c372 d0fa                   bne -
   608  c374 60                     rts
   609  c375 4c32c8             ++  jmp newline
   610                          
   611                          executemodify:
   612  c378 2075c7                 jsr skipspaces
   613  c37b c4a4                   cpy len
   614  c37d f018                   beq ++
   615  c37f 20bbc7                 jsr chkhexbyteofsequence
   616  c382 f003                   beq +
   617  c384 4cbcc2                 jmp error
   618  c387 84ff               +   sty tmp
   619  c389 a000                   ldy #0
   620  c38b 91fb                   sta (ptr1),y
   621  c38d e6fb                   inc ptr1
   622  c38f d002                   bne +
   623  c391 e6fc                   inc ptr1+1
   624  c393 a4ff               +   ldy tmp
   625  c395 d0e1                   bne executemodify
   626  c397 4c32c8             ++  jmp newline
   627                          
   628                          executeloadfilename:
   629                          executedot:
   630                          executeaddr1cmd:
   631                          executehelp:
   632  c39a 4c57c7                 jmp reportnotimplemented
   633                          
   634                          executeassemble:
   635  c39d 68                     pla ; remove low byte return address
   636  c39e 68                     pla ; return high byte return address
   637  c39f a914                   lda #20
   638  c3a1 20d2ff                 jsr charout
   639  c3a4 20d2ff                 jsr charout
   640                              ; save current pointer
   641  c3a7 a5fb               --  lda ptr1
   642  c3a9 a6fc                   ldx ptr1+1
   643  c3ab 8526                   sta ptr3
   644  c3ad 8627                   stx ptr3+1
   645  c3af 2083c2                 jsr inputline
   646  c3b2 c001                   cpy #1
   647  c3b4 f040                   beq ++
   648  c3b6 88                     dey
   649  c3b7 84a4                   sty len
   650  c3b9 a000                   ldy #0
   651  c3bb 2075c7                 jsr skipspaces
   652  c3be c4a4                   cpy len
   653  c3c0 f034                   beq ++
   654                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
   655                              ;jsr skipspaces
   656  c3c2 20ccc6                 jsr chkinstruction
   657  c3c5 f003                   beq +
   658  c3c7 4cbcc2             -   jmp error    
   659  c3ca 2020c4             +   jsr chkaddressing
   660  c3cd d0f8                   bne -
   661  c3cf 20fdc6                 jsr find_inst_and_mode
   662  c3d2 d0f3                   bne -
   663  c3d4 20f9c3                 jsr store_assembly
   664  c3d7 18                     clc
   665  c3d8 a525                   lda size
   666  c3da 6526                   adc ptr3
   667  c3dc 85fb                   sta ptr1
   668  c3de a527                   lda ptr3+1
   669  c3e0 6900                   adc #0
   670  c3e2 85fc                   sta ptr1+1
   671  c3e4 2032c8                 jsr newline ; TODO disassemble on screen as assemble for validation
   672  c3e7 a5fb                   lda ptr1
   673  c3e9 a6fc                   ldx ptr1+1
   674  c3eb 20ffc1                 jsr disphexword
   675  c3ee a920                   lda #' '
   676  c3f0 20d2ff                 jsr charout
   677  c3f3 4ca7c3                 jmp --
   678  c3f6 4c32c8             ++  jmp newline
   679                          
   680                          store_assembly:
   681  c3f9 a622                   ldx opidx
   682  c3fb bd55c9                 lda opcodes, x
   683  c3fe a000                   ldy #0
   684  c400 9126                   sta (ptr3), y
   685  c402 c8                     iny
   686  c403 a625                   ldx size
   687  c405 e001                   cpx #1
   688  c407 f016                   beq ++
   689  c409 e002               +   cpx #2
   690  c40b d005                   bne +
   691  c40d a5a6                   lda tmp2
   692  c40f 9126                   sta (ptr3), y
   693  c411 60                     rts
   694  c412 e003               +   cpx #3
   695  c414 d009                   bne ++
   696  c416 a5fb                   lda ptr1
   697  c418 9126                   sta (ptr3), y
   698  c41a c8                     iny
   699  c41b a5fc                   lda ptr1+1
   700  c41d 9126                   sta (ptr3), y
   701  c41f 60                 ++  rts
   702                          
   703                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
   704  c420 2075c7                 jsr skipspaces
   705  c423 a200                   ldx #0
   706  c425 8624                   stx mode
   707  c427 2082c4                 jsr chkaccumulator
   708  c42a f051                   beq +
   709  c42c e624                   inc mode
   710  c42e c4a4                   cpy len ; chknone
   711  c430 f04b                   beq +
   712  c432 e624                   inc mode
   713  c434 20a6c4                 jsr chkimmediate
   714  c437 f044                   beq +
   715  c439 e624                   inc mode
   716  c43b 20cac4                 jsr chkindirectx
   717  c43e f03d                   beq +
   718  c440 e624                   inc mode
   719  c442 200fc5                 jsr chkindirecty
   720  c445 f036                   beq +
   721  c447 e624                   inc mode
   722  c449 2054c5                 jsr chkrelative
   723  c44c f02f                   beq +
   724  c44e e624                   inc mode
   725  c450 20afc5                 jsr chkzeropage
   726  c453 f028                   beq +
   727  c455 e624                   inc mode
   728  c457 20c8c5                 jsr chkzeropagex
   729  c45a f021                   beq +
   730  c45c e624                   inc mode
   731  c45e 20f7c5                 jsr chkzeropagey
   732  c461 f01a                   beq +
   733  c463 e624                   inc mode
   734  c465 2026c6                 jsr chkabsolute
   735  c468 f013                   beq +
   736  c46a e624                   inc mode
   737  c46c 203fc6                 jsr chkabsolutex
   738  c46f f00c                   beq +
   739  c471 e624                   inc mode
   740  c473 206ec6                 jsr chkabsolutey
   741  c476 f005                   beq +
   742  c478 e624                   inc mode
   743  c47a 209dc6                 jsr chkindirect
   744  c47d 08                 +   php ; save Z
   745  c47e a524                   lda mode
   746  c480 28                     plp ; restore Z 
   747  c481 60                     rts
   748                          
   749                          chkaccumulator:
   750  c482 c4a4                   cpy len
   751  c484 d013                   bne +
   752  c486 a523                   lda inidx
   753  c488 c902                   cmp #2 ; ASL
   754  c48a f019                   beq ++
   755  c48c c920                   cmp #32 ; LSR
   756  c48e f015                   beq ++
   757  c490 c927                   cmp #39 ; ROL
   758  c492 f011                   beq ++
   759  c494 c928                   cmp #40 ; ROR
   760  c496 4ca5c4                 jmp ++
   761  c499 b90002             +   lda inputbuf, y
   762  c49c c941                   cmp #'A'
   763  c49e d005                   bne ++
   764  c4a0 b90102                 lda inputbuf+1,y
   765  c4a3 c90d                   cmp #13 ; Z set true/false whether parsed exactly
   766  c4a5 60                 ++  rts
   767                          
   768                          chkimmediate:
   769  c4a6 84a5                   sty savepos
   770  c4a8 b90002                 lda inputbuf, y
   771  c4ab c923                   cmp #'#'
   772  c4ad d016                   bne ++
   773  c4af c8                     iny
   774  c4b0 2075c7                 jsr skipspaces
   775  c4b3 b90002                 lda inputbuf, y
   776  c4b6 c924                   cmp #'$'
   777  c4b8 d001                   bne +
   778  c4ba c8                     iny
   779  c4bb 20dec7             +   jsr chkhexbyte
   780  c4be d005                   bne ++
   781  c4c0 c4a4               +   cpy len
   782  c4c2 d001                   bne ++
   783  c4c4 60                     rts
   784  c4c5 a4a5               ++  ldy savepos
   785  c4c7 a201                   ldx #1 ; Z false (NE)
   786  c4c9 60                     rts
   787                          
   788                          chkindirectx:
   789  c4ca 84a5                   sty savepos
   790  c4cc b90002                 lda inputbuf, y
   791  c4cf c928                   cmp #'('
   792  c4d1 d037                   bne ++
   793  c4d3 c8                     iny
   794  c4d4 2075c7                 jsr skipspaces
   795  c4d7 b90002                 lda inputbuf, y
   796  c4da c924                   cmp #'$'
   797  c4dc d001                   bne +
   798  c4de c8                     iny
   799  c4df 20dec7             +   jsr chkhexbyte
   800  c4e2 d026                   bne ++
   801  c4e4 2075c7                 jsr skipspaces
   802  c4e7 b90002                 lda inputbuf, y
   803  c4ea c92c                   cmp #','
   804  c4ec d01c                   bne ++
   805  c4ee c8                     iny
   806  c4ef 2075c7                 jsr skipspaces
   807  c4f2 b90002                 lda inputbuf, y
   808  c4f5 c958                   cmp #'X'
   809  c4f7 d011                   bne ++
   810  c4f9 c8                     iny
   811  c4fa 2075c7                 jsr skipspaces
   812  c4fd b90002                 lda inputbuf, y
   813  c500 c929                   cmp #')'
   814  c502 d006                   bne ++
   815  c504 c8                     iny
   816  c505 c4a4                   cpy len
   817  c507 d001                   bne ++
   818  c509 60                     rts
   819  c50a a4a5               ++  ldy savepos
   820  c50c a201                   ldx #1 ; Z false (NE)
   821  c50e 60                     rts
   822                          
   823                          chkindirecty:
   824  c50f 84a5                   sty savepos
   825  c511 b90002                 lda inputbuf, y
   826  c514 c928                   cmp #'('
   827  c516 d037                   bne ++
   828  c518 c8                     iny
   829  c519 2075c7                 jsr skipspaces
   830  c51c b90002                 lda inputbuf, y
   831  c51f c924                   cmp #'$'
   832  c521 d001                   bne +
   833  c523 c8                     iny
   834  c524 20dec7             +   jsr chkhexbyte
   835  c527 d026                   bne ++
   836  c529 2075c7                 jsr skipspaces
   837  c52c b90002                 lda inputbuf, y
   838  c52f c929                   cmp #')'
   839  c531 d01c                   bne ++
   840  c533 c8                     iny
   841  c534 2075c7                 jsr skipspaces
   842  c537 b90002                 lda inputbuf, y
   843  c53a c92c                   cmp #','
   844  c53c d011                   bne ++
   845  c53e c8                     iny
   846  c53f 2075c7                 jsr skipspaces
   847  c542 b90002                 lda inputbuf, y
   848  c545 c959                   cmp #'Y'
   849  c547 d006                   bne ++
   850  c549 c8                     iny
   851  c54a c4a4                   cpy len
   852  c54c d001                   bne ++
   853  c54e 60                     rts
   854  c54f a4a5               ++  ldy savepos
   855  c551 a201                   ldx #1 ; Z false (NE)
   856  c553 60                     rts
   857                          
   858                          chkrelative:
   859  c554 84a5                   sty savepos
   860  c556 a623                   ldx inidx
   861  c558 e006                   cpx #6 ; BIT
   862  c55a f01e                   beq ++
   863  c55c bd38c8                 lda inst0, x
   864  c55f c942                   cmp #'B'
   865  c561 d017                   bne ++
   866  c563 b90002                 lda inputbuf, y
   867  c566 c924                   cmp #'$'
   868  c568 d001                   bne +
   869  c56a c8                     iny
   870  c56b 20d5c7             +   jsr chkhexword
   871  c56e d00a                   bne ++
   872  c570 c4a4                   cpy len
   873  c572 d006                   bne ++
   874  c574 207fc5                 jsr computeoffset
   875  c577 d001                   bne ++
   876  c579 60                     rts ; Z true (EQ)
   877  c57a a4a5               ++  ldy savepos
   878  c57c a201                   ldx #1 ; Z false (NE)
   879  c57e 60                     rts
   880                          
   881                          computeoffset:
   882                          ;   compute next address
   883  c57f a527                   lda ptr3+1
   884  c581 85fe                   sta ptr2+1
   885  c583 a526                   lda ptr3
   886  c585 18                     clc
   887  c586 6902                   adc #2
   888  c588 85fd                   sta ptr2
   889  c58a 9002                   bcc +
   890  c58c e6fe                   inc ptr2+1
   891                          +  ; subtract argument
   892  c58e 38                     sec
   893  c58f a5fb                   lda ptr1
   894  c591 e5fd                   sbc ptr2
   895  c593 85a6                   sta tmp2
   896  c595 a5fc                   lda ptr1+1
   897  c597 e5fe                   sbc ptr2+1
   898  c599 f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
   899  c59b c9ff                   cmp #$FF
   900  c59d d00d                   bne failedoffset ; 0 and FF were only options so fail
   901                              ; chkeck negative offset
   902  c59f a5a6                   lda tmp2
   903  c5a1 3006                   bmi successoffset ; branch if signed byte is negative
   904  c5a3 1007                   bpl failedoffset ; otherwise fail
   905                          chkoffsetto127:
   906  c5a5 a5a6                   lda tmp2
   907  c5a7 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
   908                          successoffset:    
   909  c5a9 a900                   lda #0 ; Z true (EQ)
   910  c5ab 60                     rts
   911                          failedoffset:
   912  c5ac a901                   lda #1 ; Z false (NE)
   913  c5ae 60                     rts
   914                          
   915                          chkzeropage:
   916  c5af 84a5                   sty savepos
   917  c5b1 b90002                 lda inputbuf, y
   918  c5b4 c924                   cmp #'$'
   919  c5b6 d001                   bne +
   920  c5b8 c8                     iny
   921  c5b9 20dec7             +   jsr chkhexbyte
   922  c5bc d005                   bne ++
   923  c5be c4a4                   cpy len
   924  c5c0 d001                   bne ++
   925  c5c2 60                     rts ; Z true (EQ)
   926  c5c3 a4a5               ++  ldy savepos
   927  c5c5 a201                   ldx #1 ; Z false (NE)
   928  c5c7 60                     rts
   929                          
   930                          chkzeropagex:
   931  c5c8 84a5                   sty savepos
   932  c5ca b90002                 lda inputbuf, y
   933  c5cd c924                   cmp #'$'
   934  c5cf d001                   bne +
   935  c5d1 c8                     iny
   936  c5d2 20dec7             +   jsr chkhexbyte
   937  c5d5 d01b                   bne ++
   938  c5d7 2075c7                 jsr skipspaces
   939  c5da b90002                 lda inputbuf, y
   940  c5dd c92c                   cmp #','
   941  c5df d011                   bne ++
   942  c5e1 c8                     iny
   943  c5e2 2075c7                 jsr skipspaces
   944  c5e5 b90002                 lda inputbuf, y
   945  c5e8 c958                   cmp #'X'
   946  c5ea d006                   bne ++
   947  c5ec c8                     iny
   948  c5ed c4a4                   cpy len
   949  c5ef d001                   bne ++
   950  c5f1 60                     rts ; Z true (EQ)
   951  c5f2 a4a5               ++  ldy savepos
   952  c5f4 a201                   ldx #1 ; Z false (NE)
   953  c5f6 60                     rts
   954                          
   955                          chkzeropagey:
   956  c5f7 84a5                   sty savepos
   957  c5f9 b90002                 lda inputbuf, y
   958  c5fc c924                   cmp #'$'
   959  c5fe d001                   bne +
   960  c600 c8                     iny
   961  c601 20dec7             +   jsr chkhexbyte
   962  c604 d01b                   bne ++
   963  c606 2075c7                 jsr skipspaces
   964  c609 b90002                 lda inputbuf, y
   965  c60c c92c                   cmp #','
   966  c60e d011                   bne ++
   967  c610 c8                     iny
   968  c611 2075c7                 jsr skipspaces
   969  c614 b90002                 lda inputbuf, y
   970  c617 c959                   cmp #'Y'
   971  c619 d006                   bne ++
   972  c61b c8                     iny
   973  c61c c4a4                   cpy len
   974  c61e d001                   bne ++
   975  c620 60                     rts ; Z true (EQ)
   976  c621 a4a5               ++  ldy savepos
   977  c623 a201                   ldx #1 ; Z false (NE)
   978  c625 60                     rts
   979                          
   980                          chkabsolute:
   981  c626 84a5                   sty savepos
   982  c628 b90002                 lda inputbuf, y
   983  c62b c924                   cmp #'$'
   984  c62d d001                   bne +
   985  c62f c8                     iny
   986  c630 20d5c7             +   jsr chkhexword
   987  c633 d005                   bne ++
   988  c635 c4a4                   cpy len
   989  c637 d001                   bne ++
   990  c639 60                     rts ; Z true (EQ)
   991  c63a a4a5               ++  ldy savepos
   992  c63c a201                   ldx #1 ; Z false (NE)
   993  c63e 60                     rts
   994                          
   995                          chkabsolutex:
   996  c63f 84a5                   sty savepos
   997  c641 b90002                 lda inputbuf, y
   998  c644 c924                   cmp #'$'
   999  c646 d001                   bne +
  1000  c648 c8                     iny
  1001  c649 20d5c7             +   jsr chkhexword
  1002  c64c d01b                   bne ++
  1003  c64e 2075c7                 jsr skipspaces
  1004  c651 b90002                 lda inputbuf, y
  1005  c654 c92c                   cmp #','
  1006  c656 d011                   bne ++
  1007  c658 c8                     iny
  1008  c659 2075c7                 jsr skipspaces
  1009  c65c b90002                 lda inputbuf, y
  1010  c65f c958                   cmp #'X'
  1011  c661 d006                   bne ++
  1012  c663 c8                     iny
  1013  c664 c4a4                   cpy len
  1014  c666 d001                   bne ++
  1015  c668 60                     rts ; Z true (EQ)
  1016  c669 a4a5               ++  ldy savepos
  1017  c66b a201                   ldx #1 ; Z false (NE)
  1018  c66d 60                     rts
  1019                          
  1020                          chkabsolutey:
  1021  c66e 84a5                   sty savepos
  1022  c670 b90002                 lda inputbuf, y
  1023  c673 c924                   cmp #'$'
  1024  c675 d001                   bne +
  1025  c677 c8                     iny
  1026  c678 20d5c7             +   jsr chkhexword
  1027  c67b d01b                   bne ++
  1028  c67d 2075c7                 jsr skipspaces
  1029  c680 b90002                 lda inputbuf, y
  1030  c683 c92c                   cmp #','
  1031  c685 d011                   bne ++
  1032  c687 c8                     iny
  1033  c688 2075c7                 jsr skipspaces
  1034  c68b b90002                 lda inputbuf, y
  1035  c68e c959                   cmp #'Y'
  1036  c690 d006                   bne ++
  1037  c692 c8                     iny
  1038  c693 c4a4                   cpy len
  1039  c695 d001                   bne ++
  1040  c697 60                     rts ; Z true (EQ)
  1041  c698 a4a5               ++  ldy savepos
  1042  c69a a201                   ldx #1 ; Z false (NE)
  1043  c69c 60                     rts
  1044                          
  1045                          chkindirect:
  1046  c69d 84a5                   sty savepos
  1047  c69f b90002                 lda inputbuf, y
  1048  c6a2 c928                   cmp #'('
  1049  c6a4 d021                   bne ++
  1050  c6a6 c8                     iny
  1051  c6a7 2075c7                 jsr skipspaces
  1052  c6aa b90002                 lda inputbuf, y
  1053  c6ad c924                   cmp #'$'
  1054  c6af d001                   bne +
  1055  c6b1 c8                     iny
  1056  c6b2 20d5c7             +   jsr chkhexword
  1057  c6b5 d010                   bne ++
  1058  c6b7 2075c7                 jsr skipspaces
  1059  c6ba b90002                 lda inputbuf, y
  1060  c6bd c929                   cmp #')'
  1061  c6bf d006                   bne ++
  1062  c6c1 c8                     iny
  1063  c6c2 c4a4                   cpy len
  1064  c6c4 d001                   bne ++
  1065  c6c6 60                     rts ; Z true (EQ)
  1066  c6c7 a4a5               ++  ldy savepos
  1067  c6c9 a201                   ldx #1 ; Z false (NE)
  1068  c6cb 60                     rts
  1069                          
  1070                          chkinstruction:
  1071  c6cc c4a4                   cpy len
  1072  c6ce f02a                   beq ++
  1073  c6d0 84ff                   sty tmp
  1074  c6d2 a237                   ldx #(ninst-1)
  1075  c6d4 b90002             -   lda inputbuf,y
  1076  c6d7 dd38c8                 cmp inst0,x
  1077  c6da d019                   bne +
  1078  c6dc c8                     iny
  1079  c6dd b90002                 lda inputbuf,y
  1080  c6e0 dd70c8                 cmp inst1,x
  1081  c6e3 d010                   bne +
  1082  c6e5 c8                     iny
  1083  c6e6 b90002                 lda inputbuf,y
  1084  c6e9 dda8c8                 cmp inst2,x
  1085  c6ec d007                   bne +
  1086  c6ee c8                     iny
  1087  c6ef 8a                     txa
  1088  c6f0 8523                   sta inidx
  1089  c6f2 a200                   ldx #0
  1090  c6f4 60                     rts
  1091  c6f5 a4ff               +   ldy tmp
  1092  c6f7 ca                     dex
  1093  c6f8 10da                   bpl -
  1094  c6fa a201               ++  ldx #1 ; Z false (NE)
  1095  c6fc 60                     rts
  1096                          
  1097                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1098                              ; and allows mode promotion
  1099  c6fd 2016c7                 jsr find_inst_and_mode2
  1100  c700 f013                   beq ++
  1101  c702 a524                   lda mode
  1102  c704 c906                   cmp #6
  1103  c706 900d                   bcc ++
  1104  c708 c90a                   cmp #10
  1105  c70a b007                   bcs +
  1106  c70c 6903                   adc #3
  1107  c70e 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1108  c710 4c16c7                 jmp find_inst_and_mode2 ; try again once
  1109  c713 a201               +   ldx #1 ; Z false (NE)
  1110  c715 60                 ++  rts
  1111                          
  1112                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1113  c716 a296                   ldx #nopcodes-1
  1114  c718 bdecc9             -   lda instidx, x
  1115  c71b bc83ca                 ldy modeidx, x
  1116  c71e c523                   cmp inidx
  1117  c720 d00c                   bne +
  1118  c722 c424                   cpy mode
  1119  c724 d008                   bne +
  1120  c726 8622                   stx opidx
  1121  c728 208cc0                 jsr getsize
  1122  c72b a200                   ldx #0 ; Z true (EQ)
  1123  c72d 60                     rts
  1124  c72e ca                 +   dex
  1125  c72f e0ff                   cpx #$ff
  1126  c731 d0e5                   bne -
  1127  c733 a201                   ldx #1 ; Z false (NE)
  1128  c735 60                     rts
  1129                          
  1130                          executerun:
  1131  c736 68                     pla ; remove low byte return address
  1132  c737 68                     pla ; return high byte return address
  1133  c738 68                     pla ; again, we're really not returning
  1134  c739 68                     pla ; again, we're really not returning
  1135  c73a 2032c8                 jsr newline
  1136  c73d 38                     sec
  1137  c73e a5fb                   lda ptr1
  1138  c740 e901                   sbc #1
  1139  c742 85fb                   sta ptr1
  1140  c744 b002                   bcs +
  1141  c746 c6fc                   dec ptr1+1
  1142  c748 a5fc               +   lda ptr1+1
  1143  c74a 48                     pha
  1144  c74b a5fb                   lda ptr1
  1145  c74d 48                     pha
  1146  c74e 60                     rts
  1147                          
  1148                          executedisassemble:
  1149  c74f 68                     pla ; remove low byte return address
  1150  c750 68                     pla ; return high byte return address
  1151  c751 2032c8                 jsr newline
  1152  c754 4c2dc0                 jmp disassemble
  1153                          
  1154                          reportnotimplemented:
  1155  c757 a95b                   lda #<notimplemented
  1156  c759 a2cb                   ldx #>notimplemented
  1157  c75b 4c72c2                 jmp strout
  1158                          
  1159                          reporterr:
  1160  c75e c000                   cpy #0
  1161  c760 f008                   beq +
  1162  c762 a920                   lda #' '
  1163  c764 20d2ff             -   jsr charout
  1164  c767 88                     dey
  1165  c768 d0fa                   bne -
  1166  c76a a93f               +   lda #'?'
  1167  c76c 20d2ff                 jsr charout
  1168  c76f a90d                   lda #13
  1169  c771 20d2ff                 jsr charout
  1170  c774 60                     rts
  1171                          
  1172                          skipspaces:
  1173  c775 b90002             -   lda inputbuf, y
  1174  c778 c920                   cmp #$20
  1175  c77a d003                   bne +
  1176  c77c c8                     iny
  1177  c77d d0f6                   bne -
  1178  c77f 60                 +   rts
  1179                          
  1180                          chkdot:
  1181  c780 b90002                 lda inputbuf, y
  1182  c783 c92e                   cmp #'.'
  1183  c785 d003                   bne +
  1184  c787 c8                     iny
  1185  c788 a900                   lda #0 ; Z true (EQ)
  1186  c78a 60                 +   rts
  1187                          
  1188                          chkhelp:
  1189  c78b b90002                 lda inputbuf, y
  1190  c78e c93f                   cmp #'?'
  1191  c790 d003                   bne +
  1192  c792 c8                     iny
  1193  c793 a900                   lda #0 ; Z true (EQ)
  1194  c795 60                 +   rts
  1195                          
  1196                          chkcolon:
  1197  c796 b90002                 lda inputbuf, y
  1198  c799 c93a                   cmp #':'
  1199  c79b d003                   bne +
  1200  c79d c8                     iny
  1201  c79e a900                   lda #0 ; Z true (EQ)
  1202  c7a0 60                 +   rts
  1203                          
  1204                          chkfilename:
  1205  c7a1 84ff                   sty tmp
  1206  c7a3 b90002                 lda inputbuf, y
  1207  c7a6 c922                   cmp #34
  1208  c7a8 d010                   bne ++
  1209  c7aa c8                 -   iny
  1210  c7ab b90002                 lda inputbuf, y
  1211  c7ae c90d                   cmp #13
  1212  c7b0 d004                   bne +
  1213  c7b2 a4ff                   ldy tmp
  1214  c7b4 d004                   bne ++
  1215  c7b6 c922               +   cmp #34
  1216  c7b8 d0f0                   bne -
  1217  c7ba 60                 ++  rts
  1218                          
  1219                          chkhexbyteofsequence:
  1220  c7bb 2038c2                 jsr inputhexbyte
  1221  c7be 20d8c7                 jsr +
  1222  c7c1 d011                   bne ++ ; Z false (NE) if failed checks
  1223  c7c3 c4a4                   cpy len
  1224  c7c5 f00d                   beq ++ ; Z true (EQ) if end of input
  1225  c7c7 85ff                   sta tmp
  1226  c7c9 b90002                 lda inputbuf,y
  1227  c7cc c920                   cmp #$20
  1228  c7ce d004                   bne ++ ; Z false (NE) if not space
  1229  c7d0 a5ff                   lda tmp
  1230  c7d2 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1231  c7d4 60                 ++  rts
  1232                          
  1233                          chkhexword:
  1234                          chkhexaddr1:
  1235  c7d5 201bc2                 jsr inputhexword
  1236  c7d8 a200               +   ldx #0 ; Z true (EQ)
  1237  c7da 9001                   bcc +
  1238  c7dc e8                     inx ; Z false (NE)
  1239  c7dd 60                 +   rts
  1240                          
  1241                          chkhexbyte
  1242  c7de 98                     tya
  1243  c7df 48                     pha ; save y
  1244  c7e0 2038c2                 jsr inputhexbyte
  1245  c7e3 b00d                   bcs +
  1246  c7e5 85a6                   sta tmp2
  1247  c7e7 2054c2                 jsr inputhexnybble
  1248  c7ea 9006                   bcc +
  1249  c7ec 68                     pla ; throw away saved y
  1250  c7ed a5a6                   lda tmp2
  1251  c7ef a200                   ldx #0 ; Z true (EQ)
  1252  c7f1 60                     rts
  1253  c7f2 68                 +   pla
  1254  c7f3 a8                     tay ; won't be zero, so Z false (NE)
  1255  c7f4 60                     rts    
  1256                          
  1257                          chkhexaddr2:
  1258  c7f5 a5fb                   lda ptr1
  1259  c7f7 48                     pha
  1260  c7f8 a5fc                   lda ptr1+1
  1261  c7fa 48                     pha
  1262  c7fb 20d5c7                 jsr chkhexaddr1
  1263  c7fe f005                   beq +
  1264  c800 68                     pla
  1265  c801 68                     pla
  1266  c802 a901                   lda #1 ; Z false (NE)
  1267  c804 60                     rts
  1268  c805 a5fb               +   lda ptr1
  1269  c807 85fd                   sta ptr2
  1270  c809 a5fc                   lda ptr1+1
  1271  c80b 85fe                   sta ptr2+1
  1272  c80d 68                     pla
  1273  c80e 85fc                   sta ptr1+1
  1274  c810 68                     pla
  1275  c811 85fb                   sta ptr1
  1276  c813 a900                   lda #0 ; Z true (EQ)
  1277  c815 60                     rts    
  1278                          
  1279                          chkaddr1cmd:
  1280  c816 b90002                 lda inputbuf, y
  1281  c819 c941               +   cmp #'A'
  1282  c81b d004                   bne +
  1283  c81d c8                     iny
  1284  c81e 4c9dc3                 jmp executeassemble
  1285  c821 c944               +   cmp #'D'
  1286  c823 d004                   bne +
  1287  c825 c8                     iny
  1288  c826 4c4fc7                 jmp executedisassemble
  1289  c829 c952               +   cmp #'R'
  1290  c82b d004                   bne +
  1291  c82d c8                     iny
  1292  c82e 4c36c7                 jmp executerun
  1293  c831 60                 +   rts
  1294                          
  1295                          newline:
  1296  c832 a90d                   lda #13
  1297  c834 4cd2ff                 jmp charout
  1298                          
  1299                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1300                          ;     jsr $ffd2
  1301                          ;     pha
  1302                          ; -   lda $d011
  1303                          ;     bpl -
  1304                          ; -   lda $d011
  1305                          ;     bmi -
  1306                          ; -   lda $d011
  1307                          ;     bpl -
  1308                          ; -   lda $d011
  1309                          ;     bmi -
  1310                          ;     pla
  1311                          ;     rts
  1312                          
  1313  c837 00                 end: brk
  1314                          
  1315                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  1316                          ninst = 56
  1317  c838 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  1318  c870 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  1319  c8a8 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  1320                          
  1321                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  1322                          mode_jmptable:
  1323  c8e0 18c1               !word dispModeAcc-1; 0 Accumulator 1
  1324  c8e2 1dc1               !word dispModeNone-1 ; 1 None 1
  1325  c8e4 1ec1               !word dispModeImm-1 ; 2 Immediate 2
  1326  c8e6 2fc1               !word dispModeIndX-1 ; 3 IndirectX 2
  1327  c8e8 4fc1               !word dispModeIndY-1 ; 4 IndirectY 2
  1328  c8ea 6fc1               !word dispModeRel-1 ; 5 Relative 2
  1329  c8ec 23c1               !word dispModeZP-1 ; 6 ZeroPage 2
  1330  c8ee abc1               !word dispModeZPX-1 ; 7 ZeroPageX 2
  1331  c8f0 b8c1               !word dispModeZPY-1 ; 8 ZeroPageY 2
  1332  c8f2 c5c1               !word dispModeAbs-1 ; 9 Absolute 3
  1333  c8f4 d7c1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  1334  c8f6 e4c1               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  1335  c8f8 f1c1               !word dispModeInd-1 ; 12 Indirect 3
  1336                          
  1337                          mode_examples:
  1338  c8fa 4100               !text "A", 0 ; 0 Accumulator
  1339  c8fc 00                 !text "", 0 ; 1 None
  1340  c8fd 2324313200         !text "#$12", 0 ; 2 Immediate
  1341  c902 282431322c582900   !text "($12,X)", 0 ; 3 IndirectX
  1342  c90a 28243132292c5900   !text "($12),Y", 0 ; 4 IndirectY
  1343  c912 243132333420282d...!text "$1234 (-128 to +127)", 0 ; 5 Relative
  1344  c927 24313200           !text "$12", 0 ; 6 ZeroPage
  1345  c92b 2431322c5800       !text "$12,X", 0 ; 7 ZeroPageX
  1346  c931 2431322c5900       !text "$12,Y", 0 ; 8 ZeroPageY
  1347  c937 243132333400       !text "$1234", 0 ; 9 Absolute
  1348  c93d 24313233342c5800   !text "$1234,X", 0 ; 10 AbsoluteX
  1349  c945 24313233342c5900   !text "$1234,Y", 0 ; 11 AbsoluteY
  1350  c94d 2824313233342900   !text "($1234)", 0 ; 12 Indirect
  1351                          
  1352                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  1353                          nopcodes = 151
  1354  c955 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  1355  c9ec 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  1356  ca83 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  1357                          
  1358  cb1a 0d91565741533230...copyright !text 13,145,"VWAS2024 (C) 2024 DAVID R. VAN WAGNER", 13, "MIT LICENSE DAVEVW.COM", 157, 13, 0
  1359  cb5b 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  1360  cb6c 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  1361                          
  1362                          finish = *
