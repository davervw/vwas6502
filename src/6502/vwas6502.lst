
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGETS:                              *        <<<
     7                          ;; >>>       ** (1)  C64 8000-9FFF screen editor                *        <<<
     8                          ;; >>>       ** (2)  C64 8000-9FFF terminal edition             *        <<<
     9                          ;; >>>       ** (3)  6502+MC6850 minimum system                 *        <<<
    10                          ;; >>>       *   56K(RAM),8K(ROM), 2 bytes IO for MC6850 UART   *        <<<
    11                          ;; >>>       ****************************************************        <<<
    12                          ;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          ;; MIT License
    15                          ;;
    16                          ;; Copyright (c) 2024 David R. Van Wagner
    17                          ;; davevw.com
    18                          ;;
    19                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    20                          ;; of this software and associated documentation files (the "Software"), to deal
    21                          ;; in the Software without restriction, including without limitation the rights
    22                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    23                          ;; copies of the Software, and to permit persons to whom the Software is
    24                          ;; furnished to do so, subject to the following conditions:
    25                          ;;
    26                          ;; The above copyright notice and this permission notice shall be included in all
    27                          ;; copies or substantial portions of the Software.
    28                          ;;
    29                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    30                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    31                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    32                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    33                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    34                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    35                          ;; SOFTWARE.
    36                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                          
    40                          ; Important! define exactly ONE target (set in build.sh)
    41                          ;C64SCREEN = 1
    42                          ;C64TERMINAL = 1
    43                          ;MINIMUM = 1
    44                          
    45                          ; options (set in build.sh)
    46                          ;NEEDECHO = 0
    47                          
    48                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                          
    50                          ;; _
    51                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    52                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    53                          ;; 1000 (display memory at $1000)
    54                          ;; 1000.2000 (display memory range $1000 to $2000)
    55                          ;; 1000. (display next screenful of memory starting at $1000)
    56                          ;; . (display next screenful of memory)
    57                          ;; 1000 r (JMP $1000)
    58                          ;; 1000: 01 02 03 (modify memory)
    59                          ;; (NEW SYNTAX)
    60                          ;; 1000 d (disassemble starting at address, for screenful)
    61                          ;; d (continue disassembling from last address)
    62                          ;; 1000 a (assemble starting at, interactive until empty line) 
    63                          ;; x (exit monitor -- C64 only)
    64                          ;; ? (commands help)
    65                          ;; ? a (list instructions available)
    66                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    67                          ;; ? mode (show addressing modes example syntax for 6502)
    68                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    69                          ;; (FUTURE SYNTAX, not implemented)
    70                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    71                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    72                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    73                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    74                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    75                          ;; .A: 00 (change register, replace A with X, Y, SP, S, PC, SR, P, N, V, B, D, I, Z, C as appropriate, colon is optional)
    76                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    77                          ;;
    78                          ;; (INTERACTIVE ASSEMBLER)
    79                          ;; 1000 _
    80                          ;;      ADC #$12
    81                          ;; 1000 69 12    ADC #$12
    82                          ;; 1002 _
    83                          ;;      JSR $1234
    84                          ;; 1002 20 34 12 JSR $1234
    85                          ;; 1005 _
    86                          ;;      RTS
    87                          ;; 1005 60       RTS
    88                          ;; 1006 _
    89                          ;;      XYZ
    90                          ;;      XYZ ?
    91                          ;; 1006 _
    92                          ;; _
    93                          ;;
    94                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    95                          ;; and can cursor up to revise, 
    96                          ;;
    97                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    98                          ;;
    99                          
   100                          ; global
   101                          inputbuf=$0200
   102                          
   103                          
   104                          ; kernal/system calls
   105                          
   106                          !ifdef MINIMUM {
   107                          charout=JUART_OUT
   108                          getkey=JUART_IN
   109                          }
   110                          
   111                          !ifdef C64SCREEN {
   112                          setlfs=$ffba
   113                          setnam=$ffbd
   114                          charin=$ffcf ; screen editor
   115                          charout=$ffd2
   116                          fsave =$ffd8
   117                          getkey=$ffe4
   118                          }
   119                          
   120                          !ifdef C64TERMINAL {
   121                          setlfs=$ffba
   122                          setnam=$ffbd
   123                          charout=$ffd2
   124                          getkey=$ffe4
   125                          fsave =$ffd8
   126                          }
   127                          
   128                          ; zeropage
   129                          !ifdef MINIMUM {
   130                          opidx=$f0
   131                          inidx=$f1
   132                          mode=$f2
   133                          size=$f3
   134                          ptr3=$f4 ; and $f5
   135                          count=$f6
   136                          len=$f7
   137                          savepos=$f8
   138                          tmp2=$f9
   139                          flag=$fa
   140                          ptr1=$fb ; and $fc
   141                          ptr2=$fd ; and $fe
   142                          tmp=$ff
   143                          } else {
   144                          opidx=$22
   145                          inidx=$23
   146                          mode=$24
   147                          size=$25
   148                          ptr3=$26 ; and $27
   149                          count=$a3
   150                          len=$a4
   151                          savepos=$a5
   152                          tmp2=$a6
   153                          flag=$a7
   154                          ptr1=$fb ; and $fc
   155                          ptr2=$fd ; and $fe
   156                          tmp=$ff
   157                          }
   158                          
   159                          !ifdef MINIMUM {
   160                          * = $e000
   161                          } else { // any C64
   162                          * = $8000
   163                              ; check if irq/brk vector installed
   164  8000 ad1603                 lda $316
   165  8003 ae1703                 ldx $317
   166  8006 e08c                   cpx #>brk64
   167  8008 f010                   beq +
   168  800a 8d8f92                 sta savebrkvector
   169  800d 8e9092                 stx savebrkvector+1
   170  8010 a912                   lda #<brk64
   171  8012 a28c                   ldx #>brk64
   172  8014 8d1603                 sta $316
   173  8017 8e1703                 stx $317
   174  801a 203980             +   jsr install_nmi64   
   175                          }
   176                          
   177                          start:
   178  801d d8                     cld
   179  801e 58                     cli
   180  801f a9c0                   lda #<copyright
   181  8021 a28f                   ldx #>copyright
   182  8023 20c383                 jsr strout
   183  8026 a91e                   lda #<firsthelp
   184  8028 a290                   ldx #>firsthelp
   185  802a 20c383                 jsr strout
   186  802d 4c578b                 jmp save_regs_and_stack
   187                          
   188                          input_loop:
   189  8030 20de83                 jsr inputline
   190  8033 20e183                 jsr parseline
   191  8036 4c3080                 jmp input_loop
   192                          
   193                          !ifndef MINIMUM {
   194                          ; C64 only
   195                          
   196                          install_nmi64:
   197                              ; check if nmi vector installed
   198  8039 ad1803                 lda $318
   199  803c ae1903                 ldx $319
   200  803f e08b                   cpx #>nmi64
   201  8041 f010                   beq +
   202  8043 8d9192                 sta savenmivector
   203  8046 8e9292                 stx savenmivector+1
   204  8049 a9f3                   lda #<nmi64
   205  804b a28b                   ldx #>nmi64
   206  804d 8d1803                 sta $318
   207  8050 8e1903                 stx $319
   208  8053 60                 +   rts
   209                          
   210                          uninstall_nmi64:
   211  8054 ad9192                 lda savenmivector
   212  8057 ae9292                 ldx savenmivector+1
   213  805a 8d1803                 sta $318
   214  805d 8e1903                 stx $319
   215  8060 60                     rts
   216                          
   217                          chkextrac64:
   218  8061 206d80                 jsr chkexit
   219  8064 d003                   bne +
   220  8066 4c8180                 jmp execute_exit
   221  8069 18                 +   clc ; no error
   222  806a a201                   ldx #1 ; Z false - not consumed
   223  806c 60                     rts
   224                          
   225                          chkexit:
   226  806d b90002                 lda inputbuf, y
   227  8070 c958                   cmp #'X'
   228  8072 d008                   bne +
   229  8074 c8                     iny
   230  8075 c4a4                   cpy len ; validate no extra characters
   231  8077 f003                   beq +
   232  8079 4c7d80                 jmp extra_error
   233  807c 60                 +   rts
   234                          
   235                          extra_error:
   236                              ; pop local return address
   237  807d 68                     pla
   238  807e 68                     pla
   239  807f 38                     sec ; error
   240  8080 60                     rts
   241                          
   242                          execute_exit:
   243  8081 ad8f92                 lda savebrkvector
   244  8084 ae9092                 ldx savebrkvector+1
   245  8087 8d1603                 sta $316
   246  808a 8e1703                 stx $317
   247  808d 205480                 jsr uninstall_nmi64
   248                              ; pop monitor return addresses, so only original caller is left
   249  8090 68                     pla
   250  8091 68                     pla
   251  8092 68                     pla
   252  8093 68                     pla
   253  8094 68                     pla
   254  8095 68                     pla
   255  8096 60                     rts
   256                          
   257                          display_extra_help:
   258  8097 a931                   lda #<extra_help
   259  8099 a290                   ldx #>extra_help
   260  809b 4cc383                 jmp strout
   261                          
   262                          !ifdef C64SCREEN {
   263                          display_page_disassemble:
   264  809e a5fb                   lda ptr1
   265  80a0 a6fc                   ldx ptr1+1
   266  80a2 204783                 jsr disphexword
   267  80a5 a96f                   lda #<page_disassemble
   268  80a7 a290                   ldx #>page_disassemble
   269  80a9 4cc383                 jmp strout
   270                          
   271                          display_page_displaymemory:
   272  80ac 204d8b                 jsr newline
   273  80af a5fb                   lda ptr1
   274  80b1 a6fc                   ldx ptr1+1
   275  80b3 204783                 jsr disphexword
   276  80b6 a976                   lda #<page_displaymemory
   277  80b8 a290                   ldx #>page_displaymemory
   278  80ba 4cc383                 jmp strout
   279                          
   280                          inputlinec64:
   281  80bd a000                   ldy #0
   282  80bf 20cfff             -   jsr charin
   283  80c2 990002                 sta inputbuf,y
   284  80c5 c8                     iny
   285  80c6 c90d                   cmp #13
   286  80c8 d0f5                   bne -
   287  80ca 60                     rts
   288                          
   289                          continueassemblec64:
   290  80cb a914                   lda #20
   291  80cd 20d2ff                 jsr charout
   292  80d0 20d2ff                 jsr charout
   293  80d3 a5fb                   lda ptr1
   294  80d5 a6fc                   ldx ptr1+1
   295  80d7 204783                 jsr disphexword
   296  80da a920                   lda #' '
   297  80dc 20d2ff                 jsr charout
   298  80df 20d2ff                 jsr charout
   299  80e2 4cd2ff                 jmp charout
   300                          }
   301                          
   302                          chkfilename:
   303  80e5 20918a                 jsr skipspaces
   304  80e8 84ff                   sty tmp
   305  80ea b90002                 lda inputbuf, y
   306  80ed c922                   cmp #34 ; double quote
   307  80ef d022                   bne ++
   308  80f1 c8                 -   iny
   309  80f2 b90002                 lda inputbuf, y
   310  80f5 c90d                   cmp #13
   311  80f7 d004                   bne +
   312  80f9 a4ff                   ldy tmp
   313  80fb d016                   bne ++
   314  80fd c922               +   cmp #34 ; double quote
   315  80ff d0f0                   bne -
   316  8101 98                     tya ; index of ending double quotes
   317  8102 48                     pha ; save
   318  8103 18                     clc ; will subtract one more
   319  8104 e5ff                   sbc tmp ; subtract index of first quote, have filename length
   320  8106 a6ff                   ldx tmp
   321  8108 e8                     inx ; low address of filename
   322  8109 a002                   ldy #>inputbuf ; high address of filename
   323  810b 20bdff                 jsr setnam
   324  810e 68                     pla
   325  810f a8                     tay
   326  8110 c8                     iny ; advance past ending double quotes
   327  8111 a900                   lda #0 ; set Z true
   328  8113 60                 ++  rts
   329                          
   330                          check_execute_save:
   331  8114 20e580             +   jsr chkfilename
   332  8117 f006                   beq +
   333  8119 207a8a                 jsr reporterr
   334  811c a201                   ldx #1 ; set Z false
   335  811e 60                     rts
   336  811f 202d81             +   jsr chkoptionaldrive
   337  8122 204381                 jsr chksave
   338  8125 d005                   bne +
   339  8127 204c81                 jsr executesave
   340  812a a200                   ldx #0 ; set Z true
   341  812c 60                 +   rts
   342                          
   343                          chkoptionaldrive:
   344  812d a908                   lda #8
   345  812f 8d9392                 sta drive
   346  8132 20918a                 jsr skipspaces
   347  8135 20e48a                 jsr chkhexbyte
   348  8138 d008                   bne +
   349  813a 8d9392                 sta drive
   350  813d 20918a                 jsr skipspaces
   351  8140 a900                   lda #0 ; set Z true
   352  8142 60                 +   rts
   353                          
   354                          chksave:
   355  8143 20918a                 jsr skipspaces
   356  8146 b90002                 lda inputbuf, y
   357  8149 c953                   cmp #'S'
   358  814b 60                     rts
   359                          
   360                          executesave:
   361  814c 204d8b                 jsr newline
   362  814f a9c0                   lda #$c0 ; KERNAL control and error messages
   363  8151 859d                   sta $9d ; set messages to be displayed
   364  8153 a901                   lda #1
   365  8155 ae9392                 ldx drive
   366  8158 a00f                   ldy #15
   367  815a 20baff                 jsr setlfs
   368  815d a9fb                   lda #ptr1
   369  815f a6fd                   ldx ptr2
   370  8161 a4fe                   ldy ptr2+1
   371  8163 20d8ff                 jsr fsave
   372  8166 4c4d8b                 jmp newline
   373                          }
   374                          
   375                          ; test: ; all the addressing modes here for testing disassembly
   376                          ;     nop
   377                          ;     lda $1234
   378                          ;     lda $1234,x
   379                          ;     lda $1234,y
   380                          ;     asl
   381                          ;     lda #$12
   382                          ;     lda ($12,x)
   383                          ;     lda ($12),y
   384                          ;     jmp ($1234)
   385                          ; -   bne -
   386                          ;     lda $12
   387                          ;     lda $12,x
   388                          ;     ldx $12,y
   389                          ;     !byte $FF ; unknown
   390                          
   391                          disassemble:
   392  8169 a917                   lda #23
   393  816b 85a3                   sta count
   394  816d a000               -   ldy #0
   395  816f b1fb                   lda (ptr1),y
   396  8171 209881                 jsr find_opcode
   397  8174 20fb81                 jsr disp_current
   398  8177 a525                   lda size
   399  8179 1002                   bpl +
   400  817b a901                   lda #1
   401  817d 18                 +   clc
   402  817e 65fb                   adc ptr1
   403  8180 85fb                   sta ptr1
   404  8182 9002                   bcc +
   405  8184 e6fc                   inc ptr1+1
   406  8186 c6a3               +   dec count
   407  8188 d0e3                   bne -
   408                          !ifdef C64SCREEN {
   409  818a 4c9e80                 jmp display_page_disassemble
   410                          } else {    
   411                              rts
   412                          }
   413                          
   414                          compareptrs:
   415  818d a5fc                   lda ptr1+1
   416  818f c5fe                   cmp ptr2+1
   417  8191 d004                   bne +
   418  8193 a5fb                   lda ptr1
   419  8195 c5fd                   cmp ptr2
   420  8197 60                 +   rts
   421                          
   422                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   423                          ; and properties updated in ZP globals size,inidx,opidx,mode
   424  8198 a097                   ldy #nopcodes
   425  819a a296                   ldx #nopcodes-1
   426  819c ddfb8d             -   cmp opcodes,x
   427  819f f00f                   beq +
   428  81a1 ca                     dex
   429  81a2 88                     dey
   430  81a3 d0f7                   bne -
   431  81a5 18                     clc
   432  81a6 a901                   lda #1
   433  81a8 8525                   sta size
   434  81aa a9ff                   lda #$FF
   435  81ac aa                     tax
   436  81ad a8                     tay
   437  81ae 900a                   bcc ++
   438  81b0 bd928e             +   lda instidx, x
   439  81b3 bc298f                 ldy modeidx, x
   440  81b6 20c181                 jsr getsize
   441  81b9 38                     sec
   442  81ba 8523               ++  sta inidx
   443  81bc 8622                   stx opidx
   444  81be 8424                   sty mode
   445  81c0 60                     rts
   446                          
   447                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   448                              ; result returned in size
   449  81c1 48                     pha
   450  81c2 a901                   lda #1
   451  81c4 8525                   sta size
   452  81c6 68                     pla
   453  81c7 c002                   cpy #2 // Immediate
   454  81c9 9008                   bcc +
   455  81cb e625                   inc size
   456  81cd c009                   cpy #9 // Absolute
   457  81cf 9002                   bcc +
   458  81d1 e625                   inc size
   459  81d3 60                 +   rts
   460                          
   461                          disp_opcode: ; .A opcode byte
   462  81d4 209881                 jsr find_opcode
   463  81d7 8a                     txa
   464                              ; fall through to display instruction
   465                          
   466                          dispinst: ; .A instruction index 0..55, note modifies A and X
   467  81d8 aa                     tax
   468  81d9 e038                   cpx #ninst
   469  81db b012                   bcs +
   470  81dd bd3a8c                 lda inst0, x
   471  81e0 20d2ff                 jsr charout
   472  81e3 bd728c                 lda inst1, x
   473  81e6 20d2ff                 jsr charout
   474  81e9 bdaa8c                 lda inst2, x
   475  81ec 4cd2ff                 jmp charout
   476  81ef a93f               +   lda #'?'
   477  81f1 20d2ff                 jsr charout
   478  81f4 20d2ff                 jsr charout
   479  81f7 20d2ff                 jsr charout
   480  81fa 60                     rts
   481                          
   482                          disp_current:
   483  81fb a5fb                   lda ptr1
   484  81fd a6fc                   ldx ptr1+1
   485  81ff 204783                 jsr disphexword
   486  8202 a920                   lda #$20
   487  8204 20d2ff                 jsr charout
   488  8207 a000                   ldy #0
   489  8209 a625                   ldx size
   490  820b b1fb               -   lda (ptr1),y
   491  820d 204d83                 jsr disphexbyte
   492  8210 a920                   lda #$20
   493  8212 20d2ff                 jsr charout
   494  8215 c8                     iny
   495  8216 ca                     dex
   496  8217 d0f2                   bne -
   497  8219 c003               -   cpy #3
   498  821b f00e                   beq +
   499  821d a920                   lda #$20
   500  821f 20d2ff                 jsr charout
   501  8222 20d2ff                 jsr charout
   502  8225 20d2ff                 jsr charout
   503  8228 c8                     iny
   504  8229 d0ee                   bne -
   505  822b a523               +   lda inidx
   506  822d 20d881                 jsr dispinst
   507  8230 a920                   lda #$20
   508  8232 20d2ff                 jsr charout
   509  8235 203d82                 jsr disp_mode
   510  8238 a90d                   lda #13
   511  823a 4cd2ff                 jmp charout
   512                          
   513                          disp_mode
   514  823d a524                   lda mode
   515  823f c90d                   cmp #13
   516  8241 b00a                   bcs +
   517  8243 0a                     asl
   518  8244 aa                     tax
   519  8245 bde38c                 lda mode_jmptable+1,x
   520  8248 48                     pha
   521  8249 bde28c                 lda mode_jmptable,x
   522  824c 48                     pha
   523  824d 60                 +   rts
   524                          
   525                          dispModeAcc:
   526  824e a941                   lda #'A'
   527  8250 4cd2ff                 jmp charout
   528                          
   529                          dispModeNone:
   530  8253 60                     rts
   531                          
   532                          dispModeImm:
   533  8254 a923                   lda #'#'
   534  8256 20d2ff                 jsr charout
   535                          dispModeZP:
   536  8259 a924                   lda #'$'
   537  825b 20d2ff                 jsr charout
   538  825e a001                   ldy #1
   539  8260 b1fb                   lda (ptr1),y
   540  8262 4c4d83                 jmp disphexbyte
   541                          
   542                          dispModeIndX:
   543  8265 a928                   lda #'('
   544  8267 20d2ff                 jsr charout
   545  826a a924                   lda #'$'
   546  826c 20d2ff                 jsr charout
   547  826f a001                   ldy #1
   548  8271 b1fb                   lda (ptr1),y
   549  8273 204d83                 jsr disphexbyte
   550  8276 a92c                   lda #','
   551  8278 20d2ff                 jsr charout
   552  827b a958                   lda #'X'
   553  827d 20d2ff                 jsr charout
   554  8280 a929                   lda #')'
   555  8282 4cd2ff                 jmp charout
   556                          
   557                          dispModeIndY:
   558  8285 a928                   lda #'('
   559  8287 20d2ff                 jsr charout
   560  828a a924                   lda #'$'
   561  828c 20d2ff                 jsr charout
   562  828f a001                   ldy #1
   563  8291 b1fb                   lda (ptr1),y
   564  8293 204d83                 jsr disphexbyte
   565  8296 a929                   lda #')'
   566  8298 20d2ff                 jsr charout
   567  829b a92c                   lda #','
   568  829d 20d2ff                 jsr charout
   569  82a0 a959                   lda #'Y'
   570  82a2 4cd2ff                 jmp charout
   571                          
   572                          dispModeRel:
   573  82a5 a924                   lda #'$'
   574  82a7 20d2ff                 jsr charout
   575  82aa 18                     clc
   576  82ab a5fb                   lda ptr1
   577  82ad 6902                   adc #2
   578  82af 8526                   sta ptr3
   579  82b1 a5fc                   lda ptr1+1
   580  82b3 6900                   adc #0
   581  82b5 8527                   sta ptr3+1
   582  82b7 a001                   ldy #1
   583  82b9 b1fb                   lda (ptr1),y
   584  82bb 1014                   bpl +
   585                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   586  82bd 49ff                   eor #$FF ; inverse
   587  82bf 18                     clc
   588  82c0 6901                   adc #1 ; complete getting absolute value from two's complement
   589  82c2 85ff                   sta tmp
   590  82c4 38                     sec
   591  82c5 a526                   lda ptr3
   592  82c7 e5ff                   sbc tmp
   593  82c9 8526                   sta ptr3
   594  82cb b00d                   bcs ++
   595  82cd c627                   dec ptr3+1
   596  82cf 9009                   bcc ++
   597  82d1 18                 +   clc ; simple case of adding
   598  82d2 6526                   adc ptr3
   599  82d4 8526                   sta ptr3
   600  82d6 9002                   bcc ++
   601  82d8 e627                   inc ptr3+1
   602  82da a526               ++  lda ptr3
   603  82dc a627                   ldx ptr3+1
   604  82de 4c4783                 jmp disphexword
   605                          
   606                          dispModeZPX:
   607  82e1 205982                 jsr dispModeZP
   608  82e4 a92c                   lda #','
   609  82e6 20d2ff                 jsr charout
   610  82e9 a958                   lda #'X'
   611  82eb 4cd2ff                 jmp charout
   612                          
   613                          dispModeZPY:
   614  82ee 205982                 jsr dispModeZP
   615  82f1 a92c                   lda #','
   616  82f3 20d2ff                 jsr charout
   617  82f6 a959                   lda #'Y'
   618  82f8 4cd2ff                 jmp charout
   619                          
   620                          dispModeAbs:
   621  82fb a924                   lda #'$'
   622  82fd 20d2ff                 jsr charout
   623  8300 a001                   ldy #1
   624  8302 b1fb                   lda (ptr1),y
   625  8304 48                     pha
   626  8305 c8                     iny
   627  8306 b1fb                   lda (ptr1),y
   628  8308 aa                     tax
   629  8309 68                     pla
   630  830a 4c4783                 jmp disphexword
   631                          
   632                          dispModeAbsX:
   633  830d 20fb82                 jsr dispModeAbs
   634  8310 a92c                   lda #','
   635  8312 20d2ff                 jsr charout
   636  8315 a958                   lda #'X'
   637  8317 4cd2ff                 jmp charout
   638                          
   639                          dispModeAbsY:
   640  831a 20fb82                 jsr dispModeAbs
   641  831d a92c                   lda #','
   642  831f 20d2ff                 jsr charout
   643  8322 a959                   lda #'Y'
   644  8324 4cd2ff                 jmp charout
   645                          
   646                          dispModeInd:
   647  8327 a928                   lda #'('
   648  8329 20d2ff                 jsr charout
   649  832c 20fb82                 jsr dispModeAbs
   650  832f a929                   lda #')'
   651  8331 4cd2ff                 jmp charout
   652                          
   653                          dispbinbyte: ; .A 00..FF
   654  8334 a208                   ldx #8
   655  8336 85ff                   sta tmp
   656  8338 a930               -   lda #'0'
   657  833a 26ff                   rol tmp
   658  833c 9002                   bcc +
   659  833e a931                   lda #'1'
   660  8340 20d2ff             +   jsr charout
   661  8343 ca                     dex
   662  8344 d0f2                   bne -
   663  8346 60                     rts
   664                          
   665                          disphexword: ; .A low, .X high, 0000..FFFF
   666  8347 48                     pha
   667  8348 8a                     txa
   668  8349 204d83                 jsr disphexbyte
   669  834c 68                     pla
   670                              ;fall through to call again
   671                          
   672                          disphexbyte: ; .A 00..FF
   673  834d 48                     pha
   674  834e 4a                     lsr
   675  834f 4a                     lsr
   676  8350 4a                     lsr
   677  8351 4a                     lsr
   678  8352 205683                 jsr disphexnybble
   679  8355 68                     pla
   680                              ;fall through to call again
   681                          
   682                          disphexnybble: ; .A 0..F
   683  8356 290f                   and #$0F
   684  8358 0930                   ora #$30
   685  835a c93a                   cmp #$3A
   686  835c 9002                   bcc +
   687  835e 6906                   adc #$06
   688  8360 4cd2ff             +   jmp charout
   689                          
   690                          inputhexword: ; C set if fails
   691  8363 a900                   lda #0
   692  8365 85fb                   sta ptr1
   693  8367 85fc                   sta ptr1+1
   694                          
   695  8369 a904                   lda #4 ; word is at most 4 nybbles
   696  836b 85a3                   sta count
   697  836d 20a583             --  jsr inputhexnybble
   698  8370 b012                   bcs +
   699                          
   700                              ; shift nibble up
   701  8372 0a                     asl
   702  8373 0a                     asl
   703  8374 0a                     asl
   704  8375 0a                     asl
   705                          
   706  8376 a204                   ldx #4 ; 4 bits rotated into word
   707  8378 2a                 -   rol
   708  8379 26fb                   rol ptr1
   709  837b 26fc                   rol ptr1+1
   710  837d ca                     dex
   711  837e d0f8                   bne - ; repeat bits
   712                          
   713  8380 c6a3                   dec count
   714  8382 d0e9                   bne -- ; repeat nybbles
   715                          
   716  8384 a5a3               +   lda count
   717  8386 c904                   cmp #4 ; set C if 4, otherwise clear
   718  8388 60                     rts
   719                          
   720                          inputhexbyte:
   721  8389 20a583                 jsr inputhexnybble
   722  838c b016                   bcs ++
   723  838e 85ff                   sta tmp
   724  8390 20a583                 jsr inputhexnybble
   725  8393 9005                   bcc +
   726  8395 18                     clc ; allow single digit as byte
   727  8396 a5ff                   lda tmp
   728  8398 900a                   bcc ++
   729  839a 06ff               +   asl tmp
   730  839c 06ff                   asl tmp
   731  839e 06ff                   asl tmp
   732  83a0 06ff                   asl tmp
   733  83a2 05ff                   ora tmp ; necessary to assemble the two nybbles
   734  83a4 60                 ++  rts
   735                          
   736                          inputhexnybble:
   737  83a5 b90002                 lda $0200,y
   738  83a8 297f                   and #$7F
   739  83aa 38                     sec
   740  83ab e930                   sbc #$30
   741  83ad 9012                   bcc ++
   742  83af c90a                   cmp #10
   743  83b1 900c                   bcc +
   744  83b3 e907                   sbc #7
   745  83b5 900a                   bcc ++
   746  83b7 c90a                   cmp #10
   747  83b9 9006                   bcc ++
   748  83bb c910                   cmp #16
   749  83bd b002                   bcs ++
   750  83bf c8                 +   iny
   751  83c0 60                     rts
   752  83c1 38                 ++  sec
   753  83c2 60                     rts
   754                          
   755                          strout:
   756  83c3 8526                   sta ptr3
   757  83c5 8627                   stx ptr3+1
   758                          strout2:    
   759  83c7 a000                   ldy #0
   760  83c9 b126               -   lda (ptr3),y
   761  83cb f006                   beq +
   762  83cd 20d2ff                 jsr charout
   763  83d0 c8                     iny
   764  83d1 d0f6                   bne -
   765  83d3 98                 +   tya
   766  83d4 38                     sec
   767  83d5 6526                   adc ptr3
   768  83d7 8526                   sta ptr3
   769  83d9 9002                   bcc +
   770  83db e627                   inc ptr3+1
   771  83dd 60                 +   rts
   772                          
   773                          inputline:
   774                          !ifdef C64SCREEN {
   775  83de 4cbd80                 jmp inputlinec64
   776                          } else {
   777                              ldy #0
   778                          --  sty count
   779                          -   jsr getkey
   780                              beq -
   781                              ldy count
   782                          !ifdef MINIMUM {
   783                              cmp #8 ; backspace
   784                          } else {
   785                              cmp #20
   786                          }
   787                              bne +
   788                              cpy #0
   789                              beq -
   790                              dey
   791                          !if NEEDECHO = 1 {    
   792                              jsr charout
   793                          }
   794                              jmp --
   795                          +   cmp #13
   796                              beq +
   797                              cmp #' '
   798                              bcc -
   799                              cmp #128
   800                              bcs -
   801                          +
   802                          !if NEEDECHO = 1 {    
   803                              jsr charout
   804                          }
   805                              sta inputbuf,y
   806                              iny
   807                              cmp #13
   808                              bne --
   809                              rts
   810                          }
   811                          
   812                          parseline:
   813  83e1 c001                   cpy #1
   814  83e3 d003                   bne +
   815                          -
   816                          !ifdef C64SCREEN {   
   817  83e5 4c4d8b                 jmp newline
   818                          } else {
   819                              rts
   820                          }
   821  83e8 88                 +   dey
   822  83e9 84a4                   sty len
   823                              ; skip whitespace
   824                              ; check for address, put in ptr1
   825                              ; or check for dot, then require address put in ptr2
   826                              ; or check for ?, and optional parameter, execute help
   827                              ; check for whitespace
   828                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   829                              ; check for string, store at start of inputbuf
   830                              ; check for drive number
   831                              ; check for whitespace
   832                              ; check command ":rda?mls", execute command
   833  83eb a000                   ldy #0
   834  83ed 20918a                 jsr skipspaces
   835  83f0 c4a4                   cpy len
   836  83f2 f0f1                   beq -
   837  83f4 20478a                 jsr chkcontinuedis
   838  83f7 d003                   bne +
   839  83f9 206b8a                 jsr executedisassemble ; note won't return
   840  83fc 20598a             +   jsr chkcontinueasm
   841  83ff d003                   bne +
   842  8401 206e86                 jsr continueassemble ; note won't return
   843  8404 20a08a             +   jsr chkdot
   844  8407 d003                   bne +
   845  8409 4cf084                 jmp executedot
   846  840c 20ab8a             +   jsr chkhelp
   847  840f d003                   bne +
   848  8411 4cfa84                 jmp executehelp
   849                          +
   850                          !ifndef MINIMUM {
   851  8414 206180                 jsr chkextrac64 ; check syntax only available on C64
   852  8417 b014                   bcs + ; error if C set
   853  8419 f005                   beq ++ ; consumed if Z set, skip next test(s)
   854                          }    
   855  841b 20db8a                 jsr chkhexaddr1
   856  841e d003                   bne error
   857  8420 4c2684             ++  jmp executeaddr1
   858                          error:
   859  8423 4c7a8a                 jmp reporterr
   860                          
   861                          executeaddr1:
   862  8426 c4a4                   cpy len
   863  8428 d003                   bne +
   864  842a 4c7f84                 jmp executedisplay1
   865  842d 20a08a             +   jsr chkdot
   866  8430 d00f                   bne +
   867  8432 c4a4                   cpy len
   868  8434 f021                   beq executepagedisplay
   869  8436 20fb8a                 jsr chkhexaddr2
   870  8439 d0e8                   bne error
   871  843b 18                     clc
   872  843c 66a7                   ror flag
   873  843e 4c6f84                 jmp executeaddr12
   874  8441 20918a             +   jsr skipspaces
   875  8444 20b68a                 jsr chkcolon
   876  8447 d003                   bne +
   877  8449 4cce84                 jmp executemodify
   878  844c 201c8b             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   879                          !ifdef MINIMUM {
   880                              jmp reportnotimplemented
   881                          } else {
   882  844f 20e580                 jsr chkfilename
   883  8452 d0cf                   bne error
   884  8454 4cf784                 jmp executeloadfilename
   885                          }
   886                          
   887                          executepagedisplay:
   888  8457 a5fb                   lda ptr1
   889  8459 18                     clc
   890                          !ifdef MINIMUM {
   891                              adc #$5f
   892                          } else {
   893  845a 69b7                   adc #$b7
   894                          }
   895  845c 85fd                   sta ptr2
   896  845e a5fc                   lda ptr1+1
   897                          !ifdef MINIMUM {
   898                              adc #$01
   899                          } else {
   900  8460 6900                   adc #$00
   901                          }
   902  8462 85fe                   sta ptr2+1
   903  8464 9006                   bcc +
   904  8466 a9ff                   lda #$ff
   905  8468 85fd                   sta ptr2
   906  846a 85fe                   sta ptr2+1
   907  846c 38                 +   sec
   908  846d 66a7                   ror flag
   909                              ; fall through to executeaddr12
   910                          
   911                          executeaddr12:
   912  846f c4a4                   cpy len
   913  8471 d003                   bne +
   914  8473 4c8784                 jmp executedisplay12
   915                          !ifndef MINIMUM { // any C64
   916  8476 201481             +   jsr check_execute_save
   917  8479 f003                   beq ++
   918                          }
   919  847b 4c738a             +   jmp reportnotimplemented
   920  847e 60                 ++  rts
   921                          
   922                          executedisplay1:
   923  847f a5fb                   lda ptr1
   924  8481 85fd                   sta ptr2
   925  8483 a5fc                   lda ptr1+1
   926  8485 85fe                   sta ptr2+1
   927                              ; fall through executedisplay12
   928                          
   929                          executedisplay12:
   930  8487 a9ff                   lda #$ff
   931  8489 85a3                   sta count
   932  848b e6a3               -   inc count
   933  848d a5a3                   lda count
   934                          !ifdef MINIMUM {    
   935                              and #$0f
   936                          } else {
   937  848f 2907                   and #$07
   938                          }
   939  8491 d016                   bne +
   940  8493 a90d                   lda #13
   941  8495 20d2ff                 jsr charout
   942  8498 a5fb                   lda ptr1
   943  849a a6fc                   ldx ptr1+1
   944  849c 204783                 jsr disphexword
   945  849f a93a                   lda #':'
   946  84a1 20d2ff                 jsr charout
   947  84a4 a920                   lda #' '
   948  84a6 20d2ff                 jsr charout
   949  84a9 a000               +   ldy #0
   950  84ab b1fb                   lda (ptr1),y
   951  84ad 204d83                 jsr disphexbyte
   952  84b0 a920                   lda #' '
   953  84b2 20d2ff                 jsr charout
   954  84b5 e6fb                   inc ptr1
   955  84b7 d004                   bne +
   956  84b9 e6fc                   inc ptr1+1
   957  84bb f00e                   beq ++
   958  84bd 208d81             +   jsr compareptrs
   959  84c0 90c9                   bcc -
   960  84c2 f0c7                   beq -
   961  84c4 24a7                   bit flag
   962  84c6 1003                   bpl ++
   963                          !ifdef C64SCREEN {
   964  84c8 4cac80                 jmp display_page_displaymemory
   965                          }
   966  84cb 4c4d8b             ++  jmp newline
   967                          
   968                          executemodify:
   969  84ce 20918a                 jsr skipspaces
   970  84d1 c4a4                   cpy len
   971  84d3 f018                   beq ++
   972  84d5 20c18a                 jsr chkhexbyteofsequence
   973  84d8 f003                   beq +
   974  84da 4c2384                 jmp error
   975  84dd 84ff               +   sty tmp
   976  84df a000                   ldy #0
   977  84e1 91fb                   sta (ptr1),y
   978  84e3 e6fb                   inc ptr1
   979  84e5 d002                   bne +
   980  84e7 e6fc                   inc ptr1+1
   981  84e9 a4ff               +   ldy tmp
   982  84eb d0e1                   bne executemodify
   983  84ed 4c4d8b             ++  jmp newline
   984                          
   985                          executedot:
   986  84f0 c4a4                   cpy len
   987  84f2 d003                   bne +
   988  84f4 4c5784                 jmp executepagedisplay
   989                          
   990                          executeloadfilename:
   991                          executeaddr1cmd:
   992  84f7 4c738a             +   jmp reportnotimplemented
   993                          
   994                          executehelp:
   995                          !ifdef C64SCREEN {
   996  84fa 204d8b                 jsr newline
   997                          }
   998  84fd c4a4                   cpy len
   999  84ff d003                   bne +
  1000  8501 4c2a85                 jmp displayhelp
  1001  8504 20918a             +   jsr skipspaces
  1002  8507 203e85                 jsr chkhelpinstructions
  1003  850a d003                   bne +
  1004  850c 4c7a85                 jmp displayinstructions
  1005  850f 205885             +   jsr chkhelpmodes
  1006  8512 d003                   bne +
  1007  8514 4c9185                 jmp displaymodes
  1008  8517 20a889             +   jsr chkinstruction
  1009  851a d003                   bne +
  1010  851c 4c4186                 jmp executehelpinstruction
  1011  851f 204b85             +   jsr chkhelpregisters
  1012  8522 d003                   bne +
  1013  8524 4ca38b                 jmp execute_display_registers
  1014  8527 4c738a             +   jmp reportnotimplemented
  1015                          
  1016                          displayhelp:
  1017  852a a98e                   lda #<generalhelp
  1018  852c a290                   ldx #>generalhelp
  1019  852e 20c383                 jsr strout
  1020  8531 a983                   lda #<generalhelp2
  1021  8533 a291                   ldx #>generalhelp2
  1022  8535 20c383                 jsr strout
  1023                          !ifndef MINIMUM { // any C64
  1024  8538 209780                 jsr display_extra_help
  1025                          }
  1026  853b 4c4d8b                 jmp newline
  1027                          
  1028                          chkhelpinstructions:
  1029  853e b90002                 lda inputbuf, y
  1030  8541 c941                   cmp #'A'
  1031  8543 d005                   bne +
  1032  8545 b90102                 lda inputbuf+1, y
  1033  8548 c90d                   cmp #13
  1034                              ; no need to increment y if found, done parsing line
  1035  854a 60                 +   rts
  1036                          
  1037                          chkhelpregisters:
  1038  854b b90002                 lda inputbuf, y
  1039  854e c92e                   cmp #'.'
  1040  8550 d005                   bne +
  1041  8552 b90102                 lda inputbuf+1, y
  1042  8555 c90d                   cmp #13
  1043  8557 60                 +   rts
  1044                          
  1045                          chkhelpmodes:
  1046  8558 a96d                   lda #<modes_keyword
  1047  855a a292                   ldx #>modes_keyword
  1048                              ; fall through to chkkeyword
  1049                          
  1050                          chkkeyword:
  1051  855c 84a3                   sty count
  1052  855e 8526                   sta ptr3
  1053  8560 8627                   stx ptr3+1
  1054  8562 a6a3                   ldx count
  1055  8564 a000                   ldy #0
  1056  8566 bd0002             -   lda inputbuf, x
  1057  8569 d126                   cmp (ptr3),y
  1058  856b d008                   bne +
  1059  856d e8                     inx
  1060  856e c8                     iny
  1061  856f e4a4                   cpx len
  1062  8571 d0f3                   bne -
  1063  8573 b126                   lda (ptr3),y ; matched if end of string, will set Z
  1064  8575 08                 +   php ; save Z
  1065  8576 a4a3                   ldy count
  1066  8578 28                     plp ; restore Z
  1067  8579 60                     rts
  1068                          
  1069                          displayinstructions:
  1070  857a a038                   ldy #ninst
  1071  857c a200                   ldx #0
  1072  857e 8a                 -   txa
  1073  857f 48                     pha
  1074  8580 20d881                 jsr dispinst
  1075  8583 a920                   lda #' '
  1076  8585 20d2ff                 jsr charout
  1077  8588 68                     pla
  1078  8589 aa                     tax
  1079  858a e8                     inx
  1080  858b 88                     dey
  1081  858c d0f0                   bne -
  1082  858e 4c4d8b                 jmp newline
  1083                          
  1084                          displaymodes:
  1085  8591 38                     sec
  1086  8592 a900                   lda #0
  1087  8594 48                 -   pha
  1088  8595 aa                     tax
  1089  8596 bdfc8c                 lda mode_sorted, x
  1090  8599 20a685                 jsr dispmode
  1091  859c 68                     pla
  1092  859d 18                     clc
  1093  859e 6901                   adc #1
  1094  85a0 c90d                   cmp #nmodes
  1095  85a2 90f0                   bcc -
  1096  85a4 18                     clc
  1097  85a5 60                     rts
  1098                          
  1099                          dispmode:
  1100  85a6 c90d                   cmp #nmodes
  1101  85a8 b008                   bcs +
  1102  85aa 8524                   sta mode
  1103  85ac 20ee85                 jsr disp_modename_and_example
  1104  85af 4cb385                 jmp dispmodeinstructions
  1105  85b2 60                 +   rts
  1106                          
  1107                          dispmodeinstructions:
  1108                          !ifdef C64SCREEN {
  1109                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1110  85b3 a524                   lda mode
  1111  85b5 c903                   cmp #3
  1112  85b7 d005                   bne +
  1113  85b9 a920                   lda #' '
  1114  85bb 4cd2ff                 jmp charout
  1115                          }
  1116                              ; display instructions with this mode
  1117  85be a000               +   ldy #0
  1118  85c0 8423               --  sty inidx
  1119  85c2 a200                   ldx #0
  1120  85c4 86ff               -   stx tmp
  1121  85c6 a523                   lda inidx
  1122  85c8 dd928e                 cmp instidx, x
  1123  85cb d014                   bne ++
  1124  85cd bd298f                 lda modeidx, x
  1125  85d0 c524                   cmp mode
  1126  85d2 d00d                   bne ++
  1127  85d4 a920                   lda #' '
  1128  85d6 20d2ff                 jsr charout
  1129  85d9 bd928e                 lda instidx, x
  1130  85dc 20d881                 jsr dispinst
  1131  85df a6ff                   ldx tmp
  1132  85e1 e8                 ++  inx
  1133  85e2 e097                   cpx #nopcodes
  1134  85e4 90de                   bcc -
  1135  85e6 c8                     iny
  1136  85e7 c038                   cpy #ninst
  1137  85e9 d0d5                   bne --
  1138  85eb 4c4d8b                 jmp newline
  1139                          
  1140                          disp_modename_and_example:
  1141  85ee 0a                     asl
  1142  85ef aa                     tax
  1143  85f0 bde18d                 lda modes, x
  1144  85f3 48                     pha
  1145  85f4 bde28d                 lda modes+1, x
  1146  85f7 aa                     tax
  1147                          !ifdef C64SCREEN {
  1148  85f8 a912                   lda #18
  1149  85fa 20d2ff                 jsr charout
  1150                          }    
  1151  85fd 68                     pla
  1152  85fe 20c383                 jsr strout
  1153  8601 a920                   lda #' '
  1154  8603 20d2ff                 jsr charout
  1155  8606 20c783                 jsr strout2
  1156                          !ifdef C64SCREEN {    
  1157  8609 a992                   lda #146
  1158  860b 20d2ff                 jsr charout
  1159                          }   
  1160  860e 60                     rts
  1161                          
  1162                          disp_modename_instruction_example:
  1163  860f 0a                     asl
  1164  8610 aa                     tax
  1165  8611 bde18d                 lda modes, x
  1166  8614 48                     pha
  1167  8615 bde28d                 lda modes+1, x
  1168  8618 aa                     tax
  1169  8619 68                     pla
  1170  861a 20c383                 jsr strout ; mode name
  1171  861d a526                   lda ptr3
  1172  861f 48                     pha
  1173  8620 a527                   lda ptr3+1
  1174  8622 48                     pha
  1175  8623 a93a                   lda #':'
  1176  8625 20d2ff                 jsr charout
  1177  8628 a920                   lda #' '
  1178  862a 20d2ff                 jsr charout
  1179  862d a523                   lda inidx
  1180  862f 20d881                 jsr dispinst ; instruction
  1181  8632 a920                   lda #' '
  1182  8634 20d2ff                 jsr charout
  1183  8637 68                     pla
  1184  8638 8527                   sta ptr3+1
  1185  863a 68                     pla
  1186  863b 8526                   sta ptr3
  1187  863d 20c783                 jsr strout2 ; example
  1188  8640 60                     rts
  1189                          
  1190                          
  1191                          executehelpinstruction:
  1192  8641 a000                   ldy #0
  1193  8643 8422               -   sty opidx
  1194  8645 b9928e                 lda instidx, y
  1195  8648 c523                   cmp inidx
  1196  864a d01a                   bne +
  1197  864c b9298f                 lda modeidx, y
  1198  864f 8524                   sta mode
  1199  8651 a622                   ldx opidx
  1200  8653 bdfb8d                 lda opcodes, x
  1201  8656 204d83                 jsr disphexbyte
  1202  8659 a920                   lda #' '
  1203  865b 20d2ff                 jsr charout
  1204  865e a524                   lda mode
  1205  8660 200f86                 jsr disp_modename_instruction_example
  1206  8663 204d8b                 jsr newline
  1207  8666 a422               +   ldy opidx
  1208  8668 c8                     iny
  1209  8669 c097                   cpy #nopcodes
  1210  866b 90d6                   bcc -
  1211  866d 60                     rts
  1212                          
  1213                          continueassemble:
  1214                          !ifdef C64SCREEN {   
  1215  866e 20cb80                 jsr continueassemblec64
  1216                          }
  1217                              ; continue...
  1218                          
  1219                          executeassemble:
  1220  8671 68                     pla ; remove low byte return address
  1221  8672 68                     pla ; return high byte return address
  1222                          !ifdef C64SCREEN {    
  1223  8673 a914                   lda #20
  1224  8675 20d2ff                 jsr charout
  1225  8678 20d2ff                 jsr charout
  1226                          } else {
  1227                              lda ptr1
  1228                              ldx ptr1+1
  1229                              jsr disphexword
  1230                              lda #' '
  1231                              jsr charout
  1232                          }
  1233                              ; save current pointer
  1234  867b a5fb               --  lda ptr1
  1235  867d a6fc                   ldx ptr1+1
  1236  867f 8526                   sta ptr3
  1237  8681 8627                   stx ptr3+1
  1238  8683 20de83                 jsr inputline
  1239  8686 c001                   cpy #1
  1240  8688 f048                   beq ++
  1241  868a 88                     dey
  1242  868b 84a4                   sty len
  1243  868d a000                   ldy #0
  1244  868f 20918a                 jsr skipspaces
  1245  8692 c4a4                   cpy len
  1246  8694 f03c                   beq ++
  1247                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1248                              ;jsr skipspaces
  1249  8696 20a889                 jsr chkinstruction
  1250  8699 f00b                   beq +
  1251  869b a526               -   lda ptr3
  1252  869d 85fb                   sta ptr1
  1253  869f a527                   lda ptr3+1
  1254  86a1 85fc                   sta ptr1+1
  1255  86a3 4c2384                 jmp error
  1256  86a6 20fc86             +   jsr chkaddressing
  1257  86a9 d0f0                   bne -
  1258  86ab 20d989                 jsr find_inst_and_mode
  1259  86ae d0eb                   bne -
  1260  86b0 20d586                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1261  86b3 18                     clc
  1262  86b4 a525                   lda size
  1263  86b6 6526                   adc ptr3
  1264  86b8 85fb                   sta ptr1
  1265  86ba a527                   lda ptr3+1
  1266  86bc 6900                   adc #0
  1267  86be 85fc                   sta ptr1+1
  1268                          !ifdef C64SCREEN {    
  1269  86c0 204d8b                 jsr newline
  1270                          }
  1271  86c3 a5fb                   lda ptr1
  1272  86c5 a6fc                   ldx ptr1+1
  1273  86c7 204783                 jsr disphexword
  1274  86ca a920                   lda #' '
  1275  86cc 20d2ff                 jsr charout
  1276  86cf 4c7b86                 jmp --
  1277                          ++  
  1278                          !ifdef C64SCREEN {
  1279  86d2 4c4d8b                 jmp newline
  1280                          } else {
  1281                              rts
  1282                          }
  1283                          
  1284                          store_assembly:
  1285  86d5 a622                   ldx opidx
  1286  86d7 bdfb8d                 lda opcodes, x
  1287  86da a000                   ldy #0
  1288  86dc 9126                   sta (ptr3), y
  1289  86de c8                     iny
  1290  86df a625                   ldx size
  1291  86e1 e001                   cpx #1
  1292  86e3 f016                   beq ++
  1293  86e5 e002               +   cpx #2
  1294  86e7 d005                   bne +
  1295  86e9 a5a6                   lda tmp2
  1296  86eb 9126                   sta (ptr3), y
  1297  86ed 60                     rts
  1298  86ee e003               +   cpx #3
  1299  86f0 d009                   bne ++
  1300  86f2 a5fb                   lda ptr1
  1301  86f4 9126                   sta (ptr3), y
  1302  86f6 c8                     iny
  1303  86f7 a5fc                   lda ptr1+1
  1304  86f9 9126                   sta (ptr3), y
  1305  86fb 60                 ++  rts
  1306                          
  1307                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1308  86fc 20918a                 jsr skipspaces
  1309  86ff a200                   ldx #0
  1310  8701 8624                   stx mode
  1311  8703 205e87                 jsr chkaccumulator
  1312  8706 f051                   beq +
  1313  8708 e624                   inc mode
  1314  870a c4a4                   cpy len ; chknone
  1315  870c f04b                   beq +
  1316  870e e624                   inc mode
  1317  8710 208287                 jsr chkimmediate
  1318  8713 f044                   beq +
  1319  8715 e624                   inc mode
  1320  8717 20a687                 jsr chkindirectx
  1321  871a f03d                   beq +
  1322  871c e624                   inc mode
  1323  871e 20eb87                 jsr chkindirecty
  1324  8721 f036                   beq +
  1325  8723 e624                   inc mode
  1326  8725 203088                 jsr chkrelative
  1327  8728 f02f                   beq +
  1328  872a e624                   inc mode
  1329  872c 208b88                 jsr chkzeropage
  1330  872f f028                   beq +
  1331  8731 e624                   inc mode
  1332  8733 20a488                 jsr chkzeropagex
  1333  8736 f021                   beq +
  1334  8738 e624                   inc mode
  1335  873a 20d388                 jsr chkzeropagey
  1336  873d f01a                   beq +
  1337  873f e624                   inc mode
  1338  8741 200289                 jsr chkabsolute
  1339  8744 f013                   beq +
  1340  8746 e624                   inc mode
  1341  8748 201b89                 jsr chkabsolutex
  1342  874b f00c                   beq +
  1343  874d e624                   inc mode
  1344  874f 204a89                 jsr chkabsolutey
  1345  8752 f005                   beq +
  1346  8754 e624                   inc mode
  1347  8756 207989                 jsr chkindirect
  1348  8759 08                 +   php ; save Z
  1349  875a a524                   lda mode
  1350  875c 28                     plp ; restore Z 
  1351  875d 60                     rts
  1352                          
  1353                          chkaccumulator:
  1354  875e c4a4                   cpy len
  1355  8760 d013                   bne +
  1356  8762 a523                   lda inidx
  1357  8764 c902                   cmp #2 ; ASL
  1358  8766 f019                   beq ++
  1359  8768 c920                   cmp #32 ; LSR
  1360  876a f015                   beq ++
  1361  876c c927                   cmp #39 ; ROL
  1362  876e f011                   beq ++
  1363  8770 c928                   cmp #40 ; ROR
  1364  8772 4c8187                 jmp ++
  1365  8775 b90002             +   lda inputbuf, y
  1366  8778 c941                   cmp #'A'
  1367  877a d005                   bne ++
  1368  877c b90102                 lda inputbuf+1,y
  1369  877f c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1370  8781 60                 ++  rts
  1371                          
  1372                          chkimmediate:
  1373  8782 84a5                   sty savepos
  1374  8784 b90002                 lda inputbuf, y
  1375  8787 c923                   cmp #'#'
  1376  8789 d016                   bne ++
  1377  878b c8                     iny
  1378  878c 20918a                 jsr skipspaces
  1379  878f b90002                 lda inputbuf, y
  1380  8792 c924                   cmp #'$'
  1381  8794 d001                   bne +
  1382  8796 c8                     iny
  1383  8797 20e48a             +   jsr chkhexbyte
  1384  879a d005                   bne ++
  1385  879c c4a4               +   cpy len
  1386  879e d001                   bne ++
  1387  87a0 60                     rts
  1388  87a1 a4a5               ++  ldy savepos
  1389  87a3 a201                   ldx #1 ; Z false (NE)
  1390  87a5 60                     rts
  1391                          
  1392                          chkindirectx:
  1393  87a6 84a5                   sty savepos
  1394  87a8 b90002                 lda inputbuf, y
  1395  87ab c928                   cmp #'('
  1396  87ad d037                   bne ++
  1397  87af c8                     iny
  1398  87b0 20918a                 jsr skipspaces
  1399  87b3 b90002                 lda inputbuf, y
  1400  87b6 c924                   cmp #'$'
  1401  87b8 d001                   bne +
  1402  87ba c8                     iny
  1403  87bb 20e48a             +   jsr chkhexbyte
  1404  87be d026                   bne ++
  1405  87c0 20918a                 jsr skipspaces
  1406  87c3 b90002                 lda inputbuf, y
  1407  87c6 c92c                   cmp #','
  1408  87c8 d01c                   bne ++
  1409  87ca c8                     iny
  1410  87cb 20918a                 jsr skipspaces
  1411  87ce b90002                 lda inputbuf, y
  1412  87d1 c958                   cmp #'X'
  1413  87d3 d011                   bne ++
  1414  87d5 c8                     iny
  1415  87d6 20918a                 jsr skipspaces
  1416  87d9 b90002                 lda inputbuf, y
  1417  87dc c929                   cmp #')'
  1418  87de d006                   bne ++
  1419  87e0 c8                     iny
  1420  87e1 c4a4                   cpy len
  1421  87e3 d001                   bne ++
  1422  87e5 60                     rts
  1423  87e6 a4a5               ++  ldy savepos
  1424  87e8 a201                   ldx #1 ; Z false (NE)
  1425  87ea 60                     rts
  1426                          
  1427                          chkindirecty:
  1428  87eb 84a5                   sty savepos
  1429  87ed b90002                 lda inputbuf, y
  1430  87f0 c928                   cmp #'('
  1431  87f2 d037                   bne ++
  1432  87f4 c8                     iny
  1433  87f5 20918a                 jsr skipspaces
  1434  87f8 b90002                 lda inputbuf, y
  1435  87fb c924                   cmp #'$'
  1436  87fd d001                   bne +
  1437  87ff c8                     iny
  1438  8800 20e48a             +   jsr chkhexbyte
  1439  8803 d026                   bne ++
  1440  8805 20918a                 jsr skipspaces
  1441  8808 b90002                 lda inputbuf, y
  1442  880b c929                   cmp #')'
  1443  880d d01c                   bne ++
  1444  880f c8                     iny
  1445  8810 20918a                 jsr skipspaces
  1446  8813 b90002                 lda inputbuf, y
  1447  8816 c92c                   cmp #','
  1448  8818 d011                   bne ++
  1449  881a c8                     iny
  1450  881b 20918a                 jsr skipspaces
  1451  881e b90002                 lda inputbuf, y
  1452  8821 c959                   cmp #'Y'
  1453  8823 d006                   bne ++
  1454  8825 c8                     iny
  1455  8826 c4a4                   cpy len
  1456  8828 d001                   bne ++
  1457  882a 60                     rts
  1458  882b a4a5               ++  ldy savepos
  1459  882d a201                   ldx #1 ; Z false (NE)
  1460  882f 60                     rts
  1461                          
  1462                          chkrelative:
  1463  8830 84a5                   sty savepos
  1464  8832 a623                   ldx inidx
  1465  8834 e006                   cpx #6 ; BIT
  1466  8836 f01e                   beq ++
  1467  8838 bd3a8c                 lda inst0, x
  1468  883b c942                   cmp #'B'
  1469  883d d017                   bne ++
  1470  883f b90002                 lda inputbuf, y
  1471  8842 c924                   cmp #'$'
  1472  8844 d001                   bne +
  1473  8846 c8                     iny
  1474  8847 20db8a             +   jsr chkhexword
  1475  884a d00a                   bne ++
  1476  884c c4a4                   cpy len
  1477  884e d006                   bne ++
  1478  8850 205b88                 jsr computeoffset
  1479  8853 d001                   bne ++
  1480  8855 60                     rts ; Z true (EQ)
  1481  8856 a4a5               ++  ldy savepos
  1482  8858 a201                   ldx #1 ; Z false (NE)
  1483  885a 60                     rts
  1484                          
  1485                          computeoffset:
  1486                          ;   compute next address
  1487  885b a527                   lda ptr3+1
  1488  885d 85fe                   sta ptr2+1
  1489  885f a526                   lda ptr3
  1490  8861 18                     clc
  1491  8862 6902                   adc #2
  1492  8864 85fd                   sta ptr2
  1493  8866 9002                   bcc +
  1494  8868 e6fe                   inc ptr2+1
  1495                          +  ; subtract argument
  1496  886a 38                     sec
  1497  886b a5fb                   lda ptr1
  1498  886d e5fd                   sbc ptr2
  1499  886f 85a6                   sta tmp2
  1500  8871 a5fc                   lda ptr1+1
  1501  8873 e5fe                   sbc ptr2+1
  1502  8875 f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1503  8877 c9ff                   cmp #$FF
  1504  8879 d00d                   bne failedoffset ; 0 and FF were only options so fail
  1505                              ; chkeck negative offset
  1506  887b a5a6                   lda tmp2
  1507  887d 3006                   bmi successoffset ; branch if signed byte is negative
  1508  887f 1007                   bpl failedoffset ; otherwise fail
  1509                          chkoffsetto127:
  1510  8881 a5a6                   lda tmp2
  1511  8883 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1512                          successoffset:    
  1513  8885 a900                   lda #0 ; Z true (EQ)
  1514  8887 60                     rts
  1515                          failedoffset:
  1516  8888 a901                   lda #1 ; Z false (NE)
  1517  888a 60                     rts
  1518                          
  1519                          chkzeropage:
  1520  888b 84a5                   sty savepos
  1521  888d b90002                 lda inputbuf, y
  1522  8890 c924                   cmp #'$'
  1523  8892 d001                   bne +
  1524  8894 c8                     iny
  1525  8895 20e48a             +   jsr chkhexbyte
  1526  8898 d005                   bne ++
  1527  889a c4a4                   cpy len
  1528  889c d001                   bne ++
  1529  889e 60                     rts ; Z true (EQ)
  1530  889f a4a5               ++  ldy savepos
  1531  88a1 a201                   ldx #1 ; Z false (NE)
  1532  88a3 60                     rts
  1533                          
  1534                          chkzeropagex:
  1535  88a4 84a5                   sty savepos
  1536  88a6 b90002                 lda inputbuf, y
  1537  88a9 c924                   cmp #'$'
  1538  88ab d001                   bne +
  1539  88ad c8                     iny
  1540  88ae 20e48a             +   jsr chkhexbyte
  1541  88b1 d01b                   bne ++
  1542  88b3 20918a                 jsr skipspaces
  1543  88b6 b90002                 lda inputbuf, y
  1544  88b9 c92c                   cmp #','
  1545  88bb d011                   bne ++
  1546  88bd c8                     iny
  1547  88be 20918a                 jsr skipspaces
  1548  88c1 b90002                 lda inputbuf, y
  1549  88c4 c958                   cmp #'X'
  1550  88c6 d006                   bne ++
  1551  88c8 c8                     iny
  1552  88c9 c4a4                   cpy len
  1553  88cb d001                   bne ++
  1554  88cd 60                     rts ; Z true (EQ)
  1555  88ce a4a5               ++  ldy savepos
  1556  88d0 a201                   ldx #1 ; Z false (NE)
  1557  88d2 60                     rts
  1558                          
  1559                          chkzeropagey:
  1560  88d3 84a5                   sty savepos
  1561  88d5 b90002                 lda inputbuf, y
  1562  88d8 c924                   cmp #'$'
  1563  88da d001                   bne +
  1564  88dc c8                     iny
  1565  88dd 20e48a             +   jsr chkhexbyte
  1566  88e0 d01b                   bne ++
  1567  88e2 20918a                 jsr skipspaces
  1568  88e5 b90002                 lda inputbuf, y
  1569  88e8 c92c                   cmp #','
  1570  88ea d011                   bne ++
  1571  88ec c8                     iny
  1572  88ed 20918a                 jsr skipspaces
  1573  88f0 b90002                 lda inputbuf, y
  1574  88f3 c959                   cmp #'Y'
  1575  88f5 d006                   bne ++
  1576  88f7 c8                     iny
  1577  88f8 c4a4                   cpy len
  1578  88fa d001                   bne ++
  1579  88fc 60                     rts ; Z true (EQ)
  1580  88fd a4a5               ++  ldy savepos
  1581  88ff a201                   ldx #1 ; Z false (NE)
  1582  8901 60                     rts
  1583                          
  1584                          chkabsolute:
  1585  8902 84a5                   sty savepos
  1586  8904 b90002                 lda inputbuf, y
  1587  8907 c924                   cmp #'$'
  1588  8909 d001                   bne +
  1589  890b c8                     iny
  1590  890c 20db8a             +   jsr chkhexword
  1591  890f d005                   bne ++
  1592  8911 c4a4                   cpy len
  1593  8913 d001                   bne ++
  1594  8915 60                     rts ; Z true (EQ)
  1595  8916 a4a5               ++  ldy savepos
  1596  8918 a201                   ldx #1 ; Z false (NE)
  1597  891a 60                     rts
  1598                          
  1599                          chkabsolutex:
  1600  891b 84a5                   sty savepos
  1601  891d b90002                 lda inputbuf, y
  1602  8920 c924                   cmp #'$'
  1603  8922 d001                   bne +
  1604  8924 c8                     iny
  1605  8925 20db8a             +   jsr chkhexword
  1606  8928 d01b                   bne ++
  1607  892a 20918a                 jsr skipspaces
  1608  892d b90002                 lda inputbuf, y
  1609  8930 c92c                   cmp #','
  1610  8932 d011                   bne ++
  1611  8934 c8                     iny
  1612  8935 20918a                 jsr skipspaces
  1613  8938 b90002                 lda inputbuf, y
  1614  893b c958                   cmp #'X'
  1615  893d d006                   bne ++
  1616  893f c8                     iny
  1617  8940 c4a4                   cpy len
  1618  8942 d001                   bne ++
  1619  8944 60                     rts ; Z true (EQ)
  1620  8945 a4a5               ++  ldy savepos
  1621  8947 a201                   ldx #1 ; Z false (NE)
  1622  8949 60                     rts
  1623                          
  1624                          chkabsolutey:
  1625  894a 84a5                   sty savepos
  1626  894c b90002                 lda inputbuf, y
  1627  894f c924                   cmp #'$'
  1628  8951 d001                   bne +
  1629  8953 c8                     iny
  1630  8954 20db8a             +   jsr chkhexword
  1631  8957 d01b                   bne ++
  1632  8959 20918a                 jsr skipspaces
  1633  895c b90002                 lda inputbuf, y
  1634  895f c92c                   cmp #','
  1635  8961 d011                   bne ++
  1636  8963 c8                     iny
  1637  8964 20918a                 jsr skipspaces
  1638  8967 b90002                 lda inputbuf, y
  1639  896a c959                   cmp #'Y'
  1640  896c d006                   bne ++
  1641  896e c8                     iny
  1642  896f c4a4                   cpy len
  1643  8971 d001                   bne ++
  1644  8973 60                     rts ; Z true (EQ)
  1645  8974 a4a5               ++  ldy savepos
  1646  8976 a201                   ldx #1 ; Z false (NE)
  1647  8978 60                     rts
  1648                          
  1649                          chkindirect:
  1650  8979 84a5                   sty savepos
  1651  897b b90002                 lda inputbuf, y
  1652  897e c928                   cmp #'('
  1653  8980 d021                   bne ++
  1654  8982 c8                     iny
  1655  8983 20918a                 jsr skipspaces
  1656  8986 b90002                 lda inputbuf, y
  1657  8989 c924                   cmp #'$'
  1658  898b d001                   bne +
  1659  898d c8                     iny
  1660  898e 20db8a             +   jsr chkhexword
  1661  8991 d010                   bne ++
  1662  8993 20918a                 jsr skipspaces
  1663  8996 b90002                 lda inputbuf, y
  1664  8999 c929                   cmp #')'
  1665  899b d006                   bne ++
  1666  899d c8                     iny
  1667  899e c4a4                   cpy len
  1668  89a0 d001                   bne ++
  1669  89a2 60                     rts ; Z true (EQ)
  1670  89a3 a4a5               ++  ldy savepos
  1671  89a5 a201                   ldx #1 ; Z false (NE)
  1672  89a7 60                     rts
  1673                          
  1674                          chkinstruction:
  1675  89a8 c4a4                   cpy len
  1676  89aa f02a                   beq ++
  1677  89ac 84ff                   sty tmp
  1678  89ae a237                   ldx #(ninst-1)
  1679  89b0 b90002             -   lda inputbuf,y
  1680  89b3 dd3a8c                 cmp inst0,x
  1681  89b6 d019                   bne +
  1682  89b8 c8                     iny
  1683  89b9 b90002                 lda inputbuf,y
  1684  89bc dd728c                 cmp inst1,x
  1685  89bf d010                   bne +
  1686  89c1 c8                     iny
  1687  89c2 b90002                 lda inputbuf,y
  1688  89c5 ddaa8c                 cmp inst2,x
  1689  89c8 d007                   bne +
  1690  89ca c8                     iny
  1691  89cb 8a                     txa
  1692  89cc 8523                   sta inidx
  1693  89ce a200                   ldx #0
  1694  89d0 60                     rts
  1695  89d1 a4ff               +   ldy tmp
  1696  89d3 ca                     dex
  1697  89d4 10da                   bpl -
  1698  89d6 a201               ++  ldx #1 ; Z false (NE)
  1699  89d8 60                     rts
  1700                          
  1701                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1702                              ; and allows mode promotion
  1703  89d9 20fd89                 jsr find_inst_and_mode2
  1704  89dc f01e                   beq ++
  1705  89de a524                   lda mode
  1706  89e0 c906                   cmp #6
  1707  89e2 9018                   bcc ++
  1708  89e4 c90a                   cmp #10
  1709  89e6 b012                   bcs +
  1710  89e8 6903                   adc #3
  1711  89ea 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1712  89ec 20fd89                 jsr find_inst_and_mode2 ; try again once
  1713  89ef d00b                   bne ++
  1714  89f1 a5a6                   lda tmp2
  1715  89f3 85fb                   sta ptr1
  1716  89f5 a900                   lda #0
  1717  89f7 85fc                   sta ptr1+1
  1718  89f9 60                     rts ; Z true (EQ)
  1719  89fa a201               +   ldx #1 ; Z false (NE)
  1720  89fc 60                 ++  rts
  1721                          
  1722                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1723  89fd a296                   ldx #nopcodes-1
  1724  89ff bd928e             -   lda instidx, x
  1725  8a02 bc298f                 ldy modeidx, x
  1726  8a05 c523                   cmp inidx
  1727  8a07 d00c                   bne +
  1728  8a09 c424                   cpy mode
  1729  8a0b d008                   bne +
  1730  8a0d 8622                   stx opidx
  1731  8a0f 20c181                 jsr getsize
  1732  8a12 a200                   ldx #0 ; Z true (EQ)
  1733  8a14 60                     rts
  1734  8a15 ca                 +   dex
  1735  8a16 e0ff                   cpx #$ff
  1736  8a18 d0e5                   bne -
  1737  8a1a a201                   ldx #1 ; Z false (NE)
  1738  8a1c 60                     rts
  1739                          
  1740                          executerun:
  1741  8a1d 68                     pla ; remove low byte return address
  1742  8a1e 68                     pla ; return high byte return address
  1743  8a1f 68                     pla ; again, we're really not returning
  1744  8a20 68                     pla ; again, we're really not returning
  1745  8a21 204d8b                 jsr newline
  1746                          !ifndef MINIMUM {
  1747                          ; any C64
  1748  8a24 203980                 jsr install_nmi64
  1749                          }
  1750                          +   ; restore stack and registers
  1751  8a27 a000                   ldy #0
  1752  8a29 b99b92             -   lda savestack,y
  1753  8a2c 990001                 sta $100,y
  1754  8a2f c8                     iny
  1755  8a30 d0f7                   bne -
  1756  8a32 ae9792                 ldx registerSP
  1757  8a35 9a                     txs
  1758  8a36 ad9892                 lda registerSR
  1759  8a39 48                     pha
  1760  8a3a ad9492                 lda registerA
  1761  8a3d ae9592                 ldx registerX
  1762  8a40 ac9692                 ldy registerY
  1763  8a43 28                     plp
  1764  8a44 6cfb00                 jmp (ptr1)
  1765                          
  1766                          chkcontinuedis:
  1767  8a47 b90002                 lda inputbuf,y
  1768  8a4a c944                   cmp #'D'
  1769  8a4c d00a                   bne +
  1770  8a4e b90102                 lda inputbuf+1,y
  1771  8a51 c90d                   cmp #13
  1772  8a53 d003                   bne +
  1773  8a55 c8                     iny
  1774  8a56 a200                   ldx #0 ; restore Z set
  1775  8a58 60                 +   rts
  1776                          
  1777                          chkcontinueasm:
  1778  8a59 b90002                 lda inputbuf,y
  1779  8a5c c941                   cmp #'A'
  1780  8a5e d00a                   bne +
  1781  8a60 b90102                 lda inputbuf+1,y
  1782  8a63 c90d                   cmp #13
  1783  8a65 d003                   bne +
  1784  8a67 c8                     iny
  1785  8a68 a200                   ldx #0 ; restore Z set
  1786  8a6a 60                 +   rts
  1787                          
  1788                          executedisassemble:
  1789  8a6b 68                     pla ; remove low byte return address
  1790  8a6c 68                     pla ; return high byte return address
  1791  8a6d 204d8b                 jsr newline
  1792  8a70 4c6981                 jmp disassemble
  1793                          
  1794                          reportnotimplemented:
  1795  8a73 a97d                   lda #<notimplemented
  1796  8a75 a290                   ldx #>notimplemented
  1797  8a77 4cc383                 jmp strout
  1798                          
  1799                          reporterr:
  1800  8a7a c000                   cpy #0
  1801  8a7c f008                   beq +
  1802  8a7e a920                   lda #' '
  1803  8a80 20d2ff             -   jsr charout
  1804  8a83 88                     dey
  1805  8a84 d0fa                   bne -
  1806  8a86 a93f               +   lda #'?'
  1807  8a88 20d2ff                 jsr charout
  1808  8a8b a90d                   lda #13
  1809  8a8d 20d2ff                 jsr charout
  1810  8a90 60                     rts
  1811                          
  1812                          skipspaces:
  1813  8a91 b90002             -   lda inputbuf, y
  1814                          !ifndef MINIMUM {
  1815                              ; skip SHIFT-SPACES too on Commodore
  1816  8a94 c9a0                   cmp #$A0
  1817  8a96 f004                   beq +
  1818                          }
  1819  8a98 c920                   cmp #$20
  1820  8a9a d003                   bne ++
  1821  8a9c c8                 +   iny
  1822  8a9d d0f2                   bne -
  1823  8a9f 60                 ++  rts
  1824                          
  1825                          chkdot:
  1826  8aa0 b90002                 lda inputbuf, y
  1827  8aa3 c92e                   cmp #'.'
  1828  8aa5 d003                   bne +
  1829  8aa7 c8                     iny
  1830  8aa8 a900                   lda #0 ; Z true (EQ)
  1831  8aaa 60                 +   rts
  1832                          
  1833                          chkhelp:
  1834  8aab b90002                 lda inputbuf, y
  1835  8aae c93f                   cmp #'?'
  1836  8ab0 d003                   bne +
  1837  8ab2 c8                     iny
  1838  8ab3 a900                   lda #0 ; Z true (EQ)
  1839  8ab5 60                 +   rts
  1840                          
  1841                          chkcolon:
  1842  8ab6 b90002                 lda inputbuf, y
  1843  8ab9 c93a                   cmp #':'
  1844  8abb d003                   bne +
  1845  8abd c8                     iny
  1846  8abe a900                   lda #0 ; Z true (EQ)
  1847  8ac0 60                 +   rts
  1848                          
  1849                          chkhexbyteofsequence:
  1850  8ac1 208983                 jsr inputhexbyte
  1851  8ac4 20de8a                 jsr +
  1852  8ac7 d011                   bne ++ ; Z false (NE) if failed checks
  1853  8ac9 c4a4                   cpy len
  1854  8acb f00d                   beq ++ ; Z true (EQ) if end of input
  1855  8acd 85ff                   sta tmp
  1856  8acf b90002                 lda inputbuf,y
  1857  8ad2 c920                   cmp #$20
  1858  8ad4 d004                   bne ++ ; Z false (NE) if not space
  1859  8ad6 a5ff                   lda tmp
  1860  8ad8 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1861  8ada 60                 ++  rts
  1862                          
  1863                          chkhexword:
  1864                          chkhexaddr1:
  1865  8adb 206383                 jsr inputhexword
  1866  8ade a200               +   ldx #0 ; Z true (EQ)
  1867  8ae0 9001                   bcc +
  1868  8ae2 e8                     inx ; Z false (NE)
  1869  8ae3 60                 +   rts
  1870                          
  1871                          chkhexbyte:
  1872  8ae4 98                     tya
  1873  8ae5 48                     pha ; save y
  1874  8ae6 208983                 jsr inputhexbyte
  1875  8ae9 b00d                   bcs +
  1876  8aeb 85a6                   sta tmp2
  1877  8aed 20a583                 jsr inputhexnybble
  1878  8af0 9006                   bcc +
  1879  8af2 68                     pla ; throw away saved y
  1880  8af3 a5a6                   lda tmp2
  1881  8af5 a200                   ldx #0 ; Z true (EQ)
  1882  8af7 60                     rts
  1883  8af8 68                 +   pla
  1884  8af9 a8                     tay ; won't be zero, so Z false (NE)
  1885  8afa 60                     rts    
  1886                          
  1887                          chkhexaddr2:
  1888  8afb a5fb                   lda ptr1
  1889  8afd 48                     pha
  1890  8afe a5fc                   lda ptr1+1
  1891  8b00 48                     pha
  1892  8b01 20db8a                 jsr chkhexaddr1
  1893  8b04 f005                   beq +
  1894  8b06 68                     pla
  1895  8b07 68                     pla
  1896  8b08 a901                   lda #1 ; Z false (NE)
  1897  8b0a 60                     rts
  1898  8b0b a5fb               +   lda ptr1
  1899  8b0d 85fd                   sta ptr2
  1900  8b0f a5fc                   lda ptr1+1
  1901  8b11 85fe                   sta ptr2+1
  1902  8b13 68                     pla
  1903  8b14 85fc                   sta ptr1+1
  1904  8b16 68                     pla
  1905  8b17 85fb                   sta ptr1
  1906  8b19 a900                   lda #0 ; Z true (EQ)
  1907  8b1b 60                     rts    
  1908                          
  1909                          chkaddr1cmd:
  1910  8b1c b90002                 lda inputbuf, y
  1911  8b1f c941               +   cmp #'A'
  1912  8b21 d00b                   bne +
  1913  8b23 be0102                 ldx inputbuf+1, y
  1914  8b26 e00d                   cpx #13
  1915  8b28 d004                   bne +
  1916  8b2a c8                     iny
  1917  8b2b 4c7186                 jmp executeassemble
  1918  8b2e c944               +   cmp #'D'
  1919  8b30 d00b                   bne +
  1920  8b32 be0102                 ldx inputbuf+1, y
  1921  8b35 e00d                   cpx #13
  1922  8b37 d004                   bne +
  1923  8b39 c8                     iny
  1924  8b3a 4c6b8a                 jmp executedisassemble
  1925  8b3d c952               +   cmp #'R'
  1926  8b3f d00b                   bne +
  1927  8b41 be0102                 ldx inputbuf+1, y
  1928  8b44 e00d                   cpx #13
  1929  8b46 d004                   bne +
  1930  8b48 c8                     iny
  1931  8b49 4c1d8a                 jmp executerun
  1932  8b4c 60                 +   rts
  1933                          
  1934                          newline:
  1935  8b4d a90d                   lda #13
  1936  8b4f 4cd2ff                 jmp charout
  1937                          
  1938                          space:
  1939  8b52 a920                   lda #32
  1940  8b54 4cd2ff                 jmp charout
  1941                          
  1942                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1943                          ;     jsr $ffd2
  1944                          ;     pha
  1945                          ; -   lda $d011
  1946                          ;     bpl -
  1947                          ; -   lda $d011
  1948                          ;     bmi -
  1949                          ; -   lda $d011
  1950                          ;     bpl -
  1951                          ; -   lda $d011
  1952                          ;     bmi -
  1953                          ;     pla
  1954                          ;     rts
  1955                          
  1956                          save_regs_and_stack:
  1957                          
  1958                              ; save registers
  1959  8b57 8d9492                 sta registerA
  1960  8b5a 8e9592                 stx registerX
  1961  8b5d 8c9692                 sty registerY
  1962                          
  1963                              ; detect N/Z flags without affecting stack
  1964  8b60 3010                   bmi +
  1965  8b62 f007                   beq p_pl_eq
  1966                          
  1967  8b64 a900                   lda #$00 ;p_pl_ne
  1968  8b66 8d9892                 sta registerSR
  1969  8b69 f015                   beq ++
  1970                          
  1971                          p_pl_eq:
  1972  8b6b a902                   lda #$02
  1973  8b6d 8d9892                 sta registerSR
  1974  8b70 100e                   bpl ++ 
  1975                          
  1976  8b72 f007                   + beq p_mi_eq
  1977  8b74 a980                   lda #$80 ;p_mi_ne
  1978  8b76 8d9892                 sta registerSR
  1979  8b79 3005                   bmi ++
  1980                          
  1981                          p_mi_eq:
  1982  8b7b a982                   lda #$82
  1983  8b7d 8d9892                 sta registerSR
  1984                          
  1985                              ; save SP register, affects N/Z
  1986  8b80 ba                     ++tsx
  1987  8b81 8e9792                 stx registerSP
  1988                          
  1989                              ; save stack, affects N/Z
  1990  8b84 a200                   ldx #0
  1991  8b86 bd0001                 -lda $100,x
  1992  8b89 9d9b92                 sta savestack,x
  1993  8b8c e8                     inx
  1994  8b8d d0f7                   bne -
  1995                          
  1996                              ; save flags, combining unaffected ones with saved N/Z
  1997  8b8f 08                     php
  1998  8b90 68                     pla
  1999  8b91 297d                   and #$7d
  2000  8b93 0d9892                 ora registerSR
  2001  8b96 8d9892                 sta registerSR
  2002                          
  2003                              ; restore stack byte affected
  2004  8b99 aa                     tax
  2005  8b9a bd9b92                 lda savestack,x
  2006  8b9d 9d0001                 sta $100,x
  2007                          
  2008  8ba0 4ca58b                 jmp +
  2009                          
  2010                          execute_display_registers:
  2011  8ba3 68                     pla ; remove return address
  2012  8ba4 68                     pla
  2013                              +
  2014                          
  2015                              ; need some normality
  2016  8ba5 58                     cli
  2017  8ba6 d8                     cld
  2018                          
  2019  8ba7 204d8b                 jsr newline
  2020  8baa 20b38b                 jsr display_registers
  2021                          !ifndef MINIMUM {
  2022                              ; any C64
  2023  8bad 205480                 jsr uninstall_nmi64
  2024                          }
  2025  8bb0 4c3080                 jmp input_loop
  2026                          
  2027                          ; PC   NV-BDIZC .A .X .Y .S
  2028                          ; 1234 10111011 01 02 03 FF
  2029                          display_registers:
  2030  8bb3 a972                   lda #<reg_header
  2031  8bb5 a292                   ldx #>reg_header
  2032  8bb7 20c383                 jsr strout
  2033  8bba ad9992                 lda registerPC
  2034  8bbd ae9a92                 ldx registerPC+1
  2035  8bc0 204783                 jsr disphexword
  2036  8bc3 20528b                 jsr space
  2037  8bc6 ad9892                 lda registerSR
  2038  8bc9 203483                 jsr dispbinbyte
  2039  8bcc 20528b                 jsr space
  2040  8bcf ad9492                 lda registerA
  2041  8bd2 204d83                 jsr disphexbyte
  2042  8bd5 20528b                 jsr space
  2043  8bd8 ad9592                 lda registerX
  2044  8bdb 204d83                 jsr disphexbyte
  2045  8bde 20528b                 jsr space
  2046  8be1 ad9692                 lda registerY
  2047  8be4 204d83                 jsr disphexbyte
  2048  8be7 20528b                 jsr space
  2049  8bea ad9792                 lda registerSP
  2050  8bed 204d83                 jsr disphexbyte
  2051  8bf0 4c4d8b                 jmp newline
  2052                          
  2053                          !ifdef MINIMUM {
  2054                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2055                          ;; MC6850
  2056                          UART_DATA=$FFF8
  2057                          UART_STCR=$FFF9
  2058                          
  2059                          UART_INIT:
  2060                          	ldx #0b00000111 ; 11=reset device
  2061                          	stx UART_STCR
  2062                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  2063                          	sta UART_STCR
  2064                          	rts
  2065                          UART_OUT:
  2066                          	pha
  2067                          -	lda UART_STCR
  2068                          	and #2
  2069                          	beq - ; branch if TDRE=0, not finished transmitting
  2070                          	pla
  2071                          	pha
  2072                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  2073                          	sta UART_DATA
  2074                          	pla
  2075                          	rts
  2076                          UART_IN:
  2077                          -	lda UART_STCR
  2078                          	and #1
  2079                          	beq - ; branch if TDRF=0, not received
  2080                          	lda UART_DATA
  2081                          	; software "CAPS LOCK" because wozmon expects only uppercase
  2082                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  2083                          	beq BREAK
  2084                              ; force lowercase alphabet to uppercase
  2085                              cmp #'a'
  2086                          	bcc +
  2087                          	cmp #'z'+1
  2088                          	bcs +
  2089                          	eor #$20
  2090                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  2091                           	rts
  2092                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  2093                          	pha ; save A
  2094                          	lda UART_STCR
  2095                          	lsr ; put rightmost bit in carry
  2096                          	pla ; restore A affects flags
  2097                          	ror ; move carry to left bit, right bit to carry
  2098                          	php ; push processor to save N
  2099                          	rol ; restore A affects flags
  2100                          	plp ; pull processor to restore N
  2101                          	rts
  2102                          
  2103                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2104                          ; Processor start and interrupts
  2105                          
  2106                          NMI: ; unused on minimum (no source of interrupt)
  2107                              rti
  2108                          
  2109                          IRQ:
  2110                              pha
  2111                              php
  2112                              pla
  2113                              and #$10
  2114                              beq ++ ; not break
  2115                          ;BREAK HANDLER
  2116                              pla
  2117                              sta registerA
  2118                              pla
  2119                              sta registerSR
  2120                              pla
  2121                              cld
  2122                              sec
  2123                              sbc #2
  2124                              sta registerPC
  2125                              pla
  2126                              sbc #0
  2127                              sta registerPC+1
  2128                              lda #>save_regs_and_stack
  2129                              pha
  2130                              lda #<save_regs_and_stack
  2131                              pha
  2132                              lda registerSR
  2133                              pha
  2134                              lda registerA
  2135                              pha
  2136                          ++  pla
  2137                              rti
  2138                          
  2139                          BREAK:
  2140                              jmp RESET
  2141                          
  2142                          RESET:
  2143                              cld
  2144                              ldx #$FF
  2145                              txs
  2146                              jsr JUART_INIT
  2147                              cli
  2148                              jmp start
  2149                          ; !ifdef MINIMUM
  2150                          } else { ; not MINIMUM
  2151                          nmi64:
  2152  8bf3 78                     sei
  2153  8bf4 8d9492                 sta registerA
  2154  8bf7 68                     pla
  2155  8bf8 8d9892                 sta registerSR
  2156  8bfb 68                     pla
  2157  8bfc d8                     cld
  2158  8bfd 8d9992                 sta registerPC
  2159  8c00 68                     pla
  2160  8c01 8d9a92                 sta registerPC+1
  2161  8c04 a98b                   lda #>save_regs_and_stack
  2162  8c06 48                     pha
  2163  8c07 a957                   lda #<save_regs_and_stack
  2164  8c09 48                     pha
  2165  8c0a ad9892                 lda registerSR
  2166  8c0d 48                     pha
  2167  8c0e ad9492                 lda registerA
  2168  8c11 40                     rti
  2169                          
  2170                          brk64:
  2171  8c12 68                     pla
  2172  8c13 a8                     tay
  2173  8c14 68                     pla
  2174  8c15 aa                     tax
  2175  8c16 68                     pla
  2176  8c17 8d9492                 sta registerA
  2177  8c1a 68                     pla
  2178  8c1b 8d9892                 sta registerSR
  2179  8c1e 68                     pla
  2180  8c1f d8                     cld
  2181  8c20 38                     sec
  2182  8c21 e902                   sbc #2
  2183  8c23 8d9992                 sta registerPC
  2184  8c26 68                     pla
  2185  8c27 e900                   sbc #0
  2186  8c29 8d9a92                 sta registerPC+1
  2187  8c2c a98b                   lda #>save_regs_and_stack
  2188  8c2e 48                     pha
  2189  8c2f a957                   lda #<save_regs_and_stack
  2190  8c31 48                     pha
  2191  8c32 ad9892                 lda registerSR
  2192  8c35 48                     pha
  2193  8c36 ad9492                 lda registerA
  2194  8c39 40                     rti
  2195                          }
  2196                          
  2197                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2198                          ; data
  2199                          
  2200                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  2201                          ninst = 56
  2202  8c3a 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  2203  8c72 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  2204  8caa 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  2205                          
  2206                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  2207                          mode_jmptable:
  2208  8ce2 4d82               !word dispModeAcc-1; 0 Accumulator 1
  2209  8ce4 5282               !word dispModeNone-1 ; 1 None 1
  2210  8ce6 5382               !word dispModeImm-1 ; 2 Immediate 2
  2211  8ce8 6482               !word dispModeIndX-1 ; 3 IndirectX 2
  2212  8cea 8482               !word dispModeIndY-1 ; 4 IndirectY 2
  2213  8cec a482               !word dispModeRel-1 ; 5 Relative 2
  2214  8cee 5882               !word dispModeZP-1 ; 6 ZeroPage 2
  2215  8cf0 e082               !word dispModeZPX-1 ; 7 ZeroPageX 2
  2216  8cf2 ed82               !word dispModeZPY-1 ; 8 ZeroPageY 2
  2217  8cf4 fa82               !word dispModeAbs-1 ; 9 Absolute 3
  2218  8cf6 0c83               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  2219  8cf8 1983               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  2220  8cfa 2683               !word dispModeInd-1 ; 12 Indirect 3
  2221                          
  2222                          nmodes = 13
  2223                          
  2224                          mode_sorted:
  2225  8cfc 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  2226                          
  2227                          !ifdef MINIMUM {
  2228                          mode_0: !text "Accumulator", 0, "A", 0
  2229                          mode_1: !text "None", 0, 8, 0
  2230                          mode_2: !text "Immediate", 0, "#$12", 0
  2231                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  2232                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  2233                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  2234                          mode_6: !text "ZeroPage", 0, "$12", 0
  2235                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  2236                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  2237                          mode_9: !text "Absolute", 0, "$1234", 0
  2238                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  2239                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  2240                          mode_12: !text "Indirect", 0, "($1234)", 0
  2241                          } else {
  2242  8d09 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2243  8d17 4e4f4e45001400     mode_1: !text "NONE", 0, 20, 0
  2244  8d1e 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2245  8d2d 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2246  8d3f 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2247  8d51 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2248  8d70 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2249  8d7d 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2250  8d8d 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2251  8d9d 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2252  8dac 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2253  8dbe 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2254  8dd0 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2255                          }
  2256                          
  2257                          modes: ; table for easily displaying each mode_example
  2258  8de1 098d               !word mode_0
  2259  8de3 178d               !word mode_1
  2260  8de5 1e8d               !word mode_2
  2261  8de7 2d8d               !word mode_3
  2262  8de9 3f8d               !word mode_4
  2263  8deb 518d               !word mode_5
  2264  8ded 708d               !word mode_6
  2265  8def 7d8d               !word mode_7
  2266  8df1 8d8d               !word mode_8
  2267  8df3 9d8d               !word mode_9
  2268  8df5 ac8d               !word mode_10
  2269  8df7 be8d               !word mode_11
  2270  8df9 d08d               !word mode_12
  2271                          
  2272                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2273                          nopcodes = 151
  2274  8dfb 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2275  8e92 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2276  8f29 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2277                          
  2278                          copyright 
  2279                          ;                  1         2         3         4
  2280                          ;         1234567890123456789012345678901234567890
  2281  8fc0 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2282                          !ifdef C64TERMINAL {
  2283                              !text 13, "(TERMINAL VERSION)"
  2284                          }
  2285  8fe0 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2286  9006 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2287  901d 00                 !text 0
  2288                          
  2289                          firsthelp
  2290                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2291  901e 0d0d               !text 13, 13
  2292  9020 54595045203f2046...!text "TYPE ? FOR HELP"
  2293  902f 0d00               !text 13, 0
  2294                          
  2295                          !ifndef MINIMUM {
  2296                          ; C64 only
  2297                          extra_help:
  2298  9031 5820202020202020...    !text "X           (EXIT MONITOR)", 13
  2299  904c 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S  (SAVE)", 13
  2300  906e 00                     !text 0
  2301                          
  2302                          !ifdef C64SCREEN {
  2303  906f 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  2304  9076 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  2305                          }
  2306                          
  2307                          }
  2308                          
  2309  907d 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2310                          
  2311                          generalhelp
  2312  908e 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2313  90b4 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2314  90d9 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2315  90fc 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2316  9124 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2317  9140 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2318  9160 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2319  9182 00                 !text 0
  2320                          generalhelp2
  2321  9183 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2322  91a8 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2323  91c4 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2324  91e3 3f41202020202020...!text "?A          (LIST 6502 INSTRUCTIONS)", 13
  2325  9208 3f41444320202020...!text "?ADC        (/ADC/ ADDRESSING MODES)", 13
  2326  922d 3f4d4f4445202020...!text "?MODE       (ADDRESSING MODES)", 13
  2327  924c 3f2e202020202020...!text "?.          (DISPLAY REGISTERS)", 13
  2328  926c 00                 !text 0
  2329                          
  2330  926d 4d4f444500         modes_keyword !text "MODE", 0
  2331                          
  2332  9272 2050432020204e56...reg_header !text " PC   NV-BDIZC .A .X .Y .S", 13, '.', 0
  2333                          
  2334                          !ifdef MINIMUM {
  2335                          registerA = $def9
  2336                          registerX = $defa
  2337                          registerY = $defb
  2338                          registerSP = $defc
  2339                          registerSR = $defd
  2340                          registerPC = $defe;/f
  2341                          savestack = $df00
  2342                          } else {
  2343  928f 0000               savebrkvector !word 0
  2344  9291 0000               savenmivector !word 0
  2345  9293 00                 drive !byte 0
  2346  9294 00                 registerA !byte 0
  2347  9295 00                 registerX !byte 0
  2348  9296 00                 registerY !byte 0
  2349  9297 00                 registerSP !byte 0
  2350  9298 00                 registerSR !byte 0
  2351  9299 0000               registerPC !word 0
  2352                          savestack ; 256 bytes
  2353  929b 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2354  92ab 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2355  92bb 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2356  92cb 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2357  92db 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2358  92eb 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2359  92fb 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2360  930b 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2361  931b 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2362  932b 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2363  933b 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2364  934b 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2365  935b 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2366  936b 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2367  937b 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2368  938b 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2369                          }
  2370                          
  2371                          !ifdef MINIMUM {
  2372                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2373                          ; JUMP table for some stability
  2374                          * = $FFEE
  2375                          JUART_INIT: JMP UART_INIT
  2376                          JUART_OUT: JMP UART_OUT
  2377                          JUART_IN: JMP UART_IN
  2378                          JUART_CHK: JMP UART_CHK
  2379                          
  2380                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2381                          ; 6502 vectors 
  2382                          * = $fffa
  2383                              !word NMI
  2384                              !word RESET
  2385                              !word IRQ
  2386                          } else { // C64
  2387                              !if * > $a000 {
  2388                                  !error "code/data overran $a000"
  2389                              }
  2390                          }
  2391                          
  2392                          finish = *
