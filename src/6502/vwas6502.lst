
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<<
     5                          ;; >>>       ****************************************************        <<<
     6                          ;; >>>       **           TARGETS:                              *        <<<
     7                          ;; >>>       ** (1)  C64 8000-9FFF screen editor                *        <<<
     8                          ;; >>>       ** (2)  C64 8000-9FFF terminal edition             *        <<<
     9                          ;; >>>       ** (3)  6502+MC6850 E000-FFFF minimum system       *        <<<
    10                          ;; >>>       *   56K(RAM),8K(ROM), 2 bytes IO for MC6850 UART   *        <<<
    11                          ;; >>>       ****************************************************        <<<
    12                          ;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          ;; MIT License
    15                          ;;
    16                          ;; Copyright (c) 2024 David R. Van Wagner
    17                          ;; davevw.com
    18                          ;;
    19                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    20                          ;; of this software and associated documentation files (the "Software"), to deal
    21                          ;; in the Software without restriction, including without limitation the rights
    22                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    23                          ;; copies of the Software, and to permit persons to whom the Software is
    24                          ;; furnished to do so, subject to the following conditions:
    25                          ;;
    26                          ;; The above copyright notice and this permission notice shall be included in all
    27                          ;; copies or substantial portions of the Software.
    28                          ;;
    29                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    30                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    31                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    32                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    33                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    34                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    35                          ;; SOFTWARE.
    36                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                          
    40                          ; Important! define exactly ONE target (set in build.sh)
    41                          ;C64SCREEN = 1
    42                          ;C64TERMINAL = 1
    43                          ;MINIMUM = 1
    44                          
    45                          ; options (set in build.sh)
    46                          ;NEEDECHO = 0
    47                          
    48                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                          
    50                          ;; _
    51                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    52                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    53                          ;; 1000 (display memory at $1000)
    54                          ;; 1000.2000 (display memory range $1000 to $2000)
    55                          ;; 1000. (display next screenful of memory starting at $1000)
    56                          ;; . (display next screenful of memory)
    57                          ;; 1000 r (JMP $1000)
    58                          ;; 1000: 01 02 03 (modify memory)
    59                          ;; (NEW SYNTAX)
    60                          ;; 1000 d (disassemble starting at address, for screenful)
    61                          ;; d (continue disassembling from last address)
    62                          ;; 1000 a (assemble starting at, interactive until empty line)
    63                          ;; a (continue assembling from last address)
    64                          ;; r (run from PC)
    65                          ;; x (exit monitor -- C64 only)
    66                          ;; ? (commands help)
    67                          ;; ?a (list instructions available)
    68                          ;; ?adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    69                          ;; ?mode (show addressing modes example syntax for 6502)
    70                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    71                          ;; .? (display registers in format .1234 10110000 01 02 03 f6)
    72                          ;; .1234 10110000 01 02 03 f6 (set registers PC FLAGS A X Y S)
    73                          ;; .A:00 (change register, replace A with X, Y, S, P as appropriate, use space or colon as separator)
    74                          ;; (FUTURE SYNTAX, not implemented)
    75                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    76                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    77                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    78                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    79                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    80                          ;;
    81                          ;; (INTERACTIVE ASSEMBLER)
    82                          ;; 1000 _
    83                          ;;      ADC #$12
    84                          ;; 1000 69 12    ADC #$12
    85                          ;; 1002 _
    86                          ;;      JSR $1234
    87                          ;; 1002 20 34 12 JSR $1234
    88                          ;; 1005 _
    89                          ;;      RTS
    90                          ;; 1005 60       RTS
    91                          ;; 1006 _
    92                          ;;      XYZ
    93                          ;;      XYZ ?
    94                          ;; 1006 _
    95                          ;; _
    96                          ;;
    97                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    98                          ;; and can cursor up to revise,
    99                          ;;
   100                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
   101                          ;;
   102                          
   103                          ; global
   104                          inputbuf=$0200
   105                          
   106                          
   107                          ; kernal/system calls
   108                          
   109                          !ifdef MINIMUM {
   110                          charout=JUART_OUT
   111                          getkey=JUART_IN
   112                          }
   113                          
   114                          !ifdef C64SCREEN {
   115                          setlfs=$ffba
   116                          setnam=$ffbd
   117                          charin=$ffcf ; screen editor
   118                          charout=$ffd2
   119                          fsave =$ffd8
   120                          getkey=$ffe4
   121                          }
   122                          
   123                          !ifdef C64TERMINAL {
   124                          setlfs=$ffba
   125                          setnam=$ffbd
   126                          charout=$ffd2
   127                          getkey=$ffe4
   128                          fsave =$ffd8
   129                          }
   130                          
   131                          ; zeropage
   132                          !ifdef MINIMUM {
   133                          ptr1=$fc ; and $fd
   134                          ptr3=$fe ; and $ff
   135                          }
   136                          
   137                          !ifdef MINIMUM {
   138                          * = $e000
   139                          first:
   140                              jmp start
   141                          } else { // any C64
   142                          * = $8000
   143                          first:
   144  8000 4c2080                 jmp init64
   145                          }
   146                          
   147                          test: ; all the addressing modes here for testing disassembly
   148  8003 ea                     nop
   149  8004 ad3412                 lda $1234
   150  8007 bd3412                 lda $1234,x
   151  800a b93412                 lda $1234,y
   152  800d 0a                     asl
   153  800e a912                   lda #$12
   154  8010 a112                   lda ($12,x)
   155  8012 b112                   lda ($12),y
   156  8014 6c3412                 jmp ($1234)
   157  8017 d0fe               -   bne -
   158  8019 a512                   lda $12
   159  801b b512                   lda $12,x
   160  801d b612                   ldx $12,y
   161  801f ff                     !byte $FF ; unknown
   162                          
   163                          !ifndef MINIMUM {
   164                              ; any C64
   165                          init64:    
   166                              ; check if irq/brk vector installed
   167  8020 ad1603                 lda $316
   168  8023 ae1703                 ldx $317
   169  8026 e08e                   cpx #>brk64
   170  8028 f010                   beq +
   171  802a 8d3e95                 sta savebrkvector
   172  802d 8e3f95                 stx savebrkvector+1
   173  8030 a964                   lda #<brk64
   174  8032 a28e                   ldx #>brk64
   175  8034 8d1603                 sta $316
   176  8037 8e1703                 stx $317
   177  803a 207280             +   jsr install_nmi64
   178                              ; check if BASIC RAM limited to exclude monitor
   179  803d a538                   lda 56
   180  803f c980                   cmp #>first
   181  8041 f00a                   beq +
   182  8043 9008                   bcc +
   183  8045 a980                   lda #>first
   184  8047 8538                   sta 56
   185  8049 a900                   lda #0
   186  804b 8537                   sta 55
   187                          +   ; fall through to start
   188                          }
   189                          
   190                          start:
   191  804d d8                     cld
   192  804e 58                     cli
   193  804f a912                   lda #<copyright
   194  8051 a292                   ldx #>copyright
   195  8053 205b84                 jsr strout
   196  8056 a970                   lda #<firsthelp
   197  8058 a292                   ldx #>firsthelp
   198  805a 205b84                 jsr strout
   199  805d a901                   lda #1
   200  805f b8                     clv
   201  8060 08                     php
   202  8061 a900                   lda #0
   203  8063 aa                     tax
   204  8064 a8                     tay
   205  8065 28                     plp
   206  8066 4cb88d                 jmp save_registers
   207                          
   208                          input_loop:
   209  8069 207c84                 jsr inputline
   210  806c 207f84                 jsr parseline
   211  806f 4c6980                 jmp input_loop
   212                          
   213                          !ifndef MINIMUM {
   214                          ; C64 only
   215                          
   216                          install_nmi64:
   217                              ; check if nmi vector installed
   218  8072 ad1803                 lda $318
   219  8075 ae1903                 ldx $319
   220  8078 e08e                   cpx #>nmi64
   221  807a f010                   beq +
   222  807c 8d4095                 sta savenmivector
   223  807f 8e4195                 stx savenmivector+1
   224  8082 a945                   lda #<nmi64
   225  8084 a28e                   ldx #>nmi64
   226  8086 8d1803                 sta $318
   227  8089 8e1903                 stx $319
   228  808c 60                 +   rts
   229                          
   230                          uninstall_nmi64:
   231  808d ad4095                 lda savenmivector
   232  8090 ae4195                 ldx savenmivector+1
   233  8093 8d1803                 sta $318
   234  8096 8e1903                 stx $319
   235  8099 60                     rts
   236                          
   237                          chkextrac64:
   238  809a 20a680                 jsr chkexit
   239  809d d003                   bne +
   240  809f 4cbb80                 jmp execute_exit
   241  80a2 18                 +   clc ; no error
   242  80a3 a201                   ldx #1 ; Z false - not consumed
   243  80a5 60                     rts
   244                          
   245                          chkexit:
   246  80a6 b90002                 lda inputbuf, y
   247  80a9 c958                   cmp #'X'
   248  80ab d009                   bne +
   249  80ad c8                     iny
   250  80ae cc3795                 cpy len ; validate no extra characters
   251  80b1 f003                   beq +
   252  80b3 4cb780                 jmp extra_error
   253  80b6 60                 +   rts
   254                          
   255                          extra_error:
   256                              ; pop local return address
   257  80b7 68                     pla
   258  80b8 68                     pla
   259  80b9 38                     sec ; error
   260  80ba 60                     rts
   261                          
   262                          execute_exit:
   263  80bb ad3e95                 lda savebrkvector
   264  80be ae3f95                 ldx savebrkvector+1
   265  80c1 8d1603                 sta $316
   266  80c4 8e1703                 stx $317
   267  80c7 208d80                 jsr uninstall_nmi64
   268                              ; pop monitor return addresses, so only original caller is left
   269  80ca 68                     pla
   270  80cb 68                     pla
   271  80cc 68                     pla
   272  80cd 68                     pla
   273  80ce 68                     pla
   274  80cf 68                     pla
   275  80d0 60                     rts
   276                          
   277                          display_extra_help:
   278  80d1 a983                   lda #<extra_help
   279  80d3 a292                   ldx #>extra_help
   280  80d5 4c5b84                 jmp strout
   281                          
   282                          !ifdef C64SCREEN {
   283                          display_page_disassemble:
   284  80d8 ad2e8e                 lda ptr1
   285  80db ae2f8e                 ldx ptr1+1
   286  80de 20d183                 jsr disphexword
   287  80e1 a9c1                   lda #<page_disassemble
   288  80e3 a292                   ldx #>page_disassemble
   289  80e5 4c5b84                 jmp strout
   290                          
   291                          display_page_displaymemory:
   292  80e8 20ae8d                 jsr newline
   293  80eb ad2e8e                 lda ptr1
   294  80ee ae2f8e                 ldx ptr1+1
   295  80f1 20d183                 jsr disphexword
   296  80f4 a9c8                   lda #<page_displaymemory
   297  80f6 a292                   ldx #>page_displaymemory
   298  80f8 4c5b84                 jmp strout
   299                          
   300                          inputlinec64:
   301  80fb a000                   ldy #0
   302  80fd 20cfff             -   jsr charin
   303  8100 990002                 sta inputbuf,y
   304  8103 c8                     iny
   305  8104 c90d                   cmp #13
   306  8106 d0f5                   bne -
   307  8108 60                     rts
   308                          
   309                          continueassemblec64:
   310  8109 a914                   lda #20
   311  810b 20d2ff                 jsr charout
   312  810e 20d2ff                 jsr charout
   313  8111 ad2e8e                 lda ptr1
   314  8114 ae2f8e                 ldx ptr1+1
   315  8117 20d183                 jsr disphexword
   316  811a a920                   lda #' '
   317  811c 20d2ff                 jsr charout
   318  811f 20d2ff                 jsr charout
   319  8122 4cd2ff                 jmp charout
   320                          }
   321                          
   322                          chkfilename:
   323  8125 20b58c                 jsr skipspaces
   324  8128 8c3b95                 sty tmp
   325  812b b90002                 lda inputbuf, y
   326  812e c922                   cmp #34 ; double quote
   327  8130 d025                   bne ++
   328  8132 c8                 -   iny
   329  8133 b90002                 lda inputbuf, y
   330  8136 c90d                   cmp #13
   331  8138 d005                   bne +
   332  813a ac3b95                 ldy tmp
   333  813d d018                   bne ++
   334  813f c922               +   cmp #34 ; double quote
   335  8141 d0ef                   bne -
   336  8143 98                     tya ; index of ending double quotes
   337  8144 48                     pha ; save
   338  8145 18                     clc ; will subtract one more
   339  8146 ed3b95                 sbc tmp ; subtract index of first quote, have filename length
   340  8149 ae3b95                 ldx tmp
   341  814c e8                     inx ; low address of filename
   342  814d a002                   ldy #>inputbuf ; high address of filename
   343  814f 20bdff                 jsr setnam
   344  8152 68                     pla
   345  8153 a8                     tay
   346  8154 c8                     iny ; advance past ending double quotes
   347  8155 a900                   lda #0 ; set Z true
   348  8157 60                 ++  rts
   349                          
   350                          check_execute_save:
   351  8158 202581             +   jsr chkfilename
   352  815b f006                   beq +
   353  815d 208c8c                 jsr reporterr
   354  8160 a201                   ldx #1 ; set Z false
   355  8162 60                     rts
   356  8163 207181             +   jsr chkoptionaldrive
   357  8166 208781                 jsr chksave
   358  8169 d005                   bne +
   359  816b 209081                 jsr executesave
   360  816e a200                   ldx #0 ; set Z true
   361  8170 60                 +   rts
   362                          
   363                          chkoptionaldrive:
   364  8171 a908                   lda #8
   365  8173 8d4295                 sta drive
   366  8176 20b58c                 jsr skipspaces
   367  8179 200b8d                 jsr chkhexbyte
   368  817c d008                   bne +
   369  817e 8d4295                 sta drive
   370  8181 20b58c                 jsr skipspaces
   371  8184 a900                   lda #0 ; set Z true
   372  8186 60                 +   rts
   373                          
   374                          chksave:
   375  8187 20b58c                 jsr skipspaces
   376  818a b90002                 lda inputbuf, y
   377  818d c953                   cmp #'S'
   378  818f 60                     rts
   379                          
   380                          executesave:
   381  8190 20ae8d                 jsr newline
   382  8193 a522                   lda $22
   383  8195 48                     pha
   384  8196 a523                   lda $23
   385  8198 48                     pha
   386  8199 ad2e8e                 lda ptr1
   387  819c 8522                   sta $22
   388  819e ad2f8e                 lda ptr1+1
   389  81a1 8523                   sta $23
   390  81a3 a9c0                   lda #$c0 ; KERNAL control and error messages
   391  81a5 859d                   sta $9d ; set messages to be displayed
   392  81a7 a901                   lda #1
   393  81a9 ae4295                 ldx drive
   394  81ac a00f                   ldy #15
   395  81ae 20baff                 jsr setlfs
   396  81b1 a922                   lda #$22
   397  81b3 ae3c95                 ldx ptr2
   398  81b6 ac3d95                 ldy ptr2+1
   399  81b9 20d8ff                 jsr fsave
   400  81bc 68                     pla
   401  81bd 8523                   sta $23
   402  81bf 68                     pla
   403  81c0 8522                   sta $22
   404  81c2 4cae8d                 jmp newline
   405                          }
   406                          
   407                          disassemble:
   408  81c5 a917                   lda #23
   409  81c7 8d3695                 sta count
   410  81ca a000               -   ldy #0
   411  81cc 201d8e                 jsr lda_at_ptr1_y
   412  81cf 20ff81                 jsr find_opcode
   413  81d2 206982                 jsr disp_current
   414  81d5 ad3595                 lda size
   415  81d8 1002                   bpl +
   416  81da a901                   lda #1
   417  81dc 18                 +   clc
   418  81dd 6d2e8e                 adc ptr1
   419  81e0 8d2e8e                 sta ptr1
   420  81e3 9003                   bcc +
   421  81e5 ee2f8e                 inc ptr1+1
   422  81e8 ce3695             +   dec count
   423  81eb d0dd                   bne -
   424                          !ifdef C64SCREEN {
   425  81ed 4cd880                 jmp display_page_disassemble
   426                          } else {
   427                              rts
   428                          }
   429                          
   430                          compareptrs:
   431  81f0 ad2f8e                 lda ptr1+1
   432  81f3 cd3d95                 cmp ptr2+1
   433  81f6 d006                   bne +
   434  81f8 ad2e8e                 lda ptr1
   435  81fb cd3c95                 cmp ptr2
   436  81fe 60                 +   rts
   437                          
   438                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   439                          ; and properties updated in ZP globals size,inidx,opidx,mode
   440  81ff a097                   ldy #nopcodes
   441  8201 a296                   ldx #nopcodes-1
   442  8203 dd4d90             -   cmp opcodes,x
   443  8206 f010                   beq +
   444  8208 ca                     dex
   445  8209 88                     dey
   446  820a d0f7                   bne -
   447  820c 18                     clc
   448  820d a901                   lda #1
   449  820f 8d3595                 sta size
   450  8212 a9ff                   lda #$FF
   451  8214 aa                     tax
   452  8215 a8                     tay
   453  8216 900a                   bcc ++
   454  8218 bde490             +   lda instidx, x
   455  821b bc7b91                 ldy modeidx, x
   456  821e 202c82                 jsr getsize
   457  8221 38                     sec
   458  8222 8d3395             ++  sta inidx
   459  8225 8e3295                 stx opidx
   460  8228 8c3495                 sty mode
   461  822b 60                     rts
   462                          
   463                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   464                              ; result returned in size
   465  822c 48                     pha
   466  822d a901                   lda #1
   467  822f 8d3595                 sta size
   468  8232 68                     pla
   469  8233 c002                   cpy #2 // Immediate
   470  8235 900a                   bcc +
   471  8237 ee3595                 inc size
   472  823a c009                   cpy #9 // Absolute
   473  823c 9003                   bcc +
   474  823e ee3595                 inc size
   475  8241 60                 +   rts
   476                          
   477                          disp_opcode: ; .A opcode byte
   478  8242 20ff81                 jsr find_opcode
   479  8245 8a                     txa
   480                              ; fall through to display instruction
   481                          
   482                          dispinst: ; .A instruction index 0..55, note modifies A and X
   483  8246 aa                     tax
   484  8247 e038                   cpx #ninst
   485  8249 b012                   bcs +
   486  824b bd8c8e                 lda inst0, x
   487  824e 20d2ff                 jsr charout
   488  8251 bdc48e                 lda inst1, x
   489  8254 20d2ff                 jsr charout
   490  8257 bdfc8e                 lda inst2, x
   491  825a 4cd2ff                 jmp charout
   492  825d a93f               +   lda #'?'
   493  825f 20d2ff                 jsr charout
   494  8262 20d2ff                 jsr charout
   495  8265 20d2ff                 jsr charout
   496  8268 60                     rts
   497                          
   498                          disp_current:
   499  8269 ad2e8e                 lda ptr1
   500  826c ae2f8e                 ldx ptr1+1
   501  826f 20d183                 jsr disphexword
   502  8272 a920                   lda #$20
   503  8274 20d2ff                 jsr charout
   504  8277 a000                   ldy #0
   505  8279 ae3595                 ldx size
   506  827c 201d8e             -   jsr lda_at_ptr1_y
   507  827f 20d783                 jsr disphexbyte
   508  8282 a920                   lda #$20
   509  8284 20d2ff                 jsr charout
   510  8287 c8                     iny
   511  8288 ca                     dex
   512  8289 d0f1                   bne -
   513  828b c003               -   cpy #3
   514  828d f00e                   beq +
   515  828f a920                   lda #$20
   516  8291 20d2ff                 jsr charout
   517  8294 20d2ff                 jsr charout
   518  8297 20d2ff                 jsr charout
   519  829a c8                     iny
   520  829b d0ee                   bne -
   521  829d ad3395             +   lda inidx
   522  82a0 204682                 jsr dispinst
   523  82a3 a920                   lda #$20
   524  82a5 20d2ff                 jsr charout
   525  82a8 20b082                 jsr disp_mode
   526  82ab a90d                   lda #13
   527  82ad 4cd2ff                 jmp charout
   528                          
   529                          disp_mode
   530  82b0 ad3495                 lda mode
   531  82b3 c90d                   cmp #13
   532  82b5 b00a                   bcs +
   533  82b7 0a                     asl
   534  82b8 aa                     tax
   535  82b9 bd358f                 lda mode_jmptable+1,x
   536  82bc 48                     pha
   537  82bd bd348f                 lda mode_jmptable,x
   538  82c0 48                     pha
   539  82c1 60                 +   rts
   540                          
   541                          dispModeAcc:
   542  82c2 a941                   lda #'A'
   543  82c4 4cd2ff                 jmp charout
   544                          
   545                          dispModeNone:
   546  82c7 60                     rts
   547                          
   548                          dispModeImm:
   549  82c8 a923                   lda #'#'
   550  82ca 20d2ff                 jsr charout
   551                          dispModeZP:
   552  82cd a924                   lda #'$'
   553  82cf 20d2ff                 jsr charout
   554  82d2 a001                   ldy #1
   555  82d4 201d8e                 jsr lda_at_ptr1_y
   556  82d7 4cd783                 jmp disphexbyte
   557                          
   558                          dispModeIndX:
   559  82da a928                   lda #'('
   560  82dc 20d2ff                 jsr charout
   561  82df a924                   lda #'$'
   562  82e1 20d2ff                 jsr charout
   563  82e4 a001                   ldy #1
   564  82e6 201d8e                 jsr lda_at_ptr1_y
   565  82e9 20d783                 jsr disphexbyte
   566  82ec a92c                   lda #','
   567  82ee 20d2ff                 jsr charout
   568  82f1 a958                   lda #'X'
   569  82f3 20d2ff                 jsr charout
   570  82f6 a929                   lda #')'
   571  82f8 4cd2ff                 jmp charout
   572                          
   573                          dispModeIndY:
   574  82fb a928                   lda #'('
   575  82fd 20d2ff                 jsr charout
   576  8300 a924                   lda #'$'
   577  8302 20d2ff                 jsr charout
   578  8305 a001                   ldy #1
   579  8307 201d8e                 jsr lda_at_ptr1_y
   580  830a 20d783                 jsr disphexbyte
   581  830d a929                   lda #')'
   582  830f 20d2ff                 jsr charout
   583  8312 a92c                   lda #','
   584  8314 20d2ff                 jsr charout
   585  8317 a959                   lda #'Y'
   586  8319 4cd2ff                 jmp charout
   587                          
   588                          dispModeRel:
   589  831c a924                   lda #'$'
   590  831e 20d2ff                 jsr charout
   591  8321 18                     clc
   592  8322 ad2e8e                 lda ptr1
   593  8325 6902                   adc #2
   594  8327 8d428e                 sta ptr3
   595  832a ad2f8e                 lda ptr1+1
   596  832d 6900                   adc #0
   597  832f 8d438e                 sta ptr3+1
   598  8332 a001                   ldy #1
   599  8334 201d8e                 jsr lda_at_ptr1_y
   600  8337 1019                   bpl +
   601                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   602  8339 49ff                   eor #$FF ; inverse
   603  833b 18                     clc
   604  833c 6901                   adc #1 ; complete getting absolute value from two's complement
   605  833e 8d3b95                 sta tmp
   606  8341 38                     sec
   607  8342 ad428e                 lda ptr3
   608  8345 ed3b95                 sbc tmp
   609  8348 8d428e                 sta ptr3
   610  834b b011                   bcs ++
   611  834d ce438e                 dec ptr3+1
   612  8350 900c                   bcc ++
   613  8352 18                 +   clc ; simple case of adding
   614  8353 6d428e                 adc ptr3
   615  8356 8d428e                 sta ptr3
   616  8359 9003                   bcc ++
   617  835b ee438e                 inc ptr3+1
   618  835e ad428e             ++  lda ptr3
   619  8361 ae438e                 ldx ptr3+1
   620  8364 4cd183                 jmp disphexword
   621                          
   622                          dispModeZPX:
   623  8367 20cd82                 jsr dispModeZP
   624  836a a92c                   lda #','
   625  836c 20d2ff                 jsr charout
   626  836f a958                   lda #'X'
   627  8371 4cd2ff                 jmp charout
   628                          
   629                          dispModeZPY:
   630  8374 20cd82                 jsr dispModeZP
   631  8377 a92c                   lda #','
   632  8379 20d2ff                 jsr charout
   633  837c a959                   lda #'Y'
   634  837e 4cd2ff                 jmp charout
   635                          
   636                          dispModeAbs:
   637  8381 a924                   lda #'$'
   638  8383 20d2ff                 jsr charout
   639  8386 a001                   ldy #1
   640  8388 201d8e                 jsr lda_at_ptr1_y
   641  838b 48                     pha
   642  838c c8                     iny
   643  838d 201d8e                 jsr lda_at_ptr1_y
   644  8390 aa                     tax
   645  8391 68                     pla
   646  8392 4cd183                 jmp disphexword
   647                          
   648                          dispModeAbsX:
   649  8395 208183                 jsr dispModeAbs
   650  8398 a92c                   lda #','
   651  839a 20d2ff                 jsr charout
   652  839d a958                   lda #'X'
   653  839f 4cd2ff                 jmp charout
   654                          
   655                          dispModeAbsY:
   656  83a2 208183                 jsr dispModeAbs
   657  83a5 a92c                   lda #','
   658  83a7 20d2ff                 jsr charout
   659  83aa a959                   lda #'Y'
   660  83ac 4cd2ff                 jmp charout
   661                          
   662                          dispModeInd:
   663  83af a928                   lda #'('
   664  83b1 20d2ff                 jsr charout
   665  83b4 208183                 jsr dispModeAbs
   666  83b7 a929                   lda #')'
   667  83b9 4cd2ff                 jmp charout
   668                          
   669                          dispbinbyte: ; .A 00..FF
   670  83bc a208                   ldx #8
   671  83be 8d3b95                 sta tmp
   672  83c1 a930               -   lda #'0'
   673  83c3 2e3b95                 rol tmp
   674  83c6 9002                   bcc +
   675  83c8 a931                   lda #'1'
   676  83ca 20d2ff             +   jsr charout
   677  83cd ca                     dex
   678  83ce d0f1                   bne -
   679  83d0 60                     rts
   680                          
   681                          disphexword: ; .A low, .X high, 0000..FFFF
   682  83d1 48                     pha
   683  83d2 8a                     txa
   684  83d3 20d783                 jsr disphexbyte
   685  83d6 68                     pla
   686                              ;fall through to call again
   687                          
   688                          disphexbyte: ; .A 00..FF
   689  83d7 48                     pha
   690  83d8 4a                     lsr
   691  83d9 4a                     lsr
   692  83da 4a                     lsr
   693  83db 4a                     lsr
   694  83dc 20e083                 jsr disphexnybble
   695  83df 68                     pla
   696                              ;fall through to call again
   697                          
   698                          disphexnybble: ; .A 0..F
   699  83e0 290f                   and #$0F
   700  83e2 0930                   ora #$30
   701  83e4 c93a                   cmp #$3A
   702  83e6 9002                   bcc +
   703  83e8 6906                   adc #$06
   704  83ea 4cd2ff             +   jmp charout
   705                          
   706                          inputhexword: ; C set if fails
   707  83ed a900                   lda #0
   708  83ef 8d2e8e                 sta ptr1
   709  83f2 8d2f8e                 sta ptr1+1
   710                          
   711  83f5 a904                   lda #4 ; word is at most 4 nybbles
   712  83f7 8d3695                 sta count
   713  83fa 203d84             --  jsr inputhexnybble
   714  83fd b015                   bcs +
   715                          
   716                              ; shift nibble up
   717  83ff 0a                     asl
   718  8400 0a                     asl
   719  8401 0a                     asl
   720  8402 0a                     asl
   721                          
   722  8403 a204                   ldx #4 ; 4 bits rotated into word
   723  8405 2a                 -   rol
   724  8406 2e2e8e                 rol ptr1
   725  8409 2e2f8e                 rol ptr1+1
   726  840c ca                     dex
   727  840d d0f6                   bne - ; repeat bits
   728                          
   729  840f ce3695                 dec count
   730  8412 d0e6                   bne -- ; repeat nybbles
   731                          
   732  8414 ad3695             +   lda count
   733  8417 c904                   cmp #4 ; set C if 4, otherwise clear
   734  8419 60                     rts
   735                          
   736                          inputhexbyte:
   737  841a 203d84                 jsr inputhexnybble
   738  841d b01d                   bcs ++
   739  841f 8d3b95                 sta tmp
   740  8422 203d84                 jsr inputhexnybble
   741  8425 9006                   bcc +
   742  8427 18                     clc ; allow single digit as byte
   743  8428 ad3b95                 lda tmp
   744  842b 900f                   bcc ++
   745  842d 0e3b95             +   asl tmp
   746  8430 0e3b95                 asl tmp
   747  8433 0e3b95                 asl tmp
   748  8436 0e3b95                 asl tmp
   749  8439 0d3b95                 ora tmp ; necessary to assemble the two nybbles
   750  843c 60                 ++  rts
   751                          
   752                          inputhexnybble:
   753  843d b90002                 lda $0200,y
   754  8440 297f                   and #$7F
   755  8442 38                     sec
   756  8443 e930                   sbc #$30
   757  8445 9012                   bcc ++
   758  8447 c90a                   cmp #10
   759  8449 900c                   bcc +
   760  844b e907                   sbc #7
   761  844d 900a                   bcc ++
   762  844f c90a                   cmp #10
   763  8451 9006                   bcc ++
   764  8453 c910                   cmp #16
   765  8455 b002                   bcs ++
   766  8457 c8                 +   iny
   767  8458 60                     rts
   768  8459 38                 ++  sec
   769  845a 60                     rts
   770                          
   771                          strout:
   772  845b 8d428e                 sta ptr3
   773  845e 8e438e                 stx ptr3+1
   774                          strout2:
   775  8461 a000                   ldy #0
   776  8463 20318e             -   jsr lda_at_ptr3_y
   777  8466 f006                   beq +
   778  8468 20d2ff                 jsr charout
   779  846b c8                     iny
   780  846c d0f5                   bne -
   781  846e 98                 +   tya
   782  846f 38                     sec
   783  8470 6d428e                 adc ptr3
   784  8473 8d428e                 sta ptr3
   785  8476 9003                   bcc +
   786  8478 ee438e                 inc ptr3+1
   787  847b 60                 +   rts
   788                          
   789                          inputline:
   790                          !ifdef C64SCREEN {
   791  847c 4cfb80                 jmp inputlinec64
   792                          } else {
   793                              ldy #0
   794                          --  sty count
   795                          -   jsr getkey
   796                              beq -
   797                              ldy count
   798                          !ifdef MINIMUM {
   799                              cmp #8 ; backspace
   800                          } else {
   801                              cmp #20
   802                          }
   803                              bne +
   804                              cpy #0
   805                              beq -
   806                              dey
   807                          !if NEEDECHO = 1 {
   808                              jsr charout
   809                          }
   810                              jmp --
   811                          +   cmp #13
   812                              beq +
   813                              cmp #' '
   814                              bcc -
   815                              cmp #128
   816                              bcs -
   817                          +
   818                          !if NEEDECHO = 1 {
   819                              jsr charout
   820                          }
   821                              sta inputbuf,y
   822                              iny
   823                              cmp #13
   824                              bne --
   825                              rts
   826                          }
   827                          
   828                          parseline:
   829  847f c001                   cpy #1
   830  8481 d003                   bne +
   831                          -
   832                          !ifdef C64SCREEN {
   833  8483 4cae8d                 jmp newline
   834                          } else {
   835                              rts
   836                          }
   837  8486 88                 +   dey
   838  8487 8c3795                 sty len
   839                              ; skip whitespace
   840                              ; check for address, put in ptr1
   841                              ; or check for dot, then require address put in ptr2
   842                              ; or check for ?, and optional parameter, execute help
   843                              ; check for whitespace
   844                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   845                              ; check for string, store at start of inputbuf
   846                              ; check for drive number
   847                              ; check for whitespace
   848                              ; check command ":rda?mls", execute command
   849  848a a000                   ldy #0
   850  848c 20b58c                 jsr skipspaces
   851  848f cc3795                 cpy len
   852  8492 f0ef                   beq -
   853  8494 20598c                 jsr chkcontinuedis
   854  8497 d003                   bne +
   855  8499 207d8c                 jsr executedisassemble ; note won't return
   856  849c 206b8c             +   jsr chkcontinueasm
   857  849f d003                   bne +
   858  84a1 202688                 jsr continueassemble ; note won't return
   859  84a4 20c984             +   jsr chkexecutepc ; not won't return
   860  84a7 20c48c                 jsr chkdot
   861  84aa d003                   bne +
   862  84ac 4cc385                 jmp executedot
   863  84af 20cf8c             +   jsr chkhelp
   864  84b2 d003                   bne +
   865  84b4 4c9086                 jmp executehelp
   866                          +
   867                          !ifndef MINIMUM {
   868  84b7 209a80                 jsr chkextrac64 ; check syntax only available on C64
   869  84ba b01e                   bcs + ; error if C set
   870  84bc f005                   beq ++ ; consumed if Z set, skip next test(s)
   871                          }
   872  84be 20028d                 jsr chkhexaddr1
   873  84c1 d003                   bne error
   874  84c3 4cdb84             ++  jmp executeaddr1
   875                          error:
   876  84c6 4c8c8c                 jmp reporterr
   877                          
   878                          chkexecutepc:
   879  84c9 b90002                 lda inputbuf, y
   880  84cc c952                   cmp #'R'
   881  84ce d00a                   bne +
   882  84d0 b90102                 lda inputbuf+1, y
   883  84d3 c90d                   cmp #13
   884  84d5 d003                   bne +
   885  84d7 4c3a8c                 jmp executerun
   886  84da 60                 +   rts
   887                          
   888                          executeaddr1:
   889  84db cc3795                 cpy len
   890  84de d003                   bne +
   891  84e0 4c3f85                 jmp executedisplay1
   892  84e3 20c48c             +   jsr chkdot
   893  84e6 d011                   bne +
   894  84e8 cc3795                 cpy len
   895  84eb f022                   beq executepagedisplay
   896  84ed 20248d                 jsr chkhexaddr2
   897  84f0 d0d4                   bne error
   898  84f2 18                     clc
   899  84f3 6e3a95                 ror flag
   900  84f6 4c2e85                 jmp executeaddr12
   901  84f9 20b58c             +   jsr skipspaces
   902  84fc 20da8c                 jsr chkcolon
   903  84ff d003                   bne +
   904  8501 4c9b85                 jmp executemodify
   905  8504 20718d             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   906                          !ifdef MINIMUM {
   907                              jmp reportnotimplemented
   908                          } else {
   909  8507 202581                 jsr chkfilename
   910  850a d0ba                   bne error
   911  850c 4cd385                 jmp executeloadfilename
   912                          }
   913                          
   914                          executepagedisplay:
   915  850f ad2e8e                 lda ptr1
   916  8512 18                     clc
   917                          !ifdef MINIMUM {
   918                              adc #$5f
   919                          } else {
   920  8513 69b7                   adc #$b7
   921                          }
   922  8515 8d3c95                 sta ptr2
   923  8518 ad2f8e                 lda ptr1+1
   924                          !ifdef MINIMUM {
   925                              adc #$01
   926                          } else {
   927  851b 6900                   adc #$00
   928                          }
   929  851d 8d3d95                 sta ptr2+1
   930  8520 9008                   bcc +
   931  8522 a9ff                   lda #$ff
   932  8524 8d3c95                 sta ptr2
   933  8527 8d3d95                 sta ptr2+1
   934  852a 38                 +   sec
   935  852b 6e3a95                 ror flag
   936                              ; fall through to executeaddr12
   937                          
   938                          executeaddr12:
   939  852e cc3795                 cpy len
   940  8531 d003                   bne +
   941  8533 4c4b85                 jmp executedisplay12
   942                          !ifndef MINIMUM { // any C64
   943  8536 205881             +   jsr check_execute_save
   944  8539 f003                   beq ++
   945                          }
   946  853b 4c858c             +   jmp reportnotimplemented
   947  853e 60                 ++  rts
   948                          
   949                          executedisplay1:
   950  853f ad2e8e                 lda ptr1
   951  8542 8d3c95                 sta ptr2
   952  8545 ad2f8e                 lda ptr1+1
   953  8548 8d3d95                 sta ptr2+1
   954                              ; fall through executedisplay12
   955                          
   956                          executedisplay12:
   957  854b a9ff                   lda #$ff
   958  854d 8d3695                 sta count
   959  8550 ee3695             -   inc count
   960  8553 ad3695                 lda count
   961                          !ifdef MINIMUM {
   962                              and #$0f
   963                          } else {
   964  8556 2907                   and #$07
   965                          }
   966  8558 d018                   bne +
   967  855a a90d                   lda #13
   968  855c 20d2ff                 jsr charout
   969  855f ad2e8e                 lda ptr1
   970  8562 ae2f8e                 ldx ptr1+1
   971  8565 20d183                 jsr disphexword
   972  8568 a93a                   lda #':'
   973  856a 20d2ff                 jsr charout
   974  856d a920                   lda #' '
   975  856f 20d2ff                 jsr charout
   976  8572 a000               +   ldy #0
   977  8574 201d8e                 jsr lda_at_ptr1_y
   978  8577 20d783                 jsr disphexbyte
   979  857a a920                   lda #' '
   980  857c 20d2ff                 jsr charout
   981  857f ee2e8e                 inc ptr1
   982  8582 d005                   bne +
   983  8584 ee2f8e                 inc ptr1+1
   984  8587 f00f                   beq ++
   985  8589 20f081             +   jsr compareptrs
   986  858c 90c2                   bcc -
   987  858e f0c0                   beq -
   988  8590 2c3a95                 bit flag
   989  8593 1003                   bpl ++
   990                          !ifdef C64SCREEN {
   991  8595 4ce880                 jmp display_page_displaymemory
   992                          }
   993  8598 4cae8d             ++  jmp newline
   994                          
   995                          executemodify:
   996  859b 20b58c                 jsr skipspaces
   997  859e cc3795                 cpy len
   998  85a1 f01d                   beq ++
   999  85a3 20e58c                 jsr chkhexbyteofsequence
  1000  85a6 f003                   beq +
  1001  85a8 4cc684                 jmp error
  1002  85ab 8c3b95             +   sty tmp
  1003  85ae a000                   ldy #0
  1004  85b0 202d8e                 jsr sta_at_ptr1_y
  1005  85b3 ee2e8e                 inc ptr1
  1006  85b6 d003                   bne +
  1007  85b8 ee2f8e                 inc ptr1+1
  1008  85bb ac3b95             +   ldy tmp
  1009  85be d0db                   bne executemodify
  1010  85c0 4cae8d             ++  jmp newline
  1011                          
  1012                          executedot:
  1013  85c3 cc3795                 cpy len
  1014  85c6 d003                   bne +
  1015  85c8 4c0f85                 jmp executepagedisplay
  1016  85cb 20d685             +   jsr chkloadregister
  1017  85ce d000                   bne +
  1018  85d0 203686             +   jsr chkloadregisters
  1019                          
  1020                          executeloadfilename:
  1021                          executeaddr1cmd:
  1022  85d3 4c858c             +   jmp reportnotimplemented
  1023                          
  1024                          chkloadregister:
  1025  85d6 20e085                 jsr chkload_a_x_y_s_p
  1026  85d9 203086                 jsr chkload_pc
  1027  85dc 203386                 jsr chkload_n_v_b_d_i_z_c
  1028  85df 60                     rts
  1029                          
  1030                          chkload_a_x_y_s_p:
  1031  85e0 8c3b95                 sty tmp
  1032  85e3 b90002                 lda inputbuf, y
  1033  85e6 a200                   ldx #0
  1034  85e8 c941                   cmp #'A'
  1035  85ea f014                   beq +
  1036  85ec e8                     inx
  1037  85ed c958                   cmp #'X'
  1038  85ef f00f                   beq +
  1039  85f1 e8                     inx
  1040  85f2 c959                   cmp #'Y'
  1041  85f4 f00a                   beq +
  1042  85f6 e8                     inx
  1043  85f7 c953                   cmp #'S'
  1044  85f9 f005                   beq +
  1045  85fb e8                     inx
  1046  85fc c950                   cmp #'P'
  1047  85fe d02c                   bne ++
  1048  8600 c8                 +   iny
  1049  8601 b90002                 lda inputbuf, y
  1050                          !ifndef MINIMUM {
  1051  8604 c9a0                   cmp #$A0
  1052  8606 f008                   beq +
  1053                          }
  1054  8608 c920                   cmp #' '
  1055  860a f004                   beq +
  1056  860c c93a                   cmp #':'
  1057  860e d01c                   bne ++
  1058  8610 c8                 +   iny
  1059  8611 20b58c                 jsr skipspaces
  1060  8614 8e3495                 stx mode
  1061  8617 200b8d                 jsr chkhexbyte
  1062  861a d010                   bne ++
  1063  861c ae3495                 ldx mode
  1064  861f 9d4395                 sta registerA, x
  1065                          !ifndef MINIMUM {
  1066  8622 20ae8d                 jsr newline
  1067                          }
  1068                              ; pop call stack so return to input_loop
  1069  8625 68                     pla
  1070  8626 68                     pla
  1071  8627 68                     pla
  1072  8628 68                     pla
  1073  8629 4c2f86                 jmp +++
  1074  862c ac3b95             ++  ldy tmp ; not Z (NE)
  1075  862f 60                 +++ rts
  1076                          
  1077                          chkload_pc:
  1078  8630 a901                   lda #1 ; not Z (NE)
  1079  8632 60                     rts
  1080                          
  1081                          chkload_n_v_b_d_i_z_c:
  1082  8633 a901                   lda #1 ; not Z (NE)
  1083  8635 60                     rts
  1084                          
  1085                          chkloadregisters:
  1086  8636 20028d                 jsr chkhexword
  1087  8639 d054                   bne ++
  1088  863b ad2e8e                 lda ptr1
  1089  863e 8d4895                 sta registerPC
  1090  8641 ad2f8e                 lda ptr1+1
  1091  8644 8d4995                 sta registerPC+1
  1092  8647 20a38c                 jsr chkspace
  1093  864a d03c                   bne +
  1094  864c 204d8d                 jsr chkbinbyte
  1095  864f d037                   bne +
  1096  8651 8d4795                 sta registerSR
  1097  8654 20a38c                 jsr chkspace
  1098  8657 d02f                   bne +
  1099  8659 200b8d                 jsr chkhexbyte
  1100  865c d02a                   bne +
  1101  865e 8d4395                 sta registerA
  1102  8661 20a38c                 jsr chkspace
  1103  8664 d022                   bne +
  1104  8666 200b8d                 jsr chkhexbyte
  1105  8669 d01d                   bne +
  1106  866b 8d4495                 sta registerX
  1107  866e 20a38c                 jsr chkspace
  1108  8671 d015                   bne +
  1109  8673 200b8d                 jsr chkhexbyte
  1110  8676 d010                   bne +
  1111  8678 8d4595                 sta registerY
  1112  867b 20a38c                 jsr chkspace
  1113  867e d008                   bne +
  1114  8680 200b8d                 jsr chkhexbyte
  1115  8683 d003                   bne +
  1116  8685 8d4695                 sta registerSP
  1117                              ; don't return to executedot
  1118  8688 68                 +   pla
  1119  8689 68                     pla
  1120                          !ifdef C64SCREEN {
  1121  868a 20ae8d                 jsr newline
  1122                          }
  1123  868d a900                   lda #0 ; set Z
  1124  868f 60                 ++  rts
  1125                          
  1126                          executehelp:
  1127                          !ifdef C64SCREEN {
  1128  8690 20ae8d                 jsr newline
  1129                          }
  1130  8693 cc3795                 cpy len
  1131  8696 d003                   bne +
  1132  8698 4cc186                 jmp displayhelp
  1133  869b 20b58c             +   jsr skipspaces
  1134  869e 20dc86                 jsr chkhelpinstructions
  1135  86a1 d003                   bne +
  1136  86a3 4c2087                 jmp displayinstructions
  1137  86a6 20f686             +   jsr chkhelpmodes
  1138  86a9 d003                   bne +
  1139  86ab 4c3787                 jmp displaymodes
  1140  86ae 20b98b             +   jsr chkinstruction
  1141  86b1 d003                   bne +
  1142  86b3 4cf387                 jmp executehelpinstruction
  1143  86b6 20e986             +   jsr chkhelpregisters
  1144  86b9 d003                   bne +
  1145  86bb 4ccd8d                 jmp execute_display_registers
  1146  86be 4c858c             +   jmp reportnotimplemented
  1147                          
  1148                          displayhelp:
  1149  86c1 a9e0                   lda #<generalhelp
  1150  86c3 a292                   ldx #>generalhelp
  1151  86c5 205b84                 jsr strout
  1152  86c8 a9d5                   lda #<generalhelp2
  1153  86ca a293                   ldx #>generalhelp2
  1154  86cc 205b84                 jsr strout
  1155  86cf a99f                   lda #<generalhelp3
  1156  86d1 a294                   ldx #>generalhelp3
  1157  86d3 205b84                 jsr strout
  1158                          !ifndef MINIMUM { // any C64
  1159  86d6 20d180                 jsr display_extra_help
  1160                          }
  1161  86d9 4cae8d                 jmp newline
  1162                          
  1163                          chkhelpinstructions:
  1164  86dc b90002                 lda inputbuf, y
  1165  86df c941                   cmp #'A'
  1166  86e1 d005                   bne +
  1167  86e3 b90102                 lda inputbuf+1, y
  1168  86e6 c90d                   cmp #13
  1169                              ; no need to increment y if found, done parsing line
  1170  86e8 60                 +   rts
  1171                          
  1172                          chkhelpregisters:
  1173  86e9 b90002                 lda inputbuf, y
  1174  86ec c92e                   cmp #'.'
  1175  86ee d005                   bne +
  1176  86f0 b90102                 lda inputbuf+1, y
  1177  86f3 c90d                   cmp #13
  1178  86f5 60                 +   rts
  1179                          
  1180                          chkhelpmodes:
  1181  86f6 a910                   lda #<modes_keyword
  1182  86f8 a295                   ldx #>modes_keyword
  1183                              ; fall through to chkkeyword
  1184                          
  1185                          chkkeyword:
  1186  86fa 8c3695                 sty count
  1187  86fd 8d428e                 sta ptr3
  1188  8700 8e438e                 stx ptr3+1
  1189  8703 ae3695                 ldx count
  1190  8706 a000                   ldy #0
  1191  8708 20318e             -   jsr lda_at_ptr3_y
  1192  870b dd0002                 cmp inputbuf, x
  1193  870e d00a                   bne +
  1194  8710 e8                     inx
  1195  8711 c8                     iny
  1196  8712 ec3795                 cpx len
  1197  8715 d0f1                   bne -
  1198  8717 20318e                 jsr lda_at_ptr3_y ; matched if end of string, will set Z
  1199  871a 08                 +   php ; save Z
  1200  871b ac3695                 ldy count
  1201  871e 28                     plp ; restore Z
  1202  871f 60                     rts
  1203                          
  1204                          displayinstructions:
  1205  8720 a038                   ldy #ninst
  1206  8722 a200                   ldx #0
  1207  8724 8a                 -   txa
  1208  8725 48                     pha
  1209  8726 204682                 jsr dispinst
  1210  8729 a920                   lda #' '
  1211  872b 20d2ff                 jsr charout
  1212  872e 68                     pla
  1213  872f aa                     tax
  1214  8730 e8                     inx
  1215  8731 88                     dey
  1216  8732 d0f0                   bne -
  1217  8734 4cae8d                 jmp newline
  1218                          
  1219                          displaymodes:
  1220  8737 38                     sec
  1221  8738 a900                   lda #0
  1222  873a 48                 -   pha
  1223  873b aa                     tax
  1224  873c bd4e8f                 lda mode_sorted, x
  1225  873f 204c87                 jsr dispmode
  1226  8742 68                     pla
  1227  8743 18                     clc
  1228  8744 6901                   adc #1
  1229  8746 c90d                   cmp #nmodes
  1230  8748 90f0                   bcc -
  1231  874a 18                     clc
  1232  874b 60                     rts
  1233                          
  1234                          dispmode:
  1235  874c c90d                   cmp #nmodes
  1236  874e b009                   bcs +
  1237  8750 8d3495                 sta mode
  1238  8753 209b87                 jsr disp_modename_and_example
  1239  8756 4c5a87                 jmp dispmodeinstructions
  1240  8759 60                 +   rts
  1241                          
  1242                          dispmodeinstructions:
  1243                          !ifdef C64SCREEN {
  1244                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1245  875a ad3495                 lda mode
  1246  875d c903                   cmp #3
  1247  875f d005                   bne +
  1248  8761 a920                   lda #' '
  1249  8763 4cd2ff                 jmp charout
  1250                          }
  1251                              ; display instructions with this mode
  1252  8766 a000               +   ldy #0
  1253  8768 8c3395             --  sty inidx
  1254  876b a200                   ldx #0
  1255  876d 8e3b95             -   stx tmp
  1256  8770 ad3395                 lda inidx
  1257  8773 dde490                 cmp instidx, x
  1258  8776 d016                   bne ++
  1259  8778 bd7b91                 lda modeidx, x
  1260  877b cd3495                 cmp mode
  1261  877e d00e                   bne ++
  1262  8780 a920                   lda #' '
  1263  8782 20d2ff                 jsr charout
  1264  8785 bde490                 lda instidx, x
  1265  8788 204682                 jsr dispinst
  1266  878b ae3b95                 ldx tmp
  1267  878e e8                 ++  inx
  1268  878f e097                   cpx #nopcodes
  1269  8791 90da                   bcc -
  1270  8793 c8                     iny
  1271  8794 c038                   cpy #ninst
  1272  8796 d0d0                   bne --
  1273  8798 4cae8d                 jmp newline
  1274                          
  1275                          disp_modename_and_example:
  1276  879b 0a                     asl
  1277  879c aa                     tax
  1278  879d bd3390                 lda modes, x
  1279  87a0 48                     pha
  1280  87a1 bd3490                 lda modes+1, x
  1281  87a4 aa                     tax
  1282                          !ifdef C64SCREEN {
  1283  87a5 a912                   lda #18
  1284  87a7 20d2ff                 jsr charout
  1285                          }
  1286  87aa 68                     pla
  1287  87ab 205b84                 jsr strout
  1288  87ae a920                   lda #' '
  1289  87b0 20d2ff                 jsr charout
  1290  87b3 206184                 jsr strout2
  1291                          !ifdef C64SCREEN {
  1292  87b6 a992                   lda #146
  1293  87b8 20d2ff                 jsr charout
  1294                          }
  1295  87bb 60                     rts
  1296                          
  1297                          disp_modename_instruction_example:
  1298  87bc 0a                     asl
  1299  87bd aa                     tax
  1300  87be bd3390                 lda modes, x
  1301  87c1 48                     pha
  1302  87c2 bd3490                 lda modes+1, x
  1303  87c5 aa                     tax
  1304  87c6 68                     pla
  1305  87c7 205b84                 jsr strout ; mode name
  1306  87ca ad428e                 lda ptr3
  1307  87cd 48                     pha
  1308  87ce ad438e                 lda ptr3+1
  1309  87d1 48                     pha
  1310  87d2 a93a                   lda #':'
  1311  87d4 20d2ff                 jsr charout
  1312  87d7 a920                   lda #' '
  1313  87d9 20d2ff                 jsr charout
  1314  87dc ad3395                 lda inidx
  1315  87df 204682                 jsr dispinst ; instruction
  1316  87e2 a920                   lda #' '
  1317  87e4 20d2ff                 jsr charout
  1318  87e7 68                     pla
  1319  87e8 8d438e                 sta ptr3+1
  1320  87eb 68                     pla
  1321  87ec 8d428e                 sta ptr3
  1322  87ef 206184                 jsr strout2 ; example
  1323  87f2 60                     rts
  1324                          
  1325                          
  1326                          executehelpinstruction:
  1327  87f3 a000                   ldy #0
  1328  87f5 8c3295             -   sty opidx
  1329  87f8 b9e490                 lda instidx, y
  1330  87fb cd3395                 cmp inidx
  1331  87fe d01d                   bne +
  1332  8800 b97b91                 lda modeidx, y
  1333  8803 8d3495                 sta mode
  1334  8806 ae3295                 ldx opidx
  1335  8809 bd4d90                 lda opcodes, x
  1336  880c 20d783                 jsr disphexbyte
  1337  880f a920                   lda #' '
  1338  8811 20d2ff                 jsr charout
  1339  8814 ad3495                 lda mode
  1340  8817 20bc87                 jsr disp_modename_instruction_example
  1341  881a 20ae8d                 jsr newline
  1342  881d ac3295             +   ldy opidx
  1343  8820 c8                     iny
  1344  8821 c097                   cpy #nopcodes
  1345  8823 90d0                   bcc -
  1346  8825 60                     rts
  1347                          
  1348                          continueassemble:
  1349                          !ifdef C64SCREEN {
  1350  8826 200981                 jsr continueassemblec64
  1351                          }
  1352                              ; continue...
  1353                          
  1354                          executeassemble:
  1355  8829 68                     pla ; remove low byte return address
  1356  882a 68                     pla ; return high byte return address
  1357                          !ifdef C64SCREEN {
  1358  882b a914                   lda #20
  1359  882d 20d2ff                 jsr charout
  1360  8830 20d2ff                 jsr charout
  1361                          } else {
  1362                              lda ptr1
  1363                              ldx ptr1+1
  1364                              jsr disphexword
  1365                              lda #' '
  1366                              jsr charout
  1367                          }
  1368                              ; save current pointer
  1369  8833 ad2e8e             --  lda ptr1
  1370  8836 ae2f8e                 ldx ptr1+1
  1371  8839 8d428e                 sta ptr3
  1372  883c 8e438e                 stx ptr3+1
  1373  883f 207c84                 jsr inputline
  1374  8842 c001                   cpy #1
  1375  8844 f055                   beq ++
  1376  8846 88                     dey
  1377  8847 8c3795                 sty len
  1378  884a a000                   ldy #0
  1379  884c 20b58c                 jsr skipspaces
  1380  884f cc3795                 cpy len
  1381  8852 f047                   beq ++
  1382                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1383                              ;jsr skipspaces
  1384  8854 20b98b                 jsr chkinstruction
  1385  8857 f00f                   beq +
  1386  8859 ad428e             -   lda ptr3
  1387  885c 8d2e8e                 sta ptr1
  1388  885f ad438e                 lda ptr3+1
  1389  8862 8d2f8e                 sta ptr1+1
  1390  8865 4cc684                 jmp error
  1391  8868 20ce88             +   jsr chkaddressing
  1392  886b d0ec                   bne -
  1393  886d 20ee8b                 jsr find_inst_and_mode
  1394  8870 d0e7                   bne -
  1395  8872 209e88                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1396  8875 18                     clc
  1397  8876 ad3595                 lda size
  1398  8879 6d428e                 adc ptr3
  1399  887c 8d2e8e                 sta ptr1
  1400  887f ad438e                 lda ptr3+1
  1401  8882 6900                   adc #0
  1402  8884 8d2f8e                 sta ptr1+1
  1403                          !ifdef C64SCREEN {
  1404  8887 20ae8d                 jsr newline
  1405                          }
  1406  888a ad2e8e                 lda ptr1
  1407  888d ae2f8e                 ldx ptr1+1
  1408  8890 20d183                 jsr disphexword
  1409  8893 a920                   lda #' '
  1410  8895 20d2ff                 jsr charout
  1411  8898 4c3388                 jmp --
  1412                          ++
  1413                          !ifdef C64SCREEN {
  1414  889b 4cae8d                 jmp newline
  1415                          } else {
  1416                              rts
  1417                          }
  1418                          
  1419                          store_assembly:
  1420  889e ae3295                 ldx opidx
  1421  88a1 bd4d90                 lda opcodes, x
  1422  88a4 a000                   ldy #0
  1423  88a6 20418e                 jsr sta_at_ptr3_y
  1424  88a9 c8                     iny
  1425  88aa ae3595                 ldx size
  1426  88ad e001                   cpx #1
  1427  88af f01c                   beq ++
  1428  88b1 e002               +   cpx #2
  1429  88b3 d007                   bne +
  1430  88b5 ad3995                 lda tmp2
  1431  88b8 20418e                 jsr sta_at_ptr3_y
  1432  88bb 60                     rts
  1433  88bc e003               +   cpx #3
  1434  88be d00d                   bne ++
  1435  88c0 ad2e8e                 lda ptr1
  1436  88c3 20418e                 jsr sta_at_ptr3_y
  1437  88c6 c8                     iny
  1438  88c7 ad2f8e                 lda ptr1+1
  1439  88ca 20418e                 jsr sta_at_ptr3_y
  1440  88cd 60                 ++  rts
  1441                          
  1442                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1443  88ce 20b58c                 jsr skipspaces
  1444  88d1 a200                   ldx #0
  1445  88d3 8e3495                 stx mode
  1446  88d6 203f89                 jsr chkaccumulator
  1447  88d9 f05e                   beq +
  1448  88db ee3495                 inc mode
  1449  88de cc3795                 cpy len ; chknone
  1450  88e1 f056                   beq +
  1451  88e3 ee3495                 inc mode
  1452  88e6 206589                 jsr chkimmediate
  1453  88e9 f04e                   beq +
  1454  88eb ee3495                 inc mode
  1455  88ee 208c89                 jsr chkindirectx
  1456  88f1 f046                   beq +
  1457  88f3 ee3495                 inc mode
  1458  88f6 20d489                 jsr chkindirecty
  1459  88f9 f03e                   beq +
  1460  88fb ee3495                 inc mode
  1461  88fe 201c8a                 jsr chkrelative
  1462  8901 f036                   beq +
  1463  8903 ee3495                 inc mode
  1464  8906 20878a                 jsr chkzeropage
  1465  8909 f02e                   beq +
  1466  890b ee3495                 inc mode
  1467  890e 20a38a                 jsr chkzeropagex
  1468  8911 f026                   beq +
  1469  8913 ee3495                 inc mode
  1470  8916 20d58a                 jsr chkzeropagey
  1471  8919 f01e                   beq +
  1472  891b ee3495                 inc mode
  1473  891e 20078b                 jsr chkabsolute
  1474  8921 f016                   beq +
  1475  8923 ee3495                 inc mode
  1476  8926 20238b                 jsr chkabsolutex
  1477  8929 f00e                   beq +
  1478  892b ee3495                 inc mode
  1479  892e 20558b                 jsr chkabsolutey
  1480  8931 f006                   beq +
  1481  8933 ee3495                 inc mode
  1482  8936 20878b                 jsr chkindirect
  1483  8939 08                 +   php ; save Z
  1484  893a ad3495                 lda mode
  1485  893d 28                     plp ; restore Z
  1486  893e 60                     rts
  1487                          
  1488                          chkaccumulator:
  1489  893f cc3795                 cpy len
  1490  8942 d014                   bne +
  1491  8944 ad3395                 lda inidx
  1492  8947 c902                   cmp #2 ; ASL
  1493  8949 f019                   beq ++
  1494  894b c920                   cmp #32 ; LSR
  1495  894d f015                   beq ++
  1496  894f c927                   cmp #39 ; ROL
  1497  8951 f011                   beq ++
  1498  8953 c928                   cmp #40 ; ROR
  1499  8955 4c6489                 jmp ++
  1500  8958 b90002             +   lda inputbuf, y
  1501  895b c941                   cmp #'A'
  1502  895d d005                   bne ++
  1503  895f b90102                 lda inputbuf+1,y
  1504  8962 c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1505  8964 60                 ++  rts
  1506                          
  1507                          chkimmediate:
  1508  8965 8c3895                 sty savepos
  1509  8968 b90002                 lda inputbuf, y
  1510  896b c923                   cmp #'#'
  1511  896d d017                   bne ++
  1512  896f c8                     iny
  1513  8970 20b58c                 jsr skipspaces
  1514  8973 b90002                 lda inputbuf, y
  1515  8976 c924                   cmp #'$'
  1516  8978 d001                   bne +
  1517  897a c8                     iny
  1518  897b 200b8d             +   jsr chkhexbyte
  1519  897e d006                   bne ++
  1520  8980 cc3795             +   cpy len
  1521  8983 d001                   bne ++
  1522  8985 60                     rts
  1523  8986 ac3895             ++  ldy savepos
  1524  8989 a201                   ldx #1 ; Z false (NE)
  1525  898b 60                     rts
  1526                          
  1527                          chkindirectx:
  1528  898c 8c3895                 sty savepos
  1529  898f b90002                 lda inputbuf, y
  1530  8992 c928                   cmp #'('
  1531  8994 d038                   bne ++
  1532  8996 c8                     iny
  1533  8997 20b58c                 jsr skipspaces
  1534  899a b90002                 lda inputbuf, y
  1535  899d c924                   cmp #'$'
  1536  899f d001                   bne +
  1537  89a1 c8                     iny
  1538  89a2 200b8d             +   jsr chkhexbyte
  1539  89a5 d027                   bne ++
  1540  89a7 20b58c                 jsr skipspaces
  1541  89aa b90002                 lda inputbuf, y
  1542  89ad c92c                   cmp #','
  1543  89af d01d                   bne ++
  1544  89b1 c8                     iny
  1545  89b2 20b58c                 jsr skipspaces
  1546  89b5 b90002                 lda inputbuf, y
  1547  89b8 c958                   cmp #'X'
  1548  89ba d012                   bne ++
  1549  89bc c8                     iny
  1550  89bd 20b58c                 jsr skipspaces
  1551  89c0 b90002                 lda inputbuf, y
  1552  89c3 c929                   cmp #')'
  1553  89c5 d007                   bne ++
  1554  89c7 c8                     iny
  1555  89c8 cc3795                 cpy len
  1556  89cb d001                   bne ++
  1557  89cd 60                     rts
  1558  89ce ac3895             ++  ldy savepos
  1559  89d1 a201                   ldx #1 ; Z false (NE)
  1560  89d3 60                     rts
  1561                          
  1562                          chkindirecty:
  1563  89d4 8c3895                 sty savepos
  1564  89d7 b90002                 lda inputbuf, y
  1565  89da c928                   cmp #'('
  1566  89dc d038                   bne ++
  1567  89de c8                     iny
  1568  89df 20b58c                 jsr skipspaces
  1569  89e2 b90002                 lda inputbuf, y
  1570  89e5 c924                   cmp #'$'
  1571  89e7 d001                   bne +
  1572  89e9 c8                     iny
  1573  89ea 200b8d             +   jsr chkhexbyte
  1574  89ed d027                   bne ++
  1575  89ef 20b58c                 jsr skipspaces
  1576  89f2 b90002                 lda inputbuf, y
  1577  89f5 c929                   cmp #')'
  1578  89f7 d01d                   bne ++
  1579  89f9 c8                     iny
  1580  89fa 20b58c                 jsr skipspaces
  1581  89fd b90002                 lda inputbuf, y
  1582  8a00 c92c                   cmp #','
  1583  8a02 d012                   bne ++
  1584  8a04 c8                     iny
  1585  8a05 20b58c                 jsr skipspaces
  1586  8a08 b90002                 lda inputbuf, y
  1587  8a0b c959                   cmp #'Y'
  1588  8a0d d007                   bne ++
  1589  8a0f c8                     iny
  1590  8a10 cc3795                 cpy len
  1591  8a13 d001                   bne ++
  1592  8a15 60                     rts
  1593  8a16 ac3895             ++  ldy savepos
  1594  8a19 a201                   ldx #1 ; Z false (NE)
  1595  8a1b 60                     rts
  1596                          
  1597                          chkrelative:
  1598  8a1c 8c3895                 sty savepos
  1599  8a1f ae3395                 ldx inidx
  1600  8a22 e006                   cpx #6 ; BIT
  1601  8a24 f01f                   beq ++
  1602  8a26 bd8c8e                 lda inst0, x
  1603  8a29 c942                   cmp #'B'
  1604  8a2b d018                   bne ++
  1605  8a2d b90002                 lda inputbuf, y
  1606  8a30 c924                   cmp #'$'
  1607  8a32 d001                   bne +
  1608  8a34 c8                     iny
  1609  8a35 20028d             +   jsr chkhexword
  1610  8a38 d00b                   bne ++
  1611  8a3a cc3795                 cpy len
  1612  8a3d d006                   bne ++
  1613  8a3f 204b8a                 jsr computeoffset
  1614  8a42 d001                   bne ++
  1615  8a44 60                     rts ; Z true (EQ)
  1616  8a45 ac3895             ++  ldy savepos
  1617  8a48 a201                   ldx #1 ; Z false (NE)
  1618  8a4a 60                     rts
  1619                          
  1620                          computeoffset:
  1621                          ;   compute next address
  1622  8a4b ad438e                 lda ptr3+1
  1623  8a4e 8d3d95                 sta ptr2+1
  1624  8a51 ad428e                 lda ptr3
  1625  8a54 18                     clc
  1626  8a55 6902                   adc #2
  1627  8a57 8d3c95                 sta ptr2
  1628  8a5a 9003                   bcc +
  1629  8a5c ee3d95                 inc ptr2+1
  1630                          +  ; subtract argument
  1631  8a5f 38                     sec
  1632  8a60 ad2e8e                 lda ptr1
  1633  8a63 ed3c95                 sbc ptr2
  1634  8a66 8d3995                 sta tmp2
  1635  8a69 ad2f8e                 lda ptr1+1
  1636  8a6c ed3d95                 sbc ptr2+1
  1637  8a6f f00b                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1638  8a71 c9ff                   cmp #$FF
  1639  8a73 d00f                   bne failedoffset ; 0 and FF were only options so fail
  1640                              ; chkeck negative offset
  1641  8a75 ad3995                 lda tmp2
  1642  8a78 3007                   bmi successoffset ; branch if signed byte is negative
  1643  8a7a 1008                   bpl failedoffset ; otherwise fail
  1644                          chkoffsetto127:
  1645  8a7c ad3995                 lda tmp2
  1646  8a7f 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1647                          successoffset:
  1648  8a81 a900                   lda #0 ; Z true (EQ)
  1649  8a83 60                     rts
  1650                          failedoffset:
  1651  8a84 a901                   lda #1 ; Z false (NE)
  1652  8a86 60                     rts
  1653                          
  1654                          chkzeropage:
  1655  8a87 8c3895                 sty savepos
  1656  8a8a b90002                 lda inputbuf, y
  1657  8a8d c924                   cmp #'$'
  1658  8a8f d001                   bne +
  1659  8a91 c8                     iny
  1660  8a92 200b8d             +   jsr chkhexbyte
  1661  8a95 d006                   bne ++
  1662  8a97 cc3795                 cpy len
  1663  8a9a d001                   bne ++
  1664  8a9c 60                     rts ; Z true (EQ)
  1665  8a9d ac3895             ++  ldy savepos
  1666  8aa0 a201                   ldx #1 ; Z false (NE)
  1667  8aa2 60                     rts
  1668                          
  1669                          chkzeropagex:
  1670  8aa3 8c3895                 sty savepos
  1671  8aa6 b90002                 lda inputbuf, y
  1672  8aa9 c924                   cmp #'$'
  1673  8aab d001                   bne +
  1674  8aad c8                     iny
  1675  8aae 200b8d             +   jsr chkhexbyte
  1676  8ab1 d01c                   bne ++
  1677  8ab3 20b58c                 jsr skipspaces
  1678  8ab6 b90002                 lda inputbuf, y
  1679  8ab9 c92c                   cmp #','
  1680  8abb d012                   bne ++
  1681  8abd c8                     iny
  1682  8abe 20b58c                 jsr skipspaces
  1683  8ac1 b90002                 lda inputbuf, y
  1684  8ac4 c958                   cmp #'X'
  1685  8ac6 d007                   bne ++
  1686  8ac8 c8                     iny
  1687  8ac9 cc3795                 cpy len
  1688  8acc d001                   bne ++
  1689  8ace 60                     rts ; Z true (EQ)
  1690  8acf ac3895             ++  ldy savepos
  1691  8ad2 a201                   ldx #1 ; Z false (NE)
  1692  8ad4 60                     rts
  1693                          
  1694                          chkzeropagey:
  1695  8ad5 8c3895                 sty savepos
  1696  8ad8 b90002                 lda inputbuf, y
  1697  8adb c924                   cmp #'$'
  1698  8add d001                   bne +
  1699  8adf c8                     iny
  1700  8ae0 200b8d             +   jsr chkhexbyte
  1701  8ae3 d01c                   bne ++
  1702  8ae5 20b58c                 jsr skipspaces
  1703  8ae8 b90002                 lda inputbuf, y
  1704  8aeb c92c                   cmp #','
  1705  8aed d012                   bne ++
  1706  8aef c8                     iny
  1707  8af0 20b58c                 jsr skipspaces
  1708  8af3 b90002                 lda inputbuf, y
  1709  8af6 c959                   cmp #'Y'
  1710  8af8 d007                   bne ++
  1711  8afa c8                     iny
  1712  8afb cc3795                 cpy len
  1713  8afe d001                   bne ++
  1714  8b00 60                     rts ; Z true (EQ)
  1715  8b01 ac3895             ++  ldy savepos
  1716  8b04 a201                   ldx #1 ; Z false (NE)
  1717  8b06 60                     rts
  1718                          
  1719                          chkabsolute:
  1720  8b07 8c3895                 sty savepos
  1721  8b0a b90002                 lda inputbuf, y
  1722  8b0d c924                   cmp #'$'
  1723  8b0f d001                   bne +
  1724  8b11 c8                     iny
  1725  8b12 20028d             +   jsr chkhexword
  1726  8b15 d006                   bne ++
  1727  8b17 cc3795                 cpy len
  1728  8b1a d001                   bne ++
  1729  8b1c 60                     rts ; Z true (EQ)
  1730  8b1d ac3895             ++  ldy savepos
  1731  8b20 a201                   ldx #1 ; Z false (NE)
  1732  8b22 60                     rts
  1733                          
  1734                          chkabsolutex:
  1735  8b23 8c3895                 sty savepos
  1736  8b26 b90002                 lda inputbuf, y
  1737  8b29 c924                   cmp #'$'
  1738  8b2b d001                   bne +
  1739  8b2d c8                     iny
  1740  8b2e 20028d             +   jsr chkhexword
  1741  8b31 d01c                   bne ++
  1742  8b33 20b58c                 jsr skipspaces
  1743  8b36 b90002                 lda inputbuf, y
  1744  8b39 c92c                   cmp #','
  1745  8b3b d012                   bne ++
  1746  8b3d c8                     iny
  1747  8b3e 20b58c                 jsr skipspaces
  1748  8b41 b90002                 lda inputbuf, y
  1749  8b44 c958                   cmp #'X'
  1750  8b46 d007                   bne ++
  1751  8b48 c8                     iny
  1752  8b49 cc3795                 cpy len
  1753  8b4c d001                   bne ++
  1754  8b4e 60                     rts ; Z true (EQ)
  1755  8b4f ac3895             ++  ldy savepos
  1756  8b52 a201                   ldx #1 ; Z false (NE)
  1757  8b54 60                     rts
  1758                          
  1759                          chkabsolutey:
  1760  8b55 8c3895                 sty savepos
  1761  8b58 b90002                 lda inputbuf, y
  1762  8b5b c924                   cmp #'$'
  1763  8b5d d001                   bne +
  1764  8b5f c8                     iny
  1765  8b60 20028d             +   jsr chkhexword
  1766  8b63 d01c                   bne ++
  1767  8b65 20b58c                 jsr skipspaces
  1768  8b68 b90002                 lda inputbuf, y
  1769  8b6b c92c                   cmp #','
  1770  8b6d d012                   bne ++
  1771  8b6f c8                     iny
  1772  8b70 20b58c                 jsr skipspaces
  1773  8b73 b90002                 lda inputbuf, y
  1774  8b76 c959                   cmp #'Y'
  1775  8b78 d007                   bne ++
  1776  8b7a c8                     iny
  1777  8b7b cc3795                 cpy len
  1778  8b7e d001                   bne ++
  1779  8b80 60                     rts ; Z true (EQ)
  1780  8b81 ac3895             ++  ldy savepos
  1781  8b84 a201                   ldx #1 ; Z false (NE)
  1782  8b86 60                     rts
  1783                          
  1784                          chkindirect:
  1785  8b87 8c3895                 sty savepos
  1786  8b8a b90002                 lda inputbuf, y
  1787  8b8d c928                   cmp #'('
  1788  8b8f d022                   bne ++
  1789  8b91 c8                     iny
  1790  8b92 20b58c                 jsr skipspaces
  1791  8b95 b90002                 lda inputbuf, y
  1792  8b98 c924                   cmp #'$'
  1793  8b9a d001                   bne +
  1794  8b9c c8                     iny
  1795  8b9d 20028d             +   jsr chkhexword
  1796  8ba0 d011                   bne ++
  1797  8ba2 20b58c                 jsr skipspaces
  1798  8ba5 b90002                 lda inputbuf, y
  1799  8ba8 c929                   cmp #')'
  1800  8baa d007                   bne ++
  1801  8bac c8                     iny
  1802  8bad cc3795                 cpy len
  1803  8bb0 d001                   bne ++
  1804  8bb2 60                     rts ; Z true (EQ)
  1805  8bb3 ac3895             ++  ldy savepos
  1806  8bb6 a201                   ldx #1 ; Z false (NE)
  1807  8bb8 60                     rts
  1808                          
  1809                          chkinstruction:
  1810  8bb9 cc3795                 cpy len
  1811  8bbc f02d                   beq ++
  1812  8bbe 8c3b95                 sty tmp
  1813  8bc1 a237                   ldx #(ninst-1)
  1814  8bc3 b90002             -   lda inputbuf,y
  1815  8bc6 dd8c8e                 cmp inst0,x
  1816  8bc9 d01a                   bne +
  1817  8bcb c8                     iny
  1818  8bcc b90002                 lda inputbuf,y
  1819  8bcf ddc48e                 cmp inst1,x
  1820  8bd2 d011                   bne +
  1821  8bd4 c8                     iny
  1822  8bd5 b90002                 lda inputbuf,y
  1823  8bd8 ddfc8e                 cmp inst2,x
  1824  8bdb d008                   bne +
  1825  8bdd c8                     iny
  1826  8bde 8a                     txa
  1827  8bdf 8d3395                 sta inidx
  1828  8be2 a200                   ldx #0
  1829  8be4 60                     rts
  1830  8be5 ac3b95             +   ldy tmp
  1831  8be8 ca                     dex
  1832  8be9 10d8                   bpl -
  1833  8beb a201               ++  ldx #1 ; Z false (NE)
  1834  8bed 60                     rts
  1835                          
  1836                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1837                              ; and allows mode promotion
  1838  8bee 20178c                 jsr find_inst_and_mode2
  1839  8bf1 f023                   beq ++
  1840  8bf3 ad3495                 lda mode
  1841  8bf6 c906                   cmp #6
  1842  8bf8 901c                   bcc ++
  1843  8bfa c90a                   cmp #10
  1844  8bfc b016                   bcs +
  1845  8bfe 6903                   adc #3
  1846  8c00 8d3495                 sta mode ; promote ZeroPage modes to Absolute modes
  1847  8c03 20178c                 jsr find_inst_and_mode2 ; try again once
  1848  8c06 d00e                   bne ++
  1849  8c08 ad3995                 lda tmp2
  1850  8c0b 8d2e8e                 sta ptr1
  1851  8c0e a900                   lda #0
  1852  8c10 8d2f8e                 sta ptr1+1
  1853  8c13 60                     rts ; Z true (EQ)
  1854  8c14 a201               +   ldx #1 ; Z false (NE)
  1855  8c16 60                 ++  rts
  1856                          
  1857                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1858  8c17 a296                   ldx #nopcodes-1
  1859  8c19 bde490             -   lda instidx, x
  1860  8c1c bc7b91                 ldy modeidx, x
  1861  8c1f cd3395                 cmp inidx
  1862  8c22 d00e                   bne +
  1863  8c24 cc3495                 cpy mode
  1864  8c27 d009                   bne +
  1865  8c29 8e3295                 stx opidx
  1866  8c2c 202c82                 jsr getsize
  1867  8c2f a200                   ldx #0 ; Z true (EQ)
  1868  8c31 60                     rts
  1869  8c32 ca                 +   dex
  1870  8c33 e0ff                   cpx #$ff
  1871  8c35 d0e2                   bne -
  1872  8c37 a201                   ldx #1 ; Z false (NE)
  1873  8c39 60                     rts
  1874                          
  1875                          executerun:
  1876  8c3a 68                     pla ; remove low byte return address
  1877  8c3b 68                     pla ; return high byte return address
  1878  8c3c 68                     pla ; again, we're really not returning
  1879  8c3d 68                     pla ; again, we're really not returning
  1880  8c3e 20ae8d                 jsr newline
  1881                          !ifndef MINIMUM {
  1882                          ; any C64
  1883  8c41 207280                 jsr install_nmi64
  1884                          }
  1885                          +   ; restore registers
  1886  8c44 ae4695                 ldx registerSP
  1887  8c47 9a                     txs
  1888  8c48 ad4795                 lda registerSR
  1889  8c4b 48                     pha
  1890  8c4c ad4395                 lda registerA
  1891  8c4f ae4495                 ldx registerX
  1892  8c52 ac4595                 ldy registerY
  1893  8c55 28                     plp
  1894  8c56 6c2e8e                 jmp (ptr1)
  1895                          
  1896                          chkcontinuedis:
  1897  8c59 b90002                 lda inputbuf,y
  1898  8c5c c944                   cmp #'D'
  1899  8c5e d00a                   bne +
  1900  8c60 b90102                 lda inputbuf+1,y
  1901  8c63 c90d                   cmp #13
  1902  8c65 d003                   bne +
  1903  8c67 c8                     iny
  1904  8c68 a200                   ldx #0 ; restore Z set
  1905  8c6a 60                 +   rts
  1906                          
  1907                          chkcontinueasm:
  1908  8c6b b90002                 lda inputbuf,y
  1909  8c6e c941                   cmp #'A'
  1910  8c70 d00a                   bne +
  1911  8c72 b90102                 lda inputbuf+1,y
  1912  8c75 c90d                   cmp #13
  1913  8c77 d003                   bne +
  1914  8c79 c8                     iny
  1915  8c7a a200                   ldx #0 ; restore Z set
  1916  8c7c 60                 +   rts
  1917                          
  1918                          executedisassemble:
  1919  8c7d 68                     pla ; remove low byte return address
  1920  8c7e 68                     pla ; return high byte return address
  1921  8c7f 20ae8d                 jsr newline
  1922  8c82 4cc581                 jmp disassemble
  1923                          
  1924                          reportnotimplemented:
  1925  8c85 a9cf                   lda #<notimplemented
  1926  8c87 a292                   ldx #>notimplemented
  1927  8c89 4c5b84                 jmp strout
  1928                          
  1929                          reporterr:
  1930  8c8c c000                   cpy #0
  1931  8c8e f008                   beq +
  1932  8c90 a920                   lda #' '
  1933  8c92 20d2ff             -   jsr charout
  1934  8c95 88                     dey
  1935  8c96 d0fa                   bne -
  1936  8c98 a93f               +   lda #'?'
  1937  8c9a 20d2ff                 jsr charout
  1938  8c9d a90d                   lda #13
  1939  8c9f 20d2ff                 jsr charout
  1940  8ca2 60                     rts
  1941                          
  1942                          chkspace:
  1943  8ca3 b90002                 lda inputbuf, y
  1944                          !ifndef MINIMUM {
  1945                              ; skip SHIFT-SPACES too on Commodore
  1946  8ca6 c9a0                   cmp #$A0
  1947  8ca8 f004                   beq +
  1948                          }
  1949  8caa c920                   cmp #$20
  1950  8cac d006                   bne ++
  1951  8cae c8                 +   iny
  1952  8caf 20b58c                 jsr skipspaces
  1953  8cb2 a900                   lda #0 ; set Z
  1954  8cb4 60                 ++  rts
  1955                          
  1956                          skipspaces:
  1957  8cb5 b90002             -   lda inputbuf, y
  1958                          !ifndef MINIMUM {
  1959                              ; skip SHIFT-SPACES too on Commodore
  1960  8cb8 c9a0                   cmp #$A0
  1961  8cba f004                   beq +
  1962                          }
  1963  8cbc c920                   cmp #$20
  1964  8cbe d003                   bne ++
  1965  8cc0 c8                 +   iny
  1966  8cc1 d0f2                   bne -
  1967  8cc3 60                 ++  rts
  1968                          
  1969                          chkdot:
  1970  8cc4 b90002                 lda inputbuf, y
  1971  8cc7 c92e                   cmp #'.'
  1972  8cc9 d003                   bne +
  1973  8ccb c8                     iny
  1974  8ccc a900                   lda #0 ; Z true (EQ)
  1975  8cce 60                 +   rts
  1976                          
  1977                          chkhelp:
  1978  8ccf b90002                 lda inputbuf, y
  1979  8cd2 c93f                   cmp #'?'
  1980  8cd4 d003                   bne +
  1981  8cd6 c8                     iny
  1982  8cd7 a900                   lda #0 ; Z true (EQ)
  1983  8cd9 60                 +   rts
  1984                          
  1985                          chkcolon:
  1986  8cda b90002                 lda inputbuf, y
  1987  8cdd c93a                   cmp #':'
  1988  8cdf d003                   bne +
  1989  8ce1 c8                     iny
  1990  8ce2 a900                   lda #0 ; Z true (EQ)
  1991  8ce4 60                 +   rts
  1992                          
  1993                          chkhexbyteofsequence:
  1994  8ce5 201a84                 jsr inputhexbyte
  1995  8ce8 20058d                 jsr +
  1996  8ceb d014                   bne ++ ; Z false (NE) if failed checks
  1997  8ced cc3795                 cpy len
  1998  8cf0 f00f                   beq ++ ; Z true (EQ) if end of input
  1999  8cf2 8d3b95                 sta tmp
  2000  8cf5 b90002                 lda inputbuf,y
  2001  8cf8 c920                   cmp #$20
  2002  8cfa d005                   bne ++ ; Z false (NE) if not space
  2003  8cfc ad3b95                 lda tmp
  2004  8cff a200                   ldx #0 ; Z true (EQ) is space delimeter
  2005  8d01 60                 ++  rts
  2006                          
  2007                          chkhexword:
  2008                          chkhexaddr1:
  2009  8d02 20ed83                 jsr inputhexword
  2010  8d05 a200               +   ldx #0 ; Z true (EQ)
  2011  8d07 9001                   bcc +
  2012  8d09 e8                     inx ; Z false (NE)
  2013  8d0a 60                 +   rts
  2014                          
  2015                          chkhexbyte:
  2016  8d0b 98                     tya
  2017  8d0c 48                     pha ; save y
  2018  8d0d 201a84                 jsr inputhexbyte
  2019  8d10 b00f                   bcs +
  2020  8d12 8d3995                 sta tmp2
  2021  8d15 203d84                 jsr inputhexnybble
  2022  8d18 9007                   bcc +
  2023  8d1a 68                     pla ; throw away saved y
  2024  8d1b ad3995                 lda tmp2
  2025  8d1e a200                   ldx #0 ; Z true (EQ)
  2026  8d20 60                     rts
  2027  8d21 68                 +   pla
  2028  8d22 a8                     tay ; won't be zero, so Z false (NE)
  2029  8d23 60                     rts
  2030                          
  2031                          chkhexaddr2:
  2032  8d24 ad2e8e                 lda ptr1
  2033  8d27 48                     pha
  2034  8d28 ad2f8e                 lda ptr1+1
  2035  8d2b 48                     pha
  2036  8d2c 20028d                 jsr chkhexaddr1
  2037  8d2f f005                   beq +
  2038  8d31 68                     pla
  2039  8d32 68                     pla
  2040  8d33 a901                   lda #1 ; Z false (NE)
  2041  8d35 60                     rts
  2042  8d36 ad2e8e             +   lda ptr1
  2043  8d39 8d3c95                 sta ptr2
  2044  8d3c ad2f8e                 lda ptr1+1
  2045  8d3f 8d3d95                 sta ptr2+1
  2046  8d42 68                     pla
  2047  8d43 8d2f8e                 sta ptr1+1
  2048  8d46 68                     pla
  2049  8d47 8d2e8e                 sta ptr1
  2050  8d4a a900                   lda #0 ; Z true (EQ)
  2051  8d4c 60                     rts
  2052                          
  2053                          chkbinbyte:
  2054  8d4d a208                   ldx #8
  2055  8d4f 205d8d             -   jsr chkbindigit
  2056  8d52 d008                   bne +
  2057  8d54 ca                     dex
  2058  8d55 d0f8                   bne -
  2059  8d57 08                     php ; save Z true
  2060  8d58 ad3995                 lda tmp2
  2061  8d5b 28                     plp ; restore Z true
  2062  8d5c 60                 +   rts
  2063                          
  2064                          chkbindigit:
  2065  8d5d b90002                 lda inputbuf, y
  2066  8d60 38                     sec
  2067  8d61 e930                   sbc #$30
  2068  8d63 900b                   bcc +
  2069  8d65 c902                   cmp #$02
  2070  8d67 b007                   bcs +
  2071  8d69 4a                     lsr ; rotate bit value into C
  2072  8d6a 2e3995                 rol tmp2 ; rotate bit value into tmp2
  2073  8d6d c8                     iny ; advance in buffer
  2074  8d6e a900                   lda #0 ; set Z
  2075  8d70 60                 +   rts
  2076                          
  2077                          chkaddr1cmd:
  2078  8d71 b90002                 lda inputbuf, y
  2079  8d74 c941               +   cmp #'A'
  2080  8d76 d00b                   bne +
  2081  8d78 be0102                 ldx inputbuf+1, y
  2082  8d7b e00d                   cpx #13
  2083  8d7d d004                   bne +
  2084  8d7f c8                     iny
  2085  8d80 4c2988                 jmp executeassemble
  2086  8d83 c944               +   cmp #'D'
  2087  8d85 d00b                   bne +
  2088  8d87 be0102                 ldx inputbuf+1, y
  2089  8d8a e00d                   cpx #13
  2090  8d8c d004                   bne +
  2091  8d8e c8                     iny
  2092  8d8f 4c7d8c                 jmp executedisassemble
  2093  8d92 c952               +   cmp #'R'
  2094  8d94 d017                   bne +
  2095  8d96 be0102                 ldx inputbuf+1, y
  2096  8d99 e00d                   cpx #13
  2097  8d9b d010                   bne +
  2098  8d9d c8                     iny
  2099  8d9e ad4895                 lda registerPC
  2100  8da1 8d2e8e                 sta ptr1
  2101  8da4 ad4995                 lda registerPC+1
  2102  8da7 8d2f8e                 sta ptr1+1
  2103  8daa 4c3a8c                 jmp executerun
  2104  8dad 60                 +   rts
  2105                          
  2106                          newline:
  2107  8dae a90d                   lda #13
  2108  8db0 4cd2ff                 jmp charout
  2109                          
  2110                          space:
  2111  8db3 a920                   lda #32
  2112  8db5 4cd2ff                 jmp charout
  2113                          
  2114                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  2115                          ;     jsr $ffd2
  2116                          ;     pha
  2117                          ; -   lda $d011
  2118                          ;     bpl -
  2119                          ; -   lda $d011
  2120                          ;     bmi -
  2121                          ; -   lda $d011
  2122                          ;     bpl -
  2123                          ; -   lda $d011
  2124                          ;     bmi -
  2125                          ;     pla
  2126                          ;     rts
  2127                          
  2128                          save_registers:
  2129  8db8 08                     php
  2130  8db9 8d4395                 sta registerA
  2131  8dbc 8e4495                 stx registerX
  2132  8dbf 8c4595                 sty registerY
  2133  8dc2 68                     pla
  2134  8dc3 8d4795                 sta registerSR
  2135  8dc6 ba                     tsx
  2136  8dc7 8e4695                 stx registerSP
  2137  8dca 4ccf8d                 jmp +
  2138                          
  2139                          execute_display_registers:
  2140  8dcd 68                     pla ; remove return address
  2141  8dce 68                     pla
  2142                          +
  2143                              ; need some normality
  2144  8dcf 58                     cli
  2145  8dd0 d8                     cld
  2146                          
  2147  8dd1 20ae8d                 jsr newline
  2148  8dd4 20dd8d                 jsr display_registers
  2149                          !ifndef MINIMUM {
  2150                              ; any C64
  2151  8dd7 208d80                 jsr uninstall_nmi64
  2152                          }
  2153  8dda 4c6980                 jmp input_loop
  2154                          
  2155                          ; PC   NV-BDIZC .A .X .Y .S
  2156                          ; 1234 10111011 01 02 03 FF
  2157                          display_registers:
  2158  8ddd a915                   lda #<reg_header
  2159  8ddf a295                   ldx #>reg_header
  2160  8de1 205b84                 jsr strout
  2161  8de4 ad4895                 lda registerPC
  2162  8de7 ae4995                 ldx registerPC+1
  2163  8dea 20d183                 jsr disphexword
  2164  8ded 20b38d                 jsr space
  2165  8df0 ad4795                 lda registerSR
  2166  8df3 20bc83                 jsr dispbinbyte
  2167  8df6 20b38d                 jsr space
  2168  8df9 ad4395                 lda registerA
  2169  8dfc 20d783                 jsr disphexbyte
  2170  8dff 20b38d                 jsr space
  2171  8e02 ad4495                 lda registerX
  2172  8e05 20d783                 jsr disphexbyte
  2173  8e08 20b38d                 jsr space
  2174  8e0b ad4595                 lda registerY
  2175  8e0e 20d783                 jsr disphexbyte
  2176  8e11 20b38d                 jsr space
  2177  8e14 ad4695                 lda registerSP
  2178  8e17 20d783                 jsr disphexbyte
  2179  8e1a 4cae8d                 jmp newline
  2180                          
  2181                          !ifdef MINIMUM {
  2182                          
  2183                          lda_at_ptr1_y:
  2184                              lda (ptr1),y
  2185                              rts
  2186                          
  2187                          sta_at_ptr1_y:
  2188                              sta (ptr1),y
  2189                              rts
  2190                          
  2191                          lda_at_ptr3_y:
  2192                              lda (ptr3),y
  2193                              rts
  2194                          
  2195                          sta_at_ptr3_y:
  2196                              sta (ptr3),y
  2197                              rts
  2198                          
  2199                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2200                          ;; MC6850
  2201                          UART_DATA=$FFF8
  2202                          UART_STCR=$FFF9
  2203                          
  2204                          UART_INIT:
  2205                          	ldx #0b00000111 ; 11=reset device
  2206                          	stx UART_STCR
  2207                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  2208                          	sta UART_STCR
  2209                          	rts
  2210                          UART_OUT:
  2211                          	pha
  2212                          -	lda UART_STCR
  2213                          	and #2
  2214                          	beq - ; branch if TDRE=0, not finished transmitting
  2215                          	pla
  2216                          	pha
  2217                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  2218                          	sta UART_DATA
  2219                          	pla
  2220                          	rts
  2221                          UART_IN:
  2222                          -	lda UART_STCR
  2223                          	and #1
  2224                          	beq - ; branch if TDRF=0, not received
  2225                          	lda UART_DATA
  2226                          	; software "CAPS LOCK" because wozmon expects only uppercase
  2227                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  2228                          	beq BREAK
  2229                              ; force lowercase alphabet to uppercase
  2230                              cmp #'a'
  2231                          	bcc +
  2232                          	cmp #'z'+1
  2233                          	bcs +
  2234                          	eor #$20
  2235                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  2236                           	rts
  2237                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  2238                          	pha ; save A
  2239                          	lda UART_STCR
  2240                          	lsr ; put rightmost bit in carry
  2241                          	pla ; restore A affects flags
  2242                          	ror ; move carry to left bit, right bit to carry
  2243                          	php ; push processor to save N
  2244                          	rol ; restore A affects flags
  2245                          	plp ; pull processor to restore N
  2246                          	rts
  2247                          
  2248                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2249                          ; Processor start and interrupts
  2250                          
  2251                          NMI: ; unused on minimum (no source of interrupt)
  2252                              rti
  2253                          
  2254                          IRQ:
  2255                              pha
  2256                              php
  2257                              pla
  2258                              and #$10
  2259                              beq ++ ; not break
  2260                          ;BREAK HANDLER
  2261                              pla
  2262                              sta registerA
  2263                              pla
  2264                              sta registerSR
  2265                              pla
  2266                              cld
  2267                              sec
  2268                              sbc #2
  2269                              sta registerPC
  2270                              pla
  2271                              sbc #0
  2272                              sta registerPC+1
  2273                              lda #>save_registers
  2274                              pha
  2275                              lda #<save_registers
  2276                              pha
  2277                              lda registerSR
  2278                              pha
  2279                              lda registerA
  2280                              pha
  2281                          ++  pla
  2282                              rti
  2283                          
  2284                          BREAK:
  2285                              jmp RESET
  2286                          
  2287                          RESET:
  2288                              cld
  2289                              ldx #$FF
  2290                              txs
  2291                              jsr JUART_INIT
  2292                              cli
  2293                              jmp start
  2294                          ; !ifdef MINIMUM
  2295                          } else { ; not MINIMUM
  2296                          
  2297                          ptr1 = sta_at_ptr1_y + 1 ; and + 2
  2298                          
  2299                          lda_at_ptr1_y:
  2300  8e1d ad2e8e                 lda ptr1
  2301  8e20 8d2a8e                 sta lda_ptr1_op+1
  2302  8e23 ad2f8e                 lda ptr1+1
  2303  8e26 8d2b8e                 sta lda_ptr1_op+2
  2304                          lda_ptr1_op:
  2305  8e29 b9ffff                 lda $ffff, y
  2306  8e2c 60                     rts
  2307                          
  2308                          sta_at_ptr1_y:
  2309  8e2d 99ffff                 sta $ffff, y
  2310  8e30 60                     rts
  2311                          
  2312                          ptr3 = sta_at_ptr3_y + 1 ; and + 2
  2313                          
  2314                          lda_at_ptr3_y:
  2315  8e31 ad428e                 lda ptr3
  2316  8e34 8d3e8e                 sta lda_ptr3_op+1
  2317  8e37 ad438e                 lda ptr3+1
  2318  8e3a 8d3f8e                 sta lda_ptr3_op+2
  2319                          lda_ptr3_op:
  2320  8e3d b9ffff                 lda $ffff, y
  2321  8e40 60                     rts
  2322                          
  2323                          sta_at_ptr3_y:
  2324  8e41 99ffff                 sta $ffff, y
  2325  8e44 60                     rts
  2326                          
  2327                          nmi64:
  2328  8e45 78                     sei
  2329  8e46 8d4395                 sta registerA
  2330  8e49 68                     pla
  2331  8e4a 8d4795                 sta registerSR
  2332  8e4d 68                     pla
  2333  8e4e d8                     cld
  2334  8e4f 8d4895                 sta registerPC
  2335  8e52 68                     pla
  2336  8e53 8d4995                 sta registerPC+1
  2337  8e56 a98d                   lda #>save_registers
  2338  8e58 48                     pha
  2339  8e59 a9b8                   lda #<save_registers
  2340  8e5b 48                     pha
  2341  8e5c ad4795                 lda registerSR
  2342  8e5f 48                     pha
  2343  8e60 ad4395                 lda registerA
  2344  8e63 40                     rti
  2345                          
  2346                          brk64:
  2347  8e64 68                     pla
  2348  8e65 a8                     tay
  2349  8e66 68                     pla
  2350  8e67 aa                     tax
  2351  8e68 68                     pla
  2352  8e69 8d4395                 sta registerA
  2353  8e6c 68                     pla
  2354  8e6d 8d4795                 sta registerSR
  2355  8e70 68                     pla
  2356  8e71 d8                     cld
  2357  8e72 38                     sec
  2358  8e73 e902                   sbc #2
  2359  8e75 8d4895                 sta registerPC
  2360  8e78 68                     pla
  2361  8e79 e900                   sbc #0
  2362  8e7b 8d4995                 sta registerPC+1
  2363  8e7e a98d                   lda #>save_registers
  2364  8e80 48                     pha
  2365  8e81 a9b8                   lda #<save_registers
  2366  8e83 48                     pha
  2367  8e84 ad4795                 lda registerSR
  2368  8e87 48                     pha
  2369  8e88 ad4395                 lda registerA
  2370  8e8b 40                     rti
  2371                          }
  2372                          
  2373                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2374                          ; data
  2375                          
  2376                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  2377                          ninst = 56
  2378  8e8c 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  2379  8ec4 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  2380  8efc 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  2381                          
  2382                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  2383                          mode_jmptable:
  2384  8f34 c182               !word dispModeAcc-1; 0 Accumulator 1
  2385  8f36 c682               !word dispModeNone-1 ; 1 None 1
  2386  8f38 c782               !word dispModeImm-1 ; 2 Immediate 2
  2387  8f3a d982               !word dispModeIndX-1 ; 3 IndirectX 2
  2388  8f3c fa82               !word dispModeIndY-1 ; 4 IndirectY 2
  2389  8f3e 1b83               !word dispModeRel-1 ; 5 Relative 2
  2390  8f40 cc82               !word dispModeZP-1 ; 6 ZeroPage 2
  2391  8f42 6683               !word dispModeZPX-1 ; 7 ZeroPageX 2
  2392  8f44 7383               !word dispModeZPY-1 ; 8 ZeroPageY 2
  2393  8f46 8083               !word dispModeAbs-1 ; 9 Absolute 3
  2394  8f48 9483               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  2395  8f4a a183               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  2396  8f4c ae83               !word dispModeInd-1 ; 12 Indirect 3
  2397                          
  2398                          nmodes = 13
  2399                          
  2400                          mode_sorted:
  2401  8f4e 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  2402                          
  2403                          !ifdef MINIMUM {
  2404                          mode_0: !text "Accumulator", 0, "A", 0
  2405                          mode_1: !text "None", 0, 8, 0
  2406                          mode_2: !text "Immediate", 0, "#$12", 0
  2407                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  2408                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  2409                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  2410                          mode_6: !text "ZeroPage", 0, "$12", 0
  2411                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  2412                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  2413                          mode_9: !text "Absolute", 0, "$1234", 0
  2414                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  2415                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  2416                          mode_12: !text "Indirect", 0, "($1234)", 0
  2417                          } else {
  2418  8f5b 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2419  8f69 4e4f4e45001400     mode_1: !text "NONE", 0, 20, 0
  2420  8f70 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2421  8f7f 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2422  8f91 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2423  8fa3 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2424  8fc2 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2425  8fcf 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2426  8fdf 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2427  8fef 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2428  8ffe 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2429  9010 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2430  9022 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2431                          }
  2432                          
  2433                          modes: ; table for easily displaying each mode_example
  2434  9033 5b8f               !word mode_0
  2435  9035 698f               !word mode_1
  2436  9037 708f               !word mode_2
  2437  9039 7f8f               !word mode_3
  2438  903b 918f               !word mode_4
  2439  903d a38f               !word mode_5
  2440  903f c28f               !word mode_6
  2441  9041 cf8f               !word mode_7
  2442  9043 df8f               !word mode_8
  2443  9045 ef8f               !word mode_9
  2444  9047 fe8f               !word mode_10
  2445  9049 1090               !word mode_11
  2446  904b 2290               !word mode_12
  2447                          
  2448                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2449                          nopcodes = 151
  2450  904d 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2451  90e4 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2452  917b 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2453                          
  2454                          copyright
  2455                          ;                  1         2         3         4
  2456                          ;         1234567890123456789012345678901234567890
  2457  9212 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2458                          !ifdef C64TERMINAL {
  2459                              !text 13, "(TERMINAL VERSION)"
  2460                          }
  2461  9232 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2462  9258 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2463  926f 00                 !text 0
  2464                          
  2465                          firsthelp
  2466                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2467  9270 0d0d               !text 13, 13
  2468  9272 54595045203f2046...!text "TYPE ? FOR HELP"
  2469  9281 0d00               !text 13, 0
  2470                          
  2471                          !ifndef MINIMUM {
  2472                          ; C64 only
  2473                          extra_help:
  2474  9283 5820202020202020...    !text "X           (EXIT MONITOR)", 13
  2475  929e 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S  (SAVE)", 13
  2476  92c0 00                     !text 0
  2477                          
  2478                          !ifdef C64SCREEN {
  2479  92c1 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  2480  92c8 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  2481                          }
  2482                          
  2483                          }
  2484                          
  2485  92cf 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2486                          
  2487                          generalhelp
  2488  92e0 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2489  9306 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2490  932b 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2491  934e 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2492  9376 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2493  9392 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2494  93b2 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2495  93d4 00                 !text 0
  2496                          generalhelp2
  2497  93d5 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2498  93fa 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2499  9416 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2500  9435 3f41202020202020...!text "?A          (LIST 6502 INSTRUCTIONS)", 13
  2501  945a 3f41444320202020...!text "?ADC        (/ADC/ ADDRESSING MODES)", 13
  2502  947f 3f4d4f4445202020...!text "?MODE       (ADDRESSING MODES)", 13
  2503  949e 00                 !text 0
  2504                          generalhelp3
  2505  949f 3f2e202020202020...!text "?.          (DISPLAY REGISTERS)", 13
  2506  94bf 2e31323334202020...!text ".1234       (MODIFY PC,FLAGS,REGISTERS)", 13
  2507  94e7 2e413a3031202020...!text ".A:01       (MODIFY REGISTER A,X,Y,S,P)", 13
  2508  950f 00                 !text 0
  2509                          
  2510  9510 4d4f444500         modes_keyword !text "MODE", 0
  2511                          
  2512  9515 2050432020204e56...reg_header !text " PC   NV-BDIZC .A .X .Y .S", 13, '.', 0
  2513                          
  2514                          !ifdef MINIMUM {
  2515                          opidx=$dfed
  2516                          inidx=$dfee
  2517                          mode=$dfef
  2518                          size=$dff0
  2519                          count=$dff1
  2520                          len=$dff2
  2521                          savepos=$dff3
  2522                          tmp2=$dff4
  2523                          flag=$dff5
  2524                          ptr2=$dff6;/7
  2525                          tmp=$dff8
  2526                          registerA = $dff9
  2527                          registerX = $dffa
  2528                          registerY = $dffb
  2529                          registerSP = $dffc
  2530                          registerSR = $dffd
  2531                          registerPC = $dffe;/f
  2532                          } else {
  2533  9532 00                 opidx !byte 0
  2534  9533 00                 inidx !byte 0
  2535  9534 00                 mode !byte 0
  2536  9535 00                 size !byte 0
  2537  9536 00                 count !byte 0
  2538  9537 00                 len !byte 0
  2539  9538 00                 savepos !byte 0
  2540  9539 00                 tmp2 !byte 0
  2541  953a 00                 flag !byte 0
  2542  953b 00                 tmp !byte 0
  2543  953c 0000               ptr2 !word 0
  2544  953e 0000               savebrkvector !word 0
  2545  9540 0000               savenmivector !word 0
  2546  9542 00                 drive !byte 0
  2547  9543 00                 registerA !byte 0
  2548  9544 00                 registerX !byte 0
  2549  9545 00                 registerY !byte 0
  2550  9546 00                 registerSP !byte 0
  2551  9547 00                 registerSR !byte 0
  2552  9548 0000               registerPC !word 0
  2553                          }
  2554                          
  2555                          !ifdef MINIMUM {
  2556                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2557                          ; JUMP table for some stability
  2558                          * = $FFEB
  2559                          JUART_CHK: JMP UART_CHK
  2560                          JUART_INIT: JMP UART_INIT
  2561                          JUART_OUT: JMP UART_OUT
  2562                          JUART_IN: JMP UART_IN
  2563                          
  2564                          !if * > $fff8 {
  2565                              !error "code overran MC6850 UART"
  2566                          }
  2567                          
  2568                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2569                          ; 6502 vectors
  2570                          * = $fffa
  2571                              !word NMI
  2572                              !word RESET
  2573                              !word IRQ
  2574                          } else { // C64
  2575                              !if * > $a000 {
  2576                                  !error "code/data overran $a000"
  2577                              }
  2578                          }
  2579                          
  2580                          finish = *
