
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<<
     5                          ;; >>>       ****************************************************        <<<
     6                          ;; >>>       **           TARGETS:                              *        <<<
     7                          ;; >>>       ** (1)  C64 8000-9FFF screen editor                *        <<<
     8                          ;; >>>       ** (2)  C64 8000-9FFF terminal edition             *        <<<
     9                          ;; >>>       ** (3)  6502+MC6850 E000-FFFF minimum system       *        <<<
    10                          ;; >>>       *   56K(RAM),8K(ROM), 2 bytes IO for MC6850 UART   *        <<<
    11                          ;; >>>       ****************************************************        <<<
    12                          ;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          ;; MIT License
    15                          ;;
    16                          ;; Copyright (c) 2024 David R. Van Wagner
    17                          ;; davevw.com
    18                          ;;
    19                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    20                          ;; of this software and associated documentation files (the "Software"), to deal
    21                          ;; in the Software without restriction, including without limitation the rights
    22                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    23                          ;; copies of the Software, and to permit persons to whom the Software is
    24                          ;; furnished to do so, subject to the following conditions:
    25                          ;;
    26                          ;; The above copyright notice and this permission notice shall be included in all
    27                          ;; copies or substantial portions of the Software.
    28                          ;;
    29                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    30                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    31                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    32                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    33                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    34                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    35                          ;; SOFTWARE.
    36                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                          
    40                          ; Important! define exactly ONE target (set in build.sh)
    41                          ;C64SCREEN = 1
    42                          ;C64TERMINAL = 1
    43                          ;MINIMUM = 1
    44                          
    45                          ; options (set in build.sh)
    46                          ;NEEDECHO = 0
    47                          
    48                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                          
    50                          ;; _
    51                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    52                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    53                          ;; 1000 (display memory at $1000)
    54                          ;; 1000.2000 (display memory range $1000 to $2000)
    55                          ;; 1000. (display next screenful of memory starting at $1000)
    56                          ;; . (display next screenful of memory)
    57                          ;; 1000 r (JMP $1000)
    58                          ;; 1000: 01 02 03 (modify memory)
    59                          ;; (NEW SYNTAX)
    60                          ;; 1000 d (disassemble starting at address, for screenful)
    61                          ;; d (continue disassembling from last address)
    62                          ;; 1000 a (assemble starting at, interactive until empty line)
    63                          ;; a (continue assembling from last address)
    64                          ;; r (run from PC)
    65                          ;; x (exit monitor -- C64 only)
    66                          ;; ? (commands help)
    67                          ;; ?a (list instructions available)
    68                          ;; ?adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    69                          ;; ?mode (show addressing modes example syntax for 6502)
    70                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    71                          ;; .? (display registers in format .1234 10110000 01 02 03 f6)
    72                          ;; .1234 10110000 01 02 03 f6 (set registers PC FLAGS A X Y S)
    73                          ;; .A:00 (change register, replace A with X, Y, S, P as appropriate, use space or colon as separator)
    74                          ;; (FUTURE SYNTAX, not implemented)
    75                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    76                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    77                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    78                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    79                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    80                          ;;
    81                          ;; (INTERACTIVE ASSEMBLER)
    82                          ;; 1000 _
    83                          ;;      ADC #$12
    84                          ;; 1000 69 12    ADC #$12
    85                          ;; 1002 _
    86                          ;;      JSR $1234
    87                          ;; 1002 20 34 12 JSR $1234
    88                          ;; 1005 _
    89                          ;;      RTS
    90                          ;; 1005 60       RTS
    91                          ;; 1006 _
    92                          ;;      XYZ
    93                          ;;      XYZ ?
    94                          ;; 1006 _
    95                          ;; _
    96                          ;;
    97                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    98                          ;; and can cursor up to revise,
    99                          ;;
   100                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
   101                          ;;
   102                          
   103                          ; global
   104                          inputbuf=$0200
   105                          
   106                          
   107                          ; kernal/system calls
   108                          
   109                          !ifdef MINIMUM {
   110                          charout=JUART_OUT
   111                          getkey=JUART_IN
   112                          }
   113                          
   114                          !ifdef C64SCREEN {
   115                          setlfs=$ffba
   116                          setnam=$ffbd
   117                          charin=$ffcf ; screen editor
   118                          charout=$ffd2
   119                          fsave =$ffd8
   120                          getkey=$ffe4
   121                          }
   122                          
   123                          !ifdef C64TERMINAL {
   124                          setlfs=$ffba
   125                          setnam=$ffbd
   126                          charout=$ffd2
   127                          getkey=$ffe4
   128                          fsave =$ffd8
   129                          }
   130                          
   131                          ; zeropage
   132                          !ifdef MINIMUM {
   133                          ptr1=$fc ; and $fd
   134                          ptr3=$fe ; and $ff
   135                          }
   136                          
   137                          !ifdef MINIMUM {
   138                          * = $e000
   139                          first:
   140                              jmp start
   141                          } else { // any C64
   142                          * = $8000
   143                          first:
   144  8000 4c2080                 jmp init64
   145                          }
   146                          
   147                          test: ; all the addressing modes here for testing disassembly
   148  8003 ea                     nop
   149  8004 ad3412                 lda $1234
   150  8007 bd3412                 lda $1234,x
   151  800a b93412                 lda $1234,y
   152  800d 0a                     asl
   153  800e a912                   lda #$12
   154  8010 a112                   lda ($12,x)
   155  8012 b112                   lda ($12),y
   156  8014 6c3412                 jmp ($1234)
   157  8017 d0fe               -   bne -
   158  8019 a512                   lda $12
   159  801b b512                   lda $12,x
   160  801d b612                   ldx $12,y
   161  801f ff                     !byte $FF ; unknown
   162                          
   163                          !ifndef MINIMUM {
   164                              ; any C64
   165                          init64:    
   166                              ; check if irq/brk vector installed
   167  8020 ad1603                 lda $316
   168  8023 ae1703                 ldx $317
   169  8026 e08e                   cpx #>brk64
   170  8028 f010                   beq +
   171  802a 8d3595                 sta savebrkvector
   172  802d 8e3695                 stx savebrkvector+1
   173  8030 a95b                   lda #<brk64
   174  8032 a28e                   ldx #>brk64
   175  8034 8d1603                 sta $316
   176  8037 8e1703                 stx $317
   177  803a 206980             +   jsr install_nmi64
   178                              ; check if BASIC RAM limited to exclude monitor
   179  803d a538                   lda 56
   180  803f c980                   cmp #>first
   181  8041 f00a                   beq +
   182  8043 9008                   bcc +
   183  8045 a980                   lda #>first
   184  8047 8538                   sta 56
   185  8049 a900                   lda #0
   186  804b 8537                   sta 55
   187                          +   ; fall through to start
   188                          }
   189                          
   190                          start:
   191  804d d8                     cld
   192  804e 58                     cli
   193  804f a909                   lda #<copyright
   194  8051 a292                   ldx #>copyright
   195  8053 205284                 jsr strout
   196  8056 a967                   lda #<firsthelp
   197  8058 a292                   ldx #>firsthelp
   198  805a 205284                 jsr strout
   199  805d 4caf8d                 jmp save_registers
   200                          
   201                          input_loop:
   202  8060 207384                 jsr inputline
   203  8063 207684                 jsr parseline
   204  8066 4c6080                 jmp input_loop
   205                          
   206                          !ifndef MINIMUM {
   207                          ; C64 only
   208                          
   209                          install_nmi64:
   210                              ; check if nmi vector installed
   211  8069 ad1803                 lda $318
   212  806c ae1903                 ldx $319
   213  806f e08e                   cpx #>nmi64
   214  8071 f010                   beq +
   215  8073 8d3795                 sta savenmivector
   216  8076 8e3895                 stx savenmivector+1
   217  8079 a93c                   lda #<nmi64
   218  807b a28e                   ldx #>nmi64
   219  807d 8d1803                 sta $318
   220  8080 8e1903                 stx $319
   221  8083 60                 +   rts
   222                          
   223                          uninstall_nmi64:
   224  8084 ad3795                 lda savenmivector
   225  8087 ae3895                 ldx savenmivector+1
   226  808a 8d1803                 sta $318
   227  808d 8e1903                 stx $319
   228  8090 60                     rts
   229                          
   230                          chkextrac64:
   231  8091 209d80                 jsr chkexit
   232  8094 d003                   bne +
   233  8096 4cb280                 jmp execute_exit
   234  8099 18                 +   clc ; no error
   235  809a a201                   ldx #1 ; Z false - not consumed
   236  809c 60                     rts
   237                          
   238                          chkexit:
   239  809d b90002                 lda inputbuf, y
   240  80a0 c958                   cmp #'X'
   241  80a2 d009                   bne +
   242  80a4 c8                     iny
   243  80a5 cc2e95                 cpy len ; validate no extra characters
   244  80a8 f003                   beq +
   245  80aa 4cae80                 jmp extra_error
   246  80ad 60                 +   rts
   247                          
   248                          extra_error:
   249                              ; pop local return address
   250  80ae 68                     pla
   251  80af 68                     pla
   252  80b0 38                     sec ; error
   253  80b1 60                     rts
   254                          
   255                          execute_exit:
   256  80b2 ad3595                 lda savebrkvector
   257  80b5 ae3695                 ldx savebrkvector+1
   258  80b8 8d1603                 sta $316
   259  80bb 8e1703                 stx $317
   260  80be 208480                 jsr uninstall_nmi64
   261                              ; pop monitor return addresses, so only original caller is left
   262  80c1 68                     pla
   263  80c2 68                     pla
   264  80c3 68                     pla
   265  80c4 68                     pla
   266  80c5 68                     pla
   267  80c6 68                     pla
   268  80c7 60                     rts
   269                          
   270                          display_extra_help:
   271  80c8 a97a                   lda #<extra_help
   272  80ca a292                   ldx #>extra_help
   273  80cc 4c5284                 jmp strout
   274                          
   275                          !ifdef C64SCREEN {
   276                          display_page_disassemble:
   277  80cf ad258e                 lda ptr1
   278  80d2 ae268e                 ldx ptr1+1
   279  80d5 20c883                 jsr disphexword
   280  80d8 a9b8                   lda #<page_disassemble
   281  80da a292                   ldx #>page_disassemble
   282  80dc 4c5284                 jmp strout
   283                          
   284                          display_page_displaymemory:
   285  80df 20a58d                 jsr newline
   286  80e2 ad258e                 lda ptr1
   287  80e5 ae268e                 ldx ptr1+1
   288  80e8 20c883                 jsr disphexword
   289  80eb a9bf                   lda #<page_displaymemory
   290  80ed a292                   ldx #>page_displaymemory
   291  80ef 4c5284                 jmp strout
   292                          
   293                          inputlinec64:
   294  80f2 a000                   ldy #0
   295  80f4 20cfff             -   jsr charin
   296  80f7 990002                 sta inputbuf,y
   297  80fa c8                     iny
   298  80fb c90d                   cmp #13
   299  80fd d0f5                   bne -
   300  80ff 60                     rts
   301                          
   302                          continueassemblec64:
   303  8100 a914                   lda #20
   304  8102 20d2ff                 jsr charout
   305  8105 20d2ff                 jsr charout
   306  8108 ad258e                 lda ptr1
   307  810b ae268e                 ldx ptr1+1
   308  810e 20c883                 jsr disphexword
   309  8111 a920                   lda #' '
   310  8113 20d2ff                 jsr charout
   311  8116 20d2ff                 jsr charout
   312  8119 4cd2ff                 jmp charout
   313                          }
   314                          
   315                          chkfilename:
   316  811c 20ac8c                 jsr skipspaces
   317  811f 8c3295                 sty tmp
   318  8122 b90002                 lda inputbuf, y
   319  8125 c922                   cmp #34 ; double quote
   320  8127 d025                   bne ++
   321  8129 c8                 -   iny
   322  812a b90002                 lda inputbuf, y
   323  812d c90d                   cmp #13
   324  812f d005                   bne +
   325  8131 ac3295                 ldy tmp
   326  8134 d018                   bne ++
   327  8136 c922               +   cmp #34 ; double quote
   328  8138 d0ef                   bne -
   329  813a 98                     tya ; index of ending double quotes
   330  813b 48                     pha ; save
   331  813c 18                     clc ; will subtract one more
   332  813d ed3295                 sbc tmp ; subtract index of first quote, have filename length
   333  8140 ae3295                 ldx tmp
   334  8143 e8                     inx ; low address of filename
   335  8144 a002                   ldy #>inputbuf ; high address of filename
   336  8146 20bdff                 jsr setnam
   337  8149 68                     pla
   338  814a a8                     tay
   339  814b c8                     iny ; advance past ending double quotes
   340  814c a900                   lda #0 ; set Z true
   341  814e 60                 ++  rts
   342                          
   343                          check_execute_save:
   344  814f 201c81             +   jsr chkfilename
   345  8152 f006                   beq +
   346  8154 20838c                 jsr reporterr
   347  8157 a201                   ldx #1 ; set Z false
   348  8159 60                     rts
   349  815a 206881             +   jsr chkoptionaldrive
   350  815d 207e81                 jsr chksave
   351  8160 d005                   bne +
   352  8162 208781                 jsr executesave
   353  8165 a200                   ldx #0 ; set Z true
   354  8167 60                 +   rts
   355                          
   356                          chkoptionaldrive:
   357  8168 a908                   lda #8
   358  816a 8d3995                 sta drive
   359  816d 20ac8c                 jsr skipspaces
   360  8170 20028d                 jsr chkhexbyte
   361  8173 d008                   bne +
   362  8175 8d3995                 sta drive
   363  8178 20ac8c                 jsr skipspaces
   364  817b a900                   lda #0 ; set Z true
   365  817d 60                 +   rts
   366                          
   367                          chksave:
   368  817e 20ac8c                 jsr skipspaces
   369  8181 b90002                 lda inputbuf, y
   370  8184 c953                   cmp #'S'
   371  8186 60                     rts
   372                          
   373                          executesave:
   374  8187 20a58d                 jsr newline
   375  818a a522                   lda $22
   376  818c 48                     pha
   377  818d a523                   lda $23
   378  818f 48                     pha
   379  8190 ad258e                 lda ptr1
   380  8193 8522                   sta $22
   381  8195 ad268e                 lda ptr1+1
   382  8198 8523                   sta $23
   383  819a a9c0                   lda #$c0 ; KERNAL control and error messages
   384  819c 859d                   sta $9d ; set messages to be displayed
   385  819e a901                   lda #1
   386  81a0 ae3995                 ldx drive
   387  81a3 a00f                   ldy #15
   388  81a5 20baff                 jsr setlfs
   389  81a8 a922                   lda #$22
   390  81aa ae3395                 ldx ptr2
   391  81ad ac3495                 ldy ptr2+1
   392  81b0 20d8ff                 jsr fsave
   393  81b3 68                     pla
   394  81b4 8523                   sta $23
   395  81b6 68                     pla
   396  81b7 8522                   sta $22
   397  81b9 4ca58d                 jmp newline
   398                          }
   399                          
   400                          disassemble:
   401  81bc a917                   lda #23
   402  81be 8d2d95                 sta count
   403  81c1 a000               -   ldy #0
   404  81c3 20148e                 jsr lda_at_ptr1_y
   405  81c6 20f681                 jsr find_opcode
   406  81c9 206082                 jsr disp_current
   407  81cc ad2c95                 lda size
   408  81cf 1002                   bpl +
   409  81d1 a901                   lda #1
   410  81d3 18                 +   clc
   411  81d4 6d258e                 adc ptr1
   412  81d7 8d258e                 sta ptr1
   413  81da 9003                   bcc +
   414  81dc ee268e                 inc ptr1+1
   415  81df ce2d95             +   dec count
   416  81e2 d0dd                   bne -
   417                          !ifdef C64SCREEN {
   418  81e4 4ccf80                 jmp display_page_disassemble
   419                          } else {
   420                              rts
   421                          }
   422                          
   423                          compareptrs:
   424  81e7 ad268e                 lda ptr1+1
   425  81ea cd3495                 cmp ptr2+1
   426  81ed d006                   bne +
   427  81ef ad258e                 lda ptr1
   428  81f2 cd3395                 cmp ptr2
   429  81f5 60                 +   rts
   430                          
   431                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   432                          ; and properties updated in ZP globals size,inidx,opidx,mode
   433  81f6 a097                   ldy #nopcodes
   434  81f8 a296                   ldx #nopcodes-1
   435  81fa dd4490             -   cmp opcodes,x
   436  81fd f010                   beq +
   437  81ff ca                     dex
   438  8200 88                     dey
   439  8201 d0f7                   bne -
   440  8203 18                     clc
   441  8204 a901                   lda #1
   442  8206 8d2c95                 sta size
   443  8209 a9ff                   lda #$FF
   444  820b aa                     tax
   445  820c a8                     tay
   446  820d 900a                   bcc ++
   447  820f bddb90             +   lda instidx, x
   448  8212 bc7291                 ldy modeidx, x
   449  8215 202382                 jsr getsize
   450  8218 38                     sec
   451  8219 8d2a95             ++  sta inidx
   452  821c 8e2995                 stx opidx
   453  821f 8c2b95                 sty mode
   454  8222 60                     rts
   455                          
   456                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   457                              ; result returned in size
   458  8223 48                     pha
   459  8224 a901                   lda #1
   460  8226 8d2c95                 sta size
   461  8229 68                     pla
   462  822a c002                   cpy #2 // Immediate
   463  822c 900a                   bcc +
   464  822e ee2c95                 inc size
   465  8231 c009                   cpy #9 // Absolute
   466  8233 9003                   bcc +
   467  8235 ee2c95                 inc size
   468  8238 60                 +   rts
   469                          
   470                          disp_opcode: ; .A opcode byte
   471  8239 20f681                 jsr find_opcode
   472  823c 8a                     txa
   473                              ; fall through to display instruction
   474                          
   475                          dispinst: ; .A instruction index 0..55, note modifies A and X
   476  823d aa                     tax
   477  823e e038                   cpx #ninst
   478  8240 b012                   bcs +
   479  8242 bd838e                 lda inst0, x
   480  8245 20d2ff                 jsr charout
   481  8248 bdbb8e                 lda inst1, x
   482  824b 20d2ff                 jsr charout
   483  824e bdf38e                 lda inst2, x
   484  8251 4cd2ff                 jmp charout
   485  8254 a93f               +   lda #'?'
   486  8256 20d2ff                 jsr charout
   487  8259 20d2ff                 jsr charout
   488  825c 20d2ff                 jsr charout
   489  825f 60                     rts
   490                          
   491                          disp_current:
   492  8260 ad258e                 lda ptr1
   493  8263 ae268e                 ldx ptr1+1
   494  8266 20c883                 jsr disphexword
   495  8269 a920                   lda #$20
   496  826b 20d2ff                 jsr charout
   497  826e a000                   ldy #0
   498  8270 ae2c95                 ldx size
   499  8273 20148e             -   jsr lda_at_ptr1_y
   500  8276 20ce83                 jsr disphexbyte
   501  8279 a920                   lda #$20
   502  827b 20d2ff                 jsr charout
   503  827e c8                     iny
   504  827f ca                     dex
   505  8280 d0f1                   bne -
   506  8282 c003               -   cpy #3
   507  8284 f00e                   beq +
   508  8286 a920                   lda #$20
   509  8288 20d2ff                 jsr charout
   510  828b 20d2ff                 jsr charout
   511  828e 20d2ff                 jsr charout
   512  8291 c8                     iny
   513  8292 d0ee                   bne -
   514  8294 ad2a95             +   lda inidx
   515  8297 203d82                 jsr dispinst
   516  829a a920                   lda #$20
   517  829c 20d2ff                 jsr charout
   518  829f 20a782                 jsr disp_mode
   519  82a2 a90d                   lda #13
   520  82a4 4cd2ff                 jmp charout
   521                          
   522                          disp_mode
   523  82a7 ad2b95                 lda mode
   524  82aa c90d                   cmp #13
   525  82ac b00a                   bcs +
   526  82ae 0a                     asl
   527  82af aa                     tax
   528  82b0 bd2c8f                 lda mode_jmptable+1,x
   529  82b3 48                     pha
   530  82b4 bd2b8f                 lda mode_jmptable,x
   531  82b7 48                     pha
   532  82b8 60                 +   rts
   533                          
   534                          dispModeAcc:
   535  82b9 a941                   lda #'A'
   536  82bb 4cd2ff                 jmp charout
   537                          
   538                          dispModeNone:
   539  82be 60                     rts
   540                          
   541                          dispModeImm:
   542  82bf a923                   lda #'#'
   543  82c1 20d2ff                 jsr charout
   544                          dispModeZP:
   545  82c4 a924                   lda #'$'
   546  82c6 20d2ff                 jsr charout
   547  82c9 a001                   ldy #1
   548  82cb 20148e                 jsr lda_at_ptr1_y
   549  82ce 4cce83                 jmp disphexbyte
   550                          
   551                          dispModeIndX:
   552  82d1 a928                   lda #'('
   553  82d3 20d2ff                 jsr charout
   554  82d6 a924                   lda #'$'
   555  82d8 20d2ff                 jsr charout
   556  82db a001                   ldy #1
   557  82dd 20148e                 jsr lda_at_ptr1_y
   558  82e0 20ce83                 jsr disphexbyte
   559  82e3 a92c                   lda #','
   560  82e5 20d2ff                 jsr charout
   561  82e8 a958                   lda #'X'
   562  82ea 20d2ff                 jsr charout
   563  82ed a929                   lda #')'
   564  82ef 4cd2ff                 jmp charout
   565                          
   566                          dispModeIndY:
   567  82f2 a928                   lda #'('
   568  82f4 20d2ff                 jsr charout
   569  82f7 a924                   lda #'$'
   570  82f9 20d2ff                 jsr charout
   571  82fc a001                   ldy #1
   572  82fe 20148e                 jsr lda_at_ptr1_y
   573  8301 20ce83                 jsr disphexbyte
   574  8304 a929                   lda #')'
   575  8306 20d2ff                 jsr charout
   576  8309 a92c                   lda #','
   577  830b 20d2ff                 jsr charout
   578  830e a959                   lda #'Y'
   579  8310 4cd2ff                 jmp charout
   580                          
   581                          dispModeRel:
   582  8313 a924                   lda #'$'
   583  8315 20d2ff                 jsr charout
   584  8318 18                     clc
   585  8319 ad258e                 lda ptr1
   586  831c 6902                   adc #2
   587  831e 8d398e                 sta ptr3
   588  8321 ad268e                 lda ptr1+1
   589  8324 6900                   adc #0
   590  8326 8d3a8e                 sta ptr3+1
   591  8329 a001                   ldy #1
   592  832b 20148e                 jsr lda_at_ptr1_y
   593  832e 1019                   bpl +
   594                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   595  8330 49ff                   eor #$FF ; inverse
   596  8332 18                     clc
   597  8333 6901                   adc #1 ; complete getting absolute value from two's complement
   598  8335 8d3295                 sta tmp
   599  8338 38                     sec
   600  8339 ad398e                 lda ptr3
   601  833c ed3295                 sbc tmp
   602  833f 8d398e                 sta ptr3
   603  8342 b011                   bcs ++
   604  8344 ce3a8e                 dec ptr3+1
   605  8347 900c                   bcc ++
   606  8349 18                 +   clc ; simple case of adding
   607  834a 6d398e                 adc ptr3
   608  834d 8d398e                 sta ptr3
   609  8350 9003                   bcc ++
   610  8352 ee3a8e                 inc ptr3+1
   611  8355 ad398e             ++  lda ptr3
   612  8358 ae3a8e                 ldx ptr3+1
   613  835b 4cc883                 jmp disphexword
   614                          
   615                          dispModeZPX:
   616  835e 20c482                 jsr dispModeZP
   617  8361 a92c                   lda #','
   618  8363 20d2ff                 jsr charout
   619  8366 a958                   lda #'X'
   620  8368 4cd2ff                 jmp charout
   621                          
   622                          dispModeZPY:
   623  836b 20c482                 jsr dispModeZP
   624  836e a92c                   lda #','
   625  8370 20d2ff                 jsr charout
   626  8373 a959                   lda #'Y'
   627  8375 4cd2ff                 jmp charout
   628                          
   629                          dispModeAbs:
   630  8378 a924                   lda #'$'
   631  837a 20d2ff                 jsr charout
   632  837d a001                   ldy #1
   633  837f 20148e                 jsr lda_at_ptr1_y
   634  8382 48                     pha
   635  8383 c8                     iny
   636  8384 20148e                 jsr lda_at_ptr1_y
   637  8387 aa                     tax
   638  8388 68                     pla
   639  8389 4cc883                 jmp disphexword
   640                          
   641                          dispModeAbsX:
   642  838c 207883                 jsr dispModeAbs
   643  838f a92c                   lda #','
   644  8391 20d2ff                 jsr charout
   645  8394 a958                   lda #'X'
   646  8396 4cd2ff                 jmp charout
   647                          
   648                          dispModeAbsY:
   649  8399 207883                 jsr dispModeAbs
   650  839c a92c                   lda #','
   651  839e 20d2ff                 jsr charout
   652  83a1 a959                   lda #'Y'
   653  83a3 4cd2ff                 jmp charout
   654                          
   655                          dispModeInd:
   656  83a6 a928                   lda #'('
   657  83a8 20d2ff                 jsr charout
   658  83ab 207883                 jsr dispModeAbs
   659  83ae a929                   lda #')'
   660  83b0 4cd2ff                 jmp charout
   661                          
   662                          dispbinbyte: ; .A 00..FF
   663  83b3 a208                   ldx #8
   664  83b5 8d3295                 sta tmp
   665  83b8 a930               -   lda #'0'
   666  83ba 2e3295                 rol tmp
   667  83bd 9002                   bcc +
   668  83bf a931                   lda #'1'
   669  83c1 20d2ff             +   jsr charout
   670  83c4 ca                     dex
   671  83c5 d0f1                   bne -
   672  83c7 60                     rts
   673                          
   674                          disphexword: ; .A low, .X high, 0000..FFFF
   675  83c8 48                     pha
   676  83c9 8a                     txa
   677  83ca 20ce83                 jsr disphexbyte
   678  83cd 68                     pla
   679                              ;fall through to call again
   680                          
   681                          disphexbyte: ; .A 00..FF
   682  83ce 48                     pha
   683  83cf 4a                     lsr
   684  83d0 4a                     lsr
   685  83d1 4a                     lsr
   686  83d2 4a                     lsr
   687  83d3 20d783                 jsr disphexnybble
   688  83d6 68                     pla
   689                              ;fall through to call again
   690                          
   691                          disphexnybble: ; .A 0..F
   692  83d7 290f                   and #$0F
   693  83d9 0930                   ora #$30
   694  83db c93a                   cmp #$3A
   695  83dd 9002                   bcc +
   696  83df 6906                   adc #$06
   697  83e1 4cd2ff             +   jmp charout
   698                          
   699                          inputhexword: ; C set if fails
   700  83e4 a900                   lda #0
   701  83e6 8d258e                 sta ptr1
   702  83e9 8d268e                 sta ptr1+1
   703                          
   704  83ec a904                   lda #4 ; word is at most 4 nybbles
   705  83ee 8d2d95                 sta count
   706  83f1 203484             --  jsr inputhexnybble
   707  83f4 b015                   bcs +
   708                          
   709                              ; shift nibble up
   710  83f6 0a                     asl
   711  83f7 0a                     asl
   712  83f8 0a                     asl
   713  83f9 0a                     asl
   714                          
   715  83fa a204                   ldx #4 ; 4 bits rotated into word
   716  83fc 2a                 -   rol
   717  83fd 2e258e                 rol ptr1
   718  8400 2e268e                 rol ptr1+1
   719  8403 ca                     dex
   720  8404 d0f6                   bne - ; repeat bits
   721                          
   722  8406 ce2d95                 dec count
   723  8409 d0e6                   bne -- ; repeat nybbles
   724                          
   725  840b ad2d95             +   lda count
   726  840e c904                   cmp #4 ; set C if 4, otherwise clear
   727  8410 60                     rts
   728                          
   729                          inputhexbyte:
   730  8411 203484                 jsr inputhexnybble
   731  8414 b01d                   bcs ++
   732  8416 8d3295                 sta tmp
   733  8419 203484                 jsr inputhexnybble
   734  841c 9006                   bcc +
   735  841e 18                     clc ; allow single digit as byte
   736  841f ad3295                 lda tmp
   737  8422 900f                   bcc ++
   738  8424 0e3295             +   asl tmp
   739  8427 0e3295                 asl tmp
   740  842a 0e3295                 asl tmp
   741  842d 0e3295                 asl tmp
   742  8430 0d3295                 ora tmp ; necessary to assemble the two nybbles
   743  8433 60                 ++  rts
   744                          
   745                          inputhexnybble:
   746  8434 b90002                 lda $0200,y
   747  8437 297f                   and #$7F
   748  8439 38                     sec
   749  843a e930                   sbc #$30
   750  843c 9012                   bcc ++
   751  843e c90a                   cmp #10
   752  8440 900c                   bcc +
   753  8442 e907                   sbc #7
   754  8444 900a                   bcc ++
   755  8446 c90a                   cmp #10
   756  8448 9006                   bcc ++
   757  844a c910                   cmp #16
   758  844c b002                   bcs ++
   759  844e c8                 +   iny
   760  844f 60                     rts
   761  8450 38                 ++  sec
   762  8451 60                     rts
   763                          
   764                          strout:
   765  8452 8d398e                 sta ptr3
   766  8455 8e3a8e                 stx ptr3+1
   767                          strout2:
   768  8458 a000                   ldy #0
   769  845a 20288e             -   jsr lda_at_ptr3_y
   770  845d f006                   beq +
   771  845f 20d2ff                 jsr charout
   772  8462 c8                     iny
   773  8463 d0f5                   bne -
   774  8465 98                 +   tya
   775  8466 38                     sec
   776  8467 6d398e                 adc ptr3
   777  846a 8d398e                 sta ptr3
   778  846d 9003                   bcc +
   779  846f ee3a8e                 inc ptr3+1
   780  8472 60                 +   rts
   781                          
   782                          inputline:
   783                          !ifdef C64SCREEN {
   784  8473 4cf280                 jmp inputlinec64
   785                          } else {
   786                              ldy #0
   787                          --  sty count
   788                          -   jsr getkey
   789                              beq -
   790                              ldy count
   791                          !ifdef MINIMUM {
   792                              cmp #8 ; backspace
   793                          } else {
   794                              cmp #20
   795                          }
   796                              bne +
   797                              cpy #0
   798                              beq -
   799                              dey
   800                          !if NEEDECHO = 1 {
   801                              jsr charout
   802                          }
   803                              jmp --
   804                          +   cmp #13
   805                              beq +
   806                              cmp #' '
   807                              bcc -
   808                              cmp #128
   809                              bcs -
   810                          +
   811                          !if NEEDECHO = 1 {
   812                              jsr charout
   813                          }
   814                              sta inputbuf,y
   815                              iny
   816                              cmp #13
   817                              bne --
   818                              rts
   819                          }
   820                          
   821                          parseline:
   822  8476 c001                   cpy #1
   823  8478 d003                   bne +
   824                          -
   825                          !ifdef C64SCREEN {
   826  847a 4ca58d                 jmp newline
   827                          } else {
   828                              rts
   829                          }
   830  847d 88                 +   dey
   831  847e 8c2e95                 sty len
   832                              ; skip whitespace
   833                              ; check for address, put in ptr1
   834                              ; or check for dot, then require address put in ptr2
   835                              ; or check for ?, and optional parameter, execute help
   836                              ; check for whitespace
   837                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   838                              ; check for string, store at start of inputbuf
   839                              ; check for drive number
   840                              ; check for whitespace
   841                              ; check command ":rda?mls", execute command
   842  8481 a000                   ldy #0
   843  8483 20ac8c                 jsr skipspaces
   844  8486 cc2e95                 cpy len
   845  8489 f0ef                   beq -
   846  848b 20508c                 jsr chkcontinuedis
   847  848e d003                   bne +
   848  8490 20748c                 jsr executedisassemble ; note won't return
   849  8493 20628c             +   jsr chkcontinueasm
   850  8496 d003                   bne +
   851  8498 201d88                 jsr continueassemble ; note won't return
   852  849b 20c084             +   jsr chkexecutepc ; not won't return
   853  849e 20bb8c                 jsr chkdot
   854  84a1 d003                   bne +
   855  84a3 4cba85                 jmp executedot
   856  84a6 20c68c             +   jsr chkhelp
   857  84a9 d003                   bne +
   858  84ab 4c8786                 jmp executehelp
   859                          +
   860                          !ifndef MINIMUM {
   861  84ae 209180                 jsr chkextrac64 ; check syntax only available on C64
   862  84b1 b01e                   bcs + ; error if C set
   863  84b3 f005                   beq ++ ; consumed if Z set, skip next test(s)
   864                          }
   865  84b5 20f98c                 jsr chkhexaddr1
   866  84b8 d003                   bne error
   867  84ba 4cd284             ++  jmp executeaddr1
   868                          error:
   869  84bd 4c838c                 jmp reporterr
   870                          
   871                          chkexecutepc:
   872  84c0 b90002                 lda inputbuf, y
   873  84c3 c952                   cmp #'R'
   874  84c5 d00a                   bne +
   875  84c7 b90102                 lda inputbuf+1, y
   876  84ca c90d                   cmp #13
   877  84cc d003                   bne +
   878  84ce 4c318c                 jmp executerun
   879  84d1 60                 +   rts
   880                          
   881                          executeaddr1:
   882  84d2 cc2e95                 cpy len
   883  84d5 d003                   bne +
   884  84d7 4c3685                 jmp executedisplay1
   885  84da 20bb8c             +   jsr chkdot
   886  84dd d011                   bne +
   887  84df cc2e95                 cpy len
   888  84e2 f022                   beq executepagedisplay
   889  84e4 201b8d                 jsr chkhexaddr2
   890  84e7 d0d4                   bne error
   891  84e9 18                     clc
   892  84ea 6e3195                 ror flag
   893  84ed 4c2585                 jmp executeaddr12
   894  84f0 20ac8c             +   jsr skipspaces
   895  84f3 20d18c                 jsr chkcolon
   896  84f6 d003                   bne +
   897  84f8 4c9285                 jmp executemodify
   898  84fb 20688d             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   899                          !ifdef MINIMUM {
   900                              jmp reportnotimplemented
   901                          } else {
   902  84fe 201c81                 jsr chkfilename
   903  8501 d0ba                   bne error
   904  8503 4cca85                 jmp executeloadfilename
   905                          }
   906                          
   907                          executepagedisplay:
   908  8506 ad258e                 lda ptr1
   909  8509 18                     clc
   910                          !ifdef MINIMUM {
   911                              adc #$5f
   912                          } else {
   913  850a 69b7                   adc #$b7
   914                          }
   915  850c 8d3395                 sta ptr2
   916  850f ad268e                 lda ptr1+1
   917                          !ifdef MINIMUM {
   918                              adc #$01
   919                          } else {
   920  8512 6900                   adc #$00
   921                          }
   922  8514 8d3495                 sta ptr2+1
   923  8517 9008                   bcc +
   924  8519 a9ff                   lda #$ff
   925  851b 8d3395                 sta ptr2
   926  851e 8d3495                 sta ptr2+1
   927  8521 38                 +   sec
   928  8522 6e3195                 ror flag
   929                              ; fall through to executeaddr12
   930                          
   931                          executeaddr12:
   932  8525 cc2e95                 cpy len
   933  8528 d003                   bne +
   934  852a 4c4285                 jmp executedisplay12
   935                          !ifndef MINIMUM { // any C64
   936  852d 204f81             +   jsr check_execute_save
   937  8530 f003                   beq ++
   938                          }
   939  8532 4c7c8c             +   jmp reportnotimplemented
   940  8535 60                 ++  rts
   941                          
   942                          executedisplay1:
   943  8536 ad258e                 lda ptr1
   944  8539 8d3395                 sta ptr2
   945  853c ad268e                 lda ptr1+1
   946  853f 8d3495                 sta ptr2+1
   947                              ; fall through executedisplay12
   948                          
   949                          executedisplay12:
   950  8542 a9ff                   lda #$ff
   951  8544 8d2d95                 sta count
   952  8547 ee2d95             -   inc count
   953  854a ad2d95                 lda count
   954                          !ifdef MINIMUM {
   955                              and #$0f
   956                          } else {
   957  854d 2907                   and #$07
   958                          }
   959  854f d018                   bne +
   960  8551 a90d                   lda #13
   961  8553 20d2ff                 jsr charout
   962  8556 ad258e                 lda ptr1
   963  8559 ae268e                 ldx ptr1+1
   964  855c 20c883                 jsr disphexword
   965  855f a93a                   lda #':'
   966  8561 20d2ff                 jsr charout
   967  8564 a920                   lda #' '
   968  8566 20d2ff                 jsr charout
   969  8569 a000               +   ldy #0
   970  856b 20148e                 jsr lda_at_ptr1_y
   971  856e 20ce83                 jsr disphexbyte
   972  8571 a920                   lda #' '
   973  8573 20d2ff                 jsr charout
   974  8576 ee258e                 inc ptr1
   975  8579 d005                   bne +
   976  857b ee268e                 inc ptr1+1
   977  857e f00f                   beq ++
   978  8580 20e781             +   jsr compareptrs
   979  8583 90c2                   bcc -
   980  8585 f0c0                   beq -
   981  8587 2c3195                 bit flag
   982  858a 1003                   bpl ++
   983                          !ifdef C64SCREEN {
   984  858c 4cdf80                 jmp display_page_displaymemory
   985                          }
   986  858f 4ca58d             ++  jmp newline
   987                          
   988                          executemodify:
   989  8592 20ac8c                 jsr skipspaces
   990  8595 cc2e95                 cpy len
   991  8598 f01d                   beq ++
   992  859a 20dc8c                 jsr chkhexbyteofsequence
   993  859d f003                   beq +
   994  859f 4cbd84                 jmp error
   995  85a2 8c3295             +   sty tmp
   996  85a5 a000                   ldy #0
   997  85a7 20248e                 jsr sta_at_ptr1_y
   998  85aa ee258e                 inc ptr1
   999  85ad d003                   bne +
  1000  85af ee268e                 inc ptr1+1
  1001  85b2 ac3295             +   ldy tmp
  1002  85b5 d0db                   bne executemodify
  1003  85b7 4ca58d             ++  jmp newline
  1004                          
  1005                          executedot:
  1006  85ba cc2e95                 cpy len
  1007  85bd d003                   bne +
  1008  85bf 4c0685                 jmp executepagedisplay
  1009  85c2 20cd85             +   jsr chkloadregister
  1010  85c5 d000                   bne +
  1011  85c7 202d86             +   jsr chkloadregisters
  1012                          
  1013                          executeloadfilename:
  1014                          executeaddr1cmd:
  1015  85ca 4c7c8c             +   jmp reportnotimplemented
  1016                          
  1017                          chkloadregister:
  1018  85cd 20d785                 jsr chkload_a_x_y_s_p
  1019  85d0 202786                 jsr chkload_pc
  1020  85d3 202a86                 jsr chkload_n_v_b_d_i_z_c
  1021  85d6 60                     rts
  1022                          
  1023                          chkload_a_x_y_s_p:
  1024  85d7 8c3295                 sty tmp
  1025  85da b90002                 lda inputbuf, y
  1026  85dd a200                   ldx #0
  1027  85df c941                   cmp #'A'
  1028  85e1 f014                   beq +
  1029  85e3 e8                     inx
  1030  85e4 c958                   cmp #'X'
  1031  85e6 f00f                   beq +
  1032  85e8 e8                     inx
  1033  85e9 c959                   cmp #'Y'
  1034  85eb f00a                   beq +
  1035  85ed e8                     inx
  1036  85ee c953                   cmp #'S'
  1037  85f0 f005                   beq +
  1038  85f2 e8                     inx
  1039  85f3 c950                   cmp #'P'
  1040  85f5 d02c                   bne ++
  1041  85f7 c8                 +   iny
  1042  85f8 b90002                 lda inputbuf, y
  1043                          !ifndef MINIMUM {
  1044  85fb c9a0                   cmp #$A0
  1045  85fd f008                   beq +
  1046                          }
  1047  85ff c920                   cmp #' '
  1048  8601 f004                   beq +
  1049  8603 c93a                   cmp #':'
  1050  8605 d01c                   bne ++
  1051  8607 c8                 +   iny
  1052  8608 20ac8c                 jsr skipspaces
  1053  860b 8e2b95                 stx mode
  1054  860e 20028d                 jsr chkhexbyte
  1055  8611 d010                   bne ++
  1056  8613 ae2b95                 ldx mode
  1057  8616 9d3a95                 sta registerA, x
  1058                          !ifndef MINIMUM {
  1059  8619 20a58d                 jsr newline
  1060                          }
  1061                              ; pop call stack so return to input_loop
  1062  861c 68                     pla
  1063  861d 68                     pla
  1064  861e 68                     pla
  1065  861f 68                     pla
  1066  8620 4c2686                 jmp +++
  1067  8623 ac3295             ++  ldy tmp ; not Z (NE)
  1068  8626 60                 +++ rts
  1069                          
  1070                          chkload_pc:
  1071  8627 a901                   lda #1 ; not Z (NE)
  1072  8629 60                     rts
  1073                          
  1074                          chkload_n_v_b_d_i_z_c:
  1075  862a a901                   lda #1 ; not Z (NE)
  1076  862c 60                     rts
  1077                          
  1078                          chkloadregisters:
  1079  862d 20f98c                 jsr chkhexword
  1080  8630 d054                   bne ++
  1081  8632 ad258e                 lda ptr1
  1082  8635 8d3f95                 sta registerPC
  1083  8638 ad268e                 lda ptr1+1
  1084  863b 8d4095                 sta registerPC+1
  1085  863e 209a8c                 jsr chkspace
  1086  8641 d03c                   bne +
  1087  8643 20448d                 jsr chkbinbyte
  1088  8646 d037                   bne +
  1089  8648 8d3e95                 sta registerSR
  1090  864b 209a8c                 jsr chkspace
  1091  864e d02f                   bne +
  1092  8650 20028d                 jsr chkhexbyte
  1093  8653 d02a                   bne +
  1094  8655 8d3a95                 sta registerA
  1095  8658 209a8c                 jsr chkspace
  1096  865b d022                   bne +
  1097  865d 20028d                 jsr chkhexbyte
  1098  8660 d01d                   bne +
  1099  8662 8d3b95                 sta registerX
  1100  8665 209a8c                 jsr chkspace
  1101  8668 d015                   bne +
  1102  866a 20028d                 jsr chkhexbyte
  1103  866d d010                   bne +
  1104  866f 8d3c95                 sta registerY
  1105  8672 209a8c                 jsr chkspace
  1106  8675 d008                   bne +
  1107  8677 20028d                 jsr chkhexbyte
  1108  867a d003                   bne +
  1109  867c 8d3d95                 sta registerSP
  1110                              ; don't return to executedot
  1111  867f 68                 +   pla
  1112  8680 68                     pla
  1113                          !ifdef C64SCREEN {
  1114  8681 20a58d                 jsr newline
  1115                          }
  1116  8684 a900                   lda #0 ; set Z
  1117  8686 60                 ++  rts
  1118                          
  1119                          executehelp:
  1120                          !ifdef C64SCREEN {
  1121  8687 20a58d                 jsr newline
  1122                          }
  1123  868a cc2e95                 cpy len
  1124  868d d003                   bne +
  1125  868f 4cb886                 jmp displayhelp
  1126  8692 20ac8c             +   jsr skipspaces
  1127  8695 20d386                 jsr chkhelpinstructions
  1128  8698 d003                   bne +
  1129  869a 4c1787                 jmp displayinstructions
  1130  869d 20ed86             +   jsr chkhelpmodes
  1131  86a0 d003                   bne +
  1132  86a2 4c2e87                 jmp displaymodes
  1133  86a5 20b08b             +   jsr chkinstruction
  1134  86a8 d003                   bne +
  1135  86aa 4cea87                 jmp executehelpinstruction
  1136  86ad 20e086             +   jsr chkhelpregisters
  1137  86b0 d003                   bne +
  1138  86b2 4cc48d                 jmp execute_display_registers
  1139  86b5 4c7c8c             +   jmp reportnotimplemented
  1140                          
  1141                          displayhelp:
  1142  86b8 a9d7                   lda #<generalhelp
  1143  86ba a292                   ldx #>generalhelp
  1144  86bc 205284                 jsr strout
  1145  86bf a9cc                   lda #<generalhelp2
  1146  86c1 a293                   ldx #>generalhelp2
  1147  86c3 205284                 jsr strout
  1148  86c6 a996                   lda #<generalhelp3
  1149  86c8 a294                   ldx #>generalhelp3
  1150  86ca 205284                 jsr strout
  1151                          !ifndef MINIMUM { // any C64
  1152  86cd 20c880                 jsr display_extra_help
  1153                          }
  1154  86d0 4ca58d                 jmp newline
  1155                          
  1156                          chkhelpinstructions:
  1157  86d3 b90002                 lda inputbuf, y
  1158  86d6 c941                   cmp #'A'
  1159  86d8 d005                   bne +
  1160  86da b90102                 lda inputbuf+1, y
  1161  86dd c90d                   cmp #13
  1162                              ; no need to increment y if found, done parsing line
  1163  86df 60                 +   rts
  1164                          
  1165                          chkhelpregisters:
  1166  86e0 b90002                 lda inputbuf, y
  1167  86e3 c92e                   cmp #'.'
  1168  86e5 d005                   bne +
  1169  86e7 b90102                 lda inputbuf+1, y
  1170  86ea c90d                   cmp #13
  1171  86ec 60                 +   rts
  1172                          
  1173                          chkhelpmodes:
  1174  86ed a907                   lda #<modes_keyword
  1175  86ef a295                   ldx #>modes_keyword
  1176                              ; fall through to chkkeyword
  1177                          
  1178                          chkkeyword:
  1179  86f1 8c2d95                 sty count
  1180  86f4 8d398e                 sta ptr3
  1181  86f7 8e3a8e                 stx ptr3+1
  1182  86fa ae2d95                 ldx count
  1183  86fd a000                   ldy #0
  1184  86ff 20288e             -   jsr lda_at_ptr3_y
  1185  8702 dd0002                 cmp inputbuf, x
  1186  8705 d00a                   bne +
  1187  8707 e8                     inx
  1188  8708 c8                     iny
  1189  8709 ec2e95                 cpx len
  1190  870c d0f1                   bne -
  1191  870e 20288e                 jsr lda_at_ptr3_y ; matched if end of string, will set Z
  1192  8711 08                 +   php ; save Z
  1193  8712 ac2d95                 ldy count
  1194  8715 28                     plp ; restore Z
  1195  8716 60                     rts
  1196                          
  1197                          displayinstructions:
  1198  8717 a038                   ldy #ninst
  1199  8719 a200                   ldx #0
  1200  871b 8a                 -   txa
  1201  871c 48                     pha
  1202  871d 203d82                 jsr dispinst
  1203  8720 a920                   lda #' '
  1204  8722 20d2ff                 jsr charout
  1205  8725 68                     pla
  1206  8726 aa                     tax
  1207  8727 e8                     inx
  1208  8728 88                     dey
  1209  8729 d0f0                   bne -
  1210  872b 4ca58d                 jmp newline
  1211                          
  1212                          displaymodes:
  1213  872e 38                     sec
  1214  872f a900                   lda #0
  1215  8731 48                 -   pha
  1216  8732 aa                     tax
  1217  8733 bd458f                 lda mode_sorted, x
  1218  8736 204387                 jsr dispmode
  1219  8739 68                     pla
  1220  873a 18                     clc
  1221  873b 6901                   adc #1
  1222  873d c90d                   cmp #nmodes
  1223  873f 90f0                   bcc -
  1224  8741 18                     clc
  1225  8742 60                     rts
  1226                          
  1227                          dispmode:
  1228  8743 c90d                   cmp #nmodes
  1229  8745 b009                   bcs +
  1230  8747 8d2b95                 sta mode
  1231  874a 209287                 jsr disp_modename_and_example
  1232  874d 4c5187                 jmp dispmodeinstructions
  1233  8750 60                 +   rts
  1234                          
  1235                          dispmodeinstructions:
  1236                          !ifdef C64SCREEN {
  1237                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1238  8751 ad2b95                 lda mode
  1239  8754 c903                   cmp #3
  1240  8756 d005                   bne +
  1241  8758 a920                   lda #' '
  1242  875a 4cd2ff                 jmp charout
  1243                          }
  1244                              ; display instructions with this mode
  1245  875d a000               +   ldy #0
  1246  875f 8c2a95             --  sty inidx
  1247  8762 a200                   ldx #0
  1248  8764 8e3295             -   stx tmp
  1249  8767 ad2a95                 lda inidx
  1250  876a dddb90                 cmp instidx, x
  1251  876d d016                   bne ++
  1252  876f bd7291                 lda modeidx, x
  1253  8772 cd2b95                 cmp mode
  1254  8775 d00e                   bne ++
  1255  8777 a920                   lda #' '
  1256  8779 20d2ff                 jsr charout
  1257  877c bddb90                 lda instidx, x
  1258  877f 203d82                 jsr dispinst
  1259  8782 ae3295                 ldx tmp
  1260  8785 e8                 ++  inx
  1261  8786 e097                   cpx #nopcodes
  1262  8788 90da                   bcc -
  1263  878a c8                     iny
  1264  878b c038                   cpy #ninst
  1265  878d d0d0                   bne --
  1266  878f 4ca58d                 jmp newline
  1267                          
  1268                          disp_modename_and_example:
  1269  8792 0a                     asl
  1270  8793 aa                     tax
  1271  8794 bd2a90                 lda modes, x
  1272  8797 48                     pha
  1273  8798 bd2b90                 lda modes+1, x
  1274  879b aa                     tax
  1275                          !ifdef C64SCREEN {
  1276  879c a912                   lda #18
  1277  879e 20d2ff                 jsr charout
  1278                          }
  1279  87a1 68                     pla
  1280  87a2 205284                 jsr strout
  1281  87a5 a920                   lda #' '
  1282  87a7 20d2ff                 jsr charout
  1283  87aa 205884                 jsr strout2
  1284                          !ifdef C64SCREEN {
  1285  87ad a992                   lda #146
  1286  87af 20d2ff                 jsr charout
  1287                          }
  1288  87b2 60                     rts
  1289                          
  1290                          disp_modename_instruction_example:
  1291  87b3 0a                     asl
  1292  87b4 aa                     tax
  1293  87b5 bd2a90                 lda modes, x
  1294  87b8 48                     pha
  1295  87b9 bd2b90                 lda modes+1, x
  1296  87bc aa                     tax
  1297  87bd 68                     pla
  1298  87be 205284                 jsr strout ; mode name
  1299  87c1 ad398e                 lda ptr3
  1300  87c4 48                     pha
  1301  87c5 ad3a8e                 lda ptr3+1
  1302  87c8 48                     pha
  1303  87c9 a93a                   lda #':'
  1304  87cb 20d2ff                 jsr charout
  1305  87ce a920                   lda #' '
  1306  87d0 20d2ff                 jsr charout
  1307  87d3 ad2a95                 lda inidx
  1308  87d6 203d82                 jsr dispinst ; instruction
  1309  87d9 a920                   lda #' '
  1310  87db 20d2ff                 jsr charout
  1311  87de 68                     pla
  1312  87df 8d3a8e                 sta ptr3+1
  1313  87e2 68                     pla
  1314  87e3 8d398e                 sta ptr3
  1315  87e6 205884                 jsr strout2 ; example
  1316  87e9 60                     rts
  1317                          
  1318                          
  1319                          executehelpinstruction:
  1320  87ea a000                   ldy #0
  1321  87ec 8c2995             -   sty opidx
  1322  87ef b9db90                 lda instidx, y
  1323  87f2 cd2a95                 cmp inidx
  1324  87f5 d01d                   bne +
  1325  87f7 b97291                 lda modeidx, y
  1326  87fa 8d2b95                 sta mode
  1327  87fd ae2995                 ldx opidx
  1328  8800 bd4490                 lda opcodes, x
  1329  8803 20ce83                 jsr disphexbyte
  1330  8806 a920                   lda #' '
  1331  8808 20d2ff                 jsr charout
  1332  880b ad2b95                 lda mode
  1333  880e 20b387                 jsr disp_modename_instruction_example
  1334  8811 20a58d                 jsr newline
  1335  8814 ac2995             +   ldy opidx
  1336  8817 c8                     iny
  1337  8818 c097                   cpy #nopcodes
  1338  881a 90d0                   bcc -
  1339  881c 60                     rts
  1340                          
  1341                          continueassemble:
  1342                          !ifdef C64SCREEN {
  1343  881d 200081                 jsr continueassemblec64
  1344                          }
  1345                              ; continue...
  1346                          
  1347                          executeassemble:
  1348  8820 68                     pla ; remove low byte return address
  1349  8821 68                     pla ; return high byte return address
  1350                          !ifdef C64SCREEN {
  1351  8822 a914                   lda #20
  1352  8824 20d2ff                 jsr charout
  1353  8827 20d2ff                 jsr charout
  1354                          } else {
  1355                              lda ptr1
  1356                              ldx ptr1+1
  1357                              jsr disphexword
  1358                              lda #' '
  1359                              jsr charout
  1360                          }
  1361                              ; save current pointer
  1362  882a ad258e             --  lda ptr1
  1363  882d ae268e                 ldx ptr1+1
  1364  8830 8d398e                 sta ptr3
  1365  8833 8e3a8e                 stx ptr3+1
  1366  8836 207384                 jsr inputline
  1367  8839 c001                   cpy #1
  1368  883b f055                   beq ++
  1369  883d 88                     dey
  1370  883e 8c2e95                 sty len
  1371  8841 a000                   ldy #0
  1372  8843 20ac8c                 jsr skipspaces
  1373  8846 cc2e95                 cpy len
  1374  8849 f047                   beq ++
  1375                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1376                              ;jsr skipspaces
  1377  884b 20b08b                 jsr chkinstruction
  1378  884e f00f                   beq +
  1379  8850 ad398e             -   lda ptr3
  1380  8853 8d258e                 sta ptr1
  1381  8856 ad3a8e                 lda ptr3+1
  1382  8859 8d268e                 sta ptr1+1
  1383  885c 4cbd84                 jmp error
  1384  885f 20c588             +   jsr chkaddressing
  1385  8862 d0ec                   bne -
  1386  8864 20e58b                 jsr find_inst_and_mode
  1387  8867 d0e7                   bne -
  1388  8869 209588                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1389  886c 18                     clc
  1390  886d ad2c95                 lda size
  1391  8870 6d398e                 adc ptr3
  1392  8873 8d258e                 sta ptr1
  1393  8876 ad3a8e                 lda ptr3+1
  1394  8879 6900                   adc #0
  1395  887b 8d268e                 sta ptr1+1
  1396                          !ifdef C64SCREEN {
  1397  887e 20a58d                 jsr newline
  1398                          }
  1399  8881 ad258e                 lda ptr1
  1400  8884 ae268e                 ldx ptr1+1
  1401  8887 20c883                 jsr disphexword
  1402  888a a920                   lda #' '
  1403  888c 20d2ff                 jsr charout
  1404  888f 4c2a88                 jmp --
  1405                          ++
  1406                          !ifdef C64SCREEN {
  1407  8892 4ca58d                 jmp newline
  1408                          } else {
  1409                              rts
  1410                          }
  1411                          
  1412                          store_assembly:
  1413  8895 ae2995                 ldx opidx
  1414  8898 bd4490                 lda opcodes, x
  1415  889b a000                   ldy #0
  1416  889d 20388e                 jsr sta_at_ptr3_y
  1417  88a0 c8                     iny
  1418  88a1 ae2c95                 ldx size
  1419  88a4 e001                   cpx #1
  1420  88a6 f01c                   beq ++
  1421  88a8 e002               +   cpx #2
  1422  88aa d007                   bne +
  1423  88ac ad3095                 lda tmp2
  1424  88af 20388e                 jsr sta_at_ptr3_y
  1425  88b2 60                     rts
  1426  88b3 e003               +   cpx #3
  1427  88b5 d00d                   bne ++
  1428  88b7 ad258e                 lda ptr1
  1429  88ba 20388e                 jsr sta_at_ptr3_y
  1430  88bd c8                     iny
  1431  88be ad268e                 lda ptr1+1
  1432  88c1 20388e                 jsr sta_at_ptr3_y
  1433  88c4 60                 ++  rts
  1434                          
  1435                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1436  88c5 20ac8c                 jsr skipspaces
  1437  88c8 a200                   ldx #0
  1438  88ca 8e2b95                 stx mode
  1439  88cd 203689                 jsr chkaccumulator
  1440  88d0 f05e                   beq +
  1441  88d2 ee2b95                 inc mode
  1442  88d5 cc2e95                 cpy len ; chknone
  1443  88d8 f056                   beq +
  1444  88da ee2b95                 inc mode
  1445  88dd 205c89                 jsr chkimmediate
  1446  88e0 f04e                   beq +
  1447  88e2 ee2b95                 inc mode
  1448  88e5 208389                 jsr chkindirectx
  1449  88e8 f046                   beq +
  1450  88ea ee2b95                 inc mode
  1451  88ed 20cb89                 jsr chkindirecty
  1452  88f0 f03e                   beq +
  1453  88f2 ee2b95                 inc mode
  1454  88f5 20138a                 jsr chkrelative
  1455  88f8 f036                   beq +
  1456  88fa ee2b95                 inc mode
  1457  88fd 207e8a                 jsr chkzeropage
  1458  8900 f02e                   beq +
  1459  8902 ee2b95                 inc mode
  1460  8905 209a8a                 jsr chkzeropagex
  1461  8908 f026                   beq +
  1462  890a ee2b95                 inc mode
  1463  890d 20cc8a                 jsr chkzeropagey
  1464  8910 f01e                   beq +
  1465  8912 ee2b95                 inc mode
  1466  8915 20fe8a                 jsr chkabsolute
  1467  8918 f016                   beq +
  1468  891a ee2b95                 inc mode
  1469  891d 201a8b                 jsr chkabsolutex
  1470  8920 f00e                   beq +
  1471  8922 ee2b95                 inc mode
  1472  8925 204c8b                 jsr chkabsolutey
  1473  8928 f006                   beq +
  1474  892a ee2b95                 inc mode
  1475  892d 207e8b                 jsr chkindirect
  1476  8930 08                 +   php ; save Z
  1477  8931 ad2b95                 lda mode
  1478  8934 28                     plp ; restore Z
  1479  8935 60                     rts
  1480                          
  1481                          chkaccumulator:
  1482  8936 cc2e95                 cpy len
  1483  8939 d014                   bne +
  1484  893b ad2a95                 lda inidx
  1485  893e c902                   cmp #2 ; ASL
  1486  8940 f019                   beq ++
  1487  8942 c920                   cmp #32 ; LSR
  1488  8944 f015                   beq ++
  1489  8946 c927                   cmp #39 ; ROL
  1490  8948 f011                   beq ++
  1491  894a c928                   cmp #40 ; ROR
  1492  894c 4c5b89                 jmp ++
  1493  894f b90002             +   lda inputbuf, y
  1494  8952 c941                   cmp #'A'
  1495  8954 d005                   bne ++
  1496  8956 b90102                 lda inputbuf+1,y
  1497  8959 c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1498  895b 60                 ++  rts
  1499                          
  1500                          chkimmediate:
  1501  895c 8c2f95                 sty savepos
  1502  895f b90002                 lda inputbuf, y
  1503  8962 c923                   cmp #'#'
  1504  8964 d017                   bne ++
  1505  8966 c8                     iny
  1506  8967 20ac8c                 jsr skipspaces
  1507  896a b90002                 lda inputbuf, y
  1508  896d c924                   cmp #'$'
  1509  896f d001                   bne +
  1510  8971 c8                     iny
  1511  8972 20028d             +   jsr chkhexbyte
  1512  8975 d006                   bne ++
  1513  8977 cc2e95             +   cpy len
  1514  897a d001                   bne ++
  1515  897c 60                     rts
  1516  897d ac2f95             ++  ldy savepos
  1517  8980 a201                   ldx #1 ; Z false (NE)
  1518  8982 60                     rts
  1519                          
  1520                          chkindirectx:
  1521  8983 8c2f95                 sty savepos
  1522  8986 b90002                 lda inputbuf, y
  1523  8989 c928                   cmp #'('
  1524  898b d038                   bne ++
  1525  898d c8                     iny
  1526  898e 20ac8c                 jsr skipspaces
  1527  8991 b90002                 lda inputbuf, y
  1528  8994 c924                   cmp #'$'
  1529  8996 d001                   bne +
  1530  8998 c8                     iny
  1531  8999 20028d             +   jsr chkhexbyte
  1532  899c d027                   bne ++
  1533  899e 20ac8c                 jsr skipspaces
  1534  89a1 b90002                 lda inputbuf, y
  1535  89a4 c92c                   cmp #','
  1536  89a6 d01d                   bne ++
  1537  89a8 c8                     iny
  1538  89a9 20ac8c                 jsr skipspaces
  1539  89ac b90002                 lda inputbuf, y
  1540  89af c958                   cmp #'X'
  1541  89b1 d012                   bne ++
  1542  89b3 c8                     iny
  1543  89b4 20ac8c                 jsr skipspaces
  1544  89b7 b90002                 lda inputbuf, y
  1545  89ba c929                   cmp #')'
  1546  89bc d007                   bne ++
  1547  89be c8                     iny
  1548  89bf cc2e95                 cpy len
  1549  89c2 d001                   bne ++
  1550  89c4 60                     rts
  1551  89c5 ac2f95             ++  ldy savepos
  1552  89c8 a201                   ldx #1 ; Z false (NE)
  1553  89ca 60                     rts
  1554                          
  1555                          chkindirecty:
  1556  89cb 8c2f95                 sty savepos
  1557  89ce b90002                 lda inputbuf, y
  1558  89d1 c928                   cmp #'('
  1559  89d3 d038                   bne ++
  1560  89d5 c8                     iny
  1561  89d6 20ac8c                 jsr skipspaces
  1562  89d9 b90002                 lda inputbuf, y
  1563  89dc c924                   cmp #'$'
  1564  89de d001                   bne +
  1565  89e0 c8                     iny
  1566  89e1 20028d             +   jsr chkhexbyte
  1567  89e4 d027                   bne ++
  1568  89e6 20ac8c                 jsr skipspaces
  1569  89e9 b90002                 lda inputbuf, y
  1570  89ec c929                   cmp #')'
  1571  89ee d01d                   bne ++
  1572  89f0 c8                     iny
  1573  89f1 20ac8c                 jsr skipspaces
  1574  89f4 b90002                 lda inputbuf, y
  1575  89f7 c92c                   cmp #','
  1576  89f9 d012                   bne ++
  1577  89fb c8                     iny
  1578  89fc 20ac8c                 jsr skipspaces
  1579  89ff b90002                 lda inputbuf, y
  1580  8a02 c959                   cmp #'Y'
  1581  8a04 d007                   bne ++
  1582  8a06 c8                     iny
  1583  8a07 cc2e95                 cpy len
  1584  8a0a d001                   bne ++
  1585  8a0c 60                     rts
  1586  8a0d ac2f95             ++  ldy savepos
  1587  8a10 a201                   ldx #1 ; Z false (NE)
  1588  8a12 60                     rts
  1589                          
  1590                          chkrelative:
  1591  8a13 8c2f95                 sty savepos
  1592  8a16 ae2a95                 ldx inidx
  1593  8a19 e006                   cpx #6 ; BIT
  1594  8a1b f01f                   beq ++
  1595  8a1d bd838e                 lda inst0, x
  1596  8a20 c942                   cmp #'B'
  1597  8a22 d018                   bne ++
  1598  8a24 b90002                 lda inputbuf, y
  1599  8a27 c924                   cmp #'$'
  1600  8a29 d001                   bne +
  1601  8a2b c8                     iny
  1602  8a2c 20f98c             +   jsr chkhexword
  1603  8a2f d00b                   bne ++
  1604  8a31 cc2e95                 cpy len
  1605  8a34 d006                   bne ++
  1606  8a36 20428a                 jsr computeoffset
  1607  8a39 d001                   bne ++
  1608  8a3b 60                     rts ; Z true (EQ)
  1609  8a3c ac2f95             ++  ldy savepos
  1610  8a3f a201                   ldx #1 ; Z false (NE)
  1611  8a41 60                     rts
  1612                          
  1613                          computeoffset:
  1614                          ;   compute next address
  1615  8a42 ad3a8e                 lda ptr3+1
  1616  8a45 8d3495                 sta ptr2+1
  1617  8a48 ad398e                 lda ptr3
  1618  8a4b 18                     clc
  1619  8a4c 6902                   adc #2
  1620  8a4e 8d3395                 sta ptr2
  1621  8a51 9003                   bcc +
  1622  8a53 ee3495                 inc ptr2+1
  1623                          +  ; subtract argument
  1624  8a56 38                     sec
  1625  8a57 ad258e                 lda ptr1
  1626  8a5a ed3395                 sbc ptr2
  1627  8a5d 8d3095                 sta tmp2
  1628  8a60 ad268e                 lda ptr1+1
  1629  8a63 ed3495                 sbc ptr2+1
  1630  8a66 f00b                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1631  8a68 c9ff                   cmp #$FF
  1632  8a6a d00f                   bne failedoffset ; 0 and FF were only options so fail
  1633                              ; chkeck negative offset
  1634  8a6c ad3095                 lda tmp2
  1635  8a6f 3007                   bmi successoffset ; branch if signed byte is negative
  1636  8a71 1008                   bpl failedoffset ; otherwise fail
  1637                          chkoffsetto127:
  1638  8a73 ad3095                 lda tmp2
  1639  8a76 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1640                          successoffset:
  1641  8a78 a900                   lda #0 ; Z true (EQ)
  1642  8a7a 60                     rts
  1643                          failedoffset:
  1644  8a7b a901                   lda #1 ; Z false (NE)
  1645  8a7d 60                     rts
  1646                          
  1647                          chkzeropage:
  1648  8a7e 8c2f95                 sty savepos
  1649  8a81 b90002                 lda inputbuf, y
  1650  8a84 c924                   cmp #'$'
  1651  8a86 d001                   bne +
  1652  8a88 c8                     iny
  1653  8a89 20028d             +   jsr chkhexbyte
  1654  8a8c d006                   bne ++
  1655  8a8e cc2e95                 cpy len
  1656  8a91 d001                   bne ++
  1657  8a93 60                     rts ; Z true (EQ)
  1658  8a94 ac2f95             ++  ldy savepos
  1659  8a97 a201                   ldx #1 ; Z false (NE)
  1660  8a99 60                     rts
  1661                          
  1662                          chkzeropagex:
  1663  8a9a 8c2f95                 sty savepos
  1664  8a9d b90002                 lda inputbuf, y
  1665  8aa0 c924                   cmp #'$'
  1666  8aa2 d001                   bne +
  1667  8aa4 c8                     iny
  1668  8aa5 20028d             +   jsr chkhexbyte
  1669  8aa8 d01c                   bne ++
  1670  8aaa 20ac8c                 jsr skipspaces
  1671  8aad b90002                 lda inputbuf, y
  1672  8ab0 c92c                   cmp #','
  1673  8ab2 d012                   bne ++
  1674  8ab4 c8                     iny
  1675  8ab5 20ac8c                 jsr skipspaces
  1676  8ab8 b90002                 lda inputbuf, y
  1677  8abb c958                   cmp #'X'
  1678  8abd d007                   bne ++
  1679  8abf c8                     iny
  1680  8ac0 cc2e95                 cpy len
  1681  8ac3 d001                   bne ++
  1682  8ac5 60                     rts ; Z true (EQ)
  1683  8ac6 ac2f95             ++  ldy savepos
  1684  8ac9 a201                   ldx #1 ; Z false (NE)
  1685  8acb 60                     rts
  1686                          
  1687                          chkzeropagey:
  1688  8acc 8c2f95                 sty savepos
  1689  8acf b90002                 lda inputbuf, y
  1690  8ad2 c924                   cmp #'$'
  1691  8ad4 d001                   bne +
  1692  8ad6 c8                     iny
  1693  8ad7 20028d             +   jsr chkhexbyte
  1694  8ada d01c                   bne ++
  1695  8adc 20ac8c                 jsr skipspaces
  1696  8adf b90002                 lda inputbuf, y
  1697  8ae2 c92c                   cmp #','
  1698  8ae4 d012                   bne ++
  1699  8ae6 c8                     iny
  1700  8ae7 20ac8c                 jsr skipspaces
  1701  8aea b90002                 lda inputbuf, y
  1702  8aed c959                   cmp #'Y'
  1703  8aef d007                   bne ++
  1704  8af1 c8                     iny
  1705  8af2 cc2e95                 cpy len
  1706  8af5 d001                   bne ++
  1707  8af7 60                     rts ; Z true (EQ)
  1708  8af8 ac2f95             ++  ldy savepos
  1709  8afb a201                   ldx #1 ; Z false (NE)
  1710  8afd 60                     rts
  1711                          
  1712                          chkabsolute:
  1713  8afe 8c2f95                 sty savepos
  1714  8b01 b90002                 lda inputbuf, y
  1715  8b04 c924                   cmp #'$'
  1716  8b06 d001                   bne +
  1717  8b08 c8                     iny
  1718  8b09 20f98c             +   jsr chkhexword
  1719  8b0c d006                   bne ++
  1720  8b0e cc2e95                 cpy len
  1721  8b11 d001                   bne ++
  1722  8b13 60                     rts ; Z true (EQ)
  1723  8b14 ac2f95             ++  ldy savepos
  1724  8b17 a201                   ldx #1 ; Z false (NE)
  1725  8b19 60                     rts
  1726                          
  1727                          chkabsolutex:
  1728  8b1a 8c2f95                 sty savepos
  1729  8b1d b90002                 lda inputbuf, y
  1730  8b20 c924                   cmp #'$'
  1731  8b22 d001                   bne +
  1732  8b24 c8                     iny
  1733  8b25 20f98c             +   jsr chkhexword
  1734  8b28 d01c                   bne ++
  1735  8b2a 20ac8c                 jsr skipspaces
  1736  8b2d b90002                 lda inputbuf, y
  1737  8b30 c92c                   cmp #','
  1738  8b32 d012                   bne ++
  1739  8b34 c8                     iny
  1740  8b35 20ac8c                 jsr skipspaces
  1741  8b38 b90002                 lda inputbuf, y
  1742  8b3b c958                   cmp #'X'
  1743  8b3d d007                   bne ++
  1744  8b3f c8                     iny
  1745  8b40 cc2e95                 cpy len
  1746  8b43 d001                   bne ++
  1747  8b45 60                     rts ; Z true (EQ)
  1748  8b46 ac2f95             ++  ldy savepos
  1749  8b49 a201                   ldx #1 ; Z false (NE)
  1750  8b4b 60                     rts
  1751                          
  1752                          chkabsolutey:
  1753  8b4c 8c2f95                 sty savepos
  1754  8b4f b90002                 lda inputbuf, y
  1755  8b52 c924                   cmp #'$'
  1756  8b54 d001                   bne +
  1757  8b56 c8                     iny
  1758  8b57 20f98c             +   jsr chkhexword
  1759  8b5a d01c                   bne ++
  1760  8b5c 20ac8c                 jsr skipspaces
  1761  8b5f b90002                 lda inputbuf, y
  1762  8b62 c92c                   cmp #','
  1763  8b64 d012                   bne ++
  1764  8b66 c8                     iny
  1765  8b67 20ac8c                 jsr skipspaces
  1766  8b6a b90002                 lda inputbuf, y
  1767  8b6d c959                   cmp #'Y'
  1768  8b6f d007                   bne ++
  1769  8b71 c8                     iny
  1770  8b72 cc2e95                 cpy len
  1771  8b75 d001                   bne ++
  1772  8b77 60                     rts ; Z true (EQ)
  1773  8b78 ac2f95             ++  ldy savepos
  1774  8b7b a201                   ldx #1 ; Z false (NE)
  1775  8b7d 60                     rts
  1776                          
  1777                          chkindirect:
  1778  8b7e 8c2f95                 sty savepos
  1779  8b81 b90002                 lda inputbuf, y
  1780  8b84 c928                   cmp #'('
  1781  8b86 d022                   bne ++
  1782  8b88 c8                     iny
  1783  8b89 20ac8c                 jsr skipspaces
  1784  8b8c b90002                 lda inputbuf, y
  1785  8b8f c924                   cmp #'$'
  1786  8b91 d001                   bne +
  1787  8b93 c8                     iny
  1788  8b94 20f98c             +   jsr chkhexword
  1789  8b97 d011                   bne ++
  1790  8b99 20ac8c                 jsr skipspaces
  1791  8b9c b90002                 lda inputbuf, y
  1792  8b9f c929                   cmp #')'
  1793  8ba1 d007                   bne ++
  1794  8ba3 c8                     iny
  1795  8ba4 cc2e95                 cpy len
  1796  8ba7 d001                   bne ++
  1797  8ba9 60                     rts ; Z true (EQ)
  1798  8baa ac2f95             ++  ldy savepos
  1799  8bad a201                   ldx #1 ; Z false (NE)
  1800  8baf 60                     rts
  1801                          
  1802                          chkinstruction:
  1803  8bb0 cc2e95                 cpy len
  1804  8bb3 f02d                   beq ++
  1805  8bb5 8c3295                 sty tmp
  1806  8bb8 a237                   ldx #(ninst-1)
  1807  8bba b90002             -   lda inputbuf,y
  1808  8bbd dd838e                 cmp inst0,x
  1809  8bc0 d01a                   bne +
  1810  8bc2 c8                     iny
  1811  8bc3 b90002                 lda inputbuf,y
  1812  8bc6 ddbb8e                 cmp inst1,x
  1813  8bc9 d011                   bne +
  1814  8bcb c8                     iny
  1815  8bcc b90002                 lda inputbuf,y
  1816  8bcf ddf38e                 cmp inst2,x
  1817  8bd2 d008                   bne +
  1818  8bd4 c8                     iny
  1819  8bd5 8a                     txa
  1820  8bd6 8d2a95                 sta inidx
  1821  8bd9 a200                   ldx #0
  1822  8bdb 60                     rts
  1823  8bdc ac3295             +   ldy tmp
  1824  8bdf ca                     dex
  1825  8be0 10d8                   bpl -
  1826  8be2 a201               ++  ldx #1 ; Z false (NE)
  1827  8be4 60                     rts
  1828                          
  1829                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1830                              ; and allows mode promotion
  1831  8be5 200e8c                 jsr find_inst_and_mode2
  1832  8be8 f023                   beq ++
  1833  8bea ad2b95                 lda mode
  1834  8bed c906                   cmp #6
  1835  8bef 901c                   bcc ++
  1836  8bf1 c90a                   cmp #10
  1837  8bf3 b016                   bcs +
  1838  8bf5 6903                   adc #3
  1839  8bf7 8d2b95                 sta mode ; promote ZeroPage modes to Absolute modes
  1840  8bfa 200e8c                 jsr find_inst_and_mode2 ; try again once
  1841  8bfd d00e                   bne ++
  1842  8bff ad3095                 lda tmp2
  1843  8c02 8d258e                 sta ptr1
  1844  8c05 a900                   lda #0
  1845  8c07 8d268e                 sta ptr1+1
  1846  8c0a 60                     rts ; Z true (EQ)
  1847  8c0b a201               +   ldx #1 ; Z false (NE)
  1848  8c0d 60                 ++  rts
  1849                          
  1850                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1851  8c0e a296                   ldx #nopcodes-1
  1852  8c10 bddb90             -   lda instidx, x
  1853  8c13 bc7291                 ldy modeidx, x
  1854  8c16 cd2a95                 cmp inidx
  1855  8c19 d00e                   bne +
  1856  8c1b cc2b95                 cpy mode
  1857  8c1e d009                   bne +
  1858  8c20 8e2995                 stx opidx
  1859  8c23 202382                 jsr getsize
  1860  8c26 a200                   ldx #0 ; Z true (EQ)
  1861  8c28 60                     rts
  1862  8c29 ca                 +   dex
  1863  8c2a e0ff                   cpx #$ff
  1864  8c2c d0e2                   bne -
  1865  8c2e a201                   ldx #1 ; Z false (NE)
  1866  8c30 60                     rts
  1867                          
  1868                          executerun:
  1869  8c31 68                     pla ; remove low byte return address
  1870  8c32 68                     pla ; return high byte return address
  1871  8c33 68                     pla ; again, we're really not returning
  1872  8c34 68                     pla ; again, we're really not returning
  1873  8c35 20a58d                 jsr newline
  1874                          !ifndef MINIMUM {
  1875                          ; any C64
  1876  8c38 206980                 jsr install_nmi64
  1877                          }
  1878                          +   ; restore registers
  1879  8c3b ae3d95                 ldx registerSP
  1880  8c3e 9a                     txs
  1881  8c3f ad3e95                 lda registerSR
  1882  8c42 48                     pha
  1883  8c43 ad3a95                 lda registerA
  1884  8c46 ae3b95                 ldx registerX
  1885  8c49 ac3c95                 ldy registerY
  1886  8c4c 28                     plp
  1887  8c4d 6c258e                 jmp (ptr1)
  1888                          
  1889                          chkcontinuedis:
  1890  8c50 b90002                 lda inputbuf,y
  1891  8c53 c944                   cmp #'D'
  1892  8c55 d00a                   bne +
  1893  8c57 b90102                 lda inputbuf+1,y
  1894  8c5a c90d                   cmp #13
  1895  8c5c d003                   bne +
  1896  8c5e c8                     iny
  1897  8c5f a200                   ldx #0 ; restore Z set
  1898  8c61 60                 +   rts
  1899                          
  1900                          chkcontinueasm:
  1901  8c62 b90002                 lda inputbuf,y
  1902  8c65 c941                   cmp #'A'
  1903  8c67 d00a                   bne +
  1904  8c69 b90102                 lda inputbuf+1,y
  1905  8c6c c90d                   cmp #13
  1906  8c6e d003                   bne +
  1907  8c70 c8                     iny
  1908  8c71 a200                   ldx #0 ; restore Z set
  1909  8c73 60                 +   rts
  1910                          
  1911                          executedisassemble:
  1912  8c74 68                     pla ; remove low byte return address
  1913  8c75 68                     pla ; return high byte return address
  1914  8c76 20a58d                 jsr newline
  1915  8c79 4cbc81                 jmp disassemble
  1916                          
  1917                          reportnotimplemented:
  1918  8c7c a9c6                   lda #<notimplemented
  1919  8c7e a292                   ldx #>notimplemented
  1920  8c80 4c5284                 jmp strout
  1921                          
  1922                          reporterr:
  1923  8c83 c000                   cpy #0
  1924  8c85 f008                   beq +
  1925  8c87 a920                   lda #' '
  1926  8c89 20d2ff             -   jsr charout
  1927  8c8c 88                     dey
  1928  8c8d d0fa                   bne -
  1929  8c8f a93f               +   lda #'?'
  1930  8c91 20d2ff                 jsr charout
  1931  8c94 a90d                   lda #13
  1932  8c96 20d2ff                 jsr charout
  1933  8c99 60                     rts
  1934                          
  1935                          chkspace:
  1936  8c9a b90002                 lda inputbuf, y
  1937                          !ifndef MINIMUM {
  1938                              ; skip SHIFT-SPACES too on Commodore
  1939  8c9d c9a0                   cmp #$A0
  1940  8c9f f004                   beq +
  1941                          }
  1942  8ca1 c920                   cmp #$20
  1943  8ca3 d006                   bne ++
  1944  8ca5 c8                 +   iny
  1945  8ca6 20ac8c                 jsr skipspaces
  1946  8ca9 a900                   lda #0 ; set Z
  1947  8cab 60                 ++  rts
  1948                          
  1949                          skipspaces:
  1950  8cac b90002             -   lda inputbuf, y
  1951                          !ifndef MINIMUM {
  1952                              ; skip SHIFT-SPACES too on Commodore
  1953  8caf c9a0                   cmp #$A0
  1954  8cb1 f004                   beq +
  1955                          }
  1956  8cb3 c920                   cmp #$20
  1957  8cb5 d003                   bne ++
  1958  8cb7 c8                 +   iny
  1959  8cb8 d0f2                   bne -
  1960  8cba 60                 ++  rts
  1961                          
  1962                          chkdot:
  1963  8cbb b90002                 lda inputbuf, y
  1964  8cbe c92e                   cmp #'.'
  1965  8cc0 d003                   bne +
  1966  8cc2 c8                     iny
  1967  8cc3 a900                   lda #0 ; Z true (EQ)
  1968  8cc5 60                 +   rts
  1969                          
  1970                          chkhelp:
  1971  8cc6 b90002                 lda inputbuf, y
  1972  8cc9 c93f                   cmp #'?'
  1973  8ccb d003                   bne +
  1974  8ccd c8                     iny
  1975  8cce a900                   lda #0 ; Z true (EQ)
  1976  8cd0 60                 +   rts
  1977                          
  1978                          chkcolon:
  1979  8cd1 b90002                 lda inputbuf, y
  1980  8cd4 c93a                   cmp #':'
  1981  8cd6 d003                   bne +
  1982  8cd8 c8                     iny
  1983  8cd9 a900                   lda #0 ; Z true (EQ)
  1984  8cdb 60                 +   rts
  1985                          
  1986                          chkhexbyteofsequence:
  1987  8cdc 201184                 jsr inputhexbyte
  1988  8cdf 20fc8c                 jsr +
  1989  8ce2 d014                   bne ++ ; Z false (NE) if failed checks
  1990  8ce4 cc2e95                 cpy len
  1991  8ce7 f00f                   beq ++ ; Z true (EQ) if end of input
  1992  8ce9 8d3295                 sta tmp
  1993  8cec b90002                 lda inputbuf,y
  1994  8cef c920                   cmp #$20
  1995  8cf1 d005                   bne ++ ; Z false (NE) if not space
  1996  8cf3 ad3295                 lda tmp
  1997  8cf6 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1998  8cf8 60                 ++  rts
  1999                          
  2000                          chkhexword:
  2001                          chkhexaddr1:
  2002  8cf9 20e483                 jsr inputhexword
  2003  8cfc a200               +   ldx #0 ; Z true (EQ)
  2004  8cfe 9001                   bcc +
  2005  8d00 e8                     inx ; Z false (NE)
  2006  8d01 60                 +   rts
  2007                          
  2008                          chkhexbyte:
  2009  8d02 98                     tya
  2010  8d03 48                     pha ; save y
  2011  8d04 201184                 jsr inputhexbyte
  2012  8d07 b00f                   bcs +
  2013  8d09 8d3095                 sta tmp2
  2014  8d0c 203484                 jsr inputhexnybble
  2015  8d0f 9007                   bcc +
  2016  8d11 68                     pla ; throw away saved y
  2017  8d12 ad3095                 lda tmp2
  2018  8d15 a200                   ldx #0 ; Z true (EQ)
  2019  8d17 60                     rts
  2020  8d18 68                 +   pla
  2021  8d19 a8                     tay ; won't be zero, so Z false (NE)
  2022  8d1a 60                     rts
  2023                          
  2024                          chkhexaddr2:
  2025  8d1b ad258e                 lda ptr1
  2026  8d1e 48                     pha
  2027  8d1f ad268e                 lda ptr1+1
  2028  8d22 48                     pha
  2029  8d23 20f98c                 jsr chkhexaddr1
  2030  8d26 f005                   beq +
  2031  8d28 68                     pla
  2032  8d29 68                     pla
  2033  8d2a a901                   lda #1 ; Z false (NE)
  2034  8d2c 60                     rts
  2035  8d2d ad258e             +   lda ptr1
  2036  8d30 8d3395                 sta ptr2
  2037  8d33 ad268e                 lda ptr1+1
  2038  8d36 8d3495                 sta ptr2+1
  2039  8d39 68                     pla
  2040  8d3a 8d268e                 sta ptr1+1
  2041  8d3d 68                     pla
  2042  8d3e 8d258e                 sta ptr1
  2043  8d41 a900                   lda #0 ; Z true (EQ)
  2044  8d43 60                     rts
  2045                          
  2046                          chkbinbyte:
  2047  8d44 a208                   ldx #8
  2048  8d46 20548d             -   jsr chkbindigit
  2049  8d49 d008                   bne +
  2050  8d4b ca                     dex
  2051  8d4c d0f8                   bne -
  2052  8d4e 08                     php ; save Z true
  2053  8d4f ad3095                 lda tmp2
  2054  8d52 28                     plp ; restore Z true
  2055  8d53 60                 +   rts
  2056                          
  2057                          chkbindigit:
  2058  8d54 b90002                 lda inputbuf, y
  2059  8d57 38                     sec
  2060  8d58 e930                   sbc #$30
  2061  8d5a 900b                   bcc +
  2062  8d5c c902                   cmp #$02
  2063  8d5e b007                   bcs +
  2064  8d60 4a                     lsr ; rotate bit value into C
  2065  8d61 2e3095                 rol tmp2 ; rotate bit value into tmp2
  2066  8d64 c8                     iny ; advance in buffer
  2067  8d65 a900                   lda #0 ; set Z
  2068  8d67 60                 +   rts
  2069                          
  2070                          chkaddr1cmd:
  2071  8d68 b90002                 lda inputbuf, y
  2072  8d6b c941               +   cmp #'A'
  2073  8d6d d00b                   bne +
  2074  8d6f be0102                 ldx inputbuf+1, y
  2075  8d72 e00d                   cpx #13
  2076  8d74 d004                   bne +
  2077  8d76 c8                     iny
  2078  8d77 4c2088                 jmp executeassemble
  2079  8d7a c944               +   cmp #'D'
  2080  8d7c d00b                   bne +
  2081  8d7e be0102                 ldx inputbuf+1, y
  2082  8d81 e00d                   cpx #13
  2083  8d83 d004                   bne +
  2084  8d85 c8                     iny
  2085  8d86 4c748c                 jmp executedisassemble
  2086  8d89 c952               +   cmp #'R'
  2087  8d8b d017                   bne +
  2088  8d8d be0102                 ldx inputbuf+1, y
  2089  8d90 e00d                   cpx #13
  2090  8d92 d010                   bne +
  2091  8d94 c8                     iny
  2092  8d95 ad3f95                 lda registerPC
  2093  8d98 8d258e                 sta ptr1
  2094  8d9b ad4095                 lda registerPC+1
  2095  8d9e 8d268e                 sta ptr1+1
  2096  8da1 4c318c                 jmp executerun
  2097  8da4 60                 +   rts
  2098                          
  2099                          newline:
  2100  8da5 a90d                   lda #13
  2101  8da7 4cd2ff                 jmp charout
  2102                          
  2103                          space:
  2104  8daa a920                   lda #32
  2105  8dac 4cd2ff                 jmp charout
  2106                          
  2107                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  2108                          ;     jsr $ffd2
  2109                          ;     pha
  2110                          ; -   lda $d011
  2111                          ;     bpl -
  2112                          ; -   lda $d011
  2113                          ;     bmi -
  2114                          ; -   lda $d011
  2115                          ;     bpl -
  2116                          ; -   lda $d011
  2117                          ;     bmi -
  2118                          ;     pla
  2119                          ;     rts
  2120                          
  2121                          save_registers:
  2122  8daf 08                     php
  2123  8db0 8d3a95                 sta registerA
  2124  8db3 8e3b95                 stx registerX
  2125  8db6 8c3c95                 sty registerY
  2126  8db9 68                     pla
  2127  8dba 8d3e95                 sta registerSR
  2128  8dbd ba                     tsx
  2129  8dbe 8e3d95                 stx registerSP
  2130  8dc1 4cc68d                 jmp +
  2131                          
  2132                          execute_display_registers:
  2133  8dc4 68                     pla ; remove return address
  2134  8dc5 68                     pla
  2135                          +
  2136                              ; need some normality
  2137  8dc6 58                     cli
  2138  8dc7 d8                     cld
  2139                          
  2140  8dc8 20a58d                 jsr newline
  2141  8dcb 20d48d                 jsr display_registers
  2142                          !ifndef MINIMUM {
  2143                              ; any C64
  2144  8dce 208480                 jsr uninstall_nmi64
  2145                          }
  2146  8dd1 4c6080                 jmp input_loop
  2147                          
  2148                          ; PC   NV-BDIZC .A .X .Y .S
  2149                          ; 1234 10111011 01 02 03 FF
  2150                          display_registers:
  2151  8dd4 a90c                   lda #<reg_header
  2152  8dd6 a295                   ldx #>reg_header
  2153  8dd8 205284                 jsr strout
  2154  8ddb ad3f95                 lda registerPC
  2155  8dde ae4095                 ldx registerPC+1
  2156  8de1 20c883                 jsr disphexword
  2157  8de4 20aa8d                 jsr space
  2158  8de7 ad3e95                 lda registerSR
  2159  8dea 20b383                 jsr dispbinbyte
  2160  8ded 20aa8d                 jsr space
  2161  8df0 ad3a95                 lda registerA
  2162  8df3 20ce83                 jsr disphexbyte
  2163  8df6 20aa8d                 jsr space
  2164  8df9 ad3b95                 lda registerX
  2165  8dfc 20ce83                 jsr disphexbyte
  2166  8dff 20aa8d                 jsr space
  2167  8e02 ad3c95                 lda registerY
  2168  8e05 20ce83                 jsr disphexbyte
  2169  8e08 20aa8d                 jsr space
  2170  8e0b ad3d95                 lda registerSP
  2171  8e0e 20ce83                 jsr disphexbyte
  2172  8e11 4ca58d                 jmp newline
  2173                          
  2174                          !ifdef MINIMUM {
  2175                          
  2176                          lda_at_ptr1_y:
  2177                              lda (ptr1),y
  2178                              rts
  2179                          
  2180                          sta_at_ptr1_y:
  2181                              sta (ptr1),y
  2182                              rts
  2183                          
  2184                          lda_at_ptr3_y:
  2185                              lda (ptr3),y
  2186                              rts
  2187                          
  2188                          sta_at_ptr3_y:
  2189                              sta (ptr3),y
  2190                              rts
  2191                          
  2192                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2193                          ;; MC6850
  2194                          UART_DATA=$FFF8
  2195                          UART_STCR=$FFF9
  2196                          
  2197                          UART_INIT:
  2198                          	ldx #0b00000111 ; 11=reset device
  2199                          	stx UART_STCR
  2200                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  2201                          	sta UART_STCR
  2202                          	rts
  2203                          UART_OUT:
  2204                          	pha
  2205                          -	lda UART_STCR
  2206                          	and #2
  2207                          	beq - ; branch if TDRE=0, not finished transmitting
  2208                          	pla
  2209                          	pha
  2210                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  2211                          	sta UART_DATA
  2212                          	pla
  2213                          	rts
  2214                          UART_IN:
  2215                          -	lda UART_STCR
  2216                          	and #1
  2217                          	beq - ; branch if TDRF=0, not received
  2218                          	lda UART_DATA
  2219                          	; software "CAPS LOCK" because wozmon expects only uppercase
  2220                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  2221                          	beq BREAK
  2222                              ; force lowercase alphabet to uppercase
  2223                              cmp #'a'
  2224                          	bcc +
  2225                          	cmp #'z'+1
  2226                          	bcs +
  2227                          	eor #$20
  2228                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  2229                           	rts
  2230                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  2231                          	pha ; save A
  2232                          	lda UART_STCR
  2233                          	lsr ; put rightmost bit in carry
  2234                          	pla ; restore A affects flags
  2235                          	ror ; move carry to left bit, right bit to carry
  2236                          	php ; push processor to save N
  2237                          	rol ; restore A affects flags
  2238                          	plp ; pull processor to restore N
  2239                          	rts
  2240                          
  2241                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2242                          ; Processor start and interrupts
  2243                          
  2244                          NMI: ; unused on minimum (no source of interrupt)
  2245                              rti
  2246                          
  2247                          IRQ:
  2248                              pha
  2249                              php
  2250                              pla
  2251                              and #$10
  2252                              beq ++ ; not break
  2253                          ;BREAK HANDLER
  2254                              pla
  2255                              sta registerA
  2256                              pla
  2257                              sta registerSR
  2258                              pla
  2259                              cld
  2260                              sec
  2261                              sbc #2
  2262                              sta registerPC
  2263                              pla
  2264                              sbc #0
  2265                              sta registerPC+1
  2266                              lda #>save_registers
  2267                              pha
  2268                              lda #<save_registers
  2269                              pha
  2270                              lda registerSR
  2271                              pha
  2272                              lda registerA
  2273                              pha
  2274                          ++  pla
  2275                              rti
  2276                          
  2277                          BREAK:
  2278                              jmp RESET
  2279                          
  2280                          RESET:
  2281                              cld
  2282                              ldx #$FF
  2283                              txs
  2284                              jsr JUART_INIT
  2285                              cli
  2286                              jmp start
  2287                          ; !ifdef MINIMUM
  2288                          } else { ; not MINIMUM
  2289                          
  2290                          ptr1 = sta_at_ptr1_y + 1 ; and + 2
  2291                          
  2292                          lda_at_ptr1_y:
  2293  8e14 ad258e                 lda ptr1
  2294  8e17 8d218e                 sta lda_ptr1_op+1
  2295  8e1a ad268e                 lda ptr1+1
  2296  8e1d 8d228e                 sta lda_ptr1_op+2
  2297                          lda_ptr1_op:
  2298  8e20 b9ffff                 lda $ffff, y
  2299  8e23 60                     rts
  2300                          
  2301                          sta_at_ptr1_y:
  2302  8e24 99ffff                 sta $ffff, y
  2303  8e27 60                     rts
  2304                          
  2305                          ptr3 = sta_at_ptr3_y + 1 ; and + 2
  2306                          
  2307                          lda_at_ptr3_y:
  2308  8e28 ad398e                 lda ptr3
  2309  8e2b 8d358e                 sta lda_ptr3_op+1
  2310  8e2e ad3a8e                 lda ptr3+1
  2311  8e31 8d368e                 sta lda_ptr3_op+2
  2312                          lda_ptr3_op:
  2313  8e34 b9ffff                 lda $ffff, y
  2314  8e37 60                     rts
  2315                          
  2316                          sta_at_ptr3_y:
  2317  8e38 99ffff                 sta $ffff, y
  2318  8e3b 60                     rts
  2319                          
  2320                          nmi64:
  2321  8e3c 78                     sei
  2322  8e3d 8d3a95                 sta registerA
  2323  8e40 68                     pla
  2324  8e41 8d3e95                 sta registerSR
  2325  8e44 68                     pla
  2326  8e45 d8                     cld
  2327  8e46 8d3f95                 sta registerPC
  2328  8e49 68                     pla
  2329  8e4a 8d4095                 sta registerPC+1
  2330  8e4d a98d                   lda #>save_registers
  2331  8e4f 48                     pha
  2332  8e50 a9af                   lda #<save_registers
  2333  8e52 48                     pha
  2334  8e53 ad3e95                 lda registerSR
  2335  8e56 48                     pha
  2336  8e57 ad3a95                 lda registerA
  2337  8e5a 40                     rti
  2338                          
  2339                          brk64:
  2340  8e5b 68                     pla
  2341  8e5c a8                     tay
  2342  8e5d 68                     pla
  2343  8e5e aa                     tax
  2344  8e5f 68                     pla
  2345  8e60 8d3a95                 sta registerA
  2346  8e63 68                     pla
  2347  8e64 8d3e95                 sta registerSR
  2348  8e67 68                     pla
  2349  8e68 d8                     cld
  2350  8e69 38                     sec
  2351  8e6a e902                   sbc #2
  2352  8e6c 8d3f95                 sta registerPC
  2353  8e6f 68                     pla
  2354  8e70 e900                   sbc #0
  2355  8e72 8d4095                 sta registerPC+1
  2356  8e75 a98d                   lda #>save_registers
  2357  8e77 48                     pha
  2358  8e78 a9af                   lda #<save_registers
  2359  8e7a 48                     pha
  2360  8e7b ad3e95                 lda registerSR
  2361  8e7e 48                     pha
  2362  8e7f ad3a95                 lda registerA
  2363  8e82 40                     rti
  2364                          }
  2365                          
  2366                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2367                          ; data
  2368                          
  2369                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  2370                          ninst = 56
  2371  8e83 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  2372  8ebb 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  2373  8ef3 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  2374                          
  2375                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  2376                          mode_jmptable:
  2377  8f2b b882               !word dispModeAcc-1; 0 Accumulator 1
  2378  8f2d bd82               !word dispModeNone-1 ; 1 None 1
  2379  8f2f be82               !word dispModeImm-1 ; 2 Immediate 2
  2380  8f31 d082               !word dispModeIndX-1 ; 3 IndirectX 2
  2381  8f33 f182               !word dispModeIndY-1 ; 4 IndirectY 2
  2382  8f35 1283               !word dispModeRel-1 ; 5 Relative 2
  2383  8f37 c382               !word dispModeZP-1 ; 6 ZeroPage 2
  2384  8f39 5d83               !word dispModeZPX-1 ; 7 ZeroPageX 2
  2385  8f3b 6a83               !word dispModeZPY-1 ; 8 ZeroPageY 2
  2386  8f3d 7783               !word dispModeAbs-1 ; 9 Absolute 3
  2387  8f3f 8b83               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  2388  8f41 9883               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  2389  8f43 a583               !word dispModeInd-1 ; 12 Indirect 3
  2390                          
  2391                          nmodes = 13
  2392                          
  2393                          mode_sorted:
  2394  8f45 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  2395                          
  2396                          !ifdef MINIMUM {
  2397                          mode_0: !text "Accumulator", 0, "A", 0
  2398                          mode_1: !text "None", 0, 8, 0
  2399                          mode_2: !text "Immediate", 0, "#$12", 0
  2400                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  2401                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  2402                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  2403                          mode_6: !text "ZeroPage", 0, "$12", 0
  2404                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  2405                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  2406                          mode_9: !text "Absolute", 0, "$1234", 0
  2407                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  2408                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  2409                          mode_12: !text "Indirect", 0, "($1234)", 0
  2410                          } else {
  2411  8f52 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2412  8f60 4e4f4e45001400     mode_1: !text "NONE", 0, 20, 0
  2413  8f67 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2414  8f76 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2415  8f88 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2416  8f9a 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2417  8fb9 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2418  8fc6 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2419  8fd6 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2420  8fe6 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2421  8ff5 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2422  9007 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2423  9019 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2424                          }
  2425                          
  2426                          modes: ; table for easily displaying each mode_example
  2427  902a 528f               !word mode_0
  2428  902c 608f               !word mode_1
  2429  902e 678f               !word mode_2
  2430  9030 768f               !word mode_3
  2431  9032 888f               !word mode_4
  2432  9034 9a8f               !word mode_5
  2433  9036 b98f               !word mode_6
  2434  9038 c68f               !word mode_7
  2435  903a d68f               !word mode_8
  2436  903c e68f               !word mode_9
  2437  903e f58f               !word mode_10
  2438  9040 0790               !word mode_11
  2439  9042 1990               !word mode_12
  2440                          
  2441                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2442                          nopcodes = 151
  2443  9044 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2444  90db 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2445  9172 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2446                          
  2447                          copyright
  2448                          ;                  1         2         3         4
  2449                          ;         1234567890123456789012345678901234567890
  2450  9209 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2451                          !ifdef C64TERMINAL {
  2452                              !text 13, "(TERMINAL VERSION)"
  2453                          }
  2454  9229 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2455  924f 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2456  9266 00                 !text 0
  2457                          
  2458                          firsthelp
  2459                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2460  9267 0d0d               !text 13, 13
  2461  9269 54595045203f2046...!text "TYPE ? FOR HELP"
  2462  9278 0d00               !text 13, 0
  2463                          
  2464                          !ifndef MINIMUM {
  2465                          ; C64 only
  2466                          extra_help:
  2467  927a 5820202020202020...    !text "X           (EXIT MONITOR)", 13
  2468  9295 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S  (SAVE)", 13
  2469  92b7 00                     !text 0
  2470                          
  2471                          !ifdef C64SCREEN {
  2472  92b8 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  2473  92bf 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  2474                          }
  2475                          
  2476                          }
  2477                          
  2478  92c6 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2479                          
  2480                          generalhelp
  2481  92d7 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2482  92fd 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2483  9322 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2484  9345 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2485  936d 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2486  9389 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2487  93a9 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2488  93cb 00                 !text 0
  2489                          generalhelp2
  2490  93cc 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2491  93f1 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2492  940d 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2493  942c 3f41202020202020...!text "?A          (LIST 6502 INSTRUCTIONS)", 13
  2494  9451 3f41444320202020...!text "?ADC        (/ADC/ ADDRESSING MODES)", 13
  2495  9476 3f4d4f4445202020...!text "?MODE       (ADDRESSING MODES)", 13
  2496  9495 00                 !text 0
  2497                          generalhelp3
  2498  9496 3f2e202020202020...!text "?.          (DISPLAY REGISTERS)", 13
  2499  94b6 2e31323334202020...!text ".1234       (MODIFY PC,FLAGS,REGISTERS)", 13
  2500  94de 2e413a3031202020...!text ".A:01       (MODIFY REGISTER A,X,Y,S,P)", 13
  2501  9506 00                 !text 0
  2502                          
  2503  9507 4d4f444500         modes_keyword !text "MODE", 0
  2504                          
  2505  950c 2050432020204e56...reg_header !text " PC   NV-BDIZC .A .X .Y .S", 13, '.', 0
  2506                          
  2507                          !ifdef MINIMUM {
  2508                          opidx=$dfed
  2509                          inidx=$dfee
  2510                          mode=$dfef
  2511                          size=$dff0
  2512                          count=$dff1
  2513                          len=$dff2
  2514                          savepos=$dff3
  2515                          tmp2=$dff4
  2516                          flag=$dff5
  2517                          ptr2=$dff6;/7
  2518                          tmp=$dff8
  2519                          registerA = $dff9
  2520                          registerX = $dffa
  2521                          registerY = $dffb
  2522                          registerSP = $dffc
  2523                          registerSR = $dffd
  2524                          registerPC = $dffe;/f
  2525                          } else {
  2526  9529 00                 opidx !byte 0
  2527  952a 00                 inidx !byte 0
  2528  952b 00                 mode !byte 0
  2529  952c 00                 size !byte 0
  2530  952d 00                 count !byte 0
  2531  952e 00                 len !byte 0
  2532  952f 00                 savepos !byte 0
  2533  9530 00                 tmp2 !byte 0
  2534  9531 00                 flag !byte 0
  2535  9532 00                 tmp !byte 0
  2536  9533 0000               ptr2 !word 0
  2537  9535 0000               savebrkvector !word 0
  2538  9537 0000               savenmivector !word 0
  2539  9539 00                 drive !byte 0
  2540  953a 00                 registerA !byte 0
  2541  953b 00                 registerX !byte 0
  2542  953c 00                 registerY !byte 0
  2543  953d 00                 registerSP !byte 0
  2544  953e 00                 registerSR !byte 0
  2545  953f 0000               registerPC !word 0
  2546                          }
  2547                          
  2548                          !ifdef MINIMUM {
  2549                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2550                          ; JUMP table for some stability
  2551                          * = $FFEB
  2552                          JUART_CHK: JMP UART_CHK
  2553                          JUART_INIT: JMP UART_INIT
  2554                          JUART_OUT: JMP UART_OUT
  2555                          JUART_IN: JMP UART_IN
  2556                          
  2557                          !if * > $fff8 {
  2558                              !error "code overran MC6850 UART"
  2559                          }
  2560                          
  2561                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2562                          ; 6502 vectors
  2563                          * = $fffa
  2564                              !word NMI
  2565                              !word RESET
  2566                              !word IRQ
  2567                          } else { // C64
  2568                              !if * > $a000 {
  2569                                  !error "code/data overran $a000"
  2570                              }
  2571                          }
  2572                          
  2573                          finish = *
