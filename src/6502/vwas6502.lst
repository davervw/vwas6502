
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: work in progress, disassembles itself <<<
     4                          ;;
     5                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     6                          ;; MIT License
     7                          ;;
     8                          ;; Copyright (c) 2024 David R. Van Wagner
     9                          ;; davevw.com
    10                          ;;
    11                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    12                          ;; of this software and associated documentation files (the "Software"), to deal
    13                          ;; in the Software without restriction, including without limitation the rights
    14                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    15                          ;; copies of the Software, and to permit persons to whom the Software is
    16                          ;; furnished to do so, subject to the following conditions:
    17                          ;;
    18                          ;; The above copyright notice and this permission notice shall be included in all
    19                          ;; copies or substantial portions of the Software.
    20                          ;;
    21                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    22                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    23                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    24                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    25                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    26                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    27                          ;; SOFTWARE.
    28                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    29                          
    30                          ;; VWAS2024 (C) 2024 DAVID R. VAN WAGNER
    31                          ;; MIT LICENSE DAVEVW.COM
    32                          ;; _
    33                          ;; INTERACTIVE SYNTAX >>> PLANNED, work in progress <<<
    34                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    35                          ;; 1000 (display memory at $1000)
    36                          ;; 1000.2000 (display memory range $1000 to $2000)
    37                          ;; 1000 r (JMP $1000)
    38                          ;; 1000: 01 02 03 (modify memory)
    39                          ;; (NEW SYNTAX)
    40                          ;; 1000 d (disassemble starting at, interactive until q or ESC)
    41                          ;; 1000 a (assemble starting at, interactive until empty line) 
    42                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    43                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    44                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    45                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    46                          ;; . (display registers, VICE format or custom? screen editor changeable?)
    47                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    48                          ;; 1000.2000 "filename" 08 save (save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, can abbreviate to s)
    49                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    50                          ;; ? (commands help)
    51                          ;; ? a (list instructions available)
    52                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    53                          ;; ? mode (show addressing modes example syntax for 6502)
    54                          ;;
    55                          ;; (INTERACTIVE ASSEMBLER)
    56                          ;; 1000 _
    57                          ;;      ADC #$12
    58                          ;; 1000 69 12    ADC #$12
    59                          ;; 1002 _
    60                          ;;      JSR $1234
    61                          ;; 1002 20 34 12 JSR $1234
    62                          ;; 1005 _
    63                          ;;      RTS
    64                          ;; 1005 60       RTS
    65                          ;; 1006 _
    66                          ;;      XYZ
    67                          ;;      XYZ ?
    68                          ;; 1006 _
    69                          ;; _
    70                          ;;
    71                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    72                          ;; and can cursor up to revise, 
    73                          ;;
    74                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    75                          ;;
    76                          
    77                          ; global
    78                          inputbuf=$0200
    79                          
    80                          ; kernal/system calls
    81                          charout=$ffd2
    82                          charin=$ffcf ; screen editor
    83                          getkey=$ffe4
    84                          
    85                          ; zeropage
    86                          ptr1=$fb ; and $fc
    87                          ptr2=$fd ; and $fe
    88                          tmp=$ff
    89                          opidx=$22
    90                          inidx=$23
    91                          mode=$24
    92                          size=$25
    93                          ptr3=$26 ; and $27
    94                          count=$a3
    95                          
    96                          *=$c000
    97                          start:
    98  c000 a992                   lda #<copyright
    99  c002 a2c7                   ldx #>copyright
   100  c004 20bbc2                 jsr strout
   101  c007 20ccc2             -   jsr inputline
   102  c00a 20dac2                 jsr parseline
   103  c00d 4c07c0                 jmp -
   104                          
   105                          test: ; all the addressing modes here for testing disassembly
   106  c010 ea                     nop
   107  c011 ad3412                 lda $1234
   108  c014 bd3412                 lda $1234,x
   109  c017 b93412                 lda $1234,y
   110  c01a 0a                     asl
   111  c01b a912                   lda #$12
   112  c01d a112                   lda ($12,x)
   113  c01f b112                   lda ($12),y
   114  c021 6c3412                 jmp ($1234)
   115  c024 d0fe               -   bne -
   116  c026 a512                   lda $12
   117  c028 b512                   lda $12,x
   118  c02a b612                   ldx $12,y
   119  c02c ff                     !byte $FF ; unknown
   120                          
   121  c02d a992               +   lda #<copyright
   122  c02f a2c7                   ldx #>copyright
   123  c031 20bbc2                 jsr strout   
   124  c034 a900                   lda #<start
   125  c036 a2c0                   ldx #>start
   126  c038 85fb                   sta ptr1
   127  c03a 86fc                   stx ptr1+1
   128  c03c a9af                   lda #<end
   129  c03e a2c4                   ldx #>end
   130  c040 85fd                   sta ptr2
   131  c042 86fe                   stx ptr2+1
   132  c044 205ac0                 jsr disassemble
   133  c047 a5fd                   lda ptr2
   134  c049 a6fe                   ldx ptr2+1
   135  c04b 85fb                   sta ptr1
   136  c04d 86fc                   stx ptr1+1
   137  c04f a904                   lda #<finish
   138  c051 a2c8                   ldx #>finish
   139  c053 85fd                   sta ptr2
   140  c055 86fe                   stx ptr2+1
   141  c057 4c3ac2                 jmp display_memory
   142                          
   143                          disassemble:
   144  c05a a918               --  lda #24
   145  c05c 85a3                   sta count
   146  c05e a000               -   ldy #0
   147  c060 b1fb                   lda (ptr1),y
   148  c062 208cc0                 jsr find_opcode
   149  c065 20e5c0                 jsr disp_current
   150  c068 a525                   lda size
   151  c06a 1002                   bpl +
   152  c06c a901                   lda #1
   153  c06e 18                 +   clc
   154  c06f 65fb                   adc ptr1
   155  c071 85fb                   sta ptr1
   156  c073 9002                   bcc +
   157  c075 e6fc                   inc ptr1+1
   158  c077 c6a3               +   dec count
   159  c079 d0e3                   bne -
   160  c07b 209bc4                 jsr pagemore
   161  c07e d0da                   bne --
   162  c080 60                     rts
   163                          
   164                          compareptrs:
   165  c081 a5fc                   lda ptr1+1
   166  c083 c5fe                   cmp ptr2+1
   167  c085 d004                   bne +
   168  c087 a5fb                   lda ptr1
   169  c089 c5fd                   cmp ptr2
   170  c08b 60                 +   rts
   171                          
   172                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   173                          ; and properties updated in ZP globals size,inidx,opidx,mode
   174  c08c a001                   ldy #1
   175  c08e 8425                   sty size
   176  c090 a097                   ldy #nopcodes
   177  c092 a296                   ldx #nopcodes-1
   178  c094 ddcdc5             -   cmp opcodes,x
   179  c097 f00b                   beq +
   180  c099 ca                     dex
   181  c09a 88                     dey
   182  c09b d0f7                   bne -
   183  c09d 18                     clc
   184  c09e a9ff                   lda #$FF
   185  c0a0 aa                     tax
   186  c0a1 a8                     tay
   187  c0a2 9013                   bcc ++
   188  c0a4 bd64c6             +   lda instidx, x
   189  c0a7 bcfbc6                 ldy modeidx, x
   190  c0aa c002                   cpy #2 // Immediate
   191  c0ac 9008                   bcc +
   192  c0ae e625                   inc size
   193  c0b0 c009                   cpy #9 // Absolute
   194  c0b2 9002                   bcc +
   195  c0b4 e625                   inc size
   196  c0b6 38                 +   sec
   197  c0b7 8523               ++  sta inidx
   198  c0b9 8622                   stx opidx
   199  c0bb 8424                   sty mode
   200  c0bd 60                     rts
   201                          
   202                          disp_opcode: ; .A opcode byte
   203  c0be 208cc0                 jsr find_opcode
   204  c0c1 8a                     txa
   205                              ; fall through to display instruction
   206                          
   207                          dispinst: ; .A instruction index 0..55
   208  c0c2 aa                     tax
   209  c0c3 e038                   cpx #ninst
   210  c0c5 b012                   bcs +
   211  c0c7 bdb0c4                 lda inst0, x
   212  c0ca 20d2ff                 jsr charout
   213  c0cd bde8c4                 lda inst1, x
   214  c0d0 20d2ff                 jsr charout
   215  c0d3 bd20c5                 lda inst2, x
   216  c0d6 4cd2ff                 jmp charout
   217  c0d9 a93f               +   lda #'?'
   218  c0db 20d2ff                 jsr charout
   219  c0de 20d2ff                 jsr charout
   220  c0e1 20d2ff                 jsr charout
   221  c0e4 60                     rts
   222                          
   223                          disp_current:
   224  c0e5 a5fb                   lda ptr1
   225  c0e7 a6fc                   ldx ptr1+1
   226  c0e9 201ec2                 jsr disphexword
   227  c0ec a920                   lda #$20
   228  c0ee 20d2ff                 jsr charout
   229  c0f1 a000                   ldy #0
   230  c0f3 a625                   ldx size
   231  c0f5 b1fb               -   lda (ptr1),y
   232  c0f7 2024c2                 jsr disphexbyte
   233  c0fa a920                   lda #$20
   234  c0fc 20d2ff                 jsr charout
   235  c0ff c8                     iny
   236  c100 ca                     dex
   237  c101 d0f2                   bne -
   238  c103 c003               -   cpy #3
   239  c105 f00e                   beq +
   240  c107 a920                   lda #$20
   241  c109 20d2ff                 jsr charout
   242  c10c 20d2ff                 jsr charout
   243  c10f 20d2ff                 jsr charout
   244  c112 c8                     iny
   245  c113 d0ee                   bne -
   246  c115 a523               +   lda inidx
   247  c117 20c2c0                 jsr dispinst
   248  c11a a920                   lda #$20
   249  c11c 20d2ff                 jsr charout
   250  c11f 2027c1                 jsr disp_mode
   251  c122 a90d                   lda #13
   252  c124 4cd2ff                 jmp charout
   253                          
   254                          disp_mode
   255  c127 a524                   lda mode
   256  c129 c90d                   cmp #13
   257  c12b b00a                   bcs +
   258  c12d 0a                     asl
   259  c12e aa                     tax
   260  c12f bd59c5                 lda mode_jmptable+1,x
   261  c132 48                     pha
   262  c133 bd58c5                 lda mode_jmptable,x
   263  c136 48                     pha
   264  c137 60                 +   rts
   265                          
   266                          dispModeAcc:
   267  c138 a941                   lda #'A'
   268  c13a 4cd2ff                 jmp charout
   269                          
   270                          dispModeNone:
   271  c13d 60                     rts
   272                          
   273                          dispModeImm:
   274  c13e a923                   lda #'#'
   275  c140 20d2ff                 jsr charout
   276                          dispModeZP:
   277  c143 a924                   lda #'$'
   278  c145 20d2ff                 jsr charout
   279  c148 a001                   ldy #1
   280  c14a b1fb                   lda (ptr1),y
   281  c14c 4c24c2                 jmp disphexbyte
   282                          
   283                          dispModeIndX:
   284  c14f a928                   lda #'('
   285  c151 20d2ff                 jsr charout
   286  c154 a924                   lda #'$'
   287  c156 20d2ff                 jsr charout
   288  c159 a001                   ldy #1
   289  c15b b1fb                   lda (ptr1),y
   290  c15d 2024c2                 jsr disphexbyte
   291  c160 a92c                   lda #','
   292  c162 20d2ff                 jsr charout
   293  c165 a958                   lda #'X'
   294  c167 20d2ff                 jsr charout
   295  c16a a929                   lda #')'
   296  c16c 4cd2ff                 jmp charout
   297                          
   298                          dispModeIndY:
   299  c16f a928                   lda #'('
   300  c171 20d2ff                 jsr charout
   301  c174 a924                   lda #'$'
   302  c176 20d2ff                 jsr charout
   303  c179 a001                   ldy #1
   304  c17b b1fb                   lda (ptr1),y
   305  c17d 2024c2                 jsr disphexbyte
   306  c180 a929                   lda #')'
   307  c182 20d2ff                 jsr charout
   308  c185 a92c                   lda #','
   309  c187 20d2ff                 jsr charout
   310  c18a a959                   lda #'Y'
   311  c18c 4cd2ff                 jmp charout
   312                          
   313                          dispModeRel:
   314  c18f a924                   lda #'$'
   315  c191 20d2ff                 jsr charout
   316  c194 18                     clc
   317  c195 a5fb                   lda ptr1
   318  c197 6902                   adc #2
   319  c199 8526                   sta ptr3
   320  c19b a5fc                   lda ptr1+1
   321  c19d 6900                   adc #0
   322  c19f 8527                   sta ptr3+1
   323  c1a1 a001                   ldy #1
   324  c1a3 b1fb                   lda (ptr1),y
   325  c1a5 1014                   bpl +
   326                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   327  c1a7 49ff                   eor #$FF ; inverse
   328  c1a9 18                     clc
   329  c1aa 6901                   adc #1 ; complete getting absolute value from two's complement
   330  c1ac 85ff                   sta tmp
   331  c1ae 38                     sec
   332  c1af a526                   lda ptr3
   333  c1b1 e5ff                   sbc tmp
   334  c1b3 8526                   sta ptr3
   335  c1b5 b00d                   bcs ++
   336  c1b7 c627                   dec ptr3+1
   337  c1b9 9009                   bcc ++
   338  c1bb 18                 +   clc ; simple case of adding
   339  c1bc 6526                   adc ptr3
   340  c1be 8526                   sta ptr3
   341  c1c0 9002                   bcc ++
   342  c1c2 e627                   inc ptr3+1
   343  c1c4 a526               ++  lda ptr3
   344  c1c6 a627                   ldx ptr3+1
   345  c1c8 4c1ec2                 jmp disphexword
   346                          
   347                          dispModeZPX:
   348  c1cb 2043c1                 jsr dispModeZP
   349  c1ce a92c                   lda #','
   350  c1d0 20d2ff                 jsr charout
   351  c1d3 a958                   lda #'X'
   352  c1d5 4cd2ff                 jmp charout
   353                          
   354                          dispModeZPY:
   355  c1d8 2043c1                 jsr dispModeZP
   356  c1db a92c                   lda #','
   357  c1dd 20d2ff                 jsr charout
   358  c1e0 a959                   lda #'Y'
   359  c1e2 4cd2ff                 jmp charout
   360                          
   361                          dispModeAbs:
   362  c1e5 a924                   lda #'$'
   363  c1e7 20d2ff                 jsr charout
   364  c1ea a001                   ldy #1
   365  c1ec b1fb                   lda (ptr1),y
   366  c1ee 48                     pha
   367  c1ef c8                     iny
   368  c1f0 b1fb                   lda (ptr1),y
   369  c1f2 aa                     tax
   370  c1f3 68                     pla
   371  c1f4 4c1ec2                 jmp disphexword
   372                          
   373                          dispModeAbsX:
   374  c1f7 20e5c1                 jsr dispModeAbs
   375  c1fa a92c                   lda #','
   376  c1fc 20d2ff                 jsr charout
   377  c1ff a958                   lda #'X'
   378  c201 4cd2ff                 jmp charout
   379                          
   380                          dispModeAbsY:
   381  c204 20e5c1                 jsr dispModeAbs
   382  c207 a92c                   lda #','
   383  c209 20d2ff                 jsr charout
   384  c20c a959                   lda #'Y'
   385  c20e 4cd2ff                 jmp charout
   386                          
   387                          dispModeInd:
   388  c211 a928                   lda #'('
   389  c213 20d2ff                 jsr charout
   390  c216 20e5c1                 jsr dispModeAbs
   391  c219 a929                   lda #')'
   392  c21b 4cd2ff                 jmp charout
   393                          
   394                          disphexword: ; .A low, .X high, 0000..FFFF
   395  c21e 48                     pha
   396  c21f 8a                     txa
   397  c220 2024c2                 jsr disphexbyte
   398  c223 68                     pla
   399                              ;fall through to call again
   400                          
   401                          disphexbyte: ; .A 00..FF
   402  c224 48                     pha
   403  c225 4a                     lsr
   404  c226 4a                     lsr
   405  c227 4a                     lsr
   406  c228 4a                     lsr
   407  c229 202dc2                 jsr disphexnybble
   408  c22c 68                     pla
   409                              ;fall through to call again
   410                          
   411                          disphexnybble: ; .A 0..F
   412  c22d 290f                   and #$0F
   413  c22f 0930                   ora #$30
   414  c231 c93a                   cmp #$3A
   415  c233 9002                   bcc +
   416  c235 6906                   adc #$06
   417  c237 4cd2ff             +   jmp charout
   418                          
   419                          display_memory:
   420  c23a a5fb               --  lda ptr1
   421  c23c a6fc                   ldx ptr1+1
   422  c23e 201ec2                 jsr disphexword
   423  c241 a920                   lda #$20
   424  c243 20d2ff                 jsr charout
   425  c246 2081c0             -   jsr compareptrs
   426  c249 b00c                   bcs +
   427  c24b a000                   ldy #0
   428  c24d b1fb                   lda (ptr1),y
   429  c24f 2024c2                 jsr disphexbyte
   430  c252 a920                   lda #$20
   431  c254 20d2ff                 jsr charout
   432  c257 e6fb               +   inc ptr1
   433  c259 d002                   bne +
   434  c25b e6fc                   inc ptr1+1
   435  c25d a5fb               +   lda ptr1
   436  c25f 2907                   and #$07
   437  c261 d0e3                   bne -
   438  c263 a90d                   lda #13
   439  c265 20d2ff                 jsr charout
   440  c268 2081c0                 jsr compareptrs
   441  c26b 90cd                   bcc --
   442  c26d 60                     rts
   443                              
   444                          inputhexword:
   445  c26e 2086c2                 jsr inputhexbyte
   446  c271 b012                   bcs ++
   447  c273 85fb                   sta ptr1 ; assume one byte
   448  c275 a900                   lda #0
   449  c277 85fc                   sta ptr1+1 ; extend to 16 bits
   450  c279 2086c2                 jsr inputhexbyte
   451  c27c b006                   bcs +
   452  c27e a6fb                   ldx ptr1 ; two bytes so shift the bytes
   453  c280 86fc                   stx ptr1+1
   454  c282 85fb                   sta ptr1
   455  c284 18                 +   clc
   456  c285 60                 ++  rts
   457                          
   458                          inputhexbyte:
   459  c286 209dc2                 jsr inputhexnybble
   460  c289 b011                   bcs +
   461  c28b 85ff                   sta tmp
   462  c28d 209dc2                 jsr inputhexnybble
   463  c290 b00a                   bcs +
   464  c292 06ff                   asl tmp
   465  c294 06ff                   asl tmp
   466  c296 06ff                   asl tmp
   467  c298 06ff                   asl tmp
   468  c29a 05ff                   ora tmp
   469  c29c 60                 +   rts
   470                          
   471                          inputhexnybble:
   472  c29d b90002                 lda $0200,y
   473  c2a0 297f                   and #$7F
   474  c2a2 38                     sec
   475  c2a3 e930                   sbc #$30
   476  c2a5 9012                   bcc ++
   477  c2a7 c90a                   cmp #10
   478  c2a9 900c                   bcc +
   479  c2ab e907                   sbc #7
   480  c2ad 900a                   bcc ++
   481  c2af c90a                   cmp #10
   482  c2b1 9006                   bcc ++
   483  c2b3 c910                   cmp #16
   484  c2b5 b002                   bcs ++
   485  c2b7 c8                 +   iny
   486  c2b8 60                     rts
   487  c2b9 38                 ++  sec
   488  c2ba 60                     rts
   489                          
   490                          strout:
   491  c2bb 8526                   sta ptr3
   492  c2bd 8627                   stx ptr3+1
   493  c2bf a000                   ldy #0
   494  c2c1 b126               -   lda (ptr3),y
   495  c2c3 f006                   beq +
   496  c2c5 20d2ff                 jsr charout
   497  c2c8 c8                     iny
   498  c2c9 d0f6                   bne -
   499  c2cb 60                 +   rts
   500                          
   501                          inputline:
   502  c2cc a000                   ldy #0
   503  c2ce 20cfff             -   jsr charin
   504  c2d1 990002                 sta inputbuf,y
   505  c2d4 c8                     iny
   506  c2d5 c90d                   cmp #13
   507  c2d7 d0f5                   bne -
   508  c2d9 60                 +   rts
   509                          
   510                          parseline:
   511  c2da c001                   cpy #1
   512  c2dc f027                   beq ++ ; nothing but an empty line
   513  c2de 88                     dey
   514  c2df 8425                   sty size
   515                              ; skip whitespace
   516                              ; check for address, put in ptr1
   517                              ; or check for dot, then require address put in ptr2
   518                              ; or check for ?, and optional parameter, execute help
   519                              ; check for whitespace
   520                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   521                              ; check for string, store at start of inputbuf
   522                              ; check for drive number
   523                              ; check for whitespace
   524                              ; check command ":rda?mls", execute command
   525  c2e1 a000                   ldy #0
   526  c2e3 20f0c3                 jsr skipspaces
   527  c2e6 c425                   cpy size
   528  c2e8 f01b                   beq ++
   529  c2ea 20fbc3                 jsr chkdot
   530  c2ed d003                   bne +
   531  c2ef 4ca6c3                 jmp executedot
   532  c2f2 2006c4             +   jsr chkhelp
   533  c2f5 d003                   bne +
   534  c2f7 4ca6c3                 jmp executehelp
   535  c2fa 2050c4             +   jsr chkhexaddr1
   536  c2fd d003                   bne e
   537  c2ff 4c06c3                 jmp executeaddr1
   538  c302 4cd9c3             e:  jmp reporterr
   539  c305 60                 ++  rts
   540                          
   541                          executeaddr1:
   542  c306 c425                   cpy size
   543  c308 d003                   bne +
   544  c30a 4c3ac3                 jmp executedisplay1
   545  c30d 20fbc3             +   jsr chkdot
   546  c310 d008                   bne +
   547  c312 2059c4                 jsr chkhexaddr2
   548  c315 d0eb                   bne e
   549  c317 4c30c3                 jmp executeaddr12
   550  c31a 20f0c3             +   jsr skipspaces
   551  c31d 2011c4                 jsr chkcolon
   552  c320 d003                   bne +
   553  c322 4c84c3                 jmp executemodify
   554  c325 207ac4             +   jsr chkaddr1cmd ; rda, will not return here if cmd
   555  c328 201cc4                 jsr chkfilename
   556  c32b d0d5                   bne e
   557  c32d f077                   beq executeloadfilename
   558  c32f 00                     brk ; will never get here
   559                          
   560                          executeaddr12:
   561  c330 c425                   cpy size
   562  c332 d003                   bne +
   563  c334 4c42c3                 jmp executedisplay12
   564  c337 4cd2c3             +   jmp reportnotimplemented
   565                          
   566                          executedisplay1:
   567  c33a a5fb                   lda ptr1
   568  c33c 85fd                   sta ptr2
   569  c33e a5fc                   lda ptr1+1
   570  c340 85fe                   sta ptr2+1
   571                              ; fall through executedisplay12
   572                          
   573                          executedisplay12:
   574  c342 a9ff                   lda #$ff
   575  c344 85a3                   sta count
   576  c346 e6a3               -   inc count
   577  c348 a5a3                   lda count
   578  c34a 2907                   and #$07
   579  c34c d016                   bne +
   580  c34e a90d                   lda #13
   581  c350 20d2ff                 jsr charout
   582  c353 a5fb                   lda ptr1
   583  c355 a6fc                   ldx ptr1+1
   584  c357 201ec2                 jsr disphexword
   585  c35a a93a                   lda #':'
   586  c35c 20d2ff                 jsr charout
   587  c35f a920                   lda #' '
   588  c361 20d2ff                 jsr charout
   589  c364 a000               +   ldy #0
   590  c366 b1fb                   lda (ptr1),y
   591  c368 2024c2                 jsr disphexbyte
   592  c36b a920                   lda #' '
   593  c36d 20d2ff                 jsr charout
   594  c370 e6fb                   inc ptr1
   595  c372 d004                   bne +
   596  c374 e6fc                   inc ptr1+1
   597  c376 f007                   beq ++
   598  c378 2081c0             +   jsr compareptrs
   599  c37b 90c9                   bcc -
   600  c37d f0c7                   beq -
   601  c37f a90d               ++  lda #13
   602  c381 4cd2ff                 jmp charout
   603                          
   604                          executemodify:
   605  c384 20f0c3                 jsr skipspaces
   606  c387 c425                   cpy size
   607  c389 f018                   beq ++
   608  c38b 2036c4                 jsr chkhexbyte
   609  c38e f003                   beq +
   610  c390 4c02c3                 jmp e
   611  c393 84ff               +   sty tmp
   612  c395 a000                   ldy #0
   613  c397 91fb                   sta (ptr1),y
   614  c399 e6fb                   inc ptr1
   615  c39b d002                   bne +
   616  c39d e6fc                   inc ptr1+1
   617  c39f a4ff               +   ldy tmp
   618  c3a1 d0e1                   bne executemodify
   619  c3a3 4c96c4             ++  jmp newline
   620                          
   621                          executeloadfilename:
   622                          executedot:
   623                          executeaddr1cmd:
   624                          executehelp:
   625  c3a6 4cd2c3                 jmp reportnotimplemented
   626                          
   627                          executeassemble:
   628  c3a9 68                     pla ; remove low byte return address
   629  c3aa 68                     pla ; return high byte return address
   630  c3ab 2096c4                 jsr newline
   631  c3ae 4cd2c3                 jmp reportnotimplemented
   632                          
   633                          executerun:
   634  c3b1 68                     pla ; remove low byte return address
   635  c3b2 68                     pla ; return high byte return address
   636  c3b3 68                     pla ; again, we're really not returning
   637  c3b4 68                     pla ; again, we're really not returning
   638  c3b5 2096c4                 jsr newline
   639  c3b8 38                     sec
   640  c3b9 a5fb                   lda ptr1
   641  c3bb e901                   sbc #1
   642  c3bd 85fb                   sta ptr1
   643  c3bf b002                   bcs +
   644  c3c1 c6fc                   dec ptr1+1
   645  c3c3 a5fc               +   lda ptr1+1
   646  c3c5 48                     pha
   647  c3c6 a5fb                   lda ptr1
   648  c3c8 48                     pha
   649  c3c9 60                     rts
   650                          
   651                          executedisassemble:
   652  c3ca 68                     pla ; remove low byte return address
   653  c3cb 68                     pla ; return high byte return address
   654  c3cc 2096c4                 jsr newline
   655  c3cf 4c5ac0                 jmp disassemble
   656                          
   657                          reportnotimplemented:
   658  c3d2 a9d3                   lda #<notimplemented
   659  c3d4 a2c7                   ldx #>notimplemented
   660  c3d6 4cbbc2                 jmp strout
   661                          
   662                          reporterr:
   663  c3d9 c000                   cpy #0
   664  c3db f008                   beq +
   665  c3dd a920                   lda #' '
   666  c3df 20d2ff             -   jsr charout
   667  c3e2 88                     dey
   668  c3e3 d0fa                   bne -
   669  c3e5 a93f               +   lda #'?'
   670  c3e7 20d2ff                 jsr charout
   671  c3ea a90d                   lda #13
   672  c3ec 20d2ff                 jsr charout
   673  c3ef 60                     rts
   674                          
   675                          skipspaces:
   676  c3f0 b90002             -   lda inputbuf, y
   677  c3f3 c920                   cmp #$20
   678  c3f5 d003                   bne +
   679  c3f7 c8                     iny
   680  c3f8 d0f6                   bne -
   681  c3fa 60                 +   rts
   682                          
   683                          chkdot:
   684  c3fb b90002                 lda inputbuf, y
   685  c3fe c92e                   cmp #'.'
   686  c400 d003                   bne +
   687  c402 c8                     iny
   688  c403 a900                   lda #0 ; Z true (EQ)
   689  c405 60                 +   rts
   690                          
   691                          chkhelp:
   692  c406 b90002                 lda inputbuf, y
   693  c409 c93f                   cmp #'?'
   694  c40b d003                   bne +
   695  c40d c8                     iny
   696  c40e a900                   lda #0 ; Z true (EQ)
   697  c410 60                 +   rts
   698                          
   699                          chkcolon:
   700  c411 b90002                 lda inputbuf, y
   701  c414 c93a                   cmp #':'
   702  c416 d003                   bne +
   703  c418 c8                     iny
   704  c419 a900                   lda #0 ; Z true (EQ)
   705  c41b 60                 +   rts
   706                          
   707                          chkfilename:
   708  c41c 84ff                   sty tmp
   709  c41e b90002                 lda inputbuf, y
   710  c421 c922                   cmp #34
   711  c423 d010                   bne ++
   712  c425 c8                 -   iny
   713  c426 b90002                 lda inputbuf, y
   714  c429 c90d                   cmp #13
   715  c42b d004                   bne +
   716  c42d a4ff                   ldy tmp
   717  c42f d004                   bne ++
   718  c431 c922               +   cmp #34
   719  c433 d0f0                   bne -
   720  c435 60                 ++  rts
   721                          
   722                          chkhexbyte:
   723  c436 2086c2                 jsr inputhexbyte
   724  c439 2053c4                 jsr +
   725  c43c d011                   bne ++ ; Z false (NE) if failed checks
   726  c43e c425                   cpy size
   727  c440 f00d                   beq ++ ; Z true (EQ) if end of input
   728  c442 85ff                   sta tmp
   729  c444 b90002                 lda inputbuf,y
   730  c447 c920                   cmp #$20
   731  c449 d004                   bne ++ ; Z false (NE) if not space
   732  c44b a5ff                   lda tmp
   733  c44d a200                   ldx #0 ; Z true (EQ) is space delimeter
   734  c44f 60                 ++  rts
   735                          
   736                          chkhexaddr1:
   737  c450 206ec2                 jsr inputhexword
   738  c453 a200               +   ldx #0 ; Z true (EQ)
   739  c455 9001                   bcc +
   740  c457 e8                     inx ; Z false (NE)
   741  c458 60                 +   rts
   742                          
   743                          chkhexaddr2:
   744  c459 a5fb                   lda ptr1
   745  c45b 48                     pha
   746  c45c a5fc                   lda ptr1+1
   747  c45e 48                     pha
   748  c45f 2050c4                 jsr chkhexaddr1
   749  c462 f005                   beq +
   750  c464 68                     pla
   751  c465 68                     pla
   752  c466 a901                   lda #1 ; Z false (NE)
   753  c468 60                     rts
   754  c469 a5fb               +   lda ptr1
   755  c46b 85fd                   sta ptr2
   756  c46d a5fc                   lda ptr1+1
   757  c46f 85fe                   sta ptr2+1
   758  c471 68                     pla
   759  c472 85fc                   sta ptr1+1
   760  c474 68                     pla
   761  c475 85fb                   sta ptr1
   762  c477 a900                   lda #0 ; Z true (EQ)
   763  c479 60                     rts    
   764                          
   765                          chkaddr1cmd:
   766  c47a b90002                 lda inputbuf, y
   767  c47d c941               +   cmp #'A'
   768  c47f d004                   bne +
   769  c481 c8                     iny
   770  c482 4ca9c3                 jmp executeassemble
   771  c485 c944               +   cmp #'D'
   772  c487 d004                   bne +
   773  c489 c8                     iny
   774  c48a 4ccac3                 jmp executedisassemble
   775  c48d c952               +   cmp #'R'
   776  c48f d004                   bne +
   777  c491 c8                     iny
   778  c492 4cb1c3                 jmp executerun
   779  c495 60                 +   rts
   780                          
   781                          newline:
   782  c496 a90d                   lda #13
   783  c498 4cd2ff                 jmp charout
   784                          
   785                          pagemore:
   786  c49b a9e4                   lda #<pagemoremsg
   787  c49d a2c7                   ldx #>pagemoremsg
   788  c49f 20bbc2                 jsr strout
   789  c4a2 20e4ff             -   jsr getkey
   790  c4a5 f0fb                   beq -
   791  c4a7 48                     pha
   792  c4a8 2096c4                 jsr newline
   793  c4ab 68                     pla
   794  c4ac c951                   cmp #'Q'
   795  c4ae 60                     rts
   796                          
   797                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
   798                          ;     jsr $ffd2
   799                          ;     pha
   800                          ; -   lda $d011
   801                          ;     bpl -
   802                          ; -   lda $d011
   803                          ;     bmi -
   804                          ; -   lda $d011
   805                          ;     bpl -
   806                          ; -   lda $d011
   807                          ;     bmi -
   808                          ;     pla
   809                          ;     rts
   810                          
   811  c4af 00                 end: brk
   812                          
   813                          ; instruction textual mnuemonic first, second, third letters (read down in source)
   814                          ninst = 56
   815  c4b0 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
   816  c4e8 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
   817  c520 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
   818                          
   819                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
   820                          mode_jmptable:
   821  c558 37c1               !word dispModeAcc-1; 0 Accumulator 1
   822  c55a 3cc1               !word dispModeNone-1 ; 1 None 1
   823  c55c 3dc1               !word dispModeImm-1 ; 2 Immediate 2
   824  c55e 4ec1               !word dispModeIndX-1 ; 3 IndirectX 2
   825  c560 6ec1               !word dispModeIndY-1 ; 4 IndirectY 2
   826  c562 8ec1               !word dispModeRel-1 ; 5 Relative 2
   827  c564 42c1               !word dispModeZP-1 ; 6 ZeroPage 2
   828  c566 cac1               !word dispModeZPX-1 ; 7 ZeroPageX 2
   829  c568 d7c1               !word dispModeZPY-1 ; 8 ZeroPageY 2
   830  c56a e4c1               !word dispModeAbs-1 ; 9 Absolute 3
   831  c56c f6c1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
   832  c56e 03c2               !word dispModeAbsY-1 ; 11 AbsoluteY 3
   833  c570 10c2               !word dispModeInd-1 ; 12 Indirect 3
   834                          
   835                          mode_examples:
   836  c572 4100               !text "A", 0 ; 0 Accumulator
   837  c574 00                 !text "", 0 ; 1 None
   838  c575 2324313200         !text "#$12", 0 ; 2 Immediate
   839  c57a 282431322c582900   !text "($12,X)", 0 ; 3 IndirectX
   840  c582 28243132292c5900   !text "($12),Y", 0 ; 4 IndirectY
   841  c58a 243132333420282d...!text "$1234 (-128 to +127)", 0 ; 5 Relative
   842  c59f 24313200           !text "$12", 0 ; 6 ZeroPage
   843  c5a3 2431322c5800       !text "$12,X", 0 ; 7 ZeroPageX
   844  c5a9 2431322c5900       !text "$12,Y", 0 ; 8 ZeroPageY
   845  c5af 243132333400       !text "$1234", 0 ; 9 Absolute
   846  c5b5 24313233342c5800   !text "$1234,X", 0 ; 10 AbsoluteX
   847  c5bd 24313233342c5900   !text "$1234,Y", 0 ; 11 AbsoluteY
   848  c5c5 2824313233342900   !text "($1234)", 0 ; 12 Indirect
   849                          
   850                          ; opcode table of byte values (opcodes), instructions, and addressing modes
   851                          nopcodes = 151
   852  c5cd 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
   853  c664 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
   854  c6fb 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
   855                          
   856  c792 0d91565741533230...copyright !text 13,145,"VWAS2024 (C) 2024 DAVID R. VAN WAGNER", 13, "MIT LICENSE DAVEVW.COM", 157, 13, 0
   857  c7d3 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
   858  c7e4 285b515d20544f20...pagemoremsg !text "([Q] TO QUIT, ELSE CONTINUE)...",0
   859                          
   860                          finish = *
