
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGET  C64 and...                    *        <<<
     7                          ;; >>>       ** INCLUDES VERSION FOR 6502+MC6850 minimum system *        <<<
     8                          ;; >>>       *   60K(RAM),4K(ROM), 2 bytes IO for MC6850 UART   *        <<<
     9                          ;; >>>       ****************************************************        <<<
    10                          ;;
    11                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    12                          ;; MIT License
    13                          ;;
    14                          ;; Copyright (c) 2024 David R. Van Wagner
    15                          ;; davevw.com
    16                          ;;
    17                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    18                          ;; of this software and associated documentation files (the "Software"), to deal
    19                          ;; in the Software without restriction, including without limitation the rights
    20                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    21                          ;; copies of the Software, and to permit persons to whom the Software is
    22                          ;; furnished to do so, subject to the following conditions:
    23                          ;;
    24                          ;; The above copyright notice and this permission notice shall be included in all
    25                          ;; copies or substantial portions of the Software.
    26                          ;;
    27                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    28                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    29                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    30                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    31                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    32                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    33                          ;; SOFTWARE.
    34                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    35                          
    36                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ; Important! define exactly ONE target (set in build.sh)
    39                          ;C64SCREEN = 1
    40                          ;C64TERMINAL = 1
    41                          ;MINIMUM = 1
    42                          
    43                          ; options (set in build.sh)
    44                          ;NEEDECHO = 0
    45                          
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;; _
    49                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    50                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    51                          ;; 1000 (display memory at $1000)
    52                          ;; 1000.2000 (display memory range $1000 to $2000)
    53                          ;; 1000. (display next screenful of memory starting at $1000)
    54                          ;; . (display next screenful of memory)
    55                          ;; 1000 r (JMP $1000)
    56                          ;; 1000: 01 02 03 (modify memory)
    57                          ;; (NEW SYNTAX)
    58                          ;; 1000 d (disassemble starting at address, for screenful)
    59                          ;; d (continue disassembling from last address)
    60                          ;; 1000 a (assemble starting at, interactive until empty line) 
    61                          ;; (FUTURE SYNTAX, not implemented)
    62                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    63                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    64                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    65                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    66                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    67                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    68                          ;; 1000.2000 "filename" 08 save (save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, can abbreviate to s)
    69                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    70                          ;; ? (commands help)
    71                          ;; ? a (list instructions available)
    72                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    73                          ;; ? mode (show addressing modes example syntax for 6502)
    74                          ;;
    75                          ;; (INTERACTIVE ASSEMBLER)
    76                          ;; 1000 _
    77                          ;;      ADC #$12
    78                          ;; 1000 69 12    ADC #$12
    79                          ;; 1002 _
    80                          ;;      JSR $1234
    81                          ;; 1002 20 34 12 JSR $1234
    82                          ;; 1005 _
    83                          ;;      RTS
    84                          ;; 1005 60       RTS
    85                          ;; 1006 _
    86                          ;;      XYZ
    87                          ;;      XYZ ?
    88                          ;; 1006 _
    89                          ;; _
    90                          ;;
    91                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    92                          ;; and can cursor up to revise, 
    93                          ;;
    94                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    95                          ;;
    96                          
    97                          ; global
    98                          inputbuf=$0200
    99                          
   100                          
   101                          ; kernal/system calls
   102                          
   103                          !ifdef MINIMUM {
   104                          charout=JUART_OUT
   105                          getkey=JUART_IN
   106                          }
   107                          
   108                          !ifdef C64SCREEN {
   109                          charin=$ffcf ; screen editor
   110                          charout=$ffd2
   111                          getkey=$ffe4
   112                          }
   113                          
   114                          !ifdef C64TERMINAL {
   115                          charout=$ffd2
   116                          getkey=$ffe4
   117                          }
   118                          
   119                          ; zeropage
   120                          !ifdef MINIMUM {
   121                          opidx=$f0
   122                          inidx=$f1
   123                          mode=$f2
   124                          size=$f3
   125                          ptr3=$f4 ; and $f5
   126                          count=$f6
   127                          len=$f7
   128                          savepos=$f8
   129                          tmp2=$f9
   130                          flag=$fa
   131                          ptr1=$fb ; and $fc
   132                          ptr2=$fd ; and $fe
   133                          tmp=$ff
   134                          } else {
   135                          ptr1=$fb ; and $fc
   136                          ptr2=$fd ; and $fe
   137                          tmp=$ff
   138                          opidx=$22
   139                          inidx=$23
   140                          mode=$24
   141                          size=$25
   142                          ptr3=$26 ; and $27
   143                          count=$a3
   144                          len=$a4
   145                          savepos=$a5
   146                          tmp2=$a6
   147                          flag=$a7
   148                          }
   149                          
   150                          !ifdef MINIMUM {
   151                          *=$f000
   152                          } else {
   153                          *=$c000
   154                          }
   155                          start:
   156  c000 a932                   lda #<copyright
   157  c002 a2cb                   ldx #>copyright
   158  c004 207dc2                 jsr strout
   159  c007 a990                   lda #<firsthelp
   160  c009 a2cb                   ldx #>firsthelp
   161  c00b 207dc2                 jsr strout
   162  c00e 208ec2             -   jsr inputline
   163  c011 209cc2                 jsr parseline
   164  c014 4c0ec0                 jmp -
   165                          
   166                          test: ; all the addressing modes here for testing disassembly
   167  c017 ea                     nop
   168  c018 ad3412                 lda $1234
   169  c01b bd3412                 lda $1234,x
   170  c01e b93412                 lda $1234,y
   171  c021 0a                     asl
   172  c022 a912                   lda #$12
   173  c024 a112                   lda ($12,x)
   174  c026 b112                   lda ($12),y
   175  c028 6c3412                 jmp ($1234)
   176  c02b d0fe               -   bne -
   177  c02d a512                   lda $12
   178  c02f b512                   lda $12,x
   179  c031 b612                   ldx $12,y
   180  c033 ff                     !byte $FF ; unknown
   181                          
   182                          disassemble:
   183  c034 a917                   lda #23
   184  c036 85a3                   sta count
   185  c038 a000               -   ldy #0
   186  c03a b1fb                   lda (ptr1),y
   187  c03c 206ec0                 jsr find_opcode
   188  c03f 20d1c0                 jsr disp_current
   189  c042 a525                   lda size
   190  c044 1002                   bpl +
   191  c046 a901                   lda #1
   192  c048 18                 +   clc
   193  c049 65fb                   adc ptr1
   194  c04b 85fb                   sta ptr1
   195  c04d 9002                   bcc +
   196  c04f e6fc                   inc ptr1+1
   197  c051 c6a3               +   dec count
   198  c053 d0e3                   bne -
   199                          !ifdef C64SCREEN {
   200  c055 a5fb                   lda ptr1
   201  c057 a6fc                   ldx ptr1+1
   202  c059 200ac2                 jsr disphexword
   203  c05c a928                   lda #<page_disassemble
   204  c05e a2cd                   ldx #>page_disassemble
   205  c060 4c7dc2                 jmp strout
   206                          } else {    
   207                              rts
   208                          }
   209                          
   210                          compareptrs:
   211  c063 a5fc                   lda ptr1+1
   212  c065 c5fe                   cmp ptr2+1
   213  c067 d004                   bne +
   214  c069 a5fb                   lda ptr1
   215  c06b c5fd                   cmp ptr2
   216  c06d 60                 +   rts
   217                          
   218                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   219                          ; and properties updated in ZP globals size,inidx,opidx,mode
   220  c06e a097                   ldy #nopcodes
   221  c070 a296                   ldx #nopcodes-1
   222  c072 dd6dc9             -   cmp opcodes,x
   223  c075 f00f                   beq +
   224  c077 ca                     dex
   225  c078 88                     dey
   226  c079 d0f7                   bne -
   227  c07b 18                     clc
   228  c07c a901                   lda #1
   229  c07e 8525                   sta size
   230  c080 a9ff                   lda #$FF
   231  c082 aa                     tax
   232  c083 a8                     tay
   233  c084 900a                   bcc ++
   234  c086 bd04ca             +   lda instidx, x
   235  c089 bc9bca                 ldy modeidx, x
   236  c08c 2097c0                 jsr getsize
   237  c08f 38                     sec
   238  c090 8523               ++  sta inidx
   239  c092 8622                   stx opidx
   240  c094 8424                   sty mode
   241  c096 60                     rts
   242                          
   243                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   244                              ; result returned in size
   245  c097 48                     pha
   246  c098 a901                   lda #1
   247  c09a 8525                   sta size
   248  c09c 68                     pla
   249  c09d c002                   cpy #2 // Immediate
   250  c09f 9008                   bcc +
   251  c0a1 e625                   inc size
   252  c0a3 c009                   cpy #9 // Absolute
   253  c0a5 9002                   bcc +
   254  c0a7 e625                   inc size
   255  c0a9 60                 +   rts
   256                          
   257                          disp_opcode: ; .A opcode byte
   258  c0aa 206ec0                 jsr find_opcode
   259  c0ad 8a                     txa
   260                              ; fall through to display instruction
   261                          
   262                          dispinst: ; .A instruction index 0..55, note modifies A and X
   263  c0ae aa                     tax
   264  c0af e038                   cpx #ninst
   265  c0b1 b012                   bcs +
   266  c0b3 bdabc8                 lda inst0, x
   267  c0b6 20d2ff                 jsr charout
   268  c0b9 bde3c8                 lda inst1, x
   269  c0bc 20d2ff                 jsr charout
   270  c0bf bd1bc9                 lda inst2, x
   271  c0c2 4cd2ff                 jmp charout
   272  c0c5 a93f               +   lda #'?'
   273  c0c7 20d2ff                 jsr charout
   274  c0ca 20d2ff                 jsr charout
   275  c0cd 20d2ff                 jsr charout
   276  c0d0 60                     rts
   277                          
   278                          disp_current:
   279  c0d1 a5fb                   lda ptr1
   280  c0d3 a6fc                   ldx ptr1+1
   281  c0d5 200ac2                 jsr disphexword
   282  c0d8 a920                   lda #$20
   283  c0da 20d2ff                 jsr charout
   284  c0dd a000                   ldy #0
   285  c0df a625                   ldx size
   286  c0e1 b1fb               -   lda (ptr1),y
   287  c0e3 2010c2                 jsr disphexbyte
   288  c0e6 a920                   lda #$20
   289  c0e8 20d2ff                 jsr charout
   290  c0eb c8                     iny
   291  c0ec ca                     dex
   292  c0ed d0f2                   bne -
   293  c0ef c003               -   cpy #3
   294  c0f1 f00e                   beq +
   295  c0f3 a920                   lda #$20
   296  c0f5 20d2ff                 jsr charout
   297  c0f8 20d2ff                 jsr charout
   298  c0fb 20d2ff                 jsr charout
   299  c0fe c8                     iny
   300  c0ff d0ee                   bne -
   301  c101 a523               +   lda inidx
   302  c103 20aec0                 jsr dispinst
   303  c106 a920                   lda #$20
   304  c108 20d2ff                 jsr charout
   305  c10b 2013c1                 jsr disp_mode
   306  c10e a90d                   lda #13
   307  c110 4cd2ff                 jmp charout
   308                          
   309                          disp_mode
   310  c113 a524                   lda mode
   311  c115 c90d                   cmp #13
   312  c117 b00a                   bcs +
   313  c119 0a                     asl
   314  c11a aa                     tax
   315  c11b bd54c9                 lda mode_jmptable+1,x
   316  c11e 48                     pha
   317  c11f bd53c9                 lda mode_jmptable,x
   318  c122 48                     pha
   319  c123 60                 +   rts
   320                          
   321                          dispModeAcc:
   322  c124 a941                   lda #'A'
   323  c126 4cd2ff                 jmp charout
   324                          
   325                          dispModeNone:
   326  c129 60                     rts
   327                          
   328                          dispModeImm:
   329  c12a a923                   lda #'#'
   330  c12c 20d2ff                 jsr charout
   331                          dispModeZP:
   332  c12f a924                   lda #'$'
   333  c131 20d2ff                 jsr charout
   334  c134 a001                   ldy #1
   335  c136 b1fb                   lda (ptr1),y
   336  c138 4c10c2                 jmp disphexbyte
   337                          
   338                          dispModeIndX:
   339  c13b a928                   lda #'('
   340  c13d 20d2ff                 jsr charout
   341  c140 a924                   lda #'$'
   342  c142 20d2ff                 jsr charout
   343  c145 a001                   ldy #1
   344  c147 b1fb                   lda (ptr1),y
   345  c149 2010c2                 jsr disphexbyte
   346  c14c a92c                   lda #','
   347  c14e 20d2ff                 jsr charout
   348  c151 a958                   lda #'X'
   349  c153 20d2ff                 jsr charout
   350  c156 a929                   lda #')'
   351  c158 4cd2ff                 jmp charout
   352                          
   353                          dispModeIndY:
   354  c15b a928                   lda #'('
   355  c15d 20d2ff                 jsr charout
   356  c160 a924                   lda #'$'
   357  c162 20d2ff                 jsr charout
   358  c165 a001                   ldy #1
   359  c167 b1fb                   lda (ptr1),y
   360  c169 2010c2                 jsr disphexbyte
   361  c16c a929                   lda #')'
   362  c16e 20d2ff                 jsr charout
   363  c171 a92c                   lda #','
   364  c173 20d2ff                 jsr charout
   365  c176 a959                   lda #'Y'
   366  c178 4cd2ff                 jmp charout
   367                          
   368                          dispModeRel:
   369  c17b a924                   lda #'$'
   370  c17d 20d2ff                 jsr charout
   371  c180 18                     clc
   372  c181 a5fb                   lda ptr1
   373  c183 6902                   adc #2
   374  c185 8526                   sta ptr3
   375  c187 a5fc                   lda ptr1+1
   376  c189 6900                   adc #0
   377  c18b 8527                   sta ptr3+1
   378  c18d a001                   ldy #1
   379  c18f b1fb                   lda (ptr1),y
   380  c191 1014                   bpl +
   381                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   382  c193 49ff                   eor #$FF ; inverse
   383  c195 18                     clc
   384  c196 6901                   adc #1 ; complete getting absolute value from two's complement
   385  c198 85ff                   sta tmp
   386  c19a 38                     sec
   387  c19b a526                   lda ptr3
   388  c19d e5ff                   sbc tmp
   389  c19f 8526                   sta ptr3
   390  c1a1 b00d                   bcs ++
   391  c1a3 c627                   dec ptr3+1
   392  c1a5 9009                   bcc ++
   393  c1a7 18                 +   clc ; simple case of adding
   394  c1a8 6526                   adc ptr3
   395  c1aa 8526                   sta ptr3
   396  c1ac 9002                   bcc ++
   397  c1ae e627                   inc ptr3+1
   398  c1b0 a526               ++  lda ptr3
   399  c1b2 a627                   ldx ptr3+1
   400  c1b4 4c0ac2                 jmp disphexword
   401                          
   402                          dispModeZPX:
   403  c1b7 202fc1                 jsr dispModeZP
   404  c1ba a92c                   lda #','
   405  c1bc 20d2ff                 jsr charout
   406  c1bf a958                   lda #'X'
   407  c1c1 4cd2ff                 jmp charout
   408                          
   409                          dispModeZPY:
   410  c1c4 202fc1                 jsr dispModeZP
   411  c1c7 a92c                   lda #','
   412  c1c9 20d2ff                 jsr charout
   413  c1cc a959                   lda #'Y'
   414  c1ce 4cd2ff                 jmp charout
   415                          
   416                          dispModeAbs:
   417  c1d1 a924                   lda #'$'
   418  c1d3 20d2ff                 jsr charout
   419  c1d6 a001                   ldy #1
   420  c1d8 b1fb                   lda (ptr1),y
   421  c1da 48                     pha
   422  c1db c8                     iny
   423  c1dc b1fb                   lda (ptr1),y
   424  c1de aa                     tax
   425  c1df 68                     pla
   426  c1e0 4c0ac2                 jmp disphexword
   427                          
   428                          dispModeAbsX:
   429  c1e3 20d1c1                 jsr dispModeAbs
   430  c1e6 a92c                   lda #','
   431  c1e8 20d2ff                 jsr charout
   432  c1eb a958                   lda #'X'
   433  c1ed 4cd2ff                 jmp charout
   434                          
   435                          dispModeAbsY:
   436  c1f0 20d1c1                 jsr dispModeAbs
   437  c1f3 a92c                   lda #','
   438  c1f5 20d2ff                 jsr charout
   439  c1f8 a959                   lda #'Y'
   440  c1fa 4cd2ff                 jmp charout
   441                          
   442                          dispModeInd:
   443  c1fd a928                   lda #'('
   444  c1ff 20d2ff                 jsr charout
   445  c202 20d1c1                 jsr dispModeAbs
   446  c205 a929                   lda #')'
   447  c207 4cd2ff                 jmp charout
   448                          
   449                          disphexword: ; .A low, .X high, 0000..FFFF
   450  c20a 48                     pha
   451  c20b 8a                     txa
   452  c20c 2010c2                 jsr disphexbyte
   453  c20f 68                     pla
   454                              ;fall through to call again
   455                          
   456                          disphexbyte: ; .A 00..FF
   457  c210 48                     pha
   458  c211 4a                     lsr
   459  c212 4a                     lsr
   460  c213 4a                     lsr
   461  c214 4a                     lsr
   462  c215 2019c2                 jsr disphexnybble
   463  c218 68                     pla
   464                              ;fall through to call again
   465                          
   466                          disphexnybble: ; .A 0..F
   467  c219 290f                   and #$0F
   468  c21b 0930                   ora #$30
   469  c21d c93a                   cmp #$3A
   470  c21f 9002                   bcc +
   471  c221 6906                   adc #$06
   472  c223 4cd2ff             +   jmp charout
   473                          
   474                          inputhexword: ; C set if fails
   475  c226 98                     tya
   476  c227 aa                     tax ; save buffer pointer in x
   477  c228 2043c2                 jsr inputhexbyte
   478  c22b b013                   bcs ++ ; failed
   479  c22d 85fb               +   sta ptr1 ; assume one byte
   480  c22f a900                   lda #0
   481  c231 85fc                   sta ptr1+1 ; extend to 16 bits
   482  c233 2043c2                 jsr inputhexbyte
   483  c236 b006                   bcs + ; failed
   484  c238 a6fb                   ldx ptr1 ; two bytes so shift the bytes
   485  c23a 86fc                   stx ptr1+1
   486  c23c 85fb                   sta ptr1
   487  c23e 18                 +   clc
   488  c23f 60                     rts
   489  c240 8a                 ++  txa
   490  c241 a8                     tay ; restore buffer pointer
   491  c242 60                     rts
   492                          
   493                          inputhexbyte:
   494  c243 205fc2                 jsr inputhexnybble
   495  c246 b016                   bcs ++
   496  c248 85ff                   sta tmp
   497  c24a 205fc2                 jsr inputhexnybble
   498  c24d 9005                   bcc +
   499  c24f 18                     clc ; allow single digit as byte
   500  c250 a5ff                   lda tmp
   501  c252 900a                   bcc ++
   502  c254 06ff               +   asl tmp
   503  c256 06ff                   asl tmp
   504  c258 06ff                   asl tmp
   505  c25a 06ff                   asl tmp
   506  c25c 05ff                   ora tmp
   507  c25e 60                 ++  rts
   508                          
   509                          inputhexnybble:
   510  c25f b90002                 lda $0200,y
   511  c262 297f                   and #$7F
   512  c264 38                     sec
   513  c265 e930                   sbc #$30
   514  c267 9012                   bcc ++
   515  c269 c90a                   cmp #10
   516  c26b 900c                   bcc +
   517  c26d e907                   sbc #7
   518  c26f 900a                   bcc ++
   519  c271 c90a                   cmp #10
   520  c273 9006                   bcc ++
   521  c275 c910                   cmp #16
   522  c277 b002                   bcs ++
   523  c279 c8                 +   iny
   524  c27a 60                     rts
   525  c27b 38                 ++  sec
   526  c27c 60                     rts
   527                          
   528                          strout:
   529  c27d 8526                   sta ptr3
   530  c27f 8627                   stx ptr3+1
   531  c281 a000                   ldy #0
   532  c283 b126               -   lda (ptr3),y
   533  c285 f006                   beq +
   534  c287 20d2ff                 jsr charout
   535  c28a c8                     iny
   536  c28b d0f6                   bne -
   537  c28d 60                 +   rts
   538                          
   539                          inputline:
   540                          !ifdef C64SCREEN {
   541  c28e a000                   ldy #0
   542  c290 20cfff             -   jsr charin
   543  c293 990002                 sta inputbuf,y
   544  c296 c8                     iny
   545  c297 c90d                   cmp #13
   546  c299 d0f5                   bne -
   547  c29b 60                     rts
   548                          } else {
   549                              ldy #0
   550                          --  sty count
   551                          -   jsr getkey
   552                              beq -
   553                              ldy count
   554                          !ifdef MINIMUM {
   555                              cmp #8 ; backspace
   556                          } else {
   557                              cmp #20
   558                          }
   559                              bne +
   560                              cpy #0
   561                              beq -
   562                              dey
   563                          !if NEEDECHO = 1 {    
   564                              jsr charout
   565                          }
   566                              jmp --
   567                          +   cmp #13
   568                              beq +
   569                              cmp #' '
   570                              bcc -
   571                              cmp #128
   572                              bcs -
   573                          +
   574                          !if NEEDECHO = 1 {    
   575                              jsr charout
   576                          }
   577                              sta inputbuf,y
   578                              iny
   579                              cmp #13
   580                              bne --
   581                              rts
   582                          }
   583                          
   584                          parseline:
   585  c29c c001                   cpy #1
   586  c29e d003                   bne +
   587                          -
   588                          !ifdef C64SCREEN {   
   589  c2a0 4ca6c8                 jmp newline
   590                          } else {
   591                              rts
   592                          }
   593  c2a3 88                 +   dey
   594  c2a4 84a4                   sty len
   595                              ; skip whitespace
   596                              ; check for address, put in ptr1
   597                              ; or check for dot, then require address put in ptr2
   598                              ; or check for ?, and optional parameter, execute help
   599                              ; check for whitespace
   600                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   601                              ; check for string, store at start of inputbuf
   602                              ; check for drive number
   603                              ; check for whitespace
   604                              ; check command ":rda?mls", execute command
   605  c2a6 a000                   ldy #0
   606  c2a8 20e9c7                 jsr skipspaces
   607  c2ab c4a4                   cpy len
   608  c2ad f0f1                   beq -
   609  c2af 20b1c7                 jsr chkcontinuedis
   610  c2b2 d003                   bne +
   611  c2b4 20c3c7                 jsr executedisassemble ; note won't return
   612  c2b7 20f4c7             +   jsr chkdot
   613  c2ba d003                   bne +
   614  c2bc 4ca4c3                 jmp executedot
   615  c2bf 20ffc7             +   jsr chkhelp
   616  c2c2 d003                   bne +
   617  c2c4 4caec3                 jmp executehelp
   618  c2c7 2049c8             +   jsr chkhexaddr1
   619  c2ca d003                   bne error
   620  c2cc 4cd2c2                 jmp executeaddr1
   621                          error:
   622  c2cf 4cd2c7                 jmp reporterr
   623                          
   624                          executeaddr1:
   625  c2d2 c4a4                   cpy len
   626  c2d4 d003                   bne +
   627  c2d6 4c25c3                 jmp executedisplay1
   628  c2d9 20f4c7             +   jsr chkdot
   629  c2dc d00f                   bne +
   630  c2de c4a4                   cpy len
   631  c2e0 f021                   beq executepagedisplay
   632  c2e2 2069c8                 jsr chkhexaddr2
   633  c2e5 d0e8                   bne error
   634  c2e7 18                     clc
   635  c2e8 66a7                   ror flag
   636  c2ea 4c1bc3                 jmp executeaddr12
   637  c2ed 20e9c7             +   jsr skipspaces
   638  c2f0 200ac8                 jsr chkcolon
   639  c2f3 d003                   bne +
   640  c2f5 4c82c3                 jmp executemodify
   641  c2f8 208ac8             +   jsr chkaddr1cmd ; rda, will not return here if cmd
   642  c2fb 2015c8                 jsr chkfilename
   643  c2fe d0cf                   bne error
   644  c300 4cabc3                 jmp executeloadfilename
   645                          
   646                          executepagedisplay:
   647  c303 a5fb                   lda ptr1
   648  c305 18                     clc
   649                          !ifdef MINIMUM {
   650                              adc #$5f
   651                          } else {
   652  c306 69b7                   adc #$b7
   653                          }
   654  c308 85fd                   sta ptr2
   655  c30a a5fc                   lda ptr1+1
   656                          !ifdef MINIMUM {
   657                              adc #$01
   658                          } else {
   659  c30c 6900                   adc #$00
   660                          }
   661  c30e 85fe                   sta ptr2+1
   662  c310 9006                   bcc +
   663  c312 a9ff                   lda #$ff
   664  c314 85fd                   sta ptr2
   665  c316 85fe                   sta ptr2+1
   666  c318 38                 +   sec
   667  c319 66a7                   ror flag
   668                              ; fall through to executeaddr12
   669                          
   670                          executeaddr12:
   671  c31b c4a4                   cpy len
   672  c31d d003                   bne +
   673  c31f 4c2dc3                 jmp executedisplay12
   674  c322 4ccbc7             +   jmp reportnotimplemented
   675                          
   676                          executedisplay1:
   677  c325 a5fb                   lda ptr1
   678  c327 85fd                   sta ptr2
   679  c329 a5fc                   lda ptr1+1
   680  c32b 85fe                   sta ptr2+1
   681                              ; fall through executedisplay12
   682                          
   683                          executedisplay12:
   684  c32d a9ff                   lda #$ff
   685  c32f 85a3                   sta count
   686  c331 e6a3               -   inc count
   687  c333 a5a3                   lda count
   688                          !ifdef MINIMUM {    
   689                              and #$0f
   690                          } else {
   691  c335 2907                   and #$07
   692                          }
   693  c337 d016                   bne +
   694  c339 a90d                   lda #13
   695  c33b 20d2ff                 jsr charout
   696  c33e a5fb                   lda ptr1
   697  c340 a6fc                   ldx ptr1+1
   698  c342 200ac2                 jsr disphexword
   699  c345 a93a                   lda #':'
   700  c347 20d2ff                 jsr charout
   701  c34a a920                   lda #' '
   702  c34c 20d2ff                 jsr charout
   703  c34f a000               +   ldy #0
   704  c351 b1fb                   lda (ptr1),y
   705  c353 2010c2                 jsr disphexbyte
   706  c356 a920                   lda #' '
   707  c358 20d2ff                 jsr charout
   708  c35b e6fb                   inc ptr1
   709  c35d d004                   bne +
   710  c35f e6fc                   inc ptr1+1
   711  c361 f01c                   beq ++
   712  c363 2063c0             +   jsr compareptrs
   713  c366 90c9                   bcc -
   714  c368 f0c7                   beq -
   715  c36a 24a7                   bit flag
   716  c36c 1011                   bpl ++
   717                          !ifdef C64SCREEN {
   718  c36e 20a6c8                 jsr newline
   719  c371 a5fb                   lda ptr1
   720  c373 a6fc                   ldx ptr1+1
   721  c375 200ac2                 jsr disphexword
   722  c378 a92f                   lda #<page_displaymemory
   723  c37a a2cd                   ldx #>page_displaymemory
   724  c37c 4c7dc2                 jmp strout
   725                          }
   726  c37f 4ca6c8             ++  jmp newline
   727                          
   728                          executemodify:
   729  c382 20e9c7                 jsr skipspaces
   730  c385 c4a4                   cpy len
   731  c387 f018                   beq ++
   732  c389 202fc8                 jsr chkhexbyteofsequence
   733  c38c f003                   beq +
   734  c38e 4ccfc2                 jmp error
   735  c391 84ff               +   sty tmp
   736  c393 a000                   ldy #0
   737  c395 91fb                   sta (ptr1),y
   738  c397 e6fb                   inc ptr1
   739  c399 d002                   bne +
   740  c39b e6fc                   inc ptr1+1
   741  c39d a4ff               +   ldy tmp
   742  c39f d0e1                   bne executemodify
   743  c3a1 4ca6c8             ++  jmp newline
   744                          
   745                          executedot:
   746  c3a4 c4a4                   cpy len
   747  c3a6 d003                   bne +
   748  c3a8 4c03c3                 jmp executepagedisplay
   749                          
   750                          executeloadfilename:
   751                          executeaddr1cmd:
   752  c3ab 4ccbc7             +   jmp reportnotimplemented
   753                          
   754                          executehelp:
   755                          !ifdef C64SCREEN {
   756  c3ae 20a6c8                 jsr newline
   757                          }
   758  c3b1 c4a4                   cpy len
   759  c3b3 d003                   bne +
   760  c3b5 4cc6c3                 jmp displayhelp
   761  c3b8 20e9c7             +   jsr skipspaces
   762  c3bb 20dbc3                 jsr chkhelpinstructions
   763  c3be d003                   bne +
   764  c3c0 4ce8c3                 jmp displayinstructions
   765  c3c3 4ccbc7             +   jmp reportnotimplemented
   766                          
   767                          displayhelp:
   768  c3c6 a9ee                   lda #<generalhelp
   769  c3c8 a2cb                   ldx #>generalhelp
   770  c3ca 207dc2                 jsr strout
   771  c3cd a9e3                   lda #<generalhelp2
   772  c3cf a2cc                   ldx #>generalhelp2
   773  c3d1 207dc2                 jsr strout
   774  c3d4 a990                   lda #<firsthelp
   775  c3d6 a2cb                   ldx #>firsthelp
   776  c3d8 4c7dc2                 jmp strout
   777                          
   778                          chkhelpinstructions:
   779  c3db b90002                 lda inputbuf, y
   780  c3de c941                   cmp #'A'
   781  c3e0 d005                   bne +
   782  c3e2 b90102                 lda inputbuf+1, y
   783  c3e5 c90d                   cmp #13
   784                              ; no need to increment y if found, done parsing line
   785  c3e7 60                 +   rts
   786                          
   787                          displayinstructions:
   788  c3e8 a038                   ldy #ninst
   789  c3ea a200                   ldx #0
   790  c3ec 8a                 -   txa
   791  c3ed 48                     pha
   792  c3ee 20aec0                 jsr dispinst
   793  c3f1 a920                   lda #' '
   794  c3f3 20d2ff                 jsr charout
   795  c3f6 68                     pla
   796  c3f7 aa                     tax
   797  c3f8 e8                     inx
   798  c3f9 88                     dey
   799  c3fa d0f0                   bne -
   800  c3fc 4ca6c8                 jmp newline
   801                          
   802                          executeassemble:
   803  c3ff 68                     pla ; remove low byte return address
   804  c400 68                     pla ; return high byte return address
   805                          !ifdef C64SCREEN {    
   806  c401 a914                   lda #20
   807  c403 20d2ff                 jsr charout
   808  c406 20d2ff                 jsr charout
   809                          } else {
   810                              lda ptr1
   811                              ldx ptr1+1
   812                              jsr disphexword
   813                              lda #' '
   814                              jsr charout
   815                          }
   816                              ; save current pointer
   817  c409 a5fb               --  lda ptr1
   818  c40b a6fc                   ldx ptr1+1
   819  c40d 8526                   sta ptr3
   820  c40f 8627                   stx ptr3+1
   821  c411 208ec2                 jsr inputline
   822  c414 c001                   cpy #1
   823  c416 f040                   beq ++
   824  c418 88                     dey
   825  c419 84a4                   sty len
   826  c41b a000                   ldy #0
   827  c41d 20e9c7                 jsr skipspaces
   828  c420 c4a4                   cpy len
   829  c422 f034                   beq ++
   830                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
   831                              ;jsr skipspaces
   832  c424 202ec7                 jsr chkinstruction
   833  c427 f003                   beq +
   834  c429 4ccfc2             -   jmp error    
   835  c42c 2082c4             +   jsr chkaddressing
   836  c42f d0f8                   bne -
   837  c431 205fc7                 jsr find_inst_and_mode
   838  c434 d0f3                   bne -
   839  c436 205bc4                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
   840  c439 18                     clc
   841  c43a a525                   lda size
   842  c43c 6526                   adc ptr3
   843  c43e 85fb                   sta ptr1
   844  c440 a527                   lda ptr3+1
   845  c442 6900                   adc #0
   846  c444 85fc                   sta ptr1+1
   847                          !ifdef C64SCREEN {    
   848  c446 20a6c8                 jsr newline
   849                          }
   850  c449 a5fb                   lda ptr1
   851  c44b a6fc                   ldx ptr1+1
   852  c44d 200ac2                 jsr disphexword
   853  c450 a920                   lda #' '
   854  c452 20d2ff                 jsr charout
   855  c455 4c09c4                 jmp --
   856                          ++  
   857                          !ifdef C64SCREEN {
   858  c458 4ca6c8                 jmp newline
   859                          } else {
   860                              rts
   861                          }
   862                          
   863                          store_assembly:
   864  c45b a622                   ldx opidx
   865  c45d bd6dc9                 lda opcodes, x
   866  c460 a000                   ldy #0
   867  c462 9126                   sta (ptr3), y
   868  c464 c8                     iny
   869  c465 a625                   ldx size
   870  c467 e001                   cpx #1
   871  c469 f016                   beq ++
   872  c46b e002               +   cpx #2
   873  c46d d005                   bne +
   874  c46f a5a6                   lda tmp2
   875  c471 9126                   sta (ptr3), y
   876  c473 60                     rts
   877  c474 e003               +   cpx #3
   878  c476 d009                   bne ++
   879  c478 a5fb                   lda ptr1
   880  c47a 9126                   sta (ptr3), y
   881  c47c c8                     iny
   882  c47d a5fc                   lda ptr1+1
   883  c47f 9126                   sta (ptr3), y
   884  c481 60                 ++  rts
   885                          
   886                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
   887  c482 20e9c7                 jsr skipspaces
   888  c485 a200                   ldx #0
   889  c487 8624                   stx mode
   890  c489 20e4c4                 jsr chkaccumulator
   891  c48c f051                   beq +
   892  c48e e624                   inc mode
   893  c490 c4a4                   cpy len ; chknone
   894  c492 f04b                   beq +
   895  c494 e624                   inc mode
   896  c496 2008c5                 jsr chkimmediate
   897  c499 f044                   beq +
   898  c49b e624                   inc mode
   899  c49d 202cc5                 jsr chkindirectx
   900  c4a0 f03d                   beq +
   901  c4a2 e624                   inc mode
   902  c4a4 2071c5                 jsr chkindirecty
   903  c4a7 f036                   beq +
   904  c4a9 e624                   inc mode
   905  c4ab 20b6c5                 jsr chkrelative
   906  c4ae f02f                   beq +
   907  c4b0 e624                   inc mode
   908  c4b2 2011c6                 jsr chkzeropage
   909  c4b5 f028                   beq +
   910  c4b7 e624                   inc mode
   911  c4b9 202ac6                 jsr chkzeropagex
   912  c4bc f021                   beq +
   913  c4be e624                   inc mode
   914  c4c0 2059c6                 jsr chkzeropagey
   915  c4c3 f01a                   beq +
   916  c4c5 e624                   inc mode
   917  c4c7 2088c6                 jsr chkabsolute
   918  c4ca f013                   beq +
   919  c4cc e624                   inc mode
   920  c4ce 20a1c6                 jsr chkabsolutex
   921  c4d1 f00c                   beq +
   922  c4d3 e624                   inc mode
   923  c4d5 20d0c6                 jsr chkabsolutey
   924  c4d8 f005                   beq +
   925  c4da e624                   inc mode
   926  c4dc 20ffc6                 jsr chkindirect
   927  c4df 08                 +   php ; save Z
   928  c4e0 a524                   lda mode
   929  c4e2 28                     plp ; restore Z 
   930  c4e3 60                     rts
   931                          
   932                          chkaccumulator:
   933  c4e4 c4a4                   cpy len
   934  c4e6 d013                   bne +
   935  c4e8 a523                   lda inidx
   936  c4ea c902                   cmp #2 ; ASL
   937  c4ec f019                   beq ++
   938  c4ee c920                   cmp #32 ; LSR
   939  c4f0 f015                   beq ++
   940  c4f2 c927                   cmp #39 ; ROL
   941  c4f4 f011                   beq ++
   942  c4f6 c928                   cmp #40 ; ROR
   943  c4f8 4c07c5                 jmp ++
   944  c4fb b90002             +   lda inputbuf, y
   945  c4fe c941                   cmp #'A'
   946  c500 d005                   bne ++
   947  c502 b90102                 lda inputbuf+1,y
   948  c505 c90d                   cmp #13 ; Z set true/false whether parsed exactly
   949  c507 60                 ++  rts
   950                          
   951                          chkimmediate:
   952  c508 84a5                   sty savepos
   953  c50a b90002                 lda inputbuf, y
   954  c50d c923                   cmp #'#'
   955  c50f d016                   bne ++
   956  c511 c8                     iny
   957  c512 20e9c7                 jsr skipspaces
   958  c515 b90002                 lda inputbuf, y
   959  c518 c924                   cmp #'$'
   960  c51a d001                   bne +
   961  c51c c8                     iny
   962  c51d 2052c8             +   jsr chkhexbyte
   963  c520 d005                   bne ++
   964  c522 c4a4               +   cpy len
   965  c524 d001                   bne ++
   966  c526 60                     rts
   967  c527 a4a5               ++  ldy savepos
   968  c529 a201                   ldx #1 ; Z false (NE)
   969  c52b 60                     rts
   970                          
   971                          chkindirectx:
   972  c52c 84a5                   sty savepos
   973  c52e b90002                 lda inputbuf, y
   974  c531 c928                   cmp #'('
   975  c533 d037                   bne ++
   976  c535 c8                     iny
   977  c536 20e9c7                 jsr skipspaces
   978  c539 b90002                 lda inputbuf, y
   979  c53c c924                   cmp #'$'
   980  c53e d001                   bne +
   981  c540 c8                     iny
   982  c541 2052c8             +   jsr chkhexbyte
   983  c544 d026                   bne ++
   984  c546 20e9c7                 jsr skipspaces
   985  c549 b90002                 lda inputbuf, y
   986  c54c c92c                   cmp #','
   987  c54e d01c                   bne ++
   988  c550 c8                     iny
   989  c551 20e9c7                 jsr skipspaces
   990  c554 b90002                 lda inputbuf, y
   991  c557 c958                   cmp #'X'
   992  c559 d011                   bne ++
   993  c55b c8                     iny
   994  c55c 20e9c7                 jsr skipspaces
   995  c55f b90002                 lda inputbuf, y
   996  c562 c929                   cmp #')'
   997  c564 d006                   bne ++
   998  c566 c8                     iny
   999  c567 c4a4                   cpy len
  1000  c569 d001                   bne ++
  1001  c56b 60                     rts
  1002  c56c a4a5               ++  ldy savepos
  1003  c56e a201                   ldx #1 ; Z false (NE)
  1004  c570 60                     rts
  1005                          
  1006                          chkindirecty:
  1007  c571 84a5                   sty savepos
  1008  c573 b90002                 lda inputbuf, y
  1009  c576 c928                   cmp #'('
  1010  c578 d037                   bne ++
  1011  c57a c8                     iny
  1012  c57b 20e9c7                 jsr skipspaces
  1013  c57e b90002                 lda inputbuf, y
  1014  c581 c924                   cmp #'$'
  1015  c583 d001                   bne +
  1016  c585 c8                     iny
  1017  c586 2052c8             +   jsr chkhexbyte
  1018  c589 d026                   bne ++
  1019  c58b 20e9c7                 jsr skipspaces
  1020  c58e b90002                 lda inputbuf, y
  1021  c591 c929                   cmp #')'
  1022  c593 d01c                   bne ++
  1023  c595 c8                     iny
  1024  c596 20e9c7                 jsr skipspaces
  1025  c599 b90002                 lda inputbuf, y
  1026  c59c c92c                   cmp #','
  1027  c59e d011                   bne ++
  1028  c5a0 c8                     iny
  1029  c5a1 20e9c7                 jsr skipspaces
  1030  c5a4 b90002                 lda inputbuf, y
  1031  c5a7 c959                   cmp #'Y'
  1032  c5a9 d006                   bne ++
  1033  c5ab c8                     iny
  1034  c5ac c4a4                   cpy len
  1035  c5ae d001                   bne ++
  1036  c5b0 60                     rts
  1037  c5b1 a4a5               ++  ldy savepos
  1038  c5b3 a201                   ldx #1 ; Z false (NE)
  1039  c5b5 60                     rts
  1040                          
  1041                          chkrelative:
  1042  c5b6 84a5                   sty savepos
  1043  c5b8 a623                   ldx inidx
  1044  c5ba e006                   cpx #6 ; BIT
  1045  c5bc f01e                   beq ++
  1046  c5be bdabc8                 lda inst0, x
  1047  c5c1 c942                   cmp #'B'
  1048  c5c3 d017                   bne ++
  1049  c5c5 b90002                 lda inputbuf, y
  1050  c5c8 c924                   cmp #'$'
  1051  c5ca d001                   bne +
  1052  c5cc c8                     iny
  1053  c5cd 2049c8             +   jsr chkhexword
  1054  c5d0 d00a                   bne ++
  1055  c5d2 c4a4                   cpy len
  1056  c5d4 d006                   bne ++
  1057  c5d6 20e1c5                 jsr computeoffset
  1058  c5d9 d001                   bne ++
  1059  c5db 60                     rts ; Z true (EQ)
  1060  c5dc a4a5               ++  ldy savepos
  1061  c5de a201                   ldx #1 ; Z false (NE)
  1062  c5e0 60                     rts
  1063                          
  1064                          computeoffset:
  1065                          ;   compute next address
  1066  c5e1 a527                   lda ptr3+1
  1067  c5e3 85fe                   sta ptr2+1
  1068  c5e5 a526                   lda ptr3
  1069  c5e7 18                     clc
  1070  c5e8 6902                   adc #2
  1071  c5ea 85fd                   sta ptr2
  1072  c5ec 9002                   bcc +
  1073  c5ee e6fe                   inc ptr2+1
  1074                          +  ; subtract argument
  1075  c5f0 38                     sec
  1076  c5f1 a5fb                   lda ptr1
  1077  c5f3 e5fd                   sbc ptr2
  1078  c5f5 85a6                   sta tmp2
  1079  c5f7 a5fc                   lda ptr1+1
  1080  c5f9 e5fe                   sbc ptr2+1
  1081  c5fb f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1082  c5fd c9ff                   cmp #$FF
  1083  c5ff d00d                   bne failedoffset ; 0 and FF were only options so fail
  1084                              ; chkeck negative offset
  1085  c601 a5a6                   lda tmp2
  1086  c603 3006                   bmi successoffset ; branch if signed byte is negative
  1087  c605 1007                   bpl failedoffset ; otherwise fail
  1088                          chkoffsetto127:
  1089  c607 a5a6                   lda tmp2
  1090  c609 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1091                          successoffset:    
  1092  c60b a900                   lda #0 ; Z true (EQ)
  1093  c60d 60                     rts
  1094                          failedoffset:
  1095  c60e a901                   lda #1 ; Z false (NE)
  1096  c610 60                     rts
  1097                          
  1098                          chkzeropage:
  1099  c611 84a5                   sty savepos
  1100  c613 b90002                 lda inputbuf, y
  1101  c616 c924                   cmp #'$'
  1102  c618 d001                   bne +
  1103  c61a c8                     iny
  1104  c61b 2052c8             +   jsr chkhexbyte
  1105  c61e d005                   bne ++
  1106  c620 c4a4                   cpy len
  1107  c622 d001                   bne ++
  1108  c624 60                     rts ; Z true (EQ)
  1109  c625 a4a5               ++  ldy savepos
  1110  c627 a201                   ldx #1 ; Z false (NE)
  1111  c629 60                     rts
  1112                          
  1113                          chkzeropagex:
  1114  c62a 84a5                   sty savepos
  1115  c62c b90002                 lda inputbuf, y
  1116  c62f c924                   cmp #'$'
  1117  c631 d001                   bne +
  1118  c633 c8                     iny
  1119  c634 2052c8             +   jsr chkhexbyte
  1120  c637 d01b                   bne ++
  1121  c639 20e9c7                 jsr skipspaces
  1122  c63c b90002                 lda inputbuf, y
  1123  c63f c92c                   cmp #','
  1124  c641 d011                   bne ++
  1125  c643 c8                     iny
  1126  c644 20e9c7                 jsr skipspaces
  1127  c647 b90002                 lda inputbuf, y
  1128  c64a c958                   cmp #'X'
  1129  c64c d006                   bne ++
  1130  c64e c8                     iny
  1131  c64f c4a4                   cpy len
  1132  c651 d001                   bne ++
  1133  c653 60                     rts ; Z true (EQ)
  1134  c654 a4a5               ++  ldy savepos
  1135  c656 a201                   ldx #1 ; Z false (NE)
  1136  c658 60                     rts
  1137                          
  1138                          chkzeropagey:
  1139  c659 84a5                   sty savepos
  1140  c65b b90002                 lda inputbuf, y
  1141  c65e c924                   cmp #'$'
  1142  c660 d001                   bne +
  1143  c662 c8                     iny
  1144  c663 2052c8             +   jsr chkhexbyte
  1145  c666 d01b                   bne ++
  1146  c668 20e9c7                 jsr skipspaces
  1147  c66b b90002                 lda inputbuf, y
  1148  c66e c92c                   cmp #','
  1149  c670 d011                   bne ++
  1150  c672 c8                     iny
  1151  c673 20e9c7                 jsr skipspaces
  1152  c676 b90002                 lda inputbuf, y
  1153  c679 c959                   cmp #'Y'
  1154  c67b d006                   bne ++
  1155  c67d c8                     iny
  1156  c67e c4a4                   cpy len
  1157  c680 d001                   bne ++
  1158  c682 60                     rts ; Z true (EQ)
  1159  c683 a4a5               ++  ldy savepos
  1160  c685 a201                   ldx #1 ; Z false (NE)
  1161  c687 60                     rts
  1162                          
  1163                          chkabsolute:
  1164  c688 84a5                   sty savepos
  1165  c68a b90002                 lda inputbuf, y
  1166  c68d c924                   cmp #'$'
  1167  c68f d001                   bne +
  1168  c691 c8                     iny
  1169  c692 2049c8             +   jsr chkhexword
  1170  c695 d005                   bne ++
  1171  c697 c4a4                   cpy len
  1172  c699 d001                   bne ++
  1173  c69b 60                     rts ; Z true (EQ)
  1174  c69c a4a5               ++  ldy savepos
  1175  c69e a201                   ldx #1 ; Z false (NE)
  1176  c6a0 60                     rts
  1177                          
  1178                          chkabsolutex:
  1179  c6a1 84a5                   sty savepos
  1180  c6a3 b90002                 lda inputbuf, y
  1181  c6a6 c924                   cmp #'$'
  1182  c6a8 d001                   bne +
  1183  c6aa c8                     iny
  1184  c6ab 2049c8             +   jsr chkhexword
  1185  c6ae d01b                   bne ++
  1186  c6b0 20e9c7                 jsr skipspaces
  1187  c6b3 b90002                 lda inputbuf, y
  1188  c6b6 c92c                   cmp #','
  1189  c6b8 d011                   bne ++
  1190  c6ba c8                     iny
  1191  c6bb 20e9c7                 jsr skipspaces
  1192  c6be b90002                 lda inputbuf, y
  1193  c6c1 c958                   cmp #'X'
  1194  c6c3 d006                   bne ++
  1195  c6c5 c8                     iny
  1196  c6c6 c4a4                   cpy len
  1197  c6c8 d001                   bne ++
  1198  c6ca 60                     rts ; Z true (EQ)
  1199  c6cb a4a5               ++  ldy savepos
  1200  c6cd a201                   ldx #1 ; Z false (NE)
  1201  c6cf 60                     rts
  1202                          
  1203                          chkabsolutey:
  1204  c6d0 84a5                   sty savepos
  1205  c6d2 b90002                 lda inputbuf, y
  1206  c6d5 c924                   cmp #'$'
  1207  c6d7 d001                   bne +
  1208  c6d9 c8                     iny
  1209  c6da 2049c8             +   jsr chkhexword
  1210  c6dd d01b                   bne ++
  1211  c6df 20e9c7                 jsr skipspaces
  1212  c6e2 b90002                 lda inputbuf, y
  1213  c6e5 c92c                   cmp #','
  1214  c6e7 d011                   bne ++
  1215  c6e9 c8                     iny
  1216  c6ea 20e9c7                 jsr skipspaces
  1217  c6ed b90002                 lda inputbuf, y
  1218  c6f0 c959                   cmp #'Y'
  1219  c6f2 d006                   bne ++
  1220  c6f4 c8                     iny
  1221  c6f5 c4a4                   cpy len
  1222  c6f7 d001                   bne ++
  1223  c6f9 60                     rts ; Z true (EQ)
  1224  c6fa a4a5               ++  ldy savepos
  1225  c6fc a201                   ldx #1 ; Z false (NE)
  1226  c6fe 60                     rts
  1227                          
  1228                          chkindirect:
  1229  c6ff 84a5                   sty savepos
  1230  c701 b90002                 lda inputbuf, y
  1231  c704 c928                   cmp #'('
  1232  c706 d021                   bne ++
  1233  c708 c8                     iny
  1234  c709 20e9c7                 jsr skipspaces
  1235  c70c b90002                 lda inputbuf, y
  1236  c70f c924                   cmp #'$'
  1237  c711 d001                   bne +
  1238  c713 c8                     iny
  1239  c714 2049c8             +   jsr chkhexword
  1240  c717 d010                   bne ++
  1241  c719 20e9c7                 jsr skipspaces
  1242  c71c b90002                 lda inputbuf, y
  1243  c71f c929                   cmp #')'
  1244  c721 d006                   bne ++
  1245  c723 c8                     iny
  1246  c724 c4a4                   cpy len
  1247  c726 d001                   bne ++
  1248  c728 60                     rts ; Z true (EQ)
  1249  c729 a4a5               ++  ldy savepos
  1250  c72b a201                   ldx #1 ; Z false (NE)
  1251  c72d 60                     rts
  1252                          
  1253                          chkinstruction:
  1254  c72e c4a4                   cpy len
  1255  c730 f02a                   beq ++
  1256  c732 84ff                   sty tmp
  1257  c734 a237                   ldx #(ninst-1)
  1258  c736 b90002             -   lda inputbuf,y
  1259  c739 ddabc8                 cmp inst0,x
  1260  c73c d019                   bne +
  1261  c73e c8                     iny
  1262  c73f b90002                 lda inputbuf,y
  1263  c742 dde3c8                 cmp inst1,x
  1264  c745 d010                   bne +
  1265  c747 c8                     iny
  1266  c748 b90002                 lda inputbuf,y
  1267  c74b dd1bc9                 cmp inst2,x
  1268  c74e d007                   bne +
  1269  c750 c8                     iny
  1270  c751 8a                     txa
  1271  c752 8523                   sta inidx
  1272  c754 a200                   ldx #0
  1273  c756 60                     rts
  1274  c757 a4ff               +   ldy tmp
  1275  c759 ca                     dex
  1276  c75a 10da                   bpl -
  1277  c75c a201               ++  ldx #1 ; Z false (NE)
  1278  c75e 60                     rts
  1279                          
  1280                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1281                              ; and allows mode promotion
  1282  c75f 2078c7                 jsr find_inst_and_mode2
  1283  c762 f013                   beq ++
  1284  c764 a524                   lda mode
  1285  c766 c906                   cmp #6
  1286  c768 900d                   bcc ++
  1287  c76a c90a                   cmp #10
  1288  c76c b007                   bcs +
  1289  c76e 6903                   adc #3
  1290  c770 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1291  c772 4c78c7                 jmp find_inst_and_mode2 ; try again once
  1292  c775 a201               +   ldx #1 ; Z false (NE)
  1293  c777 60                 ++  rts
  1294                          
  1295                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1296  c778 a296                   ldx #nopcodes-1
  1297  c77a bd04ca             -   lda instidx, x
  1298  c77d bc9bca                 ldy modeidx, x
  1299  c780 c523                   cmp inidx
  1300  c782 d00c                   bne +
  1301  c784 c424                   cpy mode
  1302  c786 d008                   bne +
  1303  c788 8622                   stx opidx
  1304  c78a 2097c0                 jsr getsize
  1305  c78d a200                   ldx #0 ; Z true (EQ)
  1306  c78f 60                     rts
  1307  c790 ca                 +   dex
  1308  c791 e0ff                   cpx #$ff
  1309  c793 d0e5                   bne -
  1310  c795 a201                   ldx #1 ; Z false (NE)
  1311  c797 60                     rts
  1312                          
  1313                          executerun:
  1314  c798 68                     pla ; remove low byte return address
  1315  c799 68                     pla ; return high byte return address
  1316  c79a 68                     pla ; again, we're really not returning
  1317  c79b 68                     pla ; again, we're really not returning
  1318  c79c 20a6c8                 jsr newline
  1319  c79f 38                     sec
  1320  c7a0 a5fb                   lda ptr1
  1321  c7a2 e901                   sbc #1
  1322  c7a4 85fb                   sta ptr1
  1323  c7a6 b002                   bcs +
  1324  c7a8 c6fc                   dec ptr1+1
  1325  c7aa a5fc               +   lda ptr1+1
  1326  c7ac 48                     pha
  1327  c7ad a5fb                   lda ptr1
  1328  c7af 48                     pha
  1329  c7b0 60                     rts
  1330                          
  1331                          chkcontinuedis:
  1332  c7b1 b90002                 lda inputbuf,y
  1333  c7b4 c944                   cmp #'D'
  1334  c7b6 d00a                   bne +
  1335  c7b8 b90102                 lda inputbuf+1,y
  1336  c7bb c90d                   cmp #13
  1337  c7bd d003                   bne +
  1338  c7bf c8                     iny
  1339  c7c0 a200                   ldx #0 ; restore Z set
  1340  c7c2 60                 +   rts
  1341                          
  1342                          executedisassemble:
  1343  c7c3 68                     pla ; remove low byte return address
  1344  c7c4 68                     pla ; return high byte return address
  1345  c7c5 20a6c8                 jsr newline
  1346  c7c8 4c34c0                 jmp disassemble
  1347                          
  1348                          reportnotimplemented:
  1349  c7cb a9dd                   lda #<notimplemented
  1350  c7cd a2cb                   ldx #>notimplemented
  1351  c7cf 4c7dc2                 jmp strout
  1352                          
  1353                          reporterr:
  1354  c7d2 c000                   cpy #0
  1355  c7d4 f008                   beq +
  1356  c7d6 a920                   lda #' '
  1357  c7d8 20d2ff             -   jsr charout
  1358  c7db 88                     dey
  1359  c7dc d0fa                   bne -
  1360  c7de a93f               +   lda #'?'
  1361  c7e0 20d2ff                 jsr charout
  1362  c7e3 a90d                   lda #13
  1363  c7e5 20d2ff                 jsr charout
  1364  c7e8 60                     rts
  1365                          
  1366                          skipspaces:
  1367  c7e9 b90002             -   lda inputbuf, y
  1368  c7ec c920                   cmp #$20
  1369  c7ee d003                   bne +
  1370  c7f0 c8                     iny
  1371  c7f1 d0f6                   bne -
  1372  c7f3 60                 +   rts
  1373                          
  1374                          chkdot:
  1375  c7f4 b90002                 lda inputbuf, y
  1376  c7f7 c92e                   cmp #'.'
  1377  c7f9 d003                   bne +
  1378  c7fb c8                     iny
  1379  c7fc a900                   lda #0 ; Z true (EQ)
  1380  c7fe 60                 +   rts
  1381                          
  1382                          chkhelp:
  1383  c7ff b90002                 lda inputbuf, y
  1384  c802 c93f                   cmp #'?'
  1385  c804 d003                   bne +
  1386  c806 c8                     iny
  1387  c807 a900                   lda #0 ; Z true (EQ)
  1388  c809 60                 +   rts
  1389                          
  1390                          chkcolon:
  1391  c80a b90002                 lda inputbuf, y
  1392  c80d c93a                   cmp #':'
  1393  c80f d003                   bne +
  1394  c811 c8                     iny
  1395  c812 a900                   lda #0 ; Z true (EQ)
  1396  c814 60                 +   rts
  1397                          
  1398                          chkfilename:
  1399  c815 84ff                   sty tmp
  1400  c817 b90002                 lda inputbuf, y
  1401  c81a c922                   cmp #34
  1402  c81c d010                   bne ++
  1403  c81e c8                 -   iny
  1404  c81f b90002                 lda inputbuf, y
  1405  c822 c90d                   cmp #13
  1406  c824 d004                   bne +
  1407  c826 a4ff                   ldy tmp
  1408  c828 d004                   bne ++
  1409  c82a c922               +   cmp #34
  1410  c82c d0f0                   bne -
  1411  c82e 60                 ++  rts
  1412                          
  1413                          chkhexbyteofsequence:
  1414  c82f 2043c2                 jsr inputhexbyte
  1415  c832 204cc8                 jsr +
  1416  c835 d011                   bne ++ ; Z false (NE) if failed checks
  1417  c837 c4a4                   cpy len
  1418  c839 f00d                   beq ++ ; Z true (EQ) if end of input
  1419  c83b 85ff                   sta tmp
  1420  c83d b90002                 lda inputbuf,y
  1421  c840 c920                   cmp #$20
  1422  c842 d004                   bne ++ ; Z false (NE) if not space
  1423  c844 a5ff                   lda tmp
  1424  c846 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1425  c848 60                 ++  rts
  1426                          
  1427                          chkhexword:
  1428                          chkhexaddr1:
  1429  c849 2026c2                 jsr inputhexword
  1430  c84c a200               +   ldx #0 ; Z true (EQ)
  1431  c84e 9001                   bcc +
  1432  c850 e8                     inx ; Z false (NE)
  1433  c851 60                 +   rts
  1434                          
  1435                          chkhexbyte
  1436  c852 98                     tya
  1437  c853 48                     pha ; save y
  1438  c854 2043c2                 jsr inputhexbyte
  1439  c857 b00d                   bcs +
  1440  c859 85a6                   sta tmp2
  1441  c85b 205fc2                 jsr inputhexnybble
  1442  c85e 9006                   bcc +
  1443  c860 68                     pla ; throw away saved y
  1444  c861 a5a6                   lda tmp2
  1445  c863 a200                   ldx #0 ; Z true (EQ)
  1446  c865 60                     rts
  1447  c866 68                 +   pla
  1448  c867 a8                     tay ; won't be zero, so Z false (NE)
  1449  c868 60                     rts    
  1450                          
  1451                          chkhexaddr2:
  1452  c869 a5fb                   lda ptr1
  1453  c86b 48                     pha
  1454  c86c a5fc                   lda ptr1+1
  1455  c86e 48                     pha
  1456  c86f 2049c8                 jsr chkhexaddr1
  1457  c872 f005                   beq +
  1458  c874 68                     pla
  1459  c875 68                     pla
  1460  c876 a901                   lda #1 ; Z false (NE)
  1461  c878 60                     rts
  1462  c879 a5fb               +   lda ptr1
  1463  c87b 85fd                   sta ptr2
  1464  c87d a5fc                   lda ptr1+1
  1465  c87f 85fe                   sta ptr2+1
  1466  c881 68                     pla
  1467  c882 85fc                   sta ptr1+1
  1468  c884 68                     pla
  1469  c885 85fb                   sta ptr1
  1470  c887 a900                   lda #0 ; Z true (EQ)
  1471  c889 60                     rts    
  1472                          
  1473                          chkaddr1cmd:
  1474  c88a b90002                 lda inputbuf, y
  1475  c88d c941               +   cmp #'A'
  1476  c88f d004                   bne +
  1477  c891 c8                     iny
  1478  c892 4cffc3                 jmp executeassemble
  1479  c895 c944               +   cmp #'D'
  1480  c897 d004                   bne +
  1481  c899 c8                     iny
  1482  c89a 4cc3c7                 jmp executedisassemble
  1483  c89d c952               +   cmp #'R'
  1484  c89f d004                   bne +
  1485  c8a1 c8                     iny
  1486  c8a2 4c98c7                 jmp executerun
  1487  c8a5 60                 +   rts
  1488                          
  1489                          newline:
  1490  c8a6 a90d                   lda #13
  1491  c8a8 4cd2ff                 jmp charout
  1492                          
  1493                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1494                          ;     jsr $ffd2
  1495                          ;     pha
  1496                          ; -   lda $d011
  1497                          ;     bpl -
  1498                          ; -   lda $d011
  1499                          ;     bmi -
  1500                          ; -   lda $d011
  1501                          ;     bpl -
  1502                          ; -   lda $d011
  1503                          ;     bmi -
  1504                          ;     pla
  1505                          ;     rts
  1506                          
  1507                          !ifdef MINIMUM {
  1508                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1509                          ;; MC6850
  1510                          UART_DATA=$FFF8
  1511                          UART_STCR=$FFF9
  1512                          
  1513                          UART_INIT:
  1514                          	ldx #0b00000111 ; 11=reset device
  1515                          	stx UART_STCR
  1516                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  1517                          	sta UART_STCR
  1518                          	rts
  1519                          UART_OUT:
  1520                          	pha
  1521                          -	lda UART_STCR
  1522                          	and #2
  1523                          	beq - ; branch if TDRE=0, not finished transmitting
  1524                          	pla
  1525                          	pha
  1526                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  1527                          	sta UART_DATA
  1528                          	pla
  1529                          	rts
  1530                          UART_IN:
  1531                          -	lda UART_STCR
  1532                          	and #1
  1533                          	beq - ; branch if TDRF=0, not received
  1534                          	lda UART_DATA
  1535                          	; software "CAPS LOCK" because wozmon expects only uppercase
  1536                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  1537                          	beq BREAK
  1538                              cmp #$61
  1539                          	bcc +
  1540                          	cmp #$7b
  1541                          	bcs +
  1542                          	eor #$20
  1543                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  1544                           	rts
  1545                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  1546                          	pha ; save A
  1547                          	lda UART_STCR
  1548                          	lsr ; put rightmost bit in carry
  1549                          	pla ; restore A affects flags
  1550                          	ror ; move carry to left bit, right bit to carry
  1551                          	php ; push processor to save N
  1552                          	rol ; restore A affects flags
  1553                          	plp ; pull processor to restore N
  1554                          	rts
  1555                          
  1556                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1557                          ; Processor start and interrupts
  1558                          
  1559                          NMI: ; unused on minimum (no source of interrupt)
  1560                              rti
  1561                          
  1562                          IRQ:
  1563                              rti ; TODO implement BRK HANDLING in monitor
  1564                          
  1565                          BREAK:
  1566                              jmp RESET
  1567                          
  1568                          RESET:
  1569                              cld
  1570                              ldx #$00
  1571                              txs
  1572                              jsr JUART_INIT
  1573                              cli
  1574                              jmp start
  1575                          } ; !ifdef MINIMUM
  1576                          
  1577                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1578                          ; data
  1579                          
  1580                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  1581                          ninst = 56
  1582  c8ab 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  1583  c8e3 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  1584  c91b 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  1585                          
  1586                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  1587                          mode_jmptable:
  1588  c953 23c1               !word dispModeAcc-1; 0 Accumulator 1
  1589  c955 28c1               !word dispModeNone-1 ; 1 None 1
  1590  c957 29c1               !word dispModeImm-1 ; 2 Immediate 2
  1591  c959 3ac1               !word dispModeIndX-1 ; 3 IndirectX 2
  1592  c95b 5ac1               !word dispModeIndY-1 ; 4 IndirectY 2
  1593  c95d 7ac1               !word dispModeRel-1 ; 5 Relative 2
  1594  c95f 2ec1               !word dispModeZP-1 ; 6 ZeroPage 2
  1595  c961 b6c1               !word dispModeZPX-1 ; 7 ZeroPageX 2
  1596  c963 c3c1               !word dispModeZPY-1 ; 8 ZeroPageY 2
  1597  c965 d0c1               !word dispModeAbs-1 ; 9 Absolute 3
  1598  c967 e2c1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  1599  c969 efc1               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  1600  c96b fcc1               !word dispModeInd-1 ; 12 Indirect 3
  1601                          
  1602                          !if 0=1 { ; TODO: HELP
  1603                          mode_examples:
  1604                          !text "A", 0 ; 0 Accumulator
  1605                          !text "", 0 ; 1 None
  1606                          !text "#$12", 0 ; 2 Immediate
  1607                          !text "($12,X)", 0 ; 3 IndirectX
  1608                          !text "($12),Y", 0 ; 4 IndirectY
  1609                          !text "$1234 (-128 to +127)", 0 ; 5 Relative
  1610                          !text "$12", 0 ; 6 ZeroPage
  1611                          !text "$12,X", 0 ; 7 ZeroPageX
  1612                          !text "$12,Y", 0 ; 8 ZeroPageY
  1613                          !text "$1234", 0 ; 9 Absolute
  1614                          !text "$1234,X", 0 ; 10 AbsoluteX
  1615                          !text "$1234,Y", 0 ; 11 AbsoluteY
  1616                          !text "($1234)", 0 ; 12 Indirect
  1617                          }
  1618                          
  1619                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  1620                          nopcodes = 151
  1621  c96d 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  1622  ca04 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  1623  ca9b 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  1624                          
  1625                          copyright 
  1626                          ;                  1         2         3         4
  1627                          ;         1234567890123456789012345678901234567890
  1628  cb32 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  1629                          !ifdef C64TERMINAL {
  1630                              !text 13, "(TERMINAL VERSION)"
  1631                          }
  1632  cb52 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  1633  cb78 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  1634  cb8f 00                 !text 0
  1635                          
  1636                          firsthelp
  1637  cb90 0d3f2028464f5220...!text 13, "? (FOR SYNTAX)"
  1638  cb9f 0d3f20412028464f...!text 13, "? A (FOR 6502 INSTRUCTIONS)"
  1639  cbbb 0d3f204d4f444553...!text 13, "? MODES (FOR INSTRUCTION MODES)"
  1640                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  1641  cbdb 0d00               !text 13, 0
  1642                          
  1643  cbdd 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  1644                          
  1645                          generalhelp
  1646  cbee 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  1647  cc14 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  1648  cc39 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  1649  cc5c 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  1650  cc84 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  1651  cca0 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  1652  ccc0 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  1653  cce2 00                 !text 0
  1654                          generalhelp2
  1655  cce3 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  1656  cd08 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  1657  cd27 00                 !text 0
  1658                          
  1659                          !ifdef C64SCREEN {
  1660  cd28 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  1661  cd2f 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  1662                          }
  1663                          
  1664                          !ifdef MINIMUM {
  1665                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1666                          ; JUMP table for consistency
  1667                          * = $FE00
  1668                          JUART_INIT: JMP UART_INIT
  1669                          JUART_OUT: JMP UART_OUT
  1670                          JUART_IN: JMP UART_IN
  1671                          JUART_CHK: JMP UART_CHK
  1672                          
  1673                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1674                          ; 6502 vectors 
  1675                          * = $fffa
  1676                              !word NMI
  1677                              !word RESET
  1678                              !word IRQ
  1679                          }
  1680                          
  1681                          finish = *
