
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGET  C64 and...                    *        <<<
     7                          ;; >>>       ** INCLUDES VERSION FOR 6502+MC6850 minimum system *        <<<
     8                          ;; >>>       *   60K(RAM),4K(ROM), 2 bytes IO for MC6850 UART   *        <<<
     9                          ;; >>>       ****************************************************        <<<
    10                          ;;
    11                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    12                          ;; MIT License
    13                          ;;
    14                          ;; Copyright (c) 2024 David R. Van Wagner
    15                          ;; davevw.com
    16                          ;;
    17                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    18                          ;; of this software and associated documentation files (the "Software"), to deal
    19                          ;; in the Software without restriction, including without limitation the rights
    20                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    21                          ;; copies of the Software, and to permit persons to whom the Software is
    22                          ;; furnished to do so, subject to the following conditions:
    23                          ;;
    24                          ;; The above copyright notice and this permission notice shall be included in all
    25                          ;; copies or substantial portions of the Software.
    26                          ;;
    27                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    28                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    29                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    30                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    31                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    32                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    33                          ;; SOFTWARE.
    34                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    35                          
    36                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ; Important! define exactly ONE target (set in build.sh)
    39                          ;C64SCREEN = 1
    40                          ;C64TERMINAL = 1
    41                          ;MINIMUM = 1
    42                          
    43                          ; options (set in build.sh)
    44                          ;NEEDECHO = 0
    45                          
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;; _
    49                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    50                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    51                          ;; 1000 (display memory at $1000)
    52                          ;; 1000.2000 (display memory range $1000 to $2000)
    53                          ;; 1000. (display next screenful of memory starting at $1000)
    54                          ;; . (display next screenful of memory)
    55                          ;; 1000 r (JMP $1000)
    56                          ;; 1000: 01 02 03 (modify memory)
    57                          ;; (NEW SYNTAX)
    58                          ;; 1000 d (disassemble starting at address, for screenful)
    59                          ;; d (continue disassembling from last address)
    60                          ;; 1000 a (assemble starting at, interactive until empty line) 
    61                          ;; x (exit monitor -- C64 only)
    62                          ;; ? (commands help)
    63                          ;; ? a (list instructions available)
    64                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    65                          ;; ? mode (show addressing modes example syntax for 6502)
    66                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    67                          ;; (FUTURE SYNTAX, not implemented)
    68                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    69                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    70                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    71                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    72                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    73                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    74                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    75                          ;;
    76                          ;; (INTERACTIVE ASSEMBLER)
    77                          ;; 1000 _
    78                          ;;      ADC #$12
    79                          ;; 1000 69 12    ADC #$12
    80                          ;; 1002 _
    81                          ;;      JSR $1234
    82                          ;; 1002 20 34 12 JSR $1234
    83                          ;; 1005 _
    84                          ;;      RTS
    85                          ;; 1005 60       RTS
    86                          ;; 1006 _
    87                          ;;      XYZ
    88                          ;;      XYZ ?
    89                          ;; 1006 _
    90                          ;; _
    91                          ;;
    92                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    93                          ;; and can cursor up to revise, 
    94                          ;;
    95                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    96                          ;;
    97                          
    98                          ; global
    99                          inputbuf=$0200
   100                          
   101                          
   102                          ; kernal/system calls
   103                          
   104                          !ifdef MINIMUM {
   105                          charout=JUART_OUT
   106                          getkey=JUART_IN
   107                          }
   108                          
   109                          !ifdef C64SCREEN {
   110                          setlfs=$ffba
   111                          setnam=$ffbd
   112                          charin=$ffcf ; screen editor
   113                          charout=$ffd2
   114                          fsave =$ffd8
   115                          getkey=$ffe4
   116                          }
   117                          
   118                          !ifdef C64TERMINAL {
   119                          setlfs=$ffba
   120                          setnam=$ffbd
   121                          charout=$ffd2
   122                          getkey=$ffe4
   123                          fsave =$ffd8
   124                          }
   125                          
   126                          ; zeropage
   127                          !ifdef MINIMUM {
   128                          opidx=$f0
   129                          inidx=$f1
   130                          mode=$f2
   131                          size=$f3
   132                          ptr3=$f4 ; and $f5
   133                          count=$f6
   134                          len=$f7
   135                          savepos=$f8
   136                          tmp2=$f9
   137                          flag=$fa
   138                          ptr1=$fb ; and $fc
   139                          ptr2=$fd ; and $fe
   140                          tmp=$ff
   141                          } else {
   142                          ptr1=$fb ; and $fc
   143                          ptr2=$fd ; and $fe
   144                          tmp=$ff
   145                          opidx=$22
   146                          inidx=$23
   147                          mode=$24
   148                          size=$25
   149                          ptr3=$26 ; and $27
   150                          count=$a3
   151                          len=$a4
   152                          savepos=$a5
   153                          tmp2=$a6
   154                          flag=$a7
   155                          banksel=$02
   156                          drive=$a8
   157                          }
   158                          
   159                          !ifdef MINIMUM {
   160                          *=$f000
   161                          } else {
   162                          *=$bc00 ; use some extra RAM under C64 BASIC ROM for more code
   163                          }
   164                          
   165                          ; ************************************************************************************
   166                          ; **** skip over next section, and see ** start ** below for beginning of program ****
   167                          ; ************************************************************************************
   168                          
   169                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   170                          
   171                          !ifndef MINIMUM {
   172                          ; C64 only
   173                          ; THIS CODE IS IN RAM UNDER BASIC ROM SO USE EXTRA CARE AS RUNNING IN THIS DIFFERENT MEMORY CONFIGURATION
   174                          ; REQUIRES ENTRY WHILE RAM IS ACCESSIBLE (SEE SETBANK) BUT ROM IS INACCESSIBLE
   175                          
   176                          chkextrac64:
   177  bc00 200cbc                 jsr chkexit
   178  bc03 d003                   bne +
   179  bc05 4c20bc                 jmp execute_exit
   180  bc08 18                 +   clc ; no error
   181  bc09 a201                   ldx #1 ; Z false - not consumed
   182  bc0b 60                     rts
   183                          
   184                          chkexit:
   185  bc0c b90002                 lda inputbuf, y
   186  bc0f c958                   cmp #'X'
   187  bc11 d008                   bne +
   188  bc13 c8                     iny
   189  bc14 c4a4                   cpy len ; validate no extra characters
   190  bc16 f003                   beq +
   191  bc18 4c1cbc                 jmp extra_error
   192  bc1b 60                 +   rts
   193                          
   194                          extra_error:
   195                              ; pop local return address
   196  bc1c 68                     pla
   197  bc1d 68                     pla
   198  bc1e 38                     sec ; error
   199  bc1f 60                     rts
   200                          
   201                          execute_exit:
   202                              ; pop monitor return addresses, so only original caller is left
   203  bc20 68                     pla
   204  bc21 68                     pla
   205  bc22 68                     pla
   206  bc23 68                     pla
   207  bc24 68                     pla
   208  bc25 68                     pla
   209  bc26 a907                   lda #7
   210  bc28 4caacf                 jmp setbank
   211                          
   212                          display_extra_help:
   213  bc2b a9fa                   lda #<extra_help
   214  bc2d a2bc                   ldx #>extra_help
   215  bc2f 4c62c2                 jmp strout
   216                          
   217                          !ifdef C64SCREEN {
   218                          display_page_disassemble:
   219  bc32 a5fb                   lda ptr1
   220  bc34 a6fc                   ldx ptr1+1
   221  bc36 20e6c1                 jsr disphexword
   222  bc39 a937                   lda #<page_disassemble
   223  bc3b a2bd                   ldx #>page_disassemble
   224  bc3d 4c62c2                 jmp strout
   225                          
   226                          display_page_displaymemory:
   227  bc40 20d4c9                 jsr newline
   228  bc43 a5fb                   lda ptr1
   229  bc45 a6fc                   ldx ptr1+1
   230  bc47 20e6c1                 jsr disphexword
   231  bc4a a93e                   lda #<page_displaymemory
   232  bc4c a2bd                   ldx #>page_displaymemory
   233  bc4e 4c62c2                 jmp strout
   234                          
   235                          inputlinec64:
   236  bc51 a000                   ldy #0
   237  bc53 20cfff             -   jsr charin
   238  bc56 990002                 sta inputbuf,y
   239  bc59 c8                     iny
   240  bc5a c90d                   cmp #13
   241  bc5c d0f5                   bne -
   242  bc5e 60                     rts
   243                          
   244                          continueassemblec64:
   245  bc5f a914                   lda #20
   246  bc61 20d2ff                 jsr charout
   247  bc64 20d2ff                 jsr charout
   248  bc67 a5fb                   lda ptr1
   249  bc69 a6fc                   ldx ptr1+1
   250  bc6b 20e6c1                 jsr disphexword
   251  bc6e a920                   lda #' '
   252  bc70 20d2ff                 jsr charout
   253  bc73 20d2ff                 jsr charout
   254  bc76 4cd2ff                 jmp charout
   255                          }
   256                          
   257                          chkfilename:
   258  bc79 202dc9                 jsr skipspaces
   259  bc7c 84ff                   sty tmp
   260  bc7e b90002                 lda inputbuf, y
   261  bc81 c922                   cmp #34 ; double quote
   262  bc83 d022                   bne ++
   263  bc85 c8                 -   iny
   264  bc86 b90002                 lda inputbuf, y
   265  bc89 c90d                   cmp #13
   266  bc8b d004                   bne +
   267  bc8d a4ff                   ldy tmp
   268  bc8f d016                   bne ++
   269  bc91 c922               +   cmp #34 ; double quote
   270  bc93 d0f0                   bne -
   271  bc95 98                     tya ; index of ending double quotes
   272  bc96 48                     pha ; save
   273  bc97 18                     clc ; will subtract one more
   274  bc98 e5ff                   sbc tmp ; subtract index of first quote, have filename length
   275  bc9a a6ff                   ldx tmp
   276  bc9c e8                     inx ; low address of filename
   277  bc9d a002                   ldy #>inputbuf ; high address of filename
   278  bc9f 20bdff                 jsr setnam
   279  bca2 68                     pla
   280  bca3 a8                     tay
   281  bca4 c8                     iny ; advance past ending double quotes
   282  bca5 a900                   lda #0 ; set Z true
   283  bca7 60                 ++  rts
   284                          
   285                          check_execute_save:
   286  bca8 2079bc             +   jsr chkfilename
   287  bcab f006                   beq +
   288  bcad 2016c9                 jsr reporterr
   289  bcb0 a201                   ldx #1 ; set Z false
   290  bcb2 60                     rts
   291  bcb3 20c1bc             +   jsr chkoptionaldrive
   292  bcb6 20d5bc                 jsr chksave
   293  bcb9 d005                   bne +
   294  bcbb 20debc                 jsr executesave
   295  bcbe a200                   ldx #0 ; set Z true
   296  bcc0 60                 +   rts
   297                          
   298                          chkoptionaldrive:
   299  bcc1 a908                   lda #8
   300  bcc3 85a8                   sta drive
   301  bcc5 202dc9                 jsr skipspaces
   302  bcc8 2080c9                 jsr chkhexbyte
   303  bccb d007                   bne +
   304  bccd 85a8                   sta drive
   305  bccf 202dc9                 jsr skipspaces
   306  bcd2 a900                   lda #0 ; set Z true
   307  bcd4 60                 +   rts
   308                          
   309                          chksave:
   310  bcd5 202dc9                 jsr skipspaces
   311  bcd8 b90002                 lda inputbuf, y
   312  bcdb c953                   cmp #'S'
   313  bcdd 60                     rts
   314                          
   315                          executesave:
   316  bcde 20d4c9                 jsr newline
   317  bce1 a9c0                   lda #$c0 ; KERNAL control and error messages
   318  bce3 859d                   sta $9d ; set messages to be displayed
   319  bce5 a901                   lda #1
   320  bce7 a6a8                   ldx drive
   321  bce9 a00f                   ldy #15
   322  bceb 20baff                 jsr setlfs
   323  bcee a9fb                   lda #ptr1
   324  bcf0 a6fd                   ldx ptr2
   325  bcf2 a4fe                   ldy ptr2+1
   326  bcf4 20d8ff                 jsr fsave
   327  bcf7 4cd4c9                 jmp newline
   328                          
   329                          extra_help:
   330  bcfa 5820202020202020...    !text "X           (EXIT MONITOR)", 13
   331  bd15 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S  (SAVE)"
   332  bd36 00                     !text 0
   333                          
   334                          !ifdef C64SCREEN {
   335  bd37 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
   336  bd3e 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
   337                          }
   338                          
   339                          *=$c000 ; switch to section of RAM always accessible for start...
   340                          }
   341                          
   342                          ;; end C64 part
   343                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   344                          
   345                          start:
   346  c000 a95e                   lda #<copyright
   347  c002 a2cd                   ldx #>copyright
   348  c004 2062c2                 jsr strout
   349  c007 a9bc                   lda #<firsthelp
   350  c009 a2cd                   ldx #>firsthelp
   351  c00b 2062c2                 jsr strout
   352  c00e 207dc2             -   jsr inputline
   353  c011 2084c2                 jsr parseline
   354  c014 4c0ec0                 jmp -
   355                          
   356                          ; test: ; all the addressing modes here for testing disassembly
   357                          ;     nop
   358                          ;     lda $1234
   359                          ;     lda $1234,x
   360                          ;     lda $1234,y
   361                          ;     asl
   362                          ;     lda #$12
   363                          ;     lda ($12,x)
   364                          ;     lda ($12),y
   365                          ;     jmp ($1234)
   366                          ; -   bne -
   367                          ;     lda $12
   368                          ;     lda $12,x
   369                          ;     ldx $12,y
   370                          ;     !byte $FF ; unknown
   371                          
   372                          disassemble:
   373  c017 a917                   lda #23
   374  c019 85a3                   sta count
   375  c01b a000               -   ldy #0
   376  c01d b1fb                   lda (ptr1),y
   377  c01f 204ac0                 jsr find_opcode
   378  c022 20adc0                 jsr disp_current
   379  c025 a525                   lda size
   380  c027 1002                   bpl +
   381  c029 a901                   lda #1
   382  c02b 18                 +   clc
   383  c02c 65fb                   adc ptr1
   384  c02e 85fb                   sta ptr1
   385  c030 9002                   bcc +
   386  c032 e6fc                   inc ptr1+1
   387  c034 c6a3               +   dec count
   388  c036 d0e3                   bne -
   389                          !ifdef C64SCREEN {
   390  c038 a932                   lda #<display_page_disassemble
   391  c03a a2bc                   ldx #>display_page_disassemble
   392  c03c 2098cf                 jsr callbank6
   393                          } else {    
   394                              rts
   395                          }
   396                          
   397                          compareptrs:
   398  c03f a5fc                   lda ptr1+1
   399  c041 c5fe                   cmp ptr2+1
   400  c043 d004                   bne +
   401  c045 a5fb                   lda ptr1
   402  c047 c5fd                   cmp ptr2
   403  c049 60                 +   rts
   404                          
   405                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   406                          ; and properties updated in ZP globals size,inidx,opidx,mode
   407  c04a a097                   ldy #nopcodes
   408  c04c a296                   ldx #nopcodes-1
   409  c04e dd99cb             -   cmp opcodes,x
   410  c051 f00f                   beq +
   411  c053 ca                     dex
   412  c054 88                     dey
   413  c055 d0f7                   bne -
   414  c057 18                     clc
   415  c058 a901                   lda #1
   416  c05a 8525                   sta size
   417  c05c a9ff                   lda #$FF
   418  c05e aa                     tax
   419  c05f a8                     tay
   420  c060 900a                   bcc ++
   421  c062 bd30cc             +   lda instidx, x
   422  c065 bcc7cc                 ldy modeidx, x
   423  c068 2073c0                 jsr getsize
   424  c06b 38                     sec
   425  c06c 8523               ++  sta inidx
   426  c06e 8622                   stx opidx
   427  c070 8424                   sty mode
   428  c072 60                     rts
   429                          
   430                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   431                              ; result returned in size
   432  c073 48                     pha
   433  c074 a901                   lda #1
   434  c076 8525                   sta size
   435  c078 68                     pla
   436  c079 c002                   cpy #2 // Immediate
   437  c07b 9008                   bcc +
   438  c07d e625                   inc size
   439  c07f c009                   cpy #9 // Absolute
   440  c081 9002                   bcc +
   441  c083 e625                   inc size
   442  c085 60                 +   rts
   443                          
   444                          disp_opcode: ; .A opcode byte
   445  c086 204ac0                 jsr find_opcode
   446  c089 8a                     txa
   447                              ; fall through to display instruction
   448                          
   449                          dispinst: ; .A instruction index 0..55, note modifies A and X
   450  c08a aa                     tax
   451  c08b e038                   cpx #ninst
   452  c08d b012                   bcs +
   453  c08f bdd9c9                 lda inst0, x
   454  c092 20d2ff                 jsr charout
   455  c095 bd11ca                 lda inst1, x
   456  c098 20d2ff                 jsr charout
   457  c09b bd49ca                 lda inst2, x
   458  c09e 4cd2ff                 jmp charout
   459  c0a1 a93f               +   lda #'?'
   460  c0a3 20d2ff                 jsr charout
   461  c0a6 20d2ff                 jsr charout
   462  c0a9 20d2ff                 jsr charout
   463  c0ac 60                     rts
   464                          
   465                          disp_current:
   466  c0ad a5fb                   lda ptr1
   467  c0af a6fc                   ldx ptr1+1
   468  c0b1 20e6c1                 jsr disphexword
   469  c0b4 a920                   lda #$20
   470  c0b6 20d2ff                 jsr charout
   471  c0b9 a000                   ldy #0
   472  c0bb a625                   ldx size
   473  c0bd b1fb               -   lda (ptr1),y
   474  c0bf 20ecc1                 jsr disphexbyte
   475  c0c2 a920                   lda #$20
   476  c0c4 20d2ff                 jsr charout
   477  c0c7 c8                     iny
   478  c0c8 ca                     dex
   479  c0c9 d0f2                   bne -
   480  c0cb c003               -   cpy #3
   481  c0cd f00e                   beq +
   482  c0cf a920                   lda #$20
   483  c0d1 20d2ff                 jsr charout
   484  c0d4 20d2ff                 jsr charout
   485  c0d7 20d2ff                 jsr charout
   486  c0da c8                     iny
   487  c0db d0ee                   bne -
   488  c0dd a523               +   lda inidx
   489  c0df 208ac0                 jsr dispinst
   490  c0e2 a920                   lda #$20
   491  c0e4 20d2ff                 jsr charout
   492  c0e7 20efc0                 jsr disp_mode
   493  c0ea a90d                   lda #13
   494  c0ec 4cd2ff                 jmp charout
   495                          
   496                          disp_mode
   497  c0ef a524                   lda mode
   498  c0f1 c90d                   cmp #13
   499  c0f3 b00a                   bcs +
   500  c0f5 0a                     asl
   501  c0f6 aa                     tax
   502  c0f7 bd82ca                 lda mode_jmptable+1,x
   503  c0fa 48                     pha
   504  c0fb bd81ca                 lda mode_jmptable,x
   505  c0fe 48                     pha
   506  c0ff 60                 +   rts
   507                          
   508                          dispModeAcc:
   509  c100 a941                   lda #'A'
   510  c102 4cd2ff                 jmp charout
   511                          
   512                          dispModeNone:
   513  c105 60                     rts
   514                          
   515                          dispModeImm:
   516  c106 a923                   lda #'#'
   517  c108 20d2ff                 jsr charout
   518                          dispModeZP:
   519  c10b a924                   lda #'$'
   520  c10d 20d2ff                 jsr charout
   521  c110 a001                   ldy #1
   522  c112 b1fb                   lda (ptr1),y
   523  c114 4cecc1                 jmp disphexbyte
   524                          
   525                          dispModeIndX:
   526  c117 a928                   lda #'('
   527  c119 20d2ff                 jsr charout
   528  c11c a924                   lda #'$'
   529  c11e 20d2ff                 jsr charout
   530  c121 a001                   ldy #1
   531  c123 b1fb                   lda (ptr1),y
   532  c125 20ecc1                 jsr disphexbyte
   533  c128 a92c                   lda #','
   534  c12a 20d2ff                 jsr charout
   535  c12d a958                   lda #'X'
   536  c12f 20d2ff                 jsr charout
   537  c132 a929                   lda #')'
   538  c134 4cd2ff                 jmp charout
   539                          
   540                          dispModeIndY:
   541  c137 a928                   lda #'('
   542  c139 20d2ff                 jsr charout
   543  c13c a924                   lda #'$'
   544  c13e 20d2ff                 jsr charout
   545  c141 a001                   ldy #1
   546  c143 b1fb                   lda (ptr1),y
   547  c145 20ecc1                 jsr disphexbyte
   548  c148 a929                   lda #')'
   549  c14a 20d2ff                 jsr charout
   550  c14d a92c                   lda #','
   551  c14f 20d2ff                 jsr charout
   552  c152 a959                   lda #'Y'
   553  c154 4cd2ff                 jmp charout
   554                          
   555                          dispModeRel:
   556  c157 a924                   lda #'$'
   557  c159 20d2ff                 jsr charout
   558  c15c 18                     clc
   559  c15d a5fb                   lda ptr1
   560  c15f 6902                   adc #2
   561  c161 8526                   sta ptr3
   562  c163 a5fc                   lda ptr1+1
   563  c165 6900                   adc #0
   564  c167 8527                   sta ptr3+1
   565  c169 a001                   ldy #1
   566  c16b b1fb                   lda (ptr1),y
   567  c16d 1014                   bpl +
   568                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   569  c16f 49ff                   eor #$FF ; inverse
   570  c171 18                     clc
   571  c172 6901                   adc #1 ; complete getting absolute value from two's complement
   572  c174 85ff                   sta tmp
   573  c176 38                     sec
   574  c177 a526                   lda ptr3
   575  c179 e5ff                   sbc tmp
   576  c17b 8526                   sta ptr3
   577  c17d b00d                   bcs ++
   578  c17f c627                   dec ptr3+1
   579  c181 9009                   bcc ++
   580  c183 18                 +   clc ; simple case of adding
   581  c184 6526                   adc ptr3
   582  c186 8526                   sta ptr3
   583  c188 9002                   bcc ++
   584  c18a e627                   inc ptr3+1
   585  c18c a526               ++  lda ptr3
   586  c18e a627                   ldx ptr3+1
   587  c190 4ce6c1                 jmp disphexword
   588                          
   589                          dispModeZPX:
   590  c193 200bc1                 jsr dispModeZP
   591  c196 a92c                   lda #','
   592  c198 20d2ff                 jsr charout
   593  c19b a958                   lda #'X'
   594  c19d 4cd2ff                 jmp charout
   595                          
   596                          dispModeZPY:
   597  c1a0 200bc1                 jsr dispModeZP
   598  c1a3 a92c                   lda #','
   599  c1a5 20d2ff                 jsr charout
   600  c1a8 a959                   lda #'Y'
   601  c1aa 4cd2ff                 jmp charout
   602                          
   603                          dispModeAbs:
   604  c1ad a924                   lda #'$'
   605  c1af 20d2ff                 jsr charout
   606  c1b2 a001                   ldy #1
   607  c1b4 b1fb                   lda (ptr1),y
   608  c1b6 48                     pha
   609  c1b7 c8                     iny
   610  c1b8 b1fb                   lda (ptr1),y
   611  c1ba aa                     tax
   612  c1bb 68                     pla
   613  c1bc 4ce6c1                 jmp disphexword
   614                          
   615                          dispModeAbsX:
   616  c1bf 20adc1                 jsr dispModeAbs
   617  c1c2 a92c                   lda #','
   618  c1c4 20d2ff                 jsr charout
   619  c1c7 a958                   lda #'X'
   620  c1c9 4cd2ff                 jmp charout
   621                          
   622                          dispModeAbsY:
   623  c1cc 20adc1                 jsr dispModeAbs
   624  c1cf a92c                   lda #','
   625  c1d1 20d2ff                 jsr charout
   626  c1d4 a959                   lda #'Y'
   627  c1d6 4cd2ff                 jmp charout
   628                          
   629                          dispModeInd:
   630  c1d9 a928                   lda #'('
   631  c1db 20d2ff                 jsr charout
   632  c1de 20adc1                 jsr dispModeAbs
   633  c1e1 a929                   lda #')'
   634  c1e3 4cd2ff                 jmp charout
   635                          
   636                          disphexword: ; .A low, .X high, 0000..FFFF
   637  c1e6 48                     pha
   638  c1e7 8a                     txa
   639  c1e8 20ecc1                 jsr disphexbyte
   640  c1eb 68                     pla
   641                              ;fall through to call again
   642                          
   643                          disphexbyte: ; .A 00..FF
   644  c1ec 48                     pha
   645  c1ed 4a                     lsr
   646  c1ee 4a                     lsr
   647  c1ef 4a                     lsr
   648  c1f0 4a                     lsr
   649  c1f1 20f5c1                 jsr disphexnybble
   650  c1f4 68                     pla
   651                              ;fall through to call again
   652                          
   653                          disphexnybble: ; .A 0..F
   654  c1f5 290f                   and #$0F
   655  c1f7 0930                   ora #$30
   656  c1f9 c93a                   cmp #$3A
   657  c1fb 9002                   bcc +
   658  c1fd 6906                   adc #$06
   659  c1ff 4cd2ff             +   jmp charout
   660                          
   661                          inputhexword: ; C set if fails
   662  c202 a900                   lda #0
   663  c204 85fb                   sta ptr1
   664  c206 85fc                   sta ptr1+1
   665                          
   666  c208 a904                   lda #4 ; word is at most 4 nybbles
   667  c20a 85a3                   sta count
   668  c20c 2044c2             --  jsr inputhexnybble
   669  c20f b012                   bcs +
   670                          
   671                              ; shift nibble up
   672  c211 0a                     asl
   673  c212 0a                     asl
   674  c213 0a                     asl
   675  c214 0a                     asl
   676                          
   677  c215 a204                   ldx #4 ; 4 bits rotated into word
   678  c217 2a                 -   rol
   679  c218 26fb                   rol ptr1
   680  c21a 26fc                   rol ptr1+1
   681  c21c ca                     dex
   682  c21d d0f8                   bne - ; repeat bits
   683                          
   684  c21f c6a3                   dec count
   685  c221 d0e9                   bne -- ; repeat nybbles
   686                          
   687  c223 a5a3               +   lda count
   688  c225 c904                   cmp #4 ; set C if 4, otherwise clear
   689  c227 60                     rts
   690                          
   691                          inputhexbyte:
   692  c228 2044c2                 jsr inputhexnybble
   693  c22b b016                   bcs ++
   694  c22d 85ff                   sta tmp
   695  c22f 2044c2                 jsr inputhexnybble
   696  c232 9005                   bcc +
   697  c234 18                     clc ; allow single digit as byte
   698  c235 a5ff                   lda tmp
   699  c237 900a                   bcc ++
   700  c239 06ff               +   asl tmp
   701  c23b 06ff                   asl tmp
   702  c23d 06ff                   asl tmp
   703  c23f 06ff                   asl tmp
   704  c241 05ff                   ora tmp ; necessary to assemble the two nybbles
   705  c243 60                 ++  rts
   706                          
   707                          inputhexnybble:
   708  c244 b90002                 lda $0200,y
   709  c247 297f                   and #$7F
   710  c249 38                     sec
   711  c24a e930                   sbc #$30
   712  c24c 9012                   bcc ++
   713  c24e c90a                   cmp #10
   714  c250 900c                   bcc +
   715  c252 e907                   sbc #7
   716  c254 900a                   bcc ++
   717  c256 c90a                   cmp #10
   718  c258 9006                   bcc ++
   719  c25a c910                   cmp #16
   720  c25c b002                   bcs ++
   721  c25e c8                 +   iny
   722  c25f 60                     rts
   723  c260 38                 ++  sec
   724  c261 60                     rts
   725                          
   726                          strout:
   727  c262 8526                   sta ptr3
   728  c264 8627                   stx ptr3+1
   729                          strout2:    
   730  c266 a000                   ldy #0
   731  c268 b126               -   lda (ptr3),y
   732  c26a f006                   beq +
   733  c26c 20d2ff                 jsr charout
   734  c26f c8                     iny
   735  c270 d0f6                   bne -
   736  c272 98                 +   tya
   737  c273 38                     sec
   738  c274 6526                   adc ptr3
   739  c276 8526                   sta ptr3
   740  c278 9002                   bcc +
   741  c27a e627                   inc ptr3+1
   742  c27c 60                 +   rts
   743                          
   744                          inputline:
   745                          !ifdef C64SCREEN {
   746  c27d a951                   lda #<inputlinec64
   747  c27f a2bc                   ldx #>inputlinec64
   748  c281 4c98cf                 jmp callbank6
   749                          } else {
   750                              ldy #0
   751                          --  sty count
   752                          -   jsr getkey
   753                              beq -
   754                              ldy count
   755                          !ifdef MINIMUM {
   756                              cmp #8 ; backspace
   757                          } else {
   758                              cmp #20
   759                          }
   760                              bne +
   761                              cpy #0
   762                              beq -
   763                              dey
   764                          !if NEEDECHO = 1 {    
   765                              jsr charout
   766                          }
   767                              jmp --
   768                          +   cmp #13
   769                              beq +
   770                              cmp #' '
   771                              bcc -
   772                              cmp #128
   773                              bcs -
   774                          +
   775                          !if NEEDECHO = 1 {    
   776                              jsr charout
   777                          }
   778                              sta inputbuf,y
   779                              iny
   780                              cmp #13
   781                              bne --
   782                              rts
   783                          }
   784                          
   785                          parseline:
   786  c284 c001                   cpy #1
   787  c286 d003                   bne +
   788                          -
   789                          !ifdef C64SCREEN {   
   790  c288 4cd4c9                 jmp newline
   791                          } else {
   792                              rts
   793                          }
   794  c28b 88                 +   dey
   795  c28c 84a4                   sty len
   796                              ; skip whitespace
   797                              ; check for address, put in ptr1
   798                              ; or check for dot, then require address put in ptr2
   799                              ; or check for ?, and optional parameter, execute help
   800                              ; check for whitespace
   801                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   802                              ; check for string, store at start of inputbuf
   803                              ; check for drive number
   804                              ; check for whitespace
   805                              ; check command ":rda?mls", execute command
   806  c28e a000                   ldy #0
   807  c290 202dc9                 jsr skipspaces
   808  c293 c4a4                   cpy len
   809  c295 f0f1                   beq -
   810  c297 20e3c8                 jsr chkcontinuedis
   811  c29a d003                   bne +
   812  c29c 2007c9                 jsr executedisassemble ; note won't return
   813  c29f 20f5c8             +   jsr chkcontinueasm
   814  c2a2 d003                   bne +
   815  c2a4 2017c5                 jsr continueassemble ; note won't return
   816  c2a7 203cc9             +   jsr chkdot
   817  c2aa d003                   bne +
   818  c2ac 4ca6c3                 jmp executedot
   819  c2af 2047c9             +   jsr chkhelp
   820  c2b2 d003                   bne +
   821  c2b4 4cb0c3                 jmp executehelp
   822                          +
   823                          !ifndef MINIMUM {
   824  c2b7 20c9c2                 jsr bank6_chkextrac64 ; check syntax only available on C64
   825  c2ba b01b                   bcs + ; error if C set
   826  c2bc f005                   beq ++ ; consumed if Z set, skip next test(s)
   827                          }    
   828  c2be 2077c9                 jsr chkhexaddr1
   829  c2c1 d003                   bne error
   830  c2c3 4cd0c2             ++  jmp executeaddr1
   831                          error:
   832  c2c6 4c16c9                 jmp reporterr
   833                          
   834                          !ifndef MINIMUM {
   835                          bank6_chkextrac64:
   836  c2c9 a900                   lda #<chkextrac64
   837  c2cb a2bc                   ldx #>chkextrac64
   838  c2cd 4c98cf                 jmp callbank6
   839                          }
   840                          
   841                          executeaddr1:
   842  c2d0 c4a4                   cpy len
   843  c2d2 d003                   bne +
   844  c2d4 4c31c3                 jmp executedisplay1
   845  c2d7 203cc9             +   jsr chkdot
   846  c2da d00f                   bne +
   847  c2dc c4a4                   cpy len
   848  c2de f025                   beq executepagedisplay
   849  c2e0 2097c9                 jsr chkhexaddr2
   850  c2e3 d0e1                   bne error
   851  c2e5 18                     clc
   852  c2e6 66a7                   ror flag
   853  c2e8 4c1dc3                 jmp executeaddr12
   854  c2eb 202dc9             +   jsr skipspaces
   855  c2ee 2052c9                 jsr chkcolon
   856  c2f1 d003                   bne +
   857  c2f3 4c84c3                 jmp executemodify
   858  c2f6 20b8c9             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   859                          !ifdef MINIMUM {
   860                              jmp reportnotimplemented
   861                          } else {
   862  c2f9 a979                   lda #<chkfilename
   863  c2fb a2bc                   ldx #>chkfilename
   864  c2fd 2098cf                 jsr callbank6
   865  c300 d0c4                   bne error
   866  c302 4cadc3                 jmp executeloadfilename
   867                          }
   868                          
   869                          executepagedisplay:
   870  c305 a5fb                   lda ptr1
   871  c307 18                     clc
   872                          !ifdef MINIMUM {
   873                              adc #$5f
   874                          } else {
   875  c308 69b7                   adc #$b7
   876                          }
   877  c30a 85fd                   sta ptr2
   878  c30c a5fc                   lda ptr1+1
   879                          !ifdef MINIMUM {
   880                              adc #$01
   881                          } else {
   882  c30e 6900                   adc #$00
   883                          }
   884  c310 85fe                   sta ptr2+1
   885  c312 9006                   bcc +
   886  c314 a9ff                   lda #$ff
   887  c316 85fd                   sta ptr2
   888  c318 85fe                   sta ptr2+1
   889  c31a 38                 +   sec
   890  c31b 66a7                   ror flag
   891                              ; fall through to executeaddr12
   892                          
   893                          executeaddr12:
   894  c31d c4a4                   cpy len
   895  c31f d003                   bne +
   896  c321 4c39c3                 jmp executedisplay12
   897                          !ifndef MINIMUM {
   898  c324 a9a8               +   lda #<check_execute_save
   899  c326 a2bc                   ldx #>check_execute_save
   900  c328 2098cf                 jsr callbank6
   901  c32b f003                   beq ++
   902                          }
   903  c32d 4c0fc9             +   jmp reportnotimplemented
   904  c330 60                 ++  rts
   905                          
   906                          executedisplay1:
   907  c331 a5fb                   lda ptr1
   908  c333 85fd                   sta ptr2
   909  c335 a5fc                   lda ptr1+1
   910  c337 85fe                   sta ptr2+1
   911                              ; fall through executedisplay12
   912                          
   913                          executedisplay12:
   914  c339 a9ff                   lda #$ff
   915  c33b 85a3                   sta count
   916  c33d e6a3               -   inc count
   917  c33f a5a3                   lda count
   918                          !ifdef MINIMUM {    
   919                              and #$0f
   920                          } else {
   921  c341 2907                   and #$07
   922                          }
   923  c343 d016                   bne +
   924  c345 a90d                   lda #13
   925  c347 20d2ff                 jsr charout
   926  c34a a5fb                   lda ptr1
   927  c34c a6fc                   ldx ptr1+1
   928  c34e 20e6c1                 jsr disphexword
   929  c351 a93a                   lda #':'
   930  c353 20d2ff                 jsr charout
   931  c356 a920                   lda #' '
   932  c358 20d2ff                 jsr charout
   933  c35b a000               +   ldy #0
   934  c35d b1fb                   lda (ptr1),y
   935  c35f 20ecc1                 jsr disphexbyte
   936  c362 a920                   lda #' '
   937  c364 20d2ff                 jsr charout
   938  c367 e6fb                   inc ptr1
   939  c369 d004                   bne +
   940  c36b e6fc                   inc ptr1+1
   941  c36d f012                   beq ++
   942  c36f 203fc0             +   jsr compareptrs
   943  c372 90c9                   bcc -
   944  c374 f0c7                   beq -
   945  c376 24a7                   bit flag
   946  c378 1007                   bpl ++
   947                          !ifdef C64SCREEN {
   948  c37a a940                   lda #<display_page_displaymemory
   949  c37c a2bc                   ldx #>display_page_displaymemory
   950  c37e 4c98cf                 jmp callbank6
   951                          }
   952  c381 4cd4c9             ++  jmp newline
   953                          
   954                          executemodify:
   955  c384 202dc9                 jsr skipspaces
   956  c387 c4a4                   cpy len
   957  c389 f018                   beq ++
   958  c38b 205dc9                 jsr chkhexbyteofsequence
   959  c38e f003                   beq +
   960  c390 4cc6c2                 jmp error
   961  c393 84ff               +   sty tmp
   962  c395 a000                   ldy #0
   963  c397 91fb                   sta (ptr1),y
   964  c399 e6fb                   inc ptr1
   965  c39b d002                   bne +
   966  c39d e6fc                   inc ptr1+1
   967  c39f a4ff               +   ldy tmp
   968  c3a1 d0e1                   bne executemodify
   969  c3a3 4cd4c9             ++  jmp newline
   970                          
   971                          executedot:
   972  c3a6 c4a4                   cpy len
   973  c3a8 d003                   bne +
   974  c3aa 4c05c3                 jmp executepagedisplay
   975                          
   976                          executeloadfilename:
   977                          executeaddr1cmd:
   978  c3ad 4c0fc9             +   jmp reportnotimplemented
   979                          
   980                          executehelp:
   981                          !ifdef C64SCREEN {
   982  c3b0 20d4c9                 jsr newline
   983                          }
   984  c3b3 c4a4                   cpy len
   985  c3b5 d003                   bne +
   986  c3b7 4cd8c3                 jmp displayhelp
   987  c3ba 202dc9             +   jsr skipspaces
   988  c3bd 20f4c3                 jsr chkhelpinstructions
   989  c3c0 d003                   bne +
   990  c3c2 4c23c4                 jmp displayinstructions
   991  c3c5 2001c4             +   jsr chkhelpmodes
   992  c3c8 d003                   bne +
   993  c3ca 4c3ac4                 jmp displaymodes
   994  c3cd 2055c8             +   jsr chkinstruction
   995  c3d0 d003                   bne +
   996  c3d2 4ceac4                 jmp executehelpinstruction
   997  c3d5 4c0fc9             +   jmp reportnotimplemented
   998                          
   999                          displayhelp:
  1000  c3d8 a93d                   lda #<generalhelp
  1001  c3da a2ce                   ldx #>generalhelp
  1002  c3dc 2062c2                 jsr strout
  1003  c3df a9ac                   lda #<generalhelp2
  1004  c3e1 a2ce                   ldx #>generalhelp2
  1005  c3e3 2062c2                 jsr strout
  1006                          !ifndef MINIMUM {
  1007  c3e6 a92b                   lda #<display_extra_help
  1008  c3e8 a2bc                   ldx #>display_extra_help
  1009  c3ea 2098cf                 jsr callbank6
  1010                          }
  1011  c3ed a9bc                   lda #<firsthelp
  1012  c3ef a2cd                   ldx #>firsthelp
  1013  c3f1 4c62c2                 jmp strout
  1014                          
  1015                          chkhelpinstructions:
  1016  c3f4 b90002                 lda inputbuf, y
  1017  c3f7 c941                   cmp #'A'
  1018  c3f9 d005                   bne +
  1019  c3fb b90102                 lda inputbuf+1, y
  1020  c3fe c90d                   cmp #13
  1021                              ; no need to increment y if found, done parsing line
  1022  c400 60                 +   rts
  1023                          
  1024                          chkhelpmodes:
  1025  c401 a993                   lda #<modes_keyword
  1026  c403 a2cf                   ldx #>modes_keyword
  1027                              ; fall through to chkkeyword
  1028                          
  1029                          chkkeyword:
  1030  c405 84a3                   sty count
  1031  c407 8526                   sta ptr3
  1032  c409 8627                   stx ptr3+1
  1033  c40b a6a3                   ldx count
  1034  c40d a000                   ldy #0
  1035  c40f bd0002             -   lda inputbuf, x
  1036  c412 d126                   cmp (ptr3),y
  1037  c414 d008                   bne +
  1038  c416 e8                     inx
  1039  c417 c8                     iny
  1040  c418 e4a4                   cpx len
  1041  c41a d0f3                   bne -
  1042  c41c b126                   lda (ptr3),y ; matched if end of string, will set Z
  1043  c41e 08                 +   php ; save Z
  1044  c41f a4a3                   ldy count
  1045  c421 28                     plp ; restore Z
  1046  c422 60                     rts
  1047                          
  1048                          displayinstructions:
  1049  c423 a038                   ldy #ninst
  1050  c425 a200                   ldx #0
  1051  c427 8a                 -   txa
  1052  c428 48                     pha
  1053  c429 208ac0                 jsr dispinst
  1054  c42c a920                   lda #' '
  1055  c42e 20d2ff                 jsr charout
  1056  c431 68                     pla
  1057  c432 aa                     tax
  1058  c433 e8                     inx
  1059  c434 88                     dey
  1060  c435 d0f0                   bne -
  1061  c437 4cd4c9                 jmp newline
  1062                          
  1063                          displaymodes:
  1064  c43a 38                     sec
  1065  c43b a900                   lda #0
  1066  c43d 48                 -   pha
  1067  c43e aa                     tax
  1068  c43f bd9bca                 lda mode_sorted, x
  1069  c442 204fc4                 jsr dispmode
  1070  c445 68                     pla
  1071  c446 18                     clc
  1072  c447 6901                   adc #1
  1073  c449 c90d                   cmp #nmodes
  1074  c44b 90f0                   bcc -
  1075  c44d 18                     clc
  1076  c44e 60                     rts
  1077                          
  1078                          dispmode:
  1079  c44f c90d                   cmp #nmodes
  1080  c451 b008                   bcs +
  1081  c453 8524                   sta mode
  1082  c455 2097c4                 jsr disp_modename_and_example
  1083  c458 4c5cc4                 jmp dispmodeinstructions
  1084  c45b 60                 +   rts
  1085                          
  1086                          dispmodeinstructions:
  1087                          !ifdef C64SCREEN {
  1088                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1089  c45c a524                   lda mode
  1090  c45e c903                   cmp #3
  1091  c460 d005                   bne +
  1092  c462 a920                   lda #' '
  1093  c464 4cd2ff                 jmp charout
  1094                          }
  1095                              ; display instructions with this mode
  1096  c467 a000               +   ldy #0
  1097  c469 8423               --  sty inidx
  1098  c46b a200                   ldx #0
  1099  c46d 86ff               -   stx tmp
  1100  c46f a523                   lda inidx
  1101  c471 dd30cc                 cmp instidx, x
  1102  c474 d014                   bne ++
  1103  c476 bdc7cc                 lda modeidx, x
  1104  c479 c524                   cmp mode
  1105  c47b d00d                   bne ++
  1106  c47d a920                   lda #' '
  1107  c47f 20d2ff                 jsr charout
  1108  c482 bd30cc                 lda instidx, x
  1109  c485 208ac0                 jsr dispinst
  1110  c488 a6ff                   ldx tmp
  1111  c48a e8                 ++  inx
  1112  c48b e097                   cpx #nopcodes
  1113  c48d 90de                   bcc -
  1114  c48f c8                     iny
  1115  c490 c038                   cpy #ninst
  1116  c492 d0d5                   bne --
  1117  c494 4cd4c9                 jmp newline
  1118                          
  1119                          disp_modename_and_example:
  1120  c497 0a                     asl
  1121  c498 aa                     tax
  1122  c499 bd7fcb                 lda modes, x
  1123  c49c 48                     pha
  1124  c49d bd80cb                 lda modes+1, x
  1125  c4a0 aa                     tax
  1126                          !ifdef C64SCREEN {
  1127  c4a1 a912                   lda #18
  1128  c4a3 20d2ff                 jsr charout
  1129                          }    
  1130  c4a6 68                     pla
  1131  c4a7 2062c2                 jsr strout
  1132  c4aa a920                   lda #' '
  1133  c4ac 20d2ff                 jsr charout
  1134  c4af 2066c2                 jsr strout2
  1135                          !ifdef C64SCREEN {    
  1136  c4b2 a992                   lda #146
  1137  c4b4 20d2ff                 jsr charout
  1138                          }   
  1139  c4b7 60                     rts
  1140                          
  1141                          disp_modename_instruction_example:
  1142  c4b8 0a                     asl
  1143  c4b9 aa                     tax
  1144  c4ba bd7fcb                 lda modes, x
  1145  c4bd 48                     pha
  1146  c4be bd80cb                 lda modes+1, x
  1147  c4c1 aa                     tax
  1148  c4c2 68                     pla
  1149  c4c3 2062c2                 jsr strout ; mode name
  1150  c4c6 a526                   lda ptr3
  1151  c4c8 48                     pha
  1152  c4c9 a527                   lda ptr3+1
  1153  c4cb 48                     pha
  1154  c4cc a93a                   lda #':'
  1155  c4ce 20d2ff                 jsr charout
  1156  c4d1 a920                   lda #' '
  1157  c4d3 20d2ff                 jsr charout
  1158  c4d6 a523                   lda inidx
  1159  c4d8 208ac0                 jsr dispinst ; instruction
  1160  c4db a920                   lda #' '
  1161  c4dd 20d2ff                 jsr charout
  1162  c4e0 68                     pla
  1163  c4e1 8527                   sta ptr3+1
  1164  c4e3 68                     pla
  1165  c4e4 8526                   sta ptr3
  1166  c4e6 2066c2                 jsr strout2 ; example
  1167  c4e9 60                     rts
  1168                          
  1169                          
  1170                          executehelpinstruction:
  1171  c4ea a000                   ldy #0
  1172  c4ec 8422               -   sty opidx
  1173  c4ee b930cc                 lda instidx, y
  1174  c4f1 c523                   cmp inidx
  1175  c4f3 d01a                   bne +
  1176  c4f5 b9c7cc                 lda modeidx, y
  1177  c4f8 8524                   sta mode
  1178  c4fa a622                   ldx opidx
  1179  c4fc bd99cb                 lda opcodes, x
  1180  c4ff 20ecc1                 jsr disphexbyte
  1181  c502 a920                   lda #' '
  1182  c504 20d2ff                 jsr charout
  1183  c507 a524                   lda mode
  1184  c509 20b8c4                 jsr disp_modename_instruction_example
  1185  c50c 20d4c9                 jsr newline
  1186  c50f a422               +   ldy opidx
  1187  c511 c8                     iny
  1188  c512 c097                   cpy #nopcodes
  1189  c514 90d6                   bcc -
  1190  c516 60                     rts
  1191                          
  1192                          continueassemble:
  1193                          !ifdef C64SCREEN {   
  1194  c517 a95f                   lda #<continueassemblec64
  1195  c519 a2bc                   ldx #>continueassemblec64
  1196  c51b 2098cf                 jsr callbank6
  1197                          }
  1198                              ; continue...
  1199                          
  1200                          executeassemble:
  1201  c51e 68                     pla ; remove low byte return address
  1202  c51f 68                     pla ; return high byte return address
  1203                          !ifdef C64SCREEN {    
  1204  c520 a914                   lda #20
  1205  c522 20d2ff                 jsr charout
  1206  c525 20d2ff                 jsr charout
  1207                          } else {
  1208                              lda ptr1
  1209                              ldx ptr1+1
  1210                              jsr disphexword
  1211                              lda #' '
  1212                              jsr charout
  1213                          }
  1214                              ; save current pointer
  1215  c528 a5fb               --  lda ptr1
  1216  c52a a6fc                   ldx ptr1+1
  1217  c52c 8526                   sta ptr3
  1218  c52e 8627                   stx ptr3+1
  1219  c530 207dc2                 jsr inputline
  1220  c533 c001                   cpy #1
  1221  c535 f048                   beq ++
  1222  c537 88                     dey
  1223  c538 84a4                   sty len
  1224  c53a a000                   ldy #0
  1225  c53c 202dc9                 jsr skipspaces
  1226  c53f c4a4                   cpy len
  1227  c541 f03c                   beq ++
  1228                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1229                              ;jsr skipspaces
  1230  c543 2055c8                 jsr chkinstruction
  1231  c546 f00b                   beq +
  1232  c548 a526               -   lda ptr3
  1233  c54a 85fb                   sta ptr1
  1234  c54c a527                   lda ptr3+1
  1235  c54e 85fc                   sta ptr1+1
  1236  c550 4cc6c2                 jmp error
  1237  c553 20a9c5             +   jsr chkaddressing
  1238  c556 d0f0                   bne -
  1239  c558 2086c8                 jsr find_inst_and_mode
  1240  c55b d0eb                   bne -
  1241  c55d 2082c5                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1242  c560 18                     clc
  1243  c561 a525                   lda size
  1244  c563 6526                   adc ptr3
  1245  c565 85fb                   sta ptr1
  1246  c567 a527                   lda ptr3+1
  1247  c569 6900                   adc #0
  1248  c56b 85fc                   sta ptr1+1
  1249                          !ifdef C64SCREEN {    
  1250  c56d 20d4c9                 jsr newline
  1251                          }
  1252  c570 a5fb                   lda ptr1
  1253  c572 a6fc                   ldx ptr1+1
  1254  c574 20e6c1                 jsr disphexword
  1255  c577 a920                   lda #' '
  1256  c579 20d2ff                 jsr charout
  1257  c57c 4c28c5                 jmp --
  1258                          ++  
  1259                          !ifdef C64SCREEN {
  1260  c57f 4cd4c9                 jmp newline
  1261                          } else {
  1262                              rts
  1263                          }
  1264                          
  1265                          store_assembly:
  1266  c582 a622                   ldx opidx
  1267  c584 bd99cb                 lda opcodes, x
  1268  c587 a000                   ldy #0
  1269  c589 9126                   sta (ptr3), y
  1270  c58b c8                     iny
  1271  c58c a625                   ldx size
  1272  c58e e001                   cpx #1
  1273  c590 f016                   beq ++
  1274  c592 e002               +   cpx #2
  1275  c594 d005                   bne +
  1276  c596 a5a6                   lda tmp2
  1277  c598 9126                   sta (ptr3), y
  1278  c59a 60                     rts
  1279  c59b e003               +   cpx #3
  1280  c59d d009                   bne ++
  1281  c59f a5fb                   lda ptr1
  1282  c5a1 9126                   sta (ptr3), y
  1283  c5a3 c8                     iny
  1284  c5a4 a5fc                   lda ptr1+1
  1285  c5a6 9126                   sta (ptr3), y
  1286  c5a8 60                 ++  rts
  1287                          
  1288                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1289  c5a9 202dc9                 jsr skipspaces
  1290  c5ac a200                   ldx #0
  1291  c5ae 8624                   stx mode
  1292  c5b0 200bc6                 jsr chkaccumulator
  1293  c5b3 f051                   beq +
  1294  c5b5 e624                   inc mode
  1295  c5b7 c4a4                   cpy len ; chknone
  1296  c5b9 f04b                   beq +
  1297  c5bb e624                   inc mode
  1298  c5bd 202fc6                 jsr chkimmediate
  1299  c5c0 f044                   beq +
  1300  c5c2 e624                   inc mode
  1301  c5c4 2053c6                 jsr chkindirectx
  1302  c5c7 f03d                   beq +
  1303  c5c9 e624                   inc mode
  1304  c5cb 2098c6                 jsr chkindirecty
  1305  c5ce f036                   beq +
  1306  c5d0 e624                   inc mode
  1307  c5d2 20ddc6                 jsr chkrelative
  1308  c5d5 f02f                   beq +
  1309  c5d7 e624                   inc mode
  1310  c5d9 2038c7                 jsr chkzeropage
  1311  c5dc f028                   beq +
  1312  c5de e624                   inc mode
  1313  c5e0 2051c7                 jsr chkzeropagex
  1314  c5e3 f021                   beq +
  1315  c5e5 e624                   inc mode
  1316  c5e7 2080c7                 jsr chkzeropagey
  1317  c5ea f01a                   beq +
  1318  c5ec e624                   inc mode
  1319  c5ee 20afc7                 jsr chkabsolute
  1320  c5f1 f013                   beq +
  1321  c5f3 e624                   inc mode
  1322  c5f5 20c8c7                 jsr chkabsolutex
  1323  c5f8 f00c                   beq +
  1324  c5fa e624                   inc mode
  1325  c5fc 20f7c7                 jsr chkabsolutey
  1326  c5ff f005                   beq +
  1327  c601 e624                   inc mode
  1328  c603 2026c8                 jsr chkindirect
  1329  c606 08                 +   php ; save Z
  1330  c607 a524                   lda mode
  1331  c609 28                     plp ; restore Z 
  1332  c60a 60                     rts
  1333                          
  1334                          chkaccumulator:
  1335  c60b c4a4                   cpy len
  1336  c60d d013                   bne +
  1337  c60f a523                   lda inidx
  1338  c611 c902                   cmp #2 ; ASL
  1339  c613 f019                   beq ++
  1340  c615 c920                   cmp #32 ; LSR
  1341  c617 f015                   beq ++
  1342  c619 c927                   cmp #39 ; ROL
  1343  c61b f011                   beq ++
  1344  c61d c928                   cmp #40 ; ROR
  1345  c61f 4c2ec6                 jmp ++
  1346  c622 b90002             +   lda inputbuf, y
  1347  c625 c941                   cmp #'A'
  1348  c627 d005                   bne ++
  1349  c629 b90102                 lda inputbuf+1,y
  1350  c62c c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1351  c62e 60                 ++  rts
  1352                          
  1353                          chkimmediate:
  1354  c62f 84a5                   sty savepos
  1355  c631 b90002                 lda inputbuf, y
  1356  c634 c923                   cmp #'#'
  1357  c636 d016                   bne ++
  1358  c638 c8                     iny
  1359  c639 202dc9                 jsr skipspaces
  1360  c63c b90002                 lda inputbuf, y
  1361  c63f c924                   cmp #'$'
  1362  c641 d001                   bne +
  1363  c643 c8                     iny
  1364  c644 2080c9             +   jsr chkhexbyte
  1365  c647 d005                   bne ++
  1366  c649 c4a4               +   cpy len
  1367  c64b d001                   bne ++
  1368  c64d 60                     rts
  1369  c64e a4a5               ++  ldy savepos
  1370  c650 a201                   ldx #1 ; Z false (NE)
  1371  c652 60                     rts
  1372                          
  1373                          chkindirectx:
  1374  c653 84a5                   sty savepos
  1375  c655 b90002                 lda inputbuf, y
  1376  c658 c928                   cmp #'('
  1377  c65a d037                   bne ++
  1378  c65c c8                     iny
  1379  c65d 202dc9                 jsr skipspaces
  1380  c660 b90002                 lda inputbuf, y
  1381  c663 c924                   cmp #'$'
  1382  c665 d001                   bne +
  1383  c667 c8                     iny
  1384  c668 2080c9             +   jsr chkhexbyte
  1385  c66b d026                   bne ++
  1386  c66d 202dc9                 jsr skipspaces
  1387  c670 b90002                 lda inputbuf, y
  1388  c673 c92c                   cmp #','
  1389  c675 d01c                   bne ++
  1390  c677 c8                     iny
  1391  c678 202dc9                 jsr skipspaces
  1392  c67b b90002                 lda inputbuf, y
  1393  c67e c958                   cmp #'X'
  1394  c680 d011                   bne ++
  1395  c682 c8                     iny
  1396  c683 202dc9                 jsr skipspaces
  1397  c686 b90002                 lda inputbuf, y
  1398  c689 c929                   cmp #')'
  1399  c68b d006                   bne ++
  1400  c68d c8                     iny
  1401  c68e c4a4                   cpy len
  1402  c690 d001                   bne ++
  1403  c692 60                     rts
  1404  c693 a4a5               ++  ldy savepos
  1405  c695 a201                   ldx #1 ; Z false (NE)
  1406  c697 60                     rts
  1407                          
  1408                          chkindirecty:
  1409  c698 84a5                   sty savepos
  1410  c69a b90002                 lda inputbuf, y
  1411  c69d c928                   cmp #'('
  1412  c69f d037                   bne ++
  1413  c6a1 c8                     iny
  1414  c6a2 202dc9                 jsr skipspaces
  1415  c6a5 b90002                 lda inputbuf, y
  1416  c6a8 c924                   cmp #'$'
  1417  c6aa d001                   bne +
  1418  c6ac c8                     iny
  1419  c6ad 2080c9             +   jsr chkhexbyte
  1420  c6b0 d026                   bne ++
  1421  c6b2 202dc9                 jsr skipspaces
  1422  c6b5 b90002                 lda inputbuf, y
  1423  c6b8 c929                   cmp #')'
  1424  c6ba d01c                   bne ++
  1425  c6bc c8                     iny
  1426  c6bd 202dc9                 jsr skipspaces
  1427  c6c0 b90002                 lda inputbuf, y
  1428  c6c3 c92c                   cmp #','
  1429  c6c5 d011                   bne ++
  1430  c6c7 c8                     iny
  1431  c6c8 202dc9                 jsr skipspaces
  1432  c6cb b90002                 lda inputbuf, y
  1433  c6ce c959                   cmp #'Y'
  1434  c6d0 d006                   bne ++
  1435  c6d2 c8                     iny
  1436  c6d3 c4a4                   cpy len
  1437  c6d5 d001                   bne ++
  1438  c6d7 60                     rts
  1439  c6d8 a4a5               ++  ldy savepos
  1440  c6da a201                   ldx #1 ; Z false (NE)
  1441  c6dc 60                     rts
  1442                          
  1443                          chkrelative:
  1444  c6dd 84a5                   sty savepos
  1445  c6df a623                   ldx inidx
  1446  c6e1 e006                   cpx #6 ; BIT
  1447  c6e3 f01e                   beq ++
  1448  c6e5 bdd9c9                 lda inst0, x
  1449  c6e8 c942                   cmp #'B'
  1450  c6ea d017                   bne ++
  1451  c6ec b90002                 lda inputbuf, y
  1452  c6ef c924                   cmp #'$'
  1453  c6f1 d001                   bne +
  1454  c6f3 c8                     iny
  1455  c6f4 2077c9             +   jsr chkhexword
  1456  c6f7 d00a                   bne ++
  1457  c6f9 c4a4                   cpy len
  1458  c6fb d006                   bne ++
  1459  c6fd 2008c7                 jsr computeoffset
  1460  c700 d001                   bne ++
  1461  c702 60                     rts ; Z true (EQ)
  1462  c703 a4a5               ++  ldy savepos
  1463  c705 a201                   ldx #1 ; Z false (NE)
  1464  c707 60                     rts
  1465                          
  1466                          computeoffset:
  1467                          ;   compute next address
  1468  c708 a527                   lda ptr3+1
  1469  c70a 85fe                   sta ptr2+1
  1470  c70c a526                   lda ptr3
  1471  c70e 18                     clc
  1472  c70f 6902                   adc #2
  1473  c711 85fd                   sta ptr2
  1474  c713 9002                   bcc +
  1475  c715 e6fe                   inc ptr2+1
  1476                          +  ; subtract argument
  1477  c717 38                     sec
  1478  c718 a5fb                   lda ptr1
  1479  c71a e5fd                   sbc ptr2
  1480  c71c 85a6                   sta tmp2
  1481  c71e a5fc                   lda ptr1+1
  1482  c720 e5fe                   sbc ptr2+1
  1483  c722 f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1484  c724 c9ff                   cmp #$FF
  1485  c726 d00d                   bne failedoffset ; 0 and FF were only options so fail
  1486                              ; chkeck negative offset
  1487  c728 a5a6                   lda tmp2
  1488  c72a 3006                   bmi successoffset ; branch if signed byte is negative
  1489  c72c 1007                   bpl failedoffset ; otherwise fail
  1490                          chkoffsetto127:
  1491  c72e a5a6                   lda tmp2
  1492  c730 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1493                          successoffset:    
  1494  c732 a900                   lda #0 ; Z true (EQ)
  1495  c734 60                     rts
  1496                          failedoffset:
  1497  c735 a901                   lda #1 ; Z false (NE)
  1498  c737 60                     rts
  1499                          
  1500                          chkzeropage:
  1501  c738 84a5                   sty savepos
  1502  c73a b90002                 lda inputbuf, y
  1503  c73d c924                   cmp #'$'
  1504  c73f d001                   bne +
  1505  c741 c8                     iny
  1506  c742 2080c9             +   jsr chkhexbyte
  1507  c745 d005                   bne ++
  1508  c747 c4a4                   cpy len
  1509  c749 d001                   bne ++
  1510  c74b 60                     rts ; Z true (EQ)
  1511  c74c a4a5               ++  ldy savepos
  1512  c74e a201                   ldx #1 ; Z false (NE)
  1513  c750 60                     rts
  1514                          
  1515                          chkzeropagex:
  1516  c751 84a5                   sty savepos
  1517  c753 b90002                 lda inputbuf, y
  1518  c756 c924                   cmp #'$'
  1519  c758 d001                   bne +
  1520  c75a c8                     iny
  1521  c75b 2080c9             +   jsr chkhexbyte
  1522  c75e d01b                   bne ++
  1523  c760 202dc9                 jsr skipspaces
  1524  c763 b90002                 lda inputbuf, y
  1525  c766 c92c                   cmp #','
  1526  c768 d011                   bne ++
  1527  c76a c8                     iny
  1528  c76b 202dc9                 jsr skipspaces
  1529  c76e b90002                 lda inputbuf, y
  1530  c771 c958                   cmp #'X'
  1531  c773 d006                   bne ++
  1532  c775 c8                     iny
  1533  c776 c4a4                   cpy len
  1534  c778 d001                   bne ++
  1535  c77a 60                     rts ; Z true (EQ)
  1536  c77b a4a5               ++  ldy savepos
  1537  c77d a201                   ldx #1 ; Z false (NE)
  1538  c77f 60                     rts
  1539                          
  1540                          chkzeropagey:
  1541  c780 84a5                   sty savepos
  1542  c782 b90002                 lda inputbuf, y
  1543  c785 c924                   cmp #'$'
  1544  c787 d001                   bne +
  1545  c789 c8                     iny
  1546  c78a 2080c9             +   jsr chkhexbyte
  1547  c78d d01b                   bne ++
  1548  c78f 202dc9                 jsr skipspaces
  1549  c792 b90002                 lda inputbuf, y
  1550  c795 c92c                   cmp #','
  1551  c797 d011                   bne ++
  1552  c799 c8                     iny
  1553  c79a 202dc9                 jsr skipspaces
  1554  c79d b90002                 lda inputbuf, y
  1555  c7a0 c959                   cmp #'Y'
  1556  c7a2 d006                   bne ++
  1557  c7a4 c8                     iny
  1558  c7a5 c4a4                   cpy len
  1559  c7a7 d001                   bne ++
  1560  c7a9 60                     rts ; Z true (EQ)
  1561  c7aa a4a5               ++  ldy savepos
  1562  c7ac a201                   ldx #1 ; Z false (NE)
  1563  c7ae 60                     rts
  1564                          
  1565                          chkabsolute:
  1566  c7af 84a5                   sty savepos
  1567  c7b1 b90002                 lda inputbuf, y
  1568  c7b4 c924                   cmp #'$'
  1569  c7b6 d001                   bne +
  1570  c7b8 c8                     iny
  1571  c7b9 2077c9             +   jsr chkhexword
  1572  c7bc d005                   bne ++
  1573  c7be c4a4                   cpy len
  1574  c7c0 d001                   bne ++
  1575  c7c2 60                     rts ; Z true (EQ)
  1576  c7c3 a4a5               ++  ldy savepos
  1577  c7c5 a201                   ldx #1 ; Z false (NE)
  1578  c7c7 60                     rts
  1579                          
  1580                          chkabsolutex:
  1581  c7c8 84a5                   sty savepos
  1582  c7ca b90002                 lda inputbuf, y
  1583  c7cd c924                   cmp #'$'
  1584  c7cf d001                   bne +
  1585  c7d1 c8                     iny
  1586  c7d2 2077c9             +   jsr chkhexword
  1587  c7d5 d01b                   bne ++
  1588  c7d7 202dc9                 jsr skipspaces
  1589  c7da b90002                 lda inputbuf, y
  1590  c7dd c92c                   cmp #','
  1591  c7df d011                   bne ++
  1592  c7e1 c8                     iny
  1593  c7e2 202dc9                 jsr skipspaces
  1594  c7e5 b90002                 lda inputbuf, y
  1595  c7e8 c958                   cmp #'X'
  1596  c7ea d006                   bne ++
  1597  c7ec c8                     iny
  1598  c7ed c4a4                   cpy len
  1599  c7ef d001                   bne ++
  1600  c7f1 60                     rts ; Z true (EQ)
  1601  c7f2 a4a5               ++  ldy savepos
  1602  c7f4 a201                   ldx #1 ; Z false (NE)
  1603  c7f6 60                     rts
  1604                          
  1605                          chkabsolutey:
  1606  c7f7 84a5                   sty savepos
  1607  c7f9 b90002                 lda inputbuf, y
  1608  c7fc c924                   cmp #'$'
  1609  c7fe d001                   bne +
  1610  c800 c8                     iny
  1611  c801 2077c9             +   jsr chkhexword
  1612  c804 d01b                   bne ++
  1613  c806 202dc9                 jsr skipspaces
  1614  c809 b90002                 lda inputbuf, y
  1615  c80c c92c                   cmp #','
  1616  c80e d011                   bne ++
  1617  c810 c8                     iny
  1618  c811 202dc9                 jsr skipspaces
  1619  c814 b90002                 lda inputbuf, y
  1620  c817 c959                   cmp #'Y'
  1621  c819 d006                   bne ++
  1622  c81b c8                     iny
  1623  c81c c4a4                   cpy len
  1624  c81e d001                   bne ++
  1625  c820 60                     rts ; Z true (EQ)
  1626  c821 a4a5               ++  ldy savepos
  1627  c823 a201                   ldx #1 ; Z false (NE)
  1628  c825 60                     rts
  1629                          
  1630                          chkindirect:
  1631  c826 84a5                   sty savepos
  1632  c828 b90002                 lda inputbuf, y
  1633  c82b c928                   cmp #'('
  1634  c82d d021                   bne ++
  1635  c82f c8                     iny
  1636  c830 202dc9                 jsr skipspaces
  1637  c833 b90002                 lda inputbuf, y
  1638  c836 c924                   cmp #'$'
  1639  c838 d001                   bne +
  1640  c83a c8                     iny
  1641  c83b 2077c9             +   jsr chkhexword
  1642  c83e d010                   bne ++
  1643  c840 202dc9                 jsr skipspaces
  1644  c843 b90002                 lda inputbuf, y
  1645  c846 c929                   cmp #')'
  1646  c848 d006                   bne ++
  1647  c84a c8                     iny
  1648  c84b c4a4                   cpy len
  1649  c84d d001                   bne ++
  1650  c84f 60                     rts ; Z true (EQ)
  1651  c850 a4a5               ++  ldy savepos
  1652  c852 a201                   ldx #1 ; Z false (NE)
  1653  c854 60                     rts
  1654                          
  1655                          chkinstruction:
  1656  c855 c4a4                   cpy len
  1657  c857 f02a                   beq ++
  1658  c859 84ff                   sty tmp
  1659  c85b a237                   ldx #(ninst-1)
  1660  c85d b90002             -   lda inputbuf,y
  1661  c860 ddd9c9                 cmp inst0,x
  1662  c863 d019                   bne +
  1663  c865 c8                     iny
  1664  c866 b90002                 lda inputbuf,y
  1665  c869 dd11ca                 cmp inst1,x
  1666  c86c d010                   bne +
  1667  c86e c8                     iny
  1668  c86f b90002                 lda inputbuf,y
  1669  c872 dd49ca                 cmp inst2,x
  1670  c875 d007                   bne +
  1671  c877 c8                     iny
  1672  c878 8a                     txa
  1673  c879 8523                   sta inidx
  1674  c87b a200                   ldx #0
  1675  c87d 60                     rts
  1676  c87e a4ff               +   ldy tmp
  1677  c880 ca                     dex
  1678  c881 10da                   bpl -
  1679  c883 a201               ++  ldx #1 ; Z false (NE)
  1680  c885 60                     rts
  1681                          
  1682                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1683                              ; and allows mode promotion
  1684  c886 20aac8                 jsr find_inst_and_mode2
  1685  c889 f01e                   beq ++
  1686  c88b a524                   lda mode
  1687  c88d c906                   cmp #6
  1688  c88f 9018                   bcc ++
  1689  c891 c90a                   cmp #10
  1690  c893 b012                   bcs +
  1691  c895 6903                   adc #3
  1692  c897 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1693  c899 20aac8                 jsr find_inst_and_mode2 ; try again once
  1694  c89c d00b                   bne ++
  1695  c89e a5a6                   lda tmp2
  1696  c8a0 85fb                   sta ptr1
  1697  c8a2 a900                   lda #0
  1698  c8a4 85fc                   sta ptr1+1
  1699  c8a6 60                     rts ; Z true (EQ)
  1700  c8a7 a201               +   ldx #1 ; Z false (NE)
  1701  c8a9 60                 ++  rts
  1702                          
  1703                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1704  c8aa a296                   ldx #nopcodes-1
  1705  c8ac bd30cc             -   lda instidx, x
  1706  c8af bcc7cc                 ldy modeidx, x
  1707  c8b2 c523                   cmp inidx
  1708  c8b4 d00c                   bne +
  1709  c8b6 c424                   cpy mode
  1710  c8b8 d008                   bne +
  1711  c8ba 8622                   stx opidx
  1712  c8bc 2073c0                 jsr getsize
  1713  c8bf a200                   ldx #0 ; Z true (EQ)
  1714  c8c1 60                     rts
  1715  c8c2 ca                 +   dex
  1716  c8c3 e0ff                   cpx #$ff
  1717  c8c5 d0e5                   bne -
  1718  c8c7 a201                   ldx #1 ; Z false (NE)
  1719  c8c9 60                     rts
  1720                          
  1721                          executerun:
  1722  c8ca 68                     pla ; remove low byte return address
  1723  c8cb 68                     pla ; return high byte return address
  1724  c8cc 68                     pla ; again, we're really not returning
  1725  c8cd 68                     pla ; again, we're really not returning
  1726  c8ce 20d4c9                 jsr newline
  1727  c8d1 38                     sec
  1728  c8d2 a5fb                   lda ptr1
  1729  c8d4 e901                   sbc #1
  1730  c8d6 85fb                   sta ptr1
  1731  c8d8 b002                   bcs +
  1732  c8da c6fc                   dec ptr1+1
  1733  c8dc a5fc               +   lda ptr1+1
  1734  c8de 48                     pha
  1735  c8df a5fb                   lda ptr1
  1736  c8e1 48                     pha
  1737  c8e2 60                     rts
  1738                          
  1739                          chkcontinuedis:
  1740  c8e3 b90002                 lda inputbuf,y
  1741  c8e6 c944                   cmp #'D'
  1742  c8e8 d00a                   bne +
  1743  c8ea b90102                 lda inputbuf+1,y
  1744  c8ed c90d                   cmp #13
  1745  c8ef d003                   bne +
  1746  c8f1 c8                     iny
  1747  c8f2 a200                   ldx #0 ; restore Z set
  1748  c8f4 60                 +   rts
  1749                          
  1750                          chkcontinueasm:
  1751  c8f5 b90002                 lda inputbuf,y
  1752  c8f8 c941                   cmp #'A'
  1753  c8fa d00a                   bne +
  1754  c8fc b90102                 lda inputbuf+1,y
  1755  c8ff c90d                   cmp #13
  1756  c901 d003                   bne +
  1757  c903 c8                     iny
  1758  c904 a200                   ldx #0 ; restore Z set
  1759  c906 60                 +   rts
  1760                          
  1761                          executedisassemble:
  1762  c907 68                     pla ; remove low byte return address
  1763  c908 68                     pla ; return high byte return address
  1764  c909 20d4c9                 jsr newline
  1765  c90c 4c17c0                 jmp disassemble
  1766                          
  1767                          reportnotimplemented:
  1768  c90f a92c                   lda #<notimplemented
  1769  c911 a2ce                   ldx #>notimplemented
  1770  c913 4c62c2                 jmp strout
  1771                          
  1772                          reporterr:
  1773  c916 c000                   cpy #0
  1774  c918 f008                   beq +
  1775  c91a a920                   lda #' '
  1776  c91c 20d2ff             -   jsr charout
  1777  c91f 88                     dey
  1778  c920 d0fa                   bne -
  1779  c922 a93f               +   lda #'?'
  1780  c924 20d2ff                 jsr charout
  1781  c927 a90d                   lda #13
  1782  c929 20d2ff                 jsr charout
  1783  c92c 60                     rts
  1784                          
  1785                          skipspaces:
  1786  c92d b90002             -   lda inputbuf, y
  1787                          !ifndef MINIMUM {
  1788                              ; skip SHIFT-SPACES too on Commodore
  1789  c930 c9a0                   cmp #$A0
  1790  c932 f004                   beq +
  1791                          }
  1792  c934 c920                   cmp #$20
  1793  c936 d003                   bne ++
  1794  c938 c8                 +   iny
  1795  c939 d0f2                   bne -
  1796  c93b 60                 ++  rts
  1797                          
  1798                          chkdot:
  1799  c93c b90002                 lda inputbuf, y
  1800  c93f c92e                   cmp #'.'
  1801  c941 d003                   bne +
  1802  c943 c8                     iny
  1803  c944 a900                   lda #0 ; Z true (EQ)
  1804  c946 60                 +   rts
  1805                          
  1806                          chkhelp:
  1807  c947 b90002                 lda inputbuf, y
  1808  c94a c93f                   cmp #'?'
  1809  c94c d003                   bne +
  1810  c94e c8                     iny
  1811  c94f a900                   lda #0 ; Z true (EQ)
  1812  c951 60                 +   rts
  1813                          
  1814                          chkcolon:
  1815  c952 b90002                 lda inputbuf, y
  1816  c955 c93a                   cmp #':'
  1817  c957 d003                   bne +
  1818  c959 c8                     iny
  1819  c95a a900                   lda #0 ; Z true (EQ)
  1820  c95c 60                 +   rts
  1821                          
  1822                          chkhexbyteofsequence:
  1823  c95d 2028c2                 jsr inputhexbyte
  1824  c960 207ac9                 jsr +
  1825  c963 d011                   bne ++ ; Z false (NE) if failed checks
  1826  c965 c4a4                   cpy len
  1827  c967 f00d                   beq ++ ; Z true (EQ) if end of input
  1828  c969 85ff                   sta tmp
  1829  c96b b90002                 lda inputbuf,y
  1830  c96e c920                   cmp #$20
  1831  c970 d004                   bne ++ ; Z false (NE) if not space
  1832  c972 a5ff                   lda tmp
  1833  c974 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1834  c976 60                 ++  rts
  1835                          
  1836                          chkhexword:
  1837                          chkhexaddr1:
  1838  c977 2002c2                 jsr inputhexword
  1839  c97a a200               +   ldx #0 ; Z true (EQ)
  1840  c97c 9001                   bcc +
  1841  c97e e8                     inx ; Z false (NE)
  1842  c97f 60                 +   rts
  1843                          
  1844                          chkhexbyte:
  1845  c980 98                     tya
  1846  c981 48                     pha ; save y
  1847  c982 2028c2                 jsr inputhexbyte
  1848  c985 b00d                   bcs +
  1849  c987 85a6                   sta tmp2
  1850  c989 2044c2                 jsr inputhexnybble
  1851  c98c 9006                   bcc +
  1852  c98e 68                     pla ; throw away saved y
  1853  c98f a5a6                   lda tmp2
  1854  c991 a200                   ldx #0 ; Z true (EQ)
  1855  c993 60                     rts
  1856  c994 68                 +   pla
  1857  c995 a8                     tay ; won't be zero, so Z false (NE)
  1858  c996 60                     rts    
  1859                          
  1860                          chkhexaddr2:
  1861  c997 a5fb                   lda ptr1
  1862  c999 48                     pha
  1863  c99a a5fc                   lda ptr1+1
  1864  c99c 48                     pha
  1865  c99d 2077c9                 jsr chkhexaddr1
  1866  c9a0 f005                   beq +
  1867  c9a2 68                     pla
  1868  c9a3 68                     pla
  1869  c9a4 a901                   lda #1 ; Z false (NE)
  1870  c9a6 60                     rts
  1871  c9a7 a5fb               +   lda ptr1
  1872  c9a9 85fd                   sta ptr2
  1873  c9ab a5fc                   lda ptr1+1
  1874  c9ad 85fe                   sta ptr2+1
  1875  c9af 68                     pla
  1876  c9b0 85fc                   sta ptr1+1
  1877  c9b2 68                     pla
  1878  c9b3 85fb                   sta ptr1
  1879  c9b5 a900                   lda #0 ; Z true (EQ)
  1880  c9b7 60                     rts    
  1881                          
  1882                          chkaddr1cmd:
  1883  c9b8 b90002                 lda inputbuf, y
  1884  c9bb c941               +   cmp #'A'
  1885  c9bd d004                   bne +
  1886  c9bf c8                     iny
  1887  c9c0 4c1ec5                 jmp executeassemble
  1888  c9c3 c944               +   cmp #'D'
  1889  c9c5 d004                   bne +
  1890  c9c7 c8                     iny
  1891  c9c8 4c07c9                 jmp executedisassemble
  1892  c9cb c952               +   cmp #'R'
  1893  c9cd d004                   bne +
  1894  c9cf c8                     iny
  1895  c9d0 4ccac8                 jmp executerun
  1896  c9d3 60                 +   rts
  1897                          
  1898                          newline:
  1899  c9d4 a90d                   lda #13
  1900  c9d6 4cd2ff                 jmp charout
  1901                          
  1902                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1903                          ;     jsr $ffd2
  1904                          ;     pha
  1905                          ; -   lda $d011
  1906                          ;     bpl -
  1907                          ; -   lda $d011
  1908                          ;     bmi -
  1909                          ; -   lda $d011
  1910                          ;     bpl -
  1911                          ; -   lda $d011
  1912                          ;     bmi -
  1913                          ;     pla
  1914                          ;     rts
  1915                          
  1916                          !ifdef MINIMUM {
  1917                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1918                          ;; MC6850
  1919                          UART_DATA=$FFF8
  1920                          UART_STCR=$FFF9
  1921                          
  1922                          UART_INIT:
  1923                          	ldx #0b00000111 ; 11=reset device
  1924                          	stx UART_STCR
  1925                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  1926                          	sta UART_STCR
  1927                          	rts
  1928                          UART_OUT:
  1929                          	pha
  1930                          -	lda UART_STCR
  1931                          	and #2
  1932                          	beq - ; branch if TDRE=0, not finished transmitting
  1933                          	pla
  1934                          	pha
  1935                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  1936                          	sta UART_DATA
  1937                          	pla
  1938                          	rts
  1939                          UART_IN:
  1940                          -	lda UART_STCR
  1941                          	and #1
  1942                          	beq - ; branch if TDRF=0, not received
  1943                          	lda UART_DATA
  1944                          	; software "CAPS LOCK" because wozmon expects only uppercase
  1945                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  1946                          	beq BREAK
  1947                              ; force lowercase alphabet to uppercase
  1948                              cmp #'a'
  1949                          	bcc +
  1950                          	cmp #'z'+1
  1951                          	bcs +
  1952                          	eor #$20
  1953                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  1954                           	rts
  1955                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  1956                          	pha ; save A
  1957                          	lda UART_STCR
  1958                          	lsr ; put rightmost bit in carry
  1959                          	pla ; restore A affects flags
  1960                          	ror ; move carry to left bit, right bit to carry
  1961                          	php ; push processor to save N
  1962                          	rol ; restore A affects flags
  1963                          	plp ; pull processor to restore N
  1964                          	rts
  1965                          
  1966                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1967                          ; Processor start and interrupts
  1968                          
  1969                          NMI: ; unused on minimum (no source of interrupt)
  1970                              rti
  1971                          
  1972                          IRQ:
  1973                              rti ; TODO implement BRK HANDLING in monitor
  1974                          
  1975                          BREAK:
  1976                              jmp RESET
  1977                          
  1978                          RESET:
  1979                              cld
  1980                              ldx #$00
  1981                              txs
  1982                              jsr JUART_INIT
  1983                              cli
  1984                              jmp start
  1985                          } ; !ifdef MINIMUM
  1986                          
  1987                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1988                          ; data
  1989                          
  1990                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  1991                          ninst = 56
  1992  c9d9 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  1993  ca11 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  1994  ca49 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  1995                          
  1996                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  1997                          mode_jmptable:
  1998  ca81 ffc0               !word dispModeAcc-1; 0 Accumulator 1
  1999  ca83 04c1               !word dispModeNone-1 ; 1 None 1
  2000  ca85 05c1               !word dispModeImm-1 ; 2 Immediate 2
  2001  ca87 16c1               !word dispModeIndX-1 ; 3 IndirectX 2
  2002  ca89 36c1               !word dispModeIndY-1 ; 4 IndirectY 2
  2003  ca8b 56c1               !word dispModeRel-1 ; 5 Relative 2
  2004  ca8d 0ac1               !word dispModeZP-1 ; 6 ZeroPage 2
  2005  ca8f 92c1               !word dispModeZPX-1 ; 7 ZeroPageX 2
  2006  ca91 9fc1               !word dispModeZPY-1 ; 8 ZeroPageY 2
  2007  ca93 acc1               !word dispModeAbs-1 ; 9 Absolute 3
  2008  ca95 bec1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  2009  ca97 cbc1               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  2010  ca99 d8c1               !word dispModeInd-1 ; 12 Indirect 3
  2011                          
  2012                          nmodes = 13
  2013                          
  2014                          mode_sorted:
  2015  ca9b 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  2016                          
  2017                          !ifdef MINIMUM {
  2018                          mode_0: !text "Accumulator", 0, "A", 0
  2019                          mode_1: !text "None", 0, "", 0
  2020                          mode_2: !text "Immediate", 0, "#$12", 0
  2021                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  2022                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  2023                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  2024                          mode_6: !text "ZeroPage", 0, "$12", 0
  2025                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  2026                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  2027                          mode_9: !text "Absolute", 0, "$1234", 0
  2028                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  2029                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  2030                          mode_12: !text "Indirect", 0, "($1234)", 0
  2031                          } else {
  2032  caa8 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2033  cab6 4e4f4e450000       mode_1: !text "NONE", 0, "", 0
  2034  cabc 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2035  cacb 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2036  cadd 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2037  caef 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2038  cb0e 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2039  cb1b 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2040  cb2b 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2041  cb3b 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2042  cb4a 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2043  cb5c 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2044  cb6e 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2045                          }
  2046                          
  2047                          modes: ; table for easily displaying each mode_example
  2048  cb7f a8ca               !word mode_0
  2049  cb81 b6ca               !word mode_1
  2050  cb83 bcca               !word mode_2
  2051  cb85 cbca               !word mode_3
  2052  cb87 ddca               !word mode_4
  2053  cb89 efca               !word mode_5
  2054  cb8b 0ecb               !word mode_6
  2055  cb8d 1bcb               !word mode_7
  2056  cb8f 2bcb               !word mode_8
  2057  cb91 3bcb               !word mode_9
  2058  cb93 4acb               !word mode_10
  2059  cb95 5ccb               !word mode_11
  2060  cb97 6ecb               !word mode_12
  2061                          
  2062                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2063                          nopcodes = 151
  2064  cb99 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2065  cc30 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2066  ccc7 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2067                          
  2068                          copyright 
  2069                          ;                  1         2         3         4
  2070                          ;         1234567890123456789012345678901234567890
  2071  cd5e 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2072                          !ifdef C64TERMINAL {
  2073                              !text 13, "(TERMINAL VERSION)"
  2074                          }
  2075  cd7e 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2076  cda4 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2077  cdbb 00                 !text 0
  2078                          
  2079                          firsthelp
  2080  cdbc 0d3f202020202020...!text 13, "?       (SYNTAX)"
  2081  cdcd 0d3f204120202020...!text 13, "? A     (LIST 6502 INSTRUCTIONS)"
  2082  cdee 0d3f204144432020...!text 13, "? ADC   (/ADC/ ADDRESSING MODES)"
  2083  ce0f 0d3f204d4f444520...!text 13, "? MODE  (ADDRESSING MODES)"
  2084                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2085  ce2a 0d00               !text 13, 0
  2086                          
  2087  ce2c 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2088                          
  2089                          generalhelp
  2090  ce3d 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2091  ce63 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2092  ce88 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2093  ceab 00                 !text 0
  2094                          generalhelp2
  2095  ceac 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2096  ced4 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2097  cef0 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2098  cf10 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2099  cf32 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2100  cf57 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2101  cf73 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2102  cf92 00                 !text 0
  2103                          
  2104  cf93 4d4f444500         modes_keyword !text "MODE", 0
  2105                          
  2106                          !ifndef MINIMUM { ; any C64
  2107                          callbank6:
  2108  cf98 8da4cf                 sta calladdr+1
  2109  cf9b 8ea5cf                 stx calladdr+2
  2110  cf9e a906                   lda #6 ; RAM under BASIC, otherwise similar to normal memory configuration
  2111  cfa0 20aacf                 jsr setbank
  2112  cfa3 200000             calladdr: jsr $0000
  2113  cfa6 08                     php ; save return status
  2114  cfa7 a907                   lda #7 ; normal memory configuration
  2115  cfa9 28                     plp ; restore return status
  2116                              ; fall through setbank
  2117                          setbank:
  2118  cfaa 08                     php ; save possible return status
  2119  cfab 8502                   sta banksel
  2120  cfad a501                   lda $01
  2121  cfaf 29f8                   and #$f8 ; mask out bits 0,1,2
  2122  cfb1 0502                   ora banksel
  2123  cfb3 8501                   sta $01
  2124  cfb5 28                     plp ; restore possible return status
  2125  cfb6 60                     rts
  2126                          
  2127                              !if * > $d000 {
  2128                                  !error "code/data overran $d000"
  2129                              }
  2130                          
  2131                          }
  2132                          
  2133                          !ifdef MINIMUM {
  2134                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2135                          ; JUMP table for some stability
  2136                          * = $FFEE
  2137                          JUART_INIT: JMP UART_INIT
  2138                          JUART_OUT: JMP UART_OUT
  2139                          JUART_IN: JMP UART_IN
  2140                          JUART_CHK: JMP UART_CHK
  2141                          
  2142                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2143                          ; 6502 vectors 
  2144                          * = $fffa
  2145                              !word NMI
  2146                              !word RESET
  2147                              !word IRQ
  2148                          }
  2149                          
  2150                          finish = *
