
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGETS:                              *        <<<
     7                          ;; >>>       ** (1)  C64 8000-9FFF screen editor                *        <<<
     8                          ;; >>>       ** (2)  C64 8000-9FFF terminal edition             *        <<<
     9                          ;; >>>       ** (3)  6502+MC6850 minimum system                 *        <<<
    10                          ;; >>>       *   56K(RAM),8K(ROM), 2 bytes IO for MC6850 UART   *        <<<
    11                          ;; >>>       ****************************************************        <<<
    12                          ;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          ;; MIT License
    15                          ;;
    16                          ;; Copyright (c) 2024 David R. Van Wagner
    17                          ;; davevw.com
    18                          ;;
    19                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    20                          ;; of this software and associated documentation files (the "Software"), to deal
    21                          ;; in the Software without restriction, including without limitation the rights
    22                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    23                          ;; copies of the Software, and to permit persons to whom the Software is
    24                          ;; furnished to do so, subject to the following conditions:
    25                          ;;
    26                          ;; The above copyright notice and this permission notice shall be included in all
    27                          ;; copies or substantial portions of the Software.
    28                          ;;
    29                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    30                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    31                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    32                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    33                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    34                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    35                          ;; SOFTWARE.
    36                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                          
    40                          ; Important! define exactly ONE target (set in build.sh)
    41                          ;C64SCREEN = 1
    42                          ;C64TERMINAL = 1
    43                          ;MINIMUM = 1
    44                          
    45                          ; options (set in build.sh)
    46                          ;NEEDECHO = 0
    47                          
    48                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                          
    50                          ;; _
    51                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    52                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    53                          ;; 1000 (display memory at $1000)
    54                          ;; 1000.2000 (display memory range $1000 to $2000)
    55                          ;; 1000. (display next screenful of memory starting at $1000)
    56                          ;; . (display next screenful of memory)
    57                          ;; 1000 r (JMP $1000)
    58                          ;; 1000: 01 02 03 (modify memory)
    59                          ;; (NEW SYNTAX)
    60                          ;; 1000 d (disassemble starting at address, for screenful)
    61                          ;; d (continue disassembling from last address)
    62                          ;; 1000 a (assemble starting at, interactive until empty line) 
    63                          ;; x (exit monitor -- C64 only)
    64                          ;; ? (commands help)
    65                          ;; ?a (list instructions available)
    66                          ;; ?adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    67                          ;; ?mode (show addressing modes example syntax for 6502)
    68                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    69                          ;; .? (display registers in format .1234 10110000 01 02 03 f6)
    70                          ;; .1234 10110000 01 02 03 f6 (set registers PC FLAGS A X Y S)
    71                          ;; .A:00 (change register, replace A with X, Y, S, P as appropriate, use space or colon as separator)
    72                          ;; (FUTURE SYNTAX, not implemented)
    73                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    74                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    75                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    76                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    77                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    78                          ;;
    79                          ;; (INTERACTIVE ASSEMBLER)
    80                          ;; 1000 _
    81                          ;;      ADC #$12
    82                          ;; 1000 69 12    ADC #$12
    83                          ;; 1002 _
    84                          ;;      JSR $1234
    85                          ;; 1002 20 34 12 JSR $1234
    86                          ;; 1005 _
    87                          ;;      RTS
    88                          ;; 1005 60       RTS
    89                          ;; 1006 _
    90                          ;;      XYZ
    91                          ;;      XYZ ?
    92                          ;; 1006 _
    93                          ;; _
    94                          ;;
    95                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    96                          ;; and can cursor up to revise, 
    97                          ;;
    98                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    99                          ;;
   100                          
   101                          ; global
   102                          inputbuf=$0200
   103                          
   104                          
   105                          ; kernal/system calls
   106                          
   107                          !ifdef MINIMUM {
   108                          charout=JUART_OUT
   109                          getkey=JUART_IN
   110                          }
   111                          
   112                          !ifdef C64SCREEN {
   113                          setlfs=$ffba
   114                          setnam=$ffbd
   115                          charin=$ffcf ; screen editor
   116                          charout=$ffd2
   117                          fsave =$ffd8
   118                          getkey=$ffe4
   119                          }
   120                          
   121                          !ifdef C64TERMINAL {
   122                          setlfs=$ffba
   123                          setnam=$ffbd
   124                          charout=$ffd2
   125                          getkey=$ffe4
   126                          fsave =$ffd8
   127                          }
   128                          
   129                          ; zeropage
   130                          !ifdef MINIMUM {
   131                          opidx=$f0
   132                          inidx=$f1
   133                          mode=$f2
   134                          size=$f3
   135                          ptr3=$f4 ; and $f5
   136                          count=$f6
   137                          len=$f7
   138                          savepos=$f8
   139                          tmp2=$f9
   140                          flag=$fa
   141                          ptr1=$fb ; and $fc
   142                          ptr2=$fd ; and $fe
   143                          tmp=$ff
   144                          }
   145                          
   146                          !ifdef MINIMUM {
   147                          * = $e000
   148                          } else { // any C64
   149                          * = $8000
   150                              ; check if irq/brk vector installed
   151  8000 ad1603                 lda $316
   152  8003 ae1703                 ldx $317
   153  8006 e08e                   cpx #>brk64
   154  8008 f010                   beq +
   155  800a 8de494                 sta savebrkvector
   156  800d 8ee594                 stx savebrkvector+1
   157  8010 a90a                   lda #<brk64
   158  8012 a28e                   ldx #>brk64
   159  8014 8d1603                 sta $316
   160  8017 8e1703                 stx $317
   161  801a 203980             +   jsr install_nmi64   
   162                          }
   163                          
   164                          start:
   165  801d d8                     cld
   166  801e 58                     cli
   167  801f a9b8                   lda #<copyright
   168  8021 a291                   ldx #>copyright
   169  8023 202284                 jsr strout
   170  8026 a916                   lda #<firsthelp
   171  8028 a292                   ldx #>firsthelp
   172  802a 202284                 jsr strout
   173  802d 4c5e8d                 jmp save_registers
   174                          
   175                          input_loop:
   176  8030 204384                 jsr inputline
   177  8033 204684                 jsr parseline
   178  8036 4c3080                 jmp input_loop
   179                          
   180                          !ifndef MINIMUM {
   181                          ; C64 only
   182                          
   183                          install_nmi64:
   184                              ; check if nmi vector installed
   185  8039 ad1803                 lda $318
   186  803c ae1903                 ldx $319
   187  803f e08d                   cpx #>nmi64
   188  8041 f010                   beq +
   189  8043 8de694                 sta savenmivector
   190  8046 8ee794                 stx savenmivector+1
   191  8049 a9eb                   lda #<nmi64
   192  804b a28d                   ldx #>nmi64
   193  804d 8d1803                 sta $318
   194  8050 8e1903                 stx $319
   195  8053 60                 +   rts
   196                          
   197                          uninstall_nmi64:
   198  8054 ade694                 lda savenmivector
   199  8057 aee794                 ldx savenmivector+1
   200  805a 8d1803                 sta $318
   201  805d 8e1903                 stx $319
   202  8060 60                     rts
   203                          
   204                          chkextrac64:
   205  8061 206d80                 jsr chkexit
   206  8064 d003                   bne +
   207  8066 4c8280                 jmp execute_exit
   208  8069 18                 +   clc ; no error
   209  806a a201                   ldx #1 ; Z false - not consumed
   210  806c 60                     rts
   211                          
   212                          chkexit:
   213  806d b90002                 lda inputbuf, y
   214  8070 c958                   cmp #'X'
   215  8072 d009                   bne +
   216  8074 c8                     iny
   217  8075 ccdd94                 cpy len ; validate no extra characters
   218  8078 f003                   beq +
   219  807a 4c7e80                 jmp extra_error
   220  807d 60                 +   rts
   221                          
   222                          extra_error:
   223                              ; pop local return address
   224  807e 68                     pla
   225  807f 68                     pla
   226  8080 38                     sec ; error
   227  8081 60                     rts
   228                          
   229                          execute_exit:
   230  8082 ade494                 lda savebrkvector
   231  8085 aee594                 ldx savebrkvector+1
   232  8088 8d1603                 sta $316
   233  808b 8e1703                 stx $317
   234  808e 205480                 jsr uninstall_nmi64
   235                              ; pop monitor return addresses, so only original caller is left
   236  8091 68                     pla
   237  8092 68                     pla
   238  8093 68                     pla
   239  8094 68                     pla
   240  8095 68                     pla
   241  8096 68                     pla
   242  8097 60                     rts
   243                          
   244                          display_extra_help:
   245  8098 a929                   lda #<extra_help
   246  809a a292                   ldx #>extra_help
   247  809c 4c2284                 jmp strout
   248                          
   249                          !ifdef C64SCREEN {
   250                          display_page_disassemble:
   251  809f add48d                 lda ptr1
   252  80a2 aed58d                 ldx ptr1+1
   253  80a5 209883                 jsr disphexword
   254  80a8 a967                   lda #<page_disassemble
   255  80aa a292                   ldx #>page_disassemble
   256  80ac 4c2284                 jmp strout
   257                          
   258                          display_page_displaymemory:
   259  80af 20548d                 jsr newline
   260  80b2 add48d                 lda ptr1
   261  80b5 aed58d                 ldx ptr1+1
   262  80b8 209883                 jsr disphexword
   263  80bb a96e                   lda #<page_displaymemory
   264  80bd a292                   ldx #>page_displaymemory
   265  80bf 4c2284                 jmp strout
   266                          
   267                          inputlinec64:
   268  80c2 a000                   ldy #0
   269  80c4 20cfff             -   jsr charin
   270  80c7 990002                 sta inputbuf,y
   271  80ca c8                     iny
   272  80cb c90d                   cmp #13
   273  80cd d0f5                   bne -
   274  80cf 60                     rts
   275                          
   276                          continueassemblec64:
   277  80d0 a914                   lda #20
   278  80d2 20d2ff                 jsr charout
   279  80d5 20d2ff                 jsr charout
   280  80d8 add48d                 lda ptr1
   281  80db aed58d                 ldx ptr1+1
   282  80de 209883                 jsr disphexword
   283  80e1 a920                   lda #' '
   284  80e3 20d2ff                 jsr charout
   285  80e6 20d2ff                 jsr charout
   286  80e9 4cd2ff                 jmp charout
   287                          }
   288                          
   289                          chkfilename:
   290  80ec 20678c                 jsr skipspaces
   291  80ef 8ce194                 sty tmp
   292  80f2 b90002                 lda inputbuf, y
   293  80f5 c922                   cmp #34 ; double quote
   294  80f7 d025                   bne ++
   295  80f9 c8                 -   iny
   296  80fa b90002                 lda inputbuf, y
   297  80fd c90d                   cmp #13
   298  80ff d005                   bne +
   299  8101 ace194                 ldy tmp
   300  8104 d018                   bne ++
   301  8106 c922               +   cmp #34 ; double quote
   302  8108 d0ef                   bne -
   303  810a 98                     tya ; index of ending double quotes
   304  810b 48                     pha ; save
   305  810c 18                     clc ; will subtract one more
   306  810d ede194                 sbc tmp ; subtract index of first quote, have filename length
   307  8110 aee194                 ldx tmp
   308  8113 e8                     inx ; low address of filename
   309  8114 a002                   ldy #>inputbuf ; high address of filename
   310  8116 20bdff                 jsr setnam
   311  8119 68                     pla
   312  811a a8                     tay
   313  811b c8                     iny ; advance past ending double quotes
   314  811c a900                   lda #0 ; set Z true
   315  811e 60                 ++  rts
   316                          
   317                          check_execute_save:
   318  811f 20ec80             +   jsr chkfilename
   319  8122 f006                   beq +
   320  8124 203e8c                 jsr reporterr
   321  8127 a201                   ldx #1 ; set Z false
   322  8129 60                     rts
   323  812a 203881             +   jsr chkoptionaldrive
   324  812d 204e81                 jsr chksave
   325  8130 d005                   bne +
   326  8132 205781                 jsr executesave
   327  8135 a200                   ldx #0 ; set Z true
   328  8137 60                 +   rts
   329                          
   330                          chkoptionaldrive:
   331  8138 a908                   lda #8
   332  813a 8de894                 sta drive
   333  813d 20678c                 jsr skipspaces
   334  8140 20bd8c                 jsr chkhexbyte
   335  8143 d008                   bne +
   336  8145 8de894                 sta drive
   337  8148 20678c                 jsr skipspaces
   338  814b a900                   lda #0 ; set Z true
   339  814d 60                 +   rts
   340                          
   341                          chksave:
   342  814e 20678c                 jsr skipspaces
   343  8151 b90002                 lda inputbuf, y
   344  8154 c953                   cmp #'S'
   345  8156 60                     rts
   346                          
   347                          executesave:
   348  8157 20548d                 jsr newline
   349  815a a522                   lda $22
   350  815c 48                     pha
   351  815d a523                   lda $23
   352  815f 48                     pha
   353  8160 add48d                 lda ptr1
   354  8163 8522                   sta $22
   355  8165 add58d                 lda ptr1+1
   356  8168 8523                   sta $23
   357  816a a9c0                   lda #$c0 ; KERNAL control and error messages
   358  816c 859d                   sta $9d ; set messages to be displayed
   359  816e a901                   lda #1
   360  8170 aee894                 ldx drive
   361  8173 a00f                   ldy #15
   362  8175 20baff                 jsr setlfs
   363  8178 a922                   lda #$22
   364  817a aee294                 ldx ptr2
   365  817d ace394                 ldy ptr2+1
   366  8180 20d8ff                 jsr fsave
   367  8183 68                     pla
   368  8184 8523                   sta $23
   369  8186 68                     pla
   370  8187 8522                   sta $22
   371  8189 4c548d                 jmp newline
   372                          }
   373                          
   374                          ; test: ; all the addressing modes here for testing disassembly
   375                          ;     nop
   376                          ;     lda $1234
   377                          ;     lda $1234,x
   378                          ;     lda $1234,y
   379                          ;     asl
   380                          ;     lda #$12
   381                          ;     lda ($12,x)
   382                          ;     lda ($12),y
   383                          ;     jmp ($1234)
   384                          ; -   bne -
   385                          ;     lda $12
   386                          ;     lda $12,x
   387                          ;     ldx $12,y
   388                          ;     !byte $FF ; unknown
   389                          
   390                          disassemble:
   391  818c a917                   lda #23
   392  818e 8ddc94                 sta count
   393  8191 a000               -   ldy #0
   394  8193 20c38d                 jsr lda_at_ptr1_y
   395  8196 20c681                 jsr find_opcode
   396  8199 203082                 jsr disp_current
   397  819c addb94                 lda size
   398  819f 1002                   bpl +
   399  81a1 a901                   lda #1
   400  81a3 18                 +   clc
   401  81a4 6dd48d                 adc ptr1
   402  81a7 8dd48d                 sta ptr1
   403  81aa 9003                   bcc +
   404  81ac eed58d                 inc ptr1+1
   405  81af cedc94             +   dec count
   406  81b2 d0dd                   bne -
   407                          !ifdef C64SCREEN {
   408  81b4 4c9f80                 jmp display_page_disassemble
   409                          } else {    
   410                              rts
   411                          }
   412                          
   413                          compareptrs:
   414  81b7 add58d                 lda ptr1+1
   415  81ba cde394                 cmp ptr2+1
   416  81bd d006                   bne +
   417  81bf add48d                 lda ptr1
   418  81c2 cde294                 cmp ptr2
   419  81c5 60                 +   rts
   420                          
   421                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   422                          ; and properties updated in ZP globals size,inidx,opidx,mode
   423  81c6 a097                   ldy #nopcodes
   424  81c8 a296                   ldx #nopcodes-1
   425  81ca ddf38f             -   cmp opcodes,x
   426  81cd f010                   beq +
   427  81cf ca                     dex
   428  81d0 88                     dey
   429  81d1 d0f7                   bne -
   430  81d3 18                     clc
   431  81d4 a901                   lda #1
   432  81d6 8ddb94                 sta size
   433  81d9 a9ff                   lda #$FF
   434  81db aa                     tax
   435  81dc a8                     tay
   436  81dd 900a                   bcc ++
   437  81df bd8a90             +   lda instidx, x
   438  81e2 bc2191                 ldy modeidx, x
   439  81e5 20f381                 jsr getsize
   440  81e8 38                     sec
   441  81e9 8dd994             ++  sta inidx
   442  81ec 8ed894                 stx opidx
   443  81ef 8cda94                 sty mode
   444  81f2 60                     rts
   445                          
   446                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   447                              ; result returned in size
   448  81f3 48                     pha
   449  81f4 a901                   lda #1
   450  81f6 8ddb94                 sta size
   451  81f9 68                     pla
   452  81fa c002                   cpy #2 // Immediate
   453  81fc 900a                   bcc +
   454  81fe eedb94                 inc size
   455  8201 c009                   cpy #9 // Absolute
   456  8203 9003                   bcc +
   457  8205 eedb94                 inc size
   458  8208 60                 +   rts
   459                          
   460                          disp_opcode: ; .A opcode byte
   461  8209 20c681                 jsr find_opcode
   462  820c 8a                     txa
   463                              ; fall through to display instruction
   464                          
   465                          dispinst: ; .A instruction index 0..55, note modifies A and X
   466  820d aa                     tax
   467  820e e038                   cpx #ninst
   468  8210 b012                   bcs +
   469  8212 bd328e                 lda inst0, x
   470  8215 20d2ff                 jsr charout
   471  8218 bd6a8e                 lda inst1, x
   472  821b 20d2ff                 jsr charout
   473  821e bda28e                 lda inst2, x
   474  8221 4cd2ff                 jmp charout
   475  8224 a93f               +   lda #'?'
   476  8226 20d2ff                 jsr charout
   477  8229 20d2ff                 jsr charout
   478  822c 20d2ff                 jsr charout
   479  822f 60                     rts
   480                          
   481                          disp_current:
   482  8230 add48d                 lda ptr1
   483  8233 aed58d                 ldx ptr1+1
   484  8236 209883                 jsr disphexword
   485  8239 a920                   lda #$20
   486  823b 20d2ff                 jsr charout
   487  823e a000                   ldy #0
   488  8240 aedb94                 ldx size
   489  8243 20c38d             -   jsr lda_at_ptr1_y
   490  8246 209e83                 jsr disphexbyte
   491  8249 a920                   lda #$20
   492  824b 20d2ff                 jsr charout
   493  824e c8                     iny
   494  824f ca                     dex
   495  8250 d0f1                   bne -
   496  8252 c003               -   cpy #3
   497  8254 f00e                   beq +
   498  8256 a920                   lda #$20
   499  8258 20d2ff                 jsr charout
   500  825b 20d2ff                 jsr charout
   501  825e 20d2ff                 jsr charout
   502  8261 c8                     iny
   503  8262 d0ee                   bne -
   504  8264 add994             +   lda inidx
   505  8267 200d82                 jsr dispinst
   506  826a a920                   lda #$20
   507  826c 20d2ff                 jsr charout
   508  826f 207782                 jsr disp_mode
   509  8272 a90d                   lda #13
   510  8274 4cd2ff                 jmp charout
   511                          
   512                          disp_mode
   513  8277 adda94                 lda mode
   514  827a c90d                   cmp #13
   515  827c b00a                   bcs +
   516  827e 0a                     asl
   517  827f aa                     tax
   518  8280 bddb8e                 lda mode_jmptable+1,x
   519  8283 48                     pha
   520  8284 bdda8e                 lda mode_jmptable,x
   521  8287 48                     pha
   522  8288 60                 +   rts
   523                          
   524                          dispModeAcc:
   525  8289 a941                   lda #'A'
   526  828b 4cd2ff                 jmp charout
   527                          
   528                          dispModeNone:
   529  828e 60                     rts
   530                          
   531                          dispModeImm:
   532  828f a923                   lda #'#'
   533  8291 20d2ff                 jsr charout
   534                          dispModeZP:
   535  8294 a924                   lda #'$'
   536  8296 20d2ff                 jsr charout
   537  8299 a001                   ldy #1
   538  829b 20c38d                 jsr lda_at_ptr1_y
   539  829e 4c9e83                 jmp disphexbyte
   540                          
   541                          dispModeIndX:
   542  82a1 a928                   lda #'('
   543  82a3 20d2ff                 jsr charout
   544  82a6 a924                   lda #'$'
   545  82a8 20d2ff                 jsr charout
   546  82ab a001                   ldy #1
   547  82ad 20c38d                 jsr lda_at_ptr1_y
   548  82b0 209e83                 jsr disphexbyte
   549  82b3 a92c                   lda #','
   550  82b5 20d2ff                 jsr charout
   551  82b8 a958                   lda #'X'
   552  82ba 20d2ff                 jsr charout
   553  82bd a929                   lda #')'
   554  82bf 4cd2ff                 jmp charout
   555                          
   556                          dispModeIndY:
   557  82c2 a928                   lda #'('
   558  82c4 20d2ff                 jsr charout
   559  82c7 a924                   lda #'$'
   560  82c9 20d2ff                 jsr charout
   561  82cc a001                   ldy #1
   562  82ce 20c38d                 jsr lda_at_ptr1_y
   563  82d1 209e83                 jsr disphexbyte
   564  82d4 a929                   lda #')'
   565  82d6 20d2ff                 jsr charout
   566  82d9 a92c                   lda #','
   567  82db 20d2ff                 jsr charout
   568  82de a959                   lda #'Y'
   569  82e0 4cd2ff                 jmp charout
   570                          
   571                          dispModeRel:
   572  82e3 a924                   lda #'$'
   573  82e5 20d2ff                 jsr charout
   574  82e8 18                     clc
   575  82e9 add48d                 lda ptr1
   576  82ec 6902                   adc #2
   577  82ee 8de88d                 sta ptr3
   578  82f1 add58d                 lda ptr1+1
   579  82f4 6900                   adc #0
   580  82f6 8de98d                 sta ptr3+1
   581  82f9 a001                   ldy #1
   582  82fb 20c38d                 jsr lda_at_ptr1_y
   583  82fe 1019                   bpl +
   584                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   585  8300 49ff                   eor #$FF ; inverse
   586  8302 18                     clc
   587  8303 6901                   adc #1 ; complete getting absolute value from two's complement
   588  8305 8de194                 sta tmp
   589  8308 38                     sec
   590  8309 ade88d                 lda ptr3
   591  830c ede194                 sbc tmp
   592  830f 8de88d                 sta ptr3
   593  8312 b011                   bcs ++
   594  8314 cee98d                 dec ptr3+1
   595  8317 900c                   bcc ++
   596  8319 18                 +   clc ; simple case of adding
   597  831a 6de88d                 adc ptr3
   598  831d 8de88d                 sta ptr3
   599  8320 9003                   bcc ++
   600  8322 eee98d                 inc ptr3+1
   601  8325 ade88d             ++  lda ptr3
   602  8328 aee98d                 ldx ptr3+1
   603  832b 4c9883                 jmp disphexword
   604                          
   605                          dispModeZPX:
   606  832e 209482                 jsr dispModeZP
   607  8331 a92c                   lda #','
   608  8333 20d2ff                 jsr charout
   609  8336 a958                   lda #'X'
   610  8338 4cd2ff                 jmp charout
   611                          
   612                          dispModeZPY:
   613  833b 209482                 jsr dispModeZP
   614  833e a92c                   lda #','
   615  8340 20d2ff                 jsr charout
   616  8343 a959                   lda #'Y'
   617  8345 4cd2ff                 jmp charout
   618                          
   619                          dispModeAbs:
   620  8348 a924                   lda #'$'
   621  834a 20d2ff                 jsr charout
   622  834d a001                   ldy #1
   623  834f 20c38d                 jsr lda_at_ptr1_y
   624  8352 48                     pha
   625  8353 c8                     iny
   626  8354 20c38d                 jsr lda_at_ptr1_y
   627  8357 aa                     tax
   628  8358 68                     pla
   629  8359 4c9883                 jmp disphexword
   630                          
   631                          dispModeAbsX:
   632  835c 204883                 jsr dispModeAbs
   633  835f a92c                   lda #','
   634  8361 20d2ff                 jsr charout
   635  8364 a958                   lda #'X'
   636  8366 4cd2ff                 jmp charout
   637                          
   638                          dispModeAbsY:
   639  8369 204883                 jsr dispModeAbs
   640  836c a92c                   lda #','
   641  836e 20d2ff                 jsr charout
   642  8371 a959                   lda #'Y'
   643  8373 4cd2ff                 jmp charout
   644                          
   645                          dispModeInd:
   646  8376 a928                   lda #'('
   647  8378 20d2ff                 jsr charout
   648  837b 204883                 jsr dispModeAbs
   649  837e a929                   lda #')'
   650  8380 4cd2ff                 jmp charout
   651                          
   652                          dispbinbyte: ; .A 00..FF
   653  8383 a208                   ldx #8
   654  8385 8de194                 sta tmp
   655  8388 a930               -   lda #'0'
   656  838a 2ee194                 rol tmp
   657  838d 9002                   bcc +
   658  838f a931                   lda #'1'
   659  8391 20d2ff             +   jsr charout
   660  8394 ca                     dex
   661  8395 d0f1                   bne -
   662  8397 60                     rts
   663                          
   664                          disphexword: ; .A low, .X high, 0000..FFFF
   665  8398 48                     pha
   666  8399 8a                     txa
   667  839a 209e83                 jsr disphexbyte
   668  839d 68                     pla
   669                              ;fall through to call again
   670                          
   671                          disphexbyte: ; .A 00..FF
   672  839e 48                     pha
   673  839f 4a                     lsr
   674  83a0 4a                     lsr
   675  83a1 4a                     lsr
   676  83a2 4a                     lsr
   677  83a3 20a783                 jsr disphexnybble
   678  83a6 68                     pla
   679                              ;fall through to call again
   680                          
   681                          disphexnybble: ; .A 0..F
   682  83a7 290f                   and #$0F
   683  83a9 0930                   ora #$30
   684  83ab c93a                   cmp #$3A
   685  83ad 9002                   bcc +
   686  83af 6906                   adc #$06
   687  83b1 4cd2ff             +   jmp charout
   688                          
   689                          inputhexword: ; C set if fails
   690  83b4 a900                   lda #0
   691  83b6 8dd48d                 sta ptr1
   692  83b9 8dd58d                 sta ptr1+1
   693                          
   694  83bc a904                   lda #4 ; word is at most 4 nybbles
   695  83be 8ddc94                 sta count
   696  83c1 200484             --  jsr inputhexnybble
   697  83c4 b015                   bcs +
   698                          
   699                              ; shift nibble up
   700  83c6 0a                     asl
   701  83c7 0a                     asl
   702  83c8 0a                     asl
   703  83c9 0a                     asl
   704                          
   705  83ca a204                   ldx #4 ; 4 bits rotated into word
   706  83cc 2a                 -   rol
   707  83cd 2ed48d                 rol ptr1
   708  83d0 2ed58d                 rol ptr1+1
   709  83d3 ca                     dex
   710  83d4 d0f6                   bne - ; repeat bits
   711                          
   712  83d6 cedc94                 dec count
   713  83d9 d0e6                   bne -- ; repeat nybbles
   714                          
   715  83db addc94             +   lda count
   716  83de c904                   cmp #4 ; set C if 4, otherwise clear
   717  83e0 60                     rts
   718                          
   719                          inputhexbyte:
   720  83e1 200484                 jsr inputhexnybble
   721  83e4 b01d                   bcs ++
   722  83e6 8de194                 sta tmp
   723  83e9 200484                 jsr inputhexnybble
   724  83ec 9006                   bcc +
   725  83ee 18                     clc ; allow single digit as byte
   726  83ef ade194                 lda tmp
   727  83f2 900f                   bcc ++
   728  83f4 0ee194             +   asl tmp
   729  83f7 0ee194                 asl tmp
   730  83fa 0ee194                 asl tmp
   731  83fd 0ee194                 asl tmp
   732  8400 0de194                 ora tmp ; necessary to assemble the two nybbles
   733  8403 60                 ++  rts
   734                          
   735                          inputhexnybble:
   736  8404 b90002                 lda $0200,y
   737  8407 297f                   and #$7F
   738  8409 38                     sec
   739  840a e930                   sbc #$30
   740  840c 9012                   bcc ++
   741  840e c90a                   cmp #10
   742  8410 900c                   bcc +
   743  8412 e907                   sbc #7
   744  8414 900a                   bcc ++
   745  8416 c90a                   cmp #10
   746  8418 9006                   bcc ++
   747  841a c910                   cmp #16
   748  841c b002                   bcs ++
   749  841e c8                 +   iny
   750  841f 60                     rts
   751  8420 38                 ++  sec
   752  8421 60                     rts
   753                          
   754                          strout:
   755  8422 8de88d                 sta ptr3
   756  8425 8ee98d                 stx ptr3+1
   757                          strout2:    
   758  8428 a000                   ldy #0
   759  842a 20d78d             -   jsr lda_at_ptr3_y
   760  842d f006                   beq +
   761  842f 20d2ff                 jsr charout
   762  8432 c8                     iny
   763  8433 d0f5                   bne -
   764  8435 98                 +   tya
   765  8436 38                     sec
   766  8437 6de88d                 adc ptr3
   767  843a 8de88d                 sta ptr3
   768  843d 9003                   bcc +
   769  843f eee98d                 inc ptr3+1
   770  8442 60                 +   rts
   771                          
   772                          inputline:
   773                          !ifdef C64SCREEN {
   774  8443 4cc280                 jmp inputlinec64
   775                          } else {
   776                              ldy #0
   777                          --  sty count
   778                          -   jsr getkey
   779                              beq -
   780                              ldy count
   781                          !ifdef MINIMUM {
   782                              cmp #8 ; backspace
   783                          } else {
   784                              cmp #20
   785                          }
   786                              bne +
   787                              cpy #0
   788                              beq -
   789                              dey
   790                          !if NEEDECHO = 1 {    
   791                              jsr charout
   792                          }
   793                              jmp --
   794                          +   cmp #13
   795                              beq +
   796                              cmp #' '
   797                              bcc -
   798                              cmp #128
   799                              bcs -
   800                          +
   801                          !if NEEDECHO = 1 {    
   802                              jsr charout
   803                          }
   804                              sta inputbuf,y
   805                              iny
   806                              cmp #13
   807                              bne --
   808                              rts
   809                          }
   810                          
   811                          parseline:
   812  8446 c001                   cpy #1
   813  8448 d003                   bne +
   814                          -
   815                          !ifdef C64SCREEN {   
   816  844a 4c548d                 jmp newline
   817                          } else {
   818                              rts
   819                          }
   820  844d 88                 +   dey
   821  844e 8cdd94                 sty len
   822                              ; skip whitespace
   823                              ; check for address, put in ptr1
   824                              ; or check for dot, then require address put in ptr2
   825                              ; or check for ?, and optional parameter, execute help
   826                              ; check for whitespace
   827                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   828                              ; check for string, store at start of inputbuf
   829                              ; check for drive number
   830                              ; check for whitespace
   831                              ; check command ":rda?mls", execute command
   832  8451 a000                   ldy #0
   833  8453 20678c                 jsr skipspaces
   834  8456 ccdd94                 cpy len
   835  8459 f0ef                   beq -
   836  845b 200b8c                 jsr chkcontinuedis
   837  845e d003                   bne +
   838  8460 202f8c                 jsr executedisassemble ; note won't return
   839  8463 201d8c             +   jsr chkcontinueasm
   840  8466 d003                   bne +
   841  8468 20d887                 jsr continueassemble ; note won't return
   842  846b 20768c             +   jsr chkdot
   843  846e d003                   bne +
   844  8470 4c7585                 jmp executedot
   845  8473 20818c             +   jsr chkhelp
   846  8476 d003                   bne +
   847  8478 4c4286                 jmp executehelp
   848                          +
   849                          !ifndef MINIMUM {
   850  847b 206180                 jsr chkextrac64 ; check syntax only available on C64
   851  847e b015                   bcs + ; error if C set
   852  8480 f005                   beq ++ ; consumed if Z set, skip next test(s)
   853                          }    
   854  8482 20b48c                 jsr chkhexaddr1
   855  8485 d003                   bne error
   856  8487 4c8d84             ++  jmp executeaddr1
   857                          error:
   858  848a 4c3e8c                 jmp reporterr
   859                          
   860                          executeaddr1:
   861  848d ccdd94                 cpy len
   862  8490 d003                   bne +
   863  8492 4cf184                 jmp executedisplay1
   864  8495 20768c             +   jsr chkdot
   865  8498 d011                   bne +
   866  849a ccdd94                 cpy len
   867  849d f022                   beq executepagedisplay
   868  849f 20d68c                 jsr chkhexaddr2
   869  84a2 d0e6                   bne error
   870  84a4 18                     clc
   871  84a5 6ee094                 ror flag
   872  84a8 4ce084                 jmp executeaddr12
   873  84ab 20678c             +   jsr skipspaces
   874  84ae 208c8c                 jsr chkcolon
   875  84b1 d003                   bne +
   876  84b3 4c4d85                 jmp executemodify
   877  84b6 20238d             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   878                          !ifdef MINIMUM {
   879                              jmp reportnotimplemented
   880                          } else {
   881  84b9 20ec80                 jsr chkfilename
   882  84bc d0cc                   bne error
   883  84be 4c8585                 jmp executeloadfilename
   884                          }
   885                          
   886                          executepagedisplay:
   887  84c1 add48d                 lda ptr1
   888  84c4 18                     clc
   889                          !ifdef MINIMUM {
   890                              adc #$5f
   891                          } else {
   892  84c5 69b7                   adc #$b7
   893                          }
   894  84c7 8de294                 sta ptr2
   895  84ca add58d                 lda ptr1+1
   896                          !ifdef MINIMUM {
   897                              adc #$01
   898                          } else {
   899  84cd 6900                   adc #$00
   900                          }
   901  84cf 8de394                 sta ptr2+1
   902  84d2 9008                   bcc +
   903  84d4 a9ff                   lda #$ff
   904  84d6 8de294                 sta ptr2
   905  84d9 8de394                 sta ptr2+1
   906  84dc 38                 +   sec
   907  84dd 6ee094                 ror flag
   908                              ; fall through to executeaddr12
   909                          
   910                          executeaddr12:
   911  84e0 ccdd94                 cpy len
   912  84e3 d003                   bne +
   913  84e5 4cfd84                 jmp executedisplay12
   914                          !ifndef MINIMUM { // any C64
   915  84e8 201f81             +   jsr check_execute_save
   916  84eb f003                   beq ++
   917                          }
   918  84ed 4c378c             +   jmp reportnotimplemented
   919  84f0 60                 ++  rts
   920                          
   921                          executedisplay1:
   922  84f1 add48d                 lda ptr1
   923  84f4 8de294                 sta ptr2
   924  84f7 add58d                 lda ptr1+1
   925  84fa 8de394                 sta ptr2+1
   926                              ; fall through executedisplay12
   927                          
   928                          executedisplay12:
   929  84fd a9ff                   lda #$ff
   930  84ff 8ddc94                 sta count
   931  8502 eedc94             -   inc count
   932  8505 addc94                 lda count
   933                          !ifdef MINIMUM {    
   934                              and #$0f
   935                          } else {
   936  8508 2907                   and #$07
   937                          }
   938  850a d018                   bne +
   939  850c a90d                   lda #13
   940  850e 20d2ff                 jsr charout
   941  8511 add48d                 lda ptr1
   942  8514 aed58d                 ldx ptr1+1
   943  8517 209883                 jsr disphexword
   944  851a a93a                   lda #':'
   945  851c 20d2ff                 jsr charout
   946  851f a920                   lda #' '
   947  8521 20d2ff                 jsr charout
   948  8524 a000               +   ldy #0
   949  8526 20c38d                 jsr lda_at_ptr1_y
   950  8529 209e83                 jsr disphexbyte
   951  852c a920                   lda #' '
   952  852e 20d2ff                 jsr charout
   953  8531 eed48d                 inc ptr1
   954  8534 d005                   bne +
   955  8536 eed58d                 inc ptr1+1
   956  8539 f00f                   beq ++
   957  853b 20b781             +   jsr compareptrs
   958  853e 90c2                   bcc -
   959  8540 f0c0                   beq -
   960  8542 2ce094                 bit flag
   961  8545 1003                   bpl ++
   962                          !ifdef C64SCREEN {
   963  8547 4caf80                 jmp display_page_displaymemory
   964                          }
   965  854a 4c548d             ++  jmp newline
   966                          
   967                          executemodify:
   968  854d 20678c                 jsr skipspaces
   969  8550 ccdd94                 cpy len
   970  8553 f01d                   beq ++
   971  8555 20978c                 jsr chkhexbyteofsequence
   972  8558 f003                   beq +
   973  855a 4c8a84                 jmp error
   974  855d 8ce194             +   sty tmp
   975  8560 a000                   ldy #0
   976  8562 20d38d                 jsr sta_at_ptr1_y
   977  8565 eed48d                 inc ptr1
   978  8568 d003                   bne +
   979  856a eed58d                 inc ptr1+1
   980  856d ace194             +   ldy tmp
   981  8570 d0db                   bne executemodify
   982  8572 4c548d             ++  jmp newline
   983                          
   984                          executedot:
   985  8575 ccdd94                 cpy len
   986  8578 d003                   bne +
   987  857a 4cc184                 jmp executepagedisplay
   988  857d 208885             +   jsr chkloadregister
   989  8580 d000                   bne +
   990  8582 20e885             +   jsr chkloadregisters
   991                          
   992                          executeloadfilename:
   993                          executeaddr1cmd:
   994  8585 4c378c             +   jmp reportnotimplemented
   995                          
   996                          chkloadregister:
   997  8588 209285                 jsr chkload_a_x_y_s_p
   998  858b 20e285                 jsr chkload_pc
   999  858e 20e585                 jsr chkload_n_v_b_d_i_z_c
  1000  8591 60                     rts
  1001                          
  1002                          chkload_a_x_y_s_p:
  1003  8592 8ce194                 sty tmp
  1004  8595 b90002                 lda inputbuf, y
  1005  8598 a200                   ldx #0
  1006  859a c941                   cmp #'A'
  1007  859c f014                   beq +
  1008  859e e8                     inx
  1009  859f c958                   cmp #'X'
  1010  85a1 f00f                   beq +
  1011  85a3 e8                     inx
  1012  85a4 c959                   cmp #'Y'
  1013  85a6 f00a                   beq +
  1014  85a8 e8                     inx
  1015  85a9 c953                   cmp #'S'
  1016  85ab f005                   beq +
  1017  85ad e8                     inx
  1018  85ae c950                   cmp #'P'
  1019  85b0 d02c                   bne ++
  1020  85b2 c8                 +   iny
  1021  85b3 b90002                 lda inputbuf, y    
  1022                          !ifndef MINIMUM {
  1023  85b6 c9a0                   cmp #$A0
  1024  85b8 f008                   beq +
  1025                          }    
  1026  85ba c920                   cmp #' '
  1027  85bc f004                   beq +
  1028  85be c93a                   cmp #':'
  1029  85c0 d01c                   bne ++
  1030  85c2 c8                 +   iny
  1031  85c3 20678c                 jsr skipspaces
  1032  85c6 8eda94                 stx mode
  1033  85c9 20bd8c                 jsr chkhexbyte
  1034  85cc d010                   bne ++
  1035  85ce aeda94                 ldx mode
  1036  85d1 9de994                 sta registerA, x
  1037                          !ifndef MINIMUM {
  1038  85d4 20548d                 jsr newline
  1039                          }    
  1040                              ; pop call stack so return to input_loop
  1041  85d7 68                     pla
  1042  85d8 68                     pla
  1043  85d9 68                     pla
  1044  85da 68                     pla
  1045  85db 4ce185                 jmp +++
  1046  85de ace194             ++  ldy tmp ; not Z (NE)
  1047  85e1 60                 +++ rts
  1048                          
  1049                          chkload_pc:
  1050  85e2 a901                   lda #1 ; not Z (NE)
  1051  85e4 60                     rts
  1052                          
  1053                          chkload_n_v_b_d_i_z_c:
  1054  85e5 a901                   lda #1 ; not Z (NE)
  1055  85e7 60                     rts
  1056                          
  1057                          chkloadregisters:
  1058  85e8 20b48c                 jsr chkhexword
  1059  85eb d054                   bne ++
  1060  85ed add48d                 lda ptr1
  1061  85f0 8dee94                 sta registerPC
  1062  85f3 add58d                 lda ptr1+1
  1063  85f6 8def94                 sta registerPC+1
  1064  85f9 20558c                 jsr chkspace
  1065  85fc d03c                   bne +
  1066  85fe 20ff8c                 jsr chkbinbyte
  1067  8601 d037                   bne +
  1068  8603 8ded94                 sta registerSR
  1069  8606 20558c                 jsr chkspace
  1070  8609 d02f                   bne +
  1071  860b 20bd8c                 jsr chkhexbyte
  1072  860e d02a                   bne +
  1073  8610 8de994                 sta registerA
  1074  8613 20558c                 jsr chkspace
  1075  8616 d022                   bne +
  1076  8618 20bd8c                 jsr chkhexbyte
  1077  861b d01d                   bne +
  1078  861d 8dea94                 sta registerX
  1079  8620 20558c                 jsr chkspace
  1080  8623 d015                   bne +
  1081  8625 20bd8c                 jsr chkhexbyte
  1082  8628 d010                   bne +
  1083  862a 8deb94                 sta registerY
  1084  862d 20558c                 jsr chkspace
  1085  8630 d008                   bne +
  1086  8632 20bd8c                 jsr chkhexbyte
  1087  8635 d003                   bne +
  1088  8637 8dec94                 sta registerSP
  1089                              ; don't return to executedot
  1090  863a 68                 +   pla
  1091  863b 68                     pla
  1092                          !ifdef C64SCREEN {   
  1093  863c 20548d                 jsr newline
  1094                          }   
  1095  863f a900                   lda #0 ; set Z
  1096  8641 60                 ++  rts
  1097                          
  1098                          executehelp:
  1099                          !ifdef C64SCREEN {
  1100  8642 20548d                 jsr newline
  1101                          }
  1102  8645 ccdd94                 cpy len
  1103  8648 d003                   bne +
  1104  864a 4c7386                 jmp displayhelp
  1105  864d 20678c             +   jsr skipspaces
  1106  8650 208e86                 jsr chkhelpinstructions
  1107  8653 d003                   bne +
  1108  8655 4cd286                 jmp displayinstructions
  1109  8658 20a886             +   jsr chkhelpmodes
  1110  865b d003                   bne +
  1111  865d 4ce986                 jmp displaymodes
  1112  8660 206b8b             +   jsr chkinstruction
  1113  8663 d003                   bne +
  1114  8665 4ca587                 jmp executehelpinstruction
  1115  8668 209b86             +   jsr chkhelpregisters
  1116  866b d003                   bne +
  1117  866d 4c738d                 jmp execute_display_registers
  1118  8670 4c378c             +   jmp reportnotimplemented
  1119                          
  1120                          displayhelp:
  1121  8673 a986                   lda #<generalhelp
  1122  8675 a292                   ldx #>generalhelp
  1123  8677 202284                 jsr strout
  1124  867a a97b                   lda #<generalhelp2
  1125  867c a293                   ldx #>generalhelp2
  1126  867e 202284                 jsr strout
  1127  8681 a945                   lda #<generalhelp3
  1128  8683 a294                   ldx #>generalhelp3
  1129  8685 202284                 jsr strout
  1130                          !ifndef MINIMUM { // any C64
  1131  8688 209880                 jsr display_extra_help
  1132                          }
  1133  868b 4c548d                 jmp newline
  1134                          
  1135                          chkhelpinstructions:
  1136  868e b90002                 lda inputbuf, y
  1137  8691 c941                   cmp #'A'
  1138  8693 d005                   bne +
  1139  8695 b90102                 lda inputbuf+1, y
  1140  8698 c90d                   cmp #13
  1141                              ; no need to increment y if found, done parsing line
  1142  869a 60                 +   rts
  1143                          
  1144                          chkhelpregisters:
  1145  869b b90002                 lda inputbuf, y
  1146  869e c92e                   cmp #'.'
  1147  86a0 d005                   bne +
  1148  86a2 b90102                 lda inputbuf+1, y
  1149  86a5 c90d                   cmp #13
  1150  86a7 60                 +   rts
  1151                          
  1152                          chkhelpmodes:
  1153  86a8 a9b6                   lda #<modes_keyword
  1154  86aa a294                   ldx #>modes_keyword
  1155                              ; fall through to chkkeyword
  1156                          
  1157                          chkkeyword:
  1158  86ac 8cdc94                 sty count
  1159  86af 8de88d                 sta ptr3
  1160  86b2 8ee98d                 stx ptr3+1
  1161  86b5 aedc94                 ldx count
  1162  86b8 a000                   ldy #0
  1163  86ba 20d78d             -   jsr lda_at_ptr3_y
  1164  86bd dd0002                 cmp inputbuf, x
  1165  86c0 d00a                   bne +
  1166  86c2 e8                     inx
  1167  86c3 c8                     iny
  1168  86c4 ecdd94                 cpx len
  1169  86c7 d0f1                   bne -
  1170  86c9 20d78d                 jsr lda_at_ptr3_y ; matched if end of string, will set Z
  1171  86cc 08                 +   php ; save Z
  1172  86cd acdc94                 ldy count
  1173  86d0 28                     plp ; restore Z
  1174  86d1 60                     rts
  1175                          
  1176                          displayinstructions:
  1177  86d2 a038                   ldy #ninst
  1178  86d4 a200                   ldx #0
  1179  86d6 8a                 -   txa
  1180  86d7 48                     pha
  1181  86d8 200d82                 jsr dispinst
  1182  86db a920                   lda #' '
  1183  86dd 20d2ff                 jsr charout
  1184  86e0 68                     pla
  1185  86e1 aa                     tax
  1186  86e2 e8                     inx
  1187  86e3 88                     dey
  1188  86e4 d0f0                   bne -
  1189  86e6 4c548d                 jmp newline
  1190                          
  1191                          displaymodes:
  1192  86e9 38                     sec
  1193  86ea a900                   lda #0
  1194  86ec 48                 -   pha
  1195  86ed aa                     tax
  1196  86ee bdf48e                 lda mode_sorted, x
  1197  86f1 20fe86                 jsr dispmode
  1198  86f4 68                     pla
  1199  86f5 18                     clc
  1200  86f6 6901                   adc #1
  1201  86f8 c90d                   cmp #nmodes
  1202  86fa 90f0                   bcc -
  1203  86fc 18                     clc
  1204  86fd 60                     rts
  1205                          
  1206                          dispmode:
  1207  86fe c90d                   cmp #nmodes
  1208  8700 b009                   bcs +
  1209  8702 8dda94                 sta mode
  1210  8705 204d87                 jsr disp_modename_and_example
  1211  8708 4c0c87                 jmp dispmodeinstructions
  1212  870b 60                 +   rts
  1213                          
  1214                          dispmodeinstructions:
  1215                          !ifdef C64SCREEN {
  1216                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1217  870c adda94                 lda mode
  1218  870f c903                   cmp #3
  1219  8711 d005                   bne +
  1220  8713 a920                   lda #' '
  1221  8715 4cd2ff                 jmp charout
  1222                          }
  1223                              ; display instructions with this mode
  1224  8718 a000               +   ldy #0
  1225  871a 8cd994             --  sty inidx
  1226  871d a200                   ldx #0
  1227  871f 8ee194             -   stx tmp
  1228  8722 add994                 lda inidx
  1229  8725 dd8a90                 cmp instidx, x
  1230  8728 d016                   bne ++
  1231  872a bd2191                 lda modeidx, x
  1232  872d cdda94                 cmp mode
  1233  8730 d00e                   bne ++
  1234  8732 a920                   lda #' '
  1235  8734 20d2ff                 jsr charout
  1236  8737 bd8a90                 lda instidx, x
  1237  873a 200d82                 jsr dispinst
  1238  873d aee194                 ldx tmp
  1239  8740 e8                 ++  inx
  1240  8741 e097                   cpx #nopcodes
  1241  8743 90da                   bcc -
  1242  8745 c8                     iny
  1243  8746 c038                   cpy #ninst
  1244  8748 d0d0                   bne --
  1245  874a 4c548d                 jmp newline
  1246                          
  1247                          disp_modename_and_example:
  1248  874d 0a                     asl
  1249  874e aa                     tax
  1250  874f bdd98f                 lda modes, x
  1251  8752 48                     pha
  1252  8753 bdda8f                 lda modes+1, x
  1253  8756 aa                     tax
  1254                          !ifdef C64SCREEN {
  1255  8757 a912                   lda #18
  1256  8759 20d2ff                 jsr charout
  1257                          }    
  1258  875c 68                     pla
  1259  875d 202284                 jsr strout
  1260  8760 a920                   lda #' '
  1261  8762 20d2ff                 jsr charout
  1262  8765 202884                 jsr strout2
  1263                          !ifdef C64SCREEN {    
  1264  8768 a992                   lda #146
  1265  876a 20d2ff                 jsr charout
  1266                          }   
  1267  876d 60                     rts
  1268                          
  1269                          disp_modename_instruction_example:
  1270  876e 0a                     asl
  1271  876f aa                     tax
  1272  8770 bdd98f                 lda modes, x
  1273  8773 48                     pha
  1274  8774 bdda8f                 lda modes+1, x
  1275  8777 aa                     tax
  1276  8778 68                     pla
  1277  8779 202284                 jsr strout ; mode name
  1278  877c ade88d                 lda ptr3
  1279  877f 48                     pha
  1280  8780 ade98d                 lda ptr3+1
  1281  8783 48                     pha
  1282  8784 a93a                   lda #':'
  1283  8786 20d2ff                 jsr charout
  1284  8789 a920                   lda #' '
  1285  878b 20d2ff                 jsr charout
  1286  878e add994                 lda inidx
  1287  8791 200d82                 jsr dispinst ; instruction
  1288  8794 a920                   lda #' '
  1289  8796 20d2ff                 jsr charout
  1290  8799 68                     pla
  1291  879a 8de98d                 sta ptr3+1
  1292  879d 68                     pla
  1293  879e 8de88d                 sta ptr3
  1294  87a1 202884                 jsr strout2 ; example
  1295  87a4 60                     rts
  1296                          
  1297                          
  1298                          executehelpinstruction:
  1299  87a5 a000                   ldy #0
  1300  87a7 8cd894             -   sty opidx
  1301  87aa b98a90                 lda instidx, y
  1302  87ad cdd994                 cmp inidx
  1303  87b0 d01d                   bne +
  1304  87b2 b92191                 lda modeidx, y
  1305  87b5 8dda94                 sta mode
  1306  87b8 aed894                 ldx opidx
  1307  87bb bdf38f                 lda opcodes, x
  1308  87be 209e83                 jsr disphexbyte
  1309  87c1 a920                   lda #' '
  1310  87c3 20d2ff                 jsr charout
  1311  87c6 adda94                 lda mode
  1312  87c9 206e87                 jsr disp_modename_instruction_example
  1313  87cc 20548d                 jsr newline
  1314  87cf acd894             +   ldy opidx
  1315  87d2 c8                     iny
  1316  87d3 c097                   cpy #nopcodes
  1317  87d5 90d0                   bcc -
  1318  87d7 60                     rts
  1319                          
  1320                          continueassemble:
  1321                          !ifdef C64SCREEN {   
  1322  87d8 20d080                 jsr continueassemblec64
  1323                          }
  1324                              ; continue...
  1325                          
  1326                          executeassemble:
  1327  87db 68                     pla ; remove low byte return address
  1328  87dc 68                     pla ; return high byte return address
  1329                          !ifdef C64SCREEN {    
  1330  87dd a914                   lda #20
  1331  87df 20d2ff                 jsr charout
  1332  87e2 20d2ff                 jsr charout
  1333                          } else {
  1334                              lda ptr1
  1335                              ldx ptr1+1
  1336                              jsr disphexword
  1337                              lda #' '
  1338                              jsr charout
  1339                          }
  1340                              ; save current pointer
  1341  87e5 add48d             --  lda ptr1
  1342  87e8 aed58d                 ldx ptr1+1
  1343  87eb 8de88d                 sta ptr3
  1344  87ee 8ee98d                 stx ptr3+1
  1345  87f1 204384                 jsr inputline
  1346  87f4 c001                   cpy #1
  1347  87f6 f055                   beq ++
  1348  87f8 88                     dey
  1349  87f9 8cdd94                 sty len
  1350  87fc a000                   ldy #0
  1351  87fe 20678c                 jsr skipspaces
  1352  8801 ccdd94                 cpy len
  1353  8804 f047                   beq ++
  1354                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1355                              ;jsr skipspaces
  1356  8806 206b8b                 jsr chkinstruction
  1357  8809 f00f                   beq +
  1358  880b ade88d             -   lda ptr3
  1359  880e 8dd48d                 sta ptr1
  1360  8811 ade98d                 lda ptr3+1
  1361  8814 8dd58d                 sta ptr1+1
  1362  8817 4c8a84                 jmp error
  1363  881a 208088             +   jsr chkaddressing
  1364  881d d0ec                   bne -
  1365  881f 20a08b                 jsr find_inst_and_mode
  1366  8822 d0e7                   bne -
  1367  8824 205088                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1368  8827 18                     clc
  1369  8828 addb94                 lda size
  1370  882b 6de88d                 adc ptr3
  1371  882e 8dd48d                 sta ptr1
  1372  8831 ade98d                 lda ptr3+1
  1373  8834 6900                   adc #0
  1374  8836 8dd58d                 sta ptr1+1
  1375                          !ifdef C64SCREEN {    
  1376  8839 20548d                 jsr newline
  1377                          }
  1378  883c add48d                 lda ptr1
  1379  883f aed58d                 ldx ptr1+1
  1380  8842 209883                 jsr disphexword
  1381  8845 a920                   lda #' '
  1382  8847 20d2ff                 jsr charout
  1383  884a 4ce587                 jmp --
  1384                          ++  
  1385                          !ifdef C64SCREEN {
  1386  884d 4c548d                 jmp newline
  1387                          } else {
  1388                              rts
  1389                          }
  1390                          
  1391                          store_assembly:
  1392  8850 aed894                 ldx opidx
  1393  8853 bdf38f                 lda opcodes, x
  1394  8856 a000                   ldy #0
  1395  8858 20e78d                 jsr sta_at_ptr3_y
  1396  885b c8                     iny
  1397  885c aedb94                 ldx size
  1398  885f e001                   cpx #1
  1399  8861 f01c                   beq ++
  1400  8863 e002               +   cpx #2
  1401  8865 d007                   bne +
  1402  8867 addf94                 lda tmp2
  1403  886a 20e78d                 jsr sta_at_ptr3_y
  1404  886d 60                     rts
  1405  886e e003               +   cpx #3
  1406  8870 d00d                   bne ++
  1407  8872 add48d                 lda ptr1
  1408  8875 20e78d                 jsr sta_at_ptr3_y
  1409  8878 c8                     iny
  1410  8879 add58d                 lda ptr1+1
  1411  887c 20e78d                 jsr sta_at_ptr3_y
  1412  887f 60                 ++  rts
  1413                          
  1414                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1415  8880 20678c                 jsr skipspaces
  1416  8883 a200                   ldx #0
  1417  8885 8eda94                 stx mode
  1418  8888 20f188                 jsr chkaccumulator
  1419  888b f05e                   beq +
  1420  888d eeda94                 inc mode
  1421  8890 ccdd94                 cpy len ; chknone
  1422  8893 f056                   beq +
  1423  8895 eeda94                 inc mode
  1424  8898 201789                 jsr chkimmediate
  1425  889b f04e                   beq +
  1426  889d eeda94                 inc mode
  1427  88a0 203e89                 jsr chkindirectx
  1428  88a3 f046                   beq +
  1429  88a5 eeda94                 inc mode
  1430  88a8 208689                 jsr chkindirecty
  1431  88ab f03e                   beq +
  1432  88ad eeda94                 inc mode
  1433  88b0 20ce89                 jsr chkrelative
  1434  88b3 f036                   beq +
  1435  88b5 eeda94                 inc mode
  1436  88b8 20398a                 jsr chkzeropage
  1437  88bb f02e                   beq +
  1438  88bd eeda94                 inc mode
  1439  88c0 20558a                 jsr chkzeropagex
  1440  88c3 f026                   beq +
  1441  88c5 eeda94                 inc mode
  1442  88c8 20878a                 jsr chkzeropagey
  1443  88cb f01e                   beq +
  1444  88cd eeda94                 inc mode
  1445  88d0 20b98a                 jsr chkabsolute
  1446  88d3 f016                   beq +
  1447  88d5 eeda94                 inc mode
  1448  88d8 20d58a                 jsr chkabsolutex
  1449  88db f00e                   beq +
  1450  88dd eeda94                 inc mode
  1451  88e0 20078b                 jsr chkabsolutey
  1452  88e3 f006                   beq +
  1453  88e5 eeda94                 inc mode
  1454  88e8 20398b                 jsr chkindirect
  1455  88eb 08                 +   php ; save Z
  1456  88ec adda94                 lda mode
  1457  88ef 28                     plp ; restore Z 
  1458  88f0 60                     rts
  1459                          
  1460                          chkaccumulator:
  1461  88f1 ccdd94                 cpy len
  1462  88f4 d014                   bne +
  1463  88f6 add994                 lda inidx
  1464  88f9 c902                   cmp #2 ; ASL
  1465  88fb f019                   beq ++
  1466  88fd c920                   cmp #32 ; LSR
  1467  88ff f015                   beq ++
  1468  8901 c927                   cmp #39 ; ROL
  1469  8903 f011                   beq ++
  1470  8905 c928                   cmp #40 ; ROR
  1471  8907 4c1689                 jmp ++
  1472  890a b90002             +   lda inputbuf, y
  1473  890d c941                   cmp #'A'
  1474  890f d005                   bne ++
  1475  8911 b90102                 lda inputbuf+1,y
  1476  8914 c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1477  8916 60                 ++  rts
  1478                          
  1479                          chkimmediate:
  1480  8917 8cde94                 sty savepos
  1481  891a b90002                 lda inputbuf, y
  1482  891d c923                   cmp #'#'
  1483  891f d017                   bne ++
  1484  8921 c8                     iny
  1485  8922 20678c                 jsr skipspaces
  1486  8925 b90002                 lda inputbuf, y
  1487  8928 c924                   cmp #'$'
  1488  892a d001                   bne +
  1489  892c c8                     iny
  1490  892d 20bd8c             +   jsr chkhexbyte
  1491  8930 d006                   bne ++
  1492  8932 ccdd94             +   cpy len
  1493  8935 d001                   bne ++
  1494  8937 60                     rts
  1495  8938 acde94             ++  ldy savepos
  1496  893b a201                   ldx #1 ; Z false (NE)
  1497  893d 60                     rts
  1498                          
  1499                          chkindirectx:
  1500  893e 8cde94                 sty savepos
  1501  8941 b90002                 lda inputbuf, y
  1502  8944 c928                   cmp #'('
  1503  8946 d038                   bne ++
  1504  8948 c8                     iny
  1505  8949 20678c                 jsr skipspaces
  1506  894c b90002                 lda inputbuf, y
  1507  894f c924                   cmp #'$'
  1508  8951 d001                   bne +
  1509  8953 c8                     iny
  1510  8954 20bd8c             +   jsr chkhexbyte
  1511  8957 d027                   bne ++
  1512  8959 20678c                 jsr skipspaces
  1513  895c b90002                 lda inputbuf, y
  1514  895f c92c                   cmp #','
  1515  8961 d01d                   bne ++
  1516  8963 c8                     iny
  1517  8964 20678c                 jsr skipspaces
  1518  8967 b90002                 lda inputbuf, y
  1519  896a c958                   cmp #'X'
  1520  896c d012                   bne ++
  1521  896e c8                     iny
  1522  896f 20678c                 jsr skipspaces
  1523  8972 b90002                 lda inputbuf, y
  1524  8975 c929                   cmp #')'
  1525  8977 d007                   bne ++
  1526  8979 c8                     iny
  1527  897a ccdd94                 cpy len
  1528  897d d001                   bne ++
  1529  897f 60                     rts
  1530  8980 acde94             ++  ldy savepos
  1531  8983 a201                   ldx #1 ; Z false (NE)
  1532  8985 60                     rts
  1533                          
  1534                          chkindirecty:
  1535  8986 8cde94                 sty savepos
  1536  8989 b90002                 lda inputbuf, y
  1537  898c c928                   cmp #'('
  1538  898e d038                   bne ++
  1539  8990 c8                     iny
  1540  8991 20678c                 jsr skipspaces
  1541  8994 b90002                 lda inputbuf, y
  1542  8997 c924                   cmp #'$'
  1543  8999 d001                   bne +
  1544  899b c8                     iny
  1545  899c 20bd8c             +   jsr chkhexbyte
  1546  899f d027                   bne ++
  1547  89a1 20678c                 jsr skipspaces
  1548  89a4 b90002                 lda inputbuf, y
  1549  89a7 c929                   cmp #')'
  1550  89a9 d01d                   bne ++
  1551  89ab c8                     iny
  1552  89ac 20678c                 jsr skipspaces
  1553  89af b90002                 lda inputbuf, y
  1554  89b2 c92c                   cmp #','
  1555  89b4 d012                   bne ++
  1556  89b6 c8                     iny
  1557  89b7 20678c                 jsr skipspaces
  1558  89ba b90002                 lda inputbuf, y
  1559  89bd c959                   cmp #'Y'
  1560  89bf d007                   bne ++
  1561  89c1 c8                     iny
  1562  89c2 ccdd94                 cpy len
  1563  89c5 d001                   bne ++
  1564  89c7 60                     rts
  1565  89c8 acde94             ++  ldy savepos
  1566  89cb a201                   ldx #1 ; Z false (NE)
  1567  89cd 60                     rts
  1568                          
  1569                          chkrelative:
  1570  89ce 8cde94                 sty savepos
  1571  89d1 aed994                 ldx inidx
  1572  89d4 e006                   cpx #6 ; BIT
  1573  89d6 f01f                   beq ++
  1574  89d8 bd328e                 lda inst0, x
  1575  89db c942                   cmp #'B'
  1576  89dd d018                   bne ++
  1577  89df b90002                 lda inputbuf, y
  1578  89e2 c924                   cmp #'$'
  1579  89e4 d001                   bne +
  1580  89e6 c8                     iny
  1581  89e7 20b48c             +   jsr chkhexword
  1582  89ea d00b                   bne ++
  1583  89ec ccdd94                 cpy len
  1584  89ef d006                   bne ++
  1585  89f1 20fd89                 jsr computeoffset
  1586  89f4 d001                   bne ++
  1587  89f6 60                     rts ; Z true (EQ)
  1588  89f7 acde94             ++  ldy savepos
  1589  89fa a201                   ldx #1 ; Z false (NE)
  1590  89fc 60                     rts
  1591                          
  1592                          computeoffset:
  1593                          ;   compute next address
  1594  89fd ade98d                 lda ptr3+1
  1595  8a00 8de394                 sta ptr2+1
  1596  8a03 ade88d                 lda ptr3
  1597  8a06 18                     clc
  1598  8a07 6902                   adc #2
  1599  8a09 8de294                 sta ptr2
  1600  8a0c 9003                   bcc +
  1601  8a0e eee394                 inc ptr2+1
  1602                          +  ; subtract argument
  1603  8a11 38                     sec
  1604  8a12 add48d                 lda ptr1
  1605  8a15 ede294                 sbc ptr2
  1606  8a18 8ddf94                 sta tmp2
  1607  8a1b add58d                 lda ptr1+1
  1608  8a1e ede394                 sbc ptr2+1
  1609  8a21 f00b                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1610  8a23 c9ff                   cmp #$FF
  1611  8a25 d00f                   bne failedoffset ; 0 and FF were only options so fail
  1612                              ; chkeck negative offset
  1613  8a27 addf94                 lda tmp2
  1614  8a2a 3007                   bmi successoffset ; branch if signed byte is negative
  1615  8a2c 1008                   bpl failedoffset ; otherwise fail
  1616                          chkoffsetto127:
  1617  8a2e addf94                 lda tmp2
  1618  8a31 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1619                          successoffset:    
  1620  8a33 a900                   lda #0 ; Z true (EQ)
  1621  8a35 60                     rts
  1622                          failedoffset:
  1623  8a36 a901                   lda #1 ; Z false (NE)
  1624  8a38 60                     rts
  1625                          
  1626                          chkzeropage:
  1627  8a39 8cde94                 sty savepos
  1628  8a3c b90002                 lda inputbuf, y
  1629  8a3f c924                   cmp #'$'
  1630  8a41 d001                   bne +
  1631  8a43 c8                     iny
  1632  8a44 20bd8c             +   jsr chkhexbyte
  1633  8a47 d006                   bne ++
  1634  8a49 ccdd94                 cpy len
  1635  8a4c d001                   bne ++
  1636  8a4e 60                     rts ; Z true (EQ)
  1637  8a4f acde94             ++  ldy savepos
  1638  8a52 a201                   ldx #1 ; Z false (NE)
  1639  8a54 60                     rts
  1640                          
  1641                          chkzeropagex:
  1642  8a55 8cde94                 sty savepos
  1643  8a58 b90002                 lda inputbuf, y
  1644  8a5b c924                   cmp #'$'
  1645  8a5d d001                   bne +
  1646  8a5f c8                     iny
  1647  8a60 20bd8c             +   jsr chkhexbyte
  1648  8a63 d01c                   bne ++
  1649  8a65 20678c                 jsr skipspaces
  1650  8a68 b90002                 lda inputbuf, y
  1651  8a6b c92c                   cmp #','
  1652  8a6d d012                   bne ++
  1653  8a6f c8                     iny
  1654  8a70 20678c                 jsr skipspaces
  1655  8a73 b90002                 lda inputbuf, y
  1656  8a76 c958                   cmp #'X'
  1657  8a78 d007                   bne ++
  1658  8a7a c8                     iny
  1659  8a7b ccdd94                 cpy len
  1660  8a7e d001                   bne ++
  1661  8a80 60                     rts ; Z true (EQ)
  1662  8a81 acde94             ++  ldy savepos
  1663  8a84 a201                   ldx #1 ; Z false (NE)
  1664  8a86 60                     rts
  1665                          
  1666                          chkzeropagey:
  1667  8a87 8cde94                 sty savepos
  1668  8a8a b90002                 lda inputbuf, y
  1669  8a8d c924                   cmp #'$'
  1670  8a8f d001                   bne +
  1671  8a91 c8                     iny
  1672  8a92 20bd8c             +   jsr chkhexbyte
  1673  8a95 d01c                   bne ++
  1674  8a97 20678c                 jsr skipspaces
  1675  8a9a b90002                 lda inputbuf, y
  1676  8a9d c92c                   cmp #','
  1677  8a9f d012                   bne ++
  1678  8aa1 c8                     iny
  1679  8aa2 20678c                 jsr skipspaces
  1680  8aa5 b90002                 lda inputbuf, y
  1681  8aa8 c959                   cmp #'Y'
  1682  8aaa d007                   bne ++
  1683  8aac c8                     iny
  1684  8aad ccdd94                 cpy len
  1685  8ab0 d001                   bne ++
  1686  8ab2 60                     rts ; Z true (EQ)
  1687  8ab3 acde94             ++  ldy savepos
  1688  8ab6 a201                   ldx #1 ; Z false (NE)
  1689  8ab8 60                     rts
  1690                          
  1691                          chkabsolute:
  1692  8ab9 8cde94                 sty savepos
  1693  8abc b90002                 lda inputbuf, y
  1694  8abf c924                   cmp #'$'
  1695  8ac1 d001                   bne +
  1696  8ac3 c8                     iny
  1697  8ac4 20b48c             +   jsr chkhexword
  1698  8ac7 d006                   bne ++
  1699  8ac9 ccdd94                 cpy len
  1700  8acc d001                   bne ++
  1701  8ace 60                     rts ; Z true (EQ)
  1702  8acf acde94             ++  ldy savepos
  1703  8ad2 a201                   ldx #1 ; Z false (NE)
  1704  8ad4 60                     rts
  1705                          
  1706                          chkabsolutex:
  1707  8ad5 8cde94                 sty savepos
  1708  8ad8 b90002                 lda inputbuf, y
  1709  8adb c924                   cmp #'$'
  1710  8add d001                   bne +
  1711  8adf c8                     iny
  1712  8ae0 20b48c             +   jsr chkhexword
  1713  8ae3 d01c                   bne ++
  1714  8ae5 20678c                 jsr skipspaces
  1715  8ae8 b90002                 lda inputbuf, y
  1716  8aeb c92c                   cmp #','
  1717  8aed d012                   bne ++
  1718  8aef c8                     iny
  1719  8af0 20678c                 jsr skipspaces
  1720  8af3 b90002                 lda inputbuf, y
  1721  8af6 c958                   cmp #'X'
  1722  8af8 d007                   bne ++
  1723  8afa c8                     iny
  1724  8afb ccdd94                 cpy len
  1725  8afe d001                   bne ++
  1726  8b00 60                     rts ; Z true (EQ)
  1727  8b01 acde94             ++  ldy savepos
  1728  8b04 a201                   ldx #1 ; Z false (NE)
  1729  8b06 60                     rts
  1730                          
  1731                          chkabsolutey:
  1732  8b07 8cde94                 sty savepos
  1733  8b0a b90002                 lda inputbuf, y
  1734  8b0d c924                   cmp #'$'
  1735  8b0f d001                   bne +
  1736  8b11 c8                     iny
  1737  8b12 20b48c             +   jsr chkhexword
  1738  8b15 d01c                   bne ++
  1739  8b17 20678c                 jsr skipspaces
  1740  8b1a b90002                 lda inputbuf, y
  1741  8b1d c92c                   cmp #','
  1742  8b1f d012                   bne ++
  1743  8b21 c8                     iny
  1744  8b22 20678c                 jsr skipspaces
  1745  8b25 b90002                 lda inputbuf, y
  1746  8b28 c959                   cmp #'Y'
  1747  8b2a d007                   bne ++
  1748  8b2c c8                     iny
  1749  8b2d ccdd94                 cpy len
  1750  8b30 d001                   bne ++
  1751  8b32 60                     rts ; Z true (EQ)
  1752  8b33 acde94             ++  ldy savepos
  1753  8b36 a201                   ldx #1 ; Z false (NE)
  1754  8b38 60                     rts
  1755                          
  1756                          chkindirect:
  1757  8b39 8cde94                 sty savepos
  1758  8b3c b90002                 lda inputbuf, y
  1759  8b3f c928                   cmp #'('
  1760  8b41 d022                   bne ++
  1761  8b43 c8                     iny
  1762  8b44 20678c                 jsr skipspaces
  1763  8b47 b90002                 lda inputbuf, y
  1764  8b4a c924                   cmp #'$'
  1765  8b4c d001                   bne +
  1766  8b4e c8                     iny
  1767  8b4f 20b48c             +   jsr chkhexword
  1768  8b52 d011                   bne ++
  1769  8b54 20678c                 jsr skipspaces
  1770  8b57 b90002                 lda inputbuf, y
  1771  8b5a c929                   cmp #')'
  1772  8b5c d007                   bne ++
  1773  8b5e c8                     iny
  1774  8b5f ccdd94                 cpy len
  1775  8b62 d001                   bne ++
  1776  8b64 60                     rts ; Z true (EQ)
  1777  8b65 acde94             ++  ldy savepos
  1778  8b68 a201                   ldx #1 ; Z false (NE)
  1779  8b6a 60                     rts
  1780                          
  1781                          chkinstruction:
  1782  8b6b ccdd94                 cpy len
  1783  8b6e f02d                   beq ++
  1784  8b70 8ce194                 sty tmp
  1785  8b73 a237                   ldx #(ninst-1)
  1786  8b75 b90002             -   lda inputbuf,y
  1787  8b78 dd328e                 cmp inst0,x
  1788  8b7b d01a                   bne +
  1789  8b7d c8                     iny
  1790  8b7e b90002                 lda inputbuf,y
  1791  8b81 dd6a8e                 cmp inst1,x
  1792  8b84 d011                   bne +
  1793  8b86 c8                     iny
  1794  8b87 b90002                 lda inputbuf,y
  1795  8b8a dda28e                 cmp inst2,x
  1796  8b8d d008                   bne +
  1797  8b8f c8                     iny
  1798  8b90 8a                     txa
  1799  8b91 8dd994                 sta inidx
  1800  8b94 a200                   ldx #0
  1801  8b96 60                     rts
  1802  8b97 ace194             +   ldy tmp
  1803  8b9a ca                     dex
  1804  8b9b 10d8                   bpl -
  1805  8b9d a201               ++  ldx #1 ; Z false (NE)
  1806  8b9f 60                     rts
  1807                          
  1808                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1809                              ; and allows mode promotion
  1810  8ba0 20c98b                 jsr find_inst_and_mode2
  1811  8ba3 f023                   beq ++
  1812  8ba5 adda94                 lda mode
  1813  8ba8 c906                   cmp #6
  1814  8baa 901c                   bcc ++
  1815  8bac c90a                   cmp #10
  1816  8bae b016                   bcs +
  1817  8bb0 6903                   adc #3
  1818  8bb2 8dda94                 sta mode ; promote ZeroPage modes to Absolute modes
  1819  8bb5 20c98b                 jsr find_inst_and_mode2 ; try again once
  1820  8bb8 d00e                   bne ++
  1821  8bba addf94                 lda tmp2
  1822  8bbd 8dd48d                 sta ptr1
  1823  8bc0 a900                   lda #0
  1824  8bc2 8dd58d                 sta ptr1+1
  1825  8bc5 60                     rts ; Z true (EQ)
  1826  8bc6 a201               +   ldx #1 ; Z false (NE)
  1827  8bc8 60                 ++  rts
  1828                          
  1829                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1830  8bc9 a296                   ldx #nopcodes-1
  1831  8bcb bd8a90             -   lda instidx, x
  1832  8bce bc2191                 ldy modeidx, x
  1833  8bd1 cdd994                 cmp inidx
  1834  8bd4 d00e                   bne +
  1835  8bd6 ccda94                 cpy mode
  1836  8bd9 d009                   bne +
  1837  8bdb 8ed894                 stx opidx
  1838  8bde 20f381                 jsr getsize
  1839  8be1 a200                   ldx #0 ; Z true (EQ)
  1840  8be3 60                     rts
  1841  8be4 ca                 +   dex
  1842  8be5 e0ff                   cpx #$ff
  1843  8be7 d0e2                   bne -
  1844  8be9 a201                   ldx #1 ; Z false (NE)
  1845  8beb 60                     rts
  1846                          
  1847                          executerun:
  1848  8bec 68                     pla ; remove low byte return address
  1849  8bed 68                     pla ; return high byte return address
  1850  8bee 68                     pla ; again, we're really not returning
  1851  8bef 68                     pla ; again, we're really not returning
  1852  8bf0 20548d                 jsr newline
  1853                          !ifndef MINIMUM {
  1854                          ; any C64
  1855  8bf3 203980                 jsr install_nmi64
  1856                          }
  1857                          +   ; restore registers
  1858  8bf6 aeec94                 ldx registerSP
  1859  8bf9 9a                     txs
  1860  8bfa aded94                 lda registerSR
  1861  8bfd 48                     pha
  1862  8bfe ade994                 lda registerA
  1863  8c01 aeea94                 ldx registerX
  1864  8c04 aceb94                 ldy registerY
  1865  8c07 28                     plp
  1866  8c08 6cd48d                 jmp (ptr1)
  1867                          
  1868                          chkcontinuedis:
  1869  8c0b b90002                 lda inputbuf,y
  1870  8c0e c944                   cmp #'D'
  1871  8c10 d00a                   bne +
  1872  8c12 b90102                 lda inputbuf+1,y
  1873  8c15 c90d                   cmp #13
  1874  8c17 d003                   bne +
  1875  8c19 c8                     iny
  1876  8c1a a200                   ldx #0 ; restore Z set
  1877  8c1c 60                 +   rts
  1878                          
  1879                          chkcontinueasm:
  1880  8c1d b90002                 lda inputbuf,y
  1881  8c20 c941                   cmp #'A'
  1882  8c22 d00a                   bne +
  1883  8c24 b90102                 lda inputbuf+1,y
  1884  8c27 c90d                   cmp #13
  1885  8c29 d003                   bne +
  1886  8c2b c8                     iny
  1887  8c2c a200                   ldx #0 ; restore Z set
  1888  8c2e 60                 +   rts
  1889                          
  1890                          executedisassemble:
  1891  8c2f 68                     pla ; remove low byte return address
  1892  8c30 68                     pla ; return high byte return address
  1893  8c31 20548d                 jsr newline
  1894  8c34 4c8c81                 jmp disassemble
  1895                          
  1896                          reportnotimplemented:
  1897  8c37 a975                   lda #<notimplemented
  1898  8c39 a292                   ldx #>notimplemented
  1899  8c3b 4c2284                 jmp strout
  1900                          
  1901                          reporterr:
  1902  8c3e c000                   cpy #0
  1903  8c40 f008                   beq +
  1904  8c42 a920                   lda #' '
  1905  8c44 20d2ff             -   jsr charout
  1906  8c47 88                     dey
  1907  8c48 d0fa                   bne -
  1908  8c4a a93f               +   lda #'?'
  1909  8c4c 20d2ff                 jsr charout
  1910  8c4f a90d                   lda #13
  1911  8c51 20d2ff                 jsr charout
  1912  8c54 60                     rts
  1913                          
  1914                          chkspace:
  1915  8c55 b90002                 lda inputbuf, y
  1916                          !ifndef MINIMUM {
  1917                              ; skip SHIFT-SPACES too on Commodore
  1918  8c58 c9a0                   cmp #$A0
  1919  8c5a f004                   beq +
  1920                          }
  1921  8c5c c920                   cmp #$20
  1922  8c5e d006                   bne ++
  1923  8c60 c8                 +   iny
  1924  8c61 20678c                 jsr skipspaces
  1925  8c64 a900                   lda #0 ; set Z
  1926  8c66 60                 ++  rts
  1927                          
  1928                          skipspaces:
  1929  8c67 b90002             -   lda inputbuf, y
  1930                          !ifndef MINIMUM {
  1931                              ; skip SHIFT-SPACES too on Commodore
  1932  8c6a c9a0                   cmp #$A0
  1933  8c6c f004                   beq +
  1934                          }
  1935  8c6e c920                   cmp #$20
  1936  8c70 d003                   bne ++
  1937  8c72 c8                 +   iny
  1938  8c73 d0f2                   bne -
  1939  8c75 60                 ++  rts
  1940                          
  1941                          chkdot:
  1942  8c76 b90002                 lda inputbuf, y
  1943  8c79 c92e                   cmp #'.'
  1944  8c7b d003                   bne +
  1945  8c7d c8                     iny
  1946  8c7e a900                   lda #0 ; Z true (EQ)
  1947  8c80 60                 +   rts
  1948                          
  1949                          chkhelp:
  1950  8c81 b90002                 lda inputbuf, y
  1951  8c84 c93f                   cmp #'?'
  1952  8c86 d003                   bne +
  1953  8c88 c8                     iny
  1954  8c89 a900                   lda #0 ; Z true (EQ)
  1955  8c8b 60                 +   rts
  1956                          
  1957                          chkcolon:
  1958  8c8c b90002                 lda inputbuf, y
  1959  8c8f c93a                   cmp #':'
  1960  8c91 d003                   bne +
  1961  8c93 c8                     iny
  1962  8c94 a900                   lda #0 ; Z true (EQ)
  1963  8c96 60                 +   rts
  1964                          
  1965                          chkhexbyteofsequence:
  1966  8c97 20e183                 jsr inputhexbyte
  1967  8c9a 20b78c                 jsr +
  1968  8c9d d014                   bne ++ ; Z false (NE) if failed checks
  1969  8c9f ccdd94                 cpy len
  1970  8ca2 f00f                   beq ++ ; Z true (EQ) if end of input
  1971  8ca4 8de194                 sta tmp
  1972  8ca7 b90002                 lda inputbuf,y
  1973  8caa c920                   cmp #$20
  1974  8cac d005                   bne ++ ; Z false (NE) if not space
  1975  8cae ade194                 lda tmp
  1976  8cb1 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1977  8cb3 60                 ++  rts
  1978                          
  1979                          chkhexword:
  1980                          chkhexaddr1:
  1981  8cb4 20b483                 jsr inputhexword
  1982  8cb7 a200               +   ldx #0 ; Z true (EQ)
  1983  8cb9 9001                   bcc +
  1984  8cbb e8                     inx ; Z false (NE)
  1985  8cbc 60                 +   rts
  1986                          
  1987                          chkhexbyte:
  1988  8cbd 98                     tya
  1989  8cbe 48                     pha ; save y
  1990  8cbf 20e183                 jsr inputhexbyte
  1991  8cc2 b00f                   bcs +
  1992  8cc4 8ddf94                 sta tmp2
  1993  8cc7 200484                 jsr inputhexnybble
  1994  8cca 9007                   bcc +
  1995  8ccc 68                     pla ; throw away saved y
  1996  8ccd addf94                 lda tmp2
  1997  8cd0 a200                   ldx #0 ; Z true (EQ)
  1998  8cd2 60                     rts
  1999  8cd3 68                 +   pla
  2000  8cd4 a8                     tay ; won't be zero, so Z false (NE)
  2001  8cd5 60                     rts    
  2002                          
  2003                          chkhexaddr2:
  2004  8cd6 add48d                 lda ptr1
  2005  8cd9 48                     pha
  2006  8cda add58d                 lda ptr1+1
  2007  8cdd 48                     pha
  2008  8cde 20b48c                 jsr chkhexaddr1
  2009  8ce1 f005                   beq +
  2010  8ce3 68                     pla
  2011  8ce4 68                     pla
  2012  8ce5 a901                   lda #1 ; Z false (NE)
  2013  8ce7 60                     rts
  2014  8ce8 add48d             +   lda ptr1
  2015  8ceb 8de294                 sta ptr2
  2016  8cee add58d                 lda ptr1+1
  2017  8cf1 8de394                 sta ptr2+1
  2018  8cf4 68                     pla
  2019  8cf5 8dd58d                 sta ptr1+1
  2020  8cf8 68                     pla
  2021  8cf9 8dd48d                 sta ptr1
  2022  8cfc a900                   lda #0 ; Z true (EQ)
  2023  8cfe 60                     rts    
  2024                          
  2025                          chkbinbyte:
  2026  8cff a208                   ldx #8
  2027  8d01 200f8d             -   jsr chkbindigit
  2028  8d04 d008                   bne +
  2029  8d06 ca                     dex
  2030  8d07 d0f8                   bne -
  2031  8d09 08                     php ; save Z true
  2032  8d0a addf94                 lda tmp2
  2033  8d0d 28                     plp ; restore Z true
  2034  8d0e 60                 +   rts
  2035                          
  2036                          chkbindigit:
  2037  8d0f b90002                 lda inputbuf, y
  2038  8d12 38                     sec
  2039  8d13 e930                   sbc #$30
  2040  8d15 900b                   bcc +
  2041  8d17 c902                   cmp #$02
  2042  8d19 b007                   bcs +
  2043  8d1b 4a                     lsr ; rotate bit value into C
  2044  8d1c 2edf94                 rol tmp2 ; rotate bit value into tmp2
  2045  8d1f c8                     iny ; advance in buffer
  2046  8d20 a900                   lda #0 ; set Z
  2047  8d22 60                 +   rts
  2048                          
  2049                          chkaddr1cmd:
  2050  8d23 b90002                 lda inputbuf, y
  2051  8d26 c941               +   cmp #'A'
  2052  8d28 d00b                   bne +
  2053  8d2a be0102                 ldx inputbuf+1, y
  2054  8d2d e00d                   cpx #13
  2055  8d2f d004                   bne +
  2056  8d31 c8                     iny
  2057  8d32 4cdb87                 jmp executeassemble
  2058  8d35 c944               +   cmp #'D'
  2059  8d37 d00b                   bne +
  2060  8d39 be0102                 ldx inputbuf+1, y
  2061  8d3c e00d                   cpx #13
  2062  8d3e d004                   bne +
  2063  8d40 c8                     iny
  2064  8d41 4c2f8c                 jmp executedisassemble
  2065  8d44 c952               +   cmp #'R'
  2066  8d46 d00b                   bne +
  2067  8d48 be0102                 ldx inputbuf+1, y
  2068  8d4b e00d                   cpx #13
  2069  8d4d d004                   bne +
  2070  8d4f c8                     iny
  2071  8d50 4cec8b                 jmp executerun
  2072  8d53 60                 +   rts
  2073                          
  2074                          newline:
  2075  8d54 a90d                   lda #13
  2076  8d56 4cd2ff                 jmp charout
  2077                          
  2078                          space:
  2079  8d59 a920                   lda #32
  2080  8d5b 4cd2ff                 jmp charout
  2081                          
  2082                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  2083                          ;     jsr $ffd2
  2084                          ;     pha
  2085                          ; -   lda $d011
  2086                          ;     bpl -
  2087                          ; -   lda $d011
  2088                          ;     bmi -
  2089                          ; -   lda $d011
  2090                          ;     bpl -
  2091                          ; -   lda $d011
  2092                          ;     bmi -
  2093                          ;     pla
  2094                          ;     rts
  2095                          
  2096                          save_registers:
  2097  8d5e 08                     php
  2098  8d5f 8de994                 sta registerA
  2099  8d62 8eea94                 stx registerX
  2100  8d65 8ceb94                 sty registerY
  2101  8d68 68                     pla
  2102  8d69 8ded94                 sta registerSR
  2103  8d6c ba                     tsx
  2104  8d6d 8eec94                 stx registerSP
  2105  8d70 4c758d                 jmp +
  2106                          
  2107                          execute_display_registers:
  2108  8d73 68                     pla ; remove return address
  2109  8d74 68                     pla
  2110                          +
  2111                              ; need some normality
  2112  8d75 58                     cli
  2113  8d76 d8                     cld
  2114                          
  2115  8d77 20548d                 jsr newline
  2116  8d7a 20838d                 jsr display_registers
  2117                          !ifndef MINIMUM {
  2118                              ; any C64
  2119  8d7d 205480                 jsr uninstall_nmi64
  2120                          }
  2121  8d80 4c3080                 jmp input_loop
  2122                          
  2123                          ; PC   NV-BDIZC .A .X .Y .S
  2124                          ; 1234 10111011 01 02 03 FF
  2125                          display_registers:
  2126  8d83 a9bb                   lda #<reg_header
  2127  8d85 a294                   ldx #>reg_header
  2128  8d87 202284                 jsr strout
  2129  8d8a adee94                 lda registerPC
  2130  8d8d aeef94                 ldx registerPC+1
  2131  8d90 209883                 jsr disphexword
  2132  8d93 20598d                 jsr space
  2133  8d96 aded94                 lda registerSR
  2134  8d99 208383                 jsr dispbinbyte
  2135  8d9c 20598d                 jsr space
  2136  8d9f ade994                 lda registerA
  2137  8da2 209e83                 jsr disphexbyte
  2138  8da5 20598d                 jsr space
  2139  8da8 adea94                 lda registerX
  2140  8dab 209e83                 jsr disphexbyte
  2141  8dae 20598d                 jsr space
  2142  8db1 adeb94                 lda registerY
  2143  8db4 209e83                 jsr disphexbyte
  2144  8db7 20598d                 jsr space
  2145  8dba adec94                 lda registerSP
  2146  8dbd 209e83                 jsr disphexbyte
  2147  8dc0 4c548d                 jmp newline
  2148                          
  2149                          !ifdef MINIMUM {
  2150                          
  2151                          lda_at_ptr1_y:
  2152                              lda (ptr1),y
  2153                              rts
  2154                          
  2155                          sta_at_ptr1_y:
  2156                              sta (ptr1),y
  2157                              rts    
  2158                          
  2159                          lda_at_ptr3_y:
  2160                              lda (ptr3),y
  2161                              rts
  2162                          
  2163                          sta_at_ptr3_y:
  2164                              sta (ptr3),y
  2165                              rts    
  2166                          
  2167                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2168                          ;; MC6850
  2169                          UART_DATA=$FFF8
  2170                          UART_STCR=$FFF9
  2171                          
  2172                          UART_INIT:
  2173                          	ldx #0b00000111 ; 11=reset device
  2174                          	stx UART_STCR
  2175                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  2176                          	sta UART_STCR
  2177                          	rts
  2178                          UART_OUT:
  2179                          	pha
  2180                          -	lda UART_STCR
  2181                          	and #2
  2182                          	beq - ; branch if TDRE=0, not finished transmitting
  2183                          	pla
  2184                          	pha
  2185                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  2186                          	sta UART_DATA
  2187                          	pla
  2188                          	rts
  2189                          UART_IN:
  2190                          -	lda UART_STCR
  2191                          	and #1
  2192                          	beq - ; branch if TDRF=0, not received
  2193                          	lda UART_DATA
  2194                          	; software "CAPS LOCK" because wozmon expects only uppercase
  2195                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  2196                          	beq BREAK
  2197                              ; force lowercase alphabet to uppercase
  2198                              cmp #'a'
  2199                          	bcc +
  2200                          	cmp #'z'+1
  2201                          	bcs +
  2202                          	eor #$20
  2203                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  2204                           	rts
  2205                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  2206                          	pha ; save A
  2207                          	lda UART_STCR
  2208                          	lsr ; put rightmost bit in carry
  2209                          	pla ; restore A affects flags
  2210                          	ror ; move carry to left bit, right bit to carry
  2211                          	php ; push processor to save N
  2212                          	rol ; restore A affects flags
  2213                          	plp ; pull processor to restore N
  2214                          	rts
  2215                          
  2216                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2217                          ; Processor start and interrupts
  2218                          
  2219                          NMI: ; unused on minimum (no source of interrupt)
  2220                              rti
  2221                          
  2222                          IRQ:
  2223                              pha
  2224                              php
  2225                              pla
  2226                              and #$10
  2227                              beq ++ ; not break
  2228                          ;BREAK HANDLER
  2229                              pla
  2230                              sta registerA
  2231                              pla
  2232                              sta registerSR
  2233                              pla
  2234                              cld
  2235                              sec
  2236                              sbc #2
  2237                              sta registerPC
  2238                              pla
  2239                              sbc #0
  2240                              sta registerPC+1
  2241                              lda #>save_registers
  2242                              pha
  2243                              lda #<save_registers
  2244                              pha
  2245                              lda registerSR
  2246                              pha
  2247                              lda registerA
  2248                              pha
  2249                          ++  pla
  2250                              rti
  2251                          
  2252                          BREAK:
  2253                              jmp RESET
  2254                          
  2255                          RESET:
  2256                              cld
  2257                              ldx #$FF
  2258                              txs
  2259                              jsr JUART_INIT
  2260                              cli
  2261                              jmp start
  2262                          ; !ifdef MINIMUM
  2263                          } else { ; not MINIMUM
  2264                          
  2265                          ptr1 = sta_at_ptr1_y + 1 ; and + 2
  2266                          
  2267                          lda_at_ptr1_y:
  2268  8dc3 add48d                 lda ptr1
  2269  8dc6 8dd08d                 sta lda_ptr1_op+1
  2270  8dc9 add58d                 lda ptr1+1
  2271  8dcc 8dd18d                 sta lda_ptr1_op+2
  2272                          lda_ptr1_op:
  2273  8dcf b9ffff                 lda $ffff, y
  2274  8dd2 60                     rts
  2275                          
  2276                          sta_at_ptr1_y:
  2277  8dd3 99ffff                 sta $ffff, y
  2278  8dd6 60                     rts
  2279                          
  2280                          ptr3 = sta_at_ptr3_y + 1 ; and + 2
  2281                          
  2282                          lda_at_ptr3_y:
  2283  8dd7 ade88d                 lda ptr3
  2284  8dda 8de48d                 sta lda_ptr3_op+1
  2285  8ddd ade98d                 lda ptr3+1
  2286  8de0 8de58d                 sta lda_ptr3_op+2
  2287                          lda_ptr3_op:
  2288  8de3 b9ffff                 lda $ffff, y
  2289  8de6 60                     rts
  2290                          
  2291                          sta_at_ptr3_y:
  2292  8de7 99ffff                 sta $ffff, y
  2293  8dea 60                     rts
  2294                          
  2295                          nmi64:
  2296  8deb 78                     sei
  2297  8dec 8de994                 sta registerA
  2298  8def 68                     pla
  2299  8df0 8ded94                 sta registerSR
  2300  8df3 68                     pla
  2301  8df4 d8                     cld
  2302  8df5 8dee94                 sta registerPC
  2303  8df8 68                     pla
  2304  8df9 8def94                 sta registerPC+1
  2305  8dfc a98d                   lda #>save_registers
  2306  8dfe 48                     pha
  2307  8dff a95e                   lda #<save_registers
  2308  8e01 48                     pha
  2309  8e02 aded94                 lda registerSR
  2310  8e05 48                     pha
  2311  8e06 ade994                 lda registerA
  2312  8e09 40                     rti
  2313                          
  2314                          brk64:
  2315  8e0a 68                     pla
  2316  8e0b a8                     tay
  2317  8e0c 68                     pla
  2318  8e0d aa                     tax
  2319  8e0e 68                     pla
  2320  8e0f 8de994                 sta registerA
  2321  8e12 68                     pla
  2322  8e13 8ded94                 sta registerSR
  2323  8e16 68                     pla
  2324  8e17 d8                     cld
  2325  8e18 38                     sec
  2326  8e19 e902                   sbc #2
  2327  8e1b 8dee94                 sta registerPC
  2328  8e1e 68                     pla
  2329  8e1f e900                   sbc #0
  2330  8e21 8def94                 sta registerPC+1
  2331  8e24 a98d                   lda #>save_registers
  2332  8e26 48                     pha
  2333  8e27 a95e                   lda #<save_registers
  2334  8e29 48                     pha
  2335  8e2a aded94                 lda registerSR
  2336  8e2d 48                     pha
  2337  8e2e ade994                 lda registerA
  2338  8e31 40                     rti
  2339                          }
  2340                          
  2341                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2342                          ; data
  2343                          
  2344                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  2345                          ninst = 56
  2346  8e32 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  2347  8e6a 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  2348  8ea2 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  2349                          
  2350                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  2351                          mode_jmptable:
  2352  8eda 8882               !word dispModeAcc-1; 0 Accumulator 1
  2353  8edc 8d82               !word dispModeNone-1 ; 1 None 1
  2354  8ede 8e82               !word dispModeImm-1 ; 2 Immediate 2
  2355  8ee0 a082               !word dispModeIndX-1 ; 3 IndirectX 2
  2356  8ee2 c182               !word dispModeIndY-1 ; 4 IndirectY 2
  2357  8ee4 e282               !word dispModeRel-1 ; 5 Relative 2
  2358  8ee6 9382               !word dispModeZP-1 ; 6 ZeroPage 2
  2359  8ee8 2d83               !word dispModeZPX-1 ; 7 ZeroPageX 2
  2360  8eea 3a83               !word dispModeZPY-1 ; 8 ZeroPageY 2
  2361  8eec 4783               !word dispModeAbs-1 ; 9 Absolute 3
  2362  8eee 5b83               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  2363  8ef0 6883               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  2364  8ef2 7583               !word dispModeInd-1 ; 12 Indirect 3
  2365                          
  2366                          nmodes = 13
  2367                          
  2368                          mode_sorted:
  2369  8ef4 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  2370                          
  2371                          !ifdef MINIMUM {
  2372                          mode_0: !text "Accumulator", 0, "A", 0
  2373                          mode_1: !text "None", 0, 8, 0
  2374                          mode_2: !text "Immediate", 0, "#$12", 0
  2375                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  2376                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  2377                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  2378                          mode_6: !text "ZeroPage", 0, "$12", 0
  2379                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  2380                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  2381                          mode_9: !text "Absolute", 0, "$1234", 0
  2382                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  2383                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  2384                          mode_12: !text "Indirect", 0, "($1234)", 0
  2385                          } else {
  2386  8f01 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2387  8f0f 4e4f4e45001400     mode_1: !text "NONE", 0, 20, 0
  2388  8f16 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2389  8f25 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2390  8f37 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2391  8f49 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2392  8f68 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2393  8f75 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2394  8f85 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2395  8f95 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2396  8fa4 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2397  8fb6 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2398  8fc8 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2399                          }
  2400                          
  2401                          modes: ; table for easily displaying each mode_example
  2402  8fd9 018f               !word mode_0
  2403  8fdb 0f8f               !word mode_1
  2404  8fdd 168f               !word mode_2
  2405  8fdf 258f               !word mode_3
  2406  8fe1 378f               !word mode_4
  2407  8fe3 498f               !word mode_5
  2408  8fe5 688f               !word mode_6
  2409  8fe7 758f               !word mode_7
  2410  8fe9 858f               !word mode_8
  2411  8feb 958f               !word mode_9
  2412  8fed a48f               !word mode_10
  2413  8fef b68f               !word mode_11
  2414  8ff1 c88f               !word mode_12
  2415                          
  2416                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2417                          nopcodes = 151
  2418  8ff3 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2419  908a 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2420  9121 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2421                          
  2422                          copyright 
  2423                          ;                  1         2         3         4
  2424                          ;         1234567890123456789012345678901234567890
  2425  91b8 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2426                          !ifdef C64TERMINAL {
  2427                              !text 13, "(TERMINAL VERSION)"
  2428                          }
  2429  91d8 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2430  91fe 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2431  9215 00                 !text 0
  2432                          
  2433                          firsthelp
  2434                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2435  9216 0d0d               !text 13, 13
  2436  9218 54595045203f2046...!text "TYPE ? FOR HELP"
  2437  9227 0d00               !text 13, 0
  2438                          
  2439                          !ifndef MINIMUM {
  2440                          ; C64 only
  2441                          extra_help:
  2442  9229 5820202020202020...    !text "X           (EXIT MONITOR)", 13
  2443  9244 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S  (SAVE)", 13
  2444  9266 00                     !text 0
  2445                          
  2446                          !ifdef C64SCREEN {
  2447  9267 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  2448  926e 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  2449                          }
  2450                          
  2451                          }
  2452                          
  2453  9275 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2454                          
  2455                          generalhelp
  2456  9286 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2457  92ac 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2458  92d1 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2459  92f4 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2460  931c 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2461  9338 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2462  9358 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2463  937a 00                 !text 0
  2464                          generalhelp2
  2465  937b 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2466  93a0 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2467  93bc 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2468  93db 3f41202020202020...!text "?A          (LIST 6502 INSTRUCTIONS)", 13
  2469  9400 3f41444320202020...!text "?ADC        (/ADC/ ADDRESSING MODES)", 13
  2470  9425 3f4d4f4445202020...!text "?MODE       (ADDRESSING MODES)", 13
  2471  9444 00                 !text 0
  2472                          generalhelp3
  2473  9445 3f2e202020202020...!text "?.          (DISPLAY REGISTERS)", 13
  2474  9465 2e31323334202020...!text ".1234       (MODIFY PC,FLAGS,REGISTERS)", 13
  2475  948d 2e413a3031202020...!text ".A:01       (MODIFY REGISTER A,X,Y,S,P)", 13
  2476  94b5 00                 !text 0
  2477                          
  2478  94b6 4d4f444500         modes_keyword !text "MODE", 0
  2479                          
  2480  94bb 2050432020204e56...reg_header !text " PC   NV-BDIZC .A .X .Y .S", 13, '.', 0
  2481                          
  2482                          !ifdef MINIMUM {
  2483                          registerA = $dff9
  2484                          registerX = $dffa
  2485                          registerY = $dffb
  2486                          registerSP = $dffc
  2487                          registerSR = $dffd
  2488                          registerPC = $dffe;/f
  2489                          } else {
  2490  94d8 00                 opidx !byte 0
  2491  94d9 00                 inidx !byte 0
  2492  94da 00                 mode !byte 0
  2493  94db 00                 size !byte 0
  2494  94dc 00                 count !byte 0
  2495  94dd 00                 len !byte 0
  2496  94de 00                 savepos !byte 0
  2497  94df 00                 tmp2 !byte 0
  2498  94e0 00                 flag !byte 0
  2499  94e1 00                 tmp !byte 0
  2500  94e2 0000               ptr2 !word 0
  2501  94e4 0000               savebrkvector !word 0
  2502  94e6 0000               savenmivector !word 0
  2503  94e8 00                 drive !byte 0
  2504  94e9 00                 registerA !byte 0
  2505  94ea 00                 registerX !byte 0
  2506  94eb 00                 registerY !byte 0
  2507  94ec 00                 registerSP !byte 0
  2508  94ed 00                 registerSR !byte 0
  2509  94ee 0000               registerPC !word 0
  2510                          }
  2511                          
  2512                          !ifdef MINIMUM {
  2513                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2514                          ; JUMP table for some stability
  2515                          * = $FFEE
  2516                          JUART_INIT: JMP UART_INIT
  2517                          JUART_OUT: JMP UART_OUT
  2518                          JUART_IN: JMP UART_IN
  2519                          JUART_CHK: JMP UART_CHK
  2520                          
  2521                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2522                          ; 6502 vectors 
  2523                          * = $fffa
  2524                              !word NMI
  2525                              !word RESET
  2526                              !word IRQ
  2527                          } else { // C64
  2528                              !if * > $a000 {
  2529                                  !error "code/data overran $a000"
  2530                              }
  2531                          }
  2532                          
  2533                          finish = *
