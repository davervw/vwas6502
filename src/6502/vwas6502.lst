
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGET  C64 and...                    *        <<<
     7                          ;; >>>       ** INCLUDES VERSION FOR 6502+MC6850 minimum system *        <<<
     8                          ;; >>>       *   60K(RAM),4K(ROM), 2 bytes IO for MC6850 UART   *        <<<
     9                          ;; >>>       ****************************************************        <<<
    10                          ;;
    11                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    12                          ;; MIT License
    13                          ;;
    14                          ;; Copyright (c) 2024 David R. Van Wagner
    15                          ;; davevw.com
    16                          ;;
    17                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    18                          ;; of this software and associated documentation files (the "Software"), to deal
    19                          ;; in the Software without restriction, including without limitation the rights
    20                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    21                          ;; copies of the Software, and to permit persons to whom the Software is
    22                          ;; furnished to do so, subject to the following conditions:
    23                          ;;
    24                          ;; The above copyright notice and this permission notice shall be included in all
    25                          ;; copies or substantial portions of the Software.
    26                          ;;
    27                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    28                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    29                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    30                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    31                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    32                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    33                          ;; SOFTWARE.
    34                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    35                          
    36                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ; Important! define exactly ONE target (set in build.sh)
    39                          ;C64SCREEN = 1
    40                          ;C64TERMINAL = 1
    41                          ;MINIMUM = 1
    42                          
    43                          ; options (set in build.sh)
    44                          ;NEEDECHO = 0
    45                          
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;; _
    49                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    50                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    51                          ;; 1000 (display memory at $1000)
    52                          ;; 1000.2000 (display memory range $1000 to $2000)
    53                          ;; 1000. (display next screenful of memory starting at $1000)
    54                          ;; . (display next screenful of memory)
    55                          ;; 1000 r (JMP $1000)
    56                          ;; 1000: 01 02 03 (modify memory)
    57                          ;; (NEW SYNTAX)
    58                          ;; 1000 d (disassemble starting at address, for screenful)
    59                          ;; d (continue disassembling from last address)
    60                          ;; 1000 a (assemble starting at, interactive until empty line) 
    61                          ;; (FUTURE SYNTAX, not implemented)
    62                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    63                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    64                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    65                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    66                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    67                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    68                          ;; 1000.2000 "filename" 08 save (save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, can abbreviate to s)
    69                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    70                          ;; ? (commands help)
    71                          ;; ? a (list instructions available)
    72                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    73                          ;; ? mode (show addressing modes example syntax for 6502)
    74                          ;;
    75                          ;; (INTERACTIVE ASSEMBLER)
    76                          ;; 1000 _
    77                          ;;      ADC #$12
    78                          ;; 1000 69 12    ADC #$12
    79                          ;; 1002 _
    80                          ;;      JSR $1234
    81                          ;; 1002 20 34 12 JSR $1234
    82                          ;; 1005 _
    83                          ;;      RTS
    84                          ;; 1005 60       RTS
    85                          ;; 1006 _
    86                          ;;      XYZ
    87                          ;;      XYZ ?
    88                          ;; 1006 _
    89                          ;; _
    90                          ;;
    91                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    92                          ;; and can cursor up to revise, 
    93                          ;;
    94                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    95                          ;;
    96                          
    97                          ; global
    98                          inputbuf=$0200
    99                          
   100                          
   101                          ; kernal/system calls
   102                          
   103                          !ifdef MINIMUM {
   104                          charout=JUART_OUT
   105                          getkey=JUART_IN
   106                          }
   107                          
   108                          !ifdef C64SCREEN {
   109                          charin=$ffcf ; screen editor
   110                          charout=$ffd2
   111                          getkey=$ffe4
   112                          }
   113                          
   114                          !ifdef C64TERMINAL {
   115                          charout=$ffd2
   116                          getkey=$ffe4
   117                          }
   118                          
   119                          ; zeropage
   120                          !ifdef MINIMUM {
   121                          opidx=$f0
   122                          inidx=$f1
   123                          mode=$f2
   124                          size=$f3
   125                          ptr3=$f4 ; and $f5
   126                          count=$f6
   127                          len=$f7
   128                          savepos=$f8
   129                          tmp2=$f9
   130                          flag=$fa
   131                          ptr1=$fb ; and $fc
   132                          ptr2=$fd ; and $fe
   133                          tmp=$ff
   134                          } else {
   135                          ptr1=$fb ; and $fc
   136                          ptr2=$fd ; and $fe
   137                          tmp=$ff
   138                          opidx=$22
   139                          inidx=$23
   140                          mode=$24
   141                          size=$25
   142                          ptr3=$26 ; and $27
   143                          count=$a3
   144                          len=$a4
   145                          savepos=$a5
   146                          tmp2=$a6
   147                          flag=$a7
   148                          }
   149                          
   150                          !ifdef MINIMUM {
   151                          *=$f000
   152                          } else {
   153                          *=$c000
   154                          }
   155                          start:
   156  c000 a984                   lda #<copyright
   157  c002 a2cd                   ldx #>copyright
   158  c004 2084c2                 jsr strout
   159  c007 a9e2                   lda #<firsthelp
   160  c009 a2cd                   ldx #>firsthelp
   161  c00b 2084c2                 jsr strout
   162  c00e 209fc2             -   jsr inputline
   163  c011 20adc2                 jsr parseline
   164  c014 4c0ec0                 jmp -
   165                          
   166                          test: ; all the addressing modes here for testing disassembly
   167  c017 ea                     nop
   168  c018 ad3412                 lda $1234
   169  c01b bd3412                 lda $1234,x
   170  c01e b93412                 lda $1234,y
   171  c021 0a                     asl
   172  c022 a912                   lda #$12
   173  c024 a112                   lda ($12,x)
   174  c026 b112                   lda ($12),y
   175  c028 6c3412                 jmp ($1234)
   176  c02b d0fe               -   bne -
   177  c02d a512                   lda $12
   178  c02f b512                   lda $12,x
   179  c031 b612                   ldx $12,y
   180  c033 ff                     !byte $FF ; unknown
   181                          
   182                          disassemble:
   183  c034 a917                   lda #23
   184  c036 85a3                   sta count
   185  c038 a000               -   ldy #0
   186  c03a b1fb                   lda (ptr1),y
   187  c03c 206ec0                 jsr find_opcode
   188  c03f 20d1c0                 jsr disp_current
   189  c042 a525                   lda size
   190  c044 1002                   bpl +
   191  c046 a901                   lda #1
   192  c048 18                 +   clc
   193  c049 65fb                   adc ptr1
   194  c04b 85fb                   sta ptr1
   195  c04d 9002                   bcc +
   196  c04f e6fc                   inc ptr1+1
   197  c051 c6a3               +   dec count
   198  c053 d0e3                   bne -
   199                          !ifdef C64SCREEN {
   200  c055 a5fb                   lda ptr1
   201  c057 a6fc                   ldx ptr1+1
   202  c059 200ac2                 jsr disphexword
   203  c05c a9a2                   lda #<page_disassemble
   204  c05e a2cf                   ldx #>page_disassemble
   205  c060 4c84c2                 jmp strout
   206                          } else {    
   207                              rts
   208                          }
   209                          
   210                          compareptrs:
   211  c063 a5fc                   lda ptr1+1
   212  c065 c5fe                   cmp ptr2+1
   213  c067 d004                   bne +
   214  c069 a5fb                   lda ptr1
   215  c06b c5fd                   cmp ptr2
   216  c06d 60                 +   rts
   217                          
   218                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   219                          ; and properties updated in ZP globals size,inidx,opidx,mode
   220  c06e a097                   ldy #nopcodes
   221  c070 a296                   ldx #nopcodes-1
   222  c072 ddbfcb             -   cmp opcodes,x
   223  c075 f00f                   beq +
   224  c077 ca                     dex
   225  c078 88                     dey
   226  c079 d0f7                   bne -
   227  c07b 18                     clc
   228  c07c a901                   lda #1
   229  c07e 8525                   sta size
   230  c080 a9ff                   lda #$FF
   231  c082 aa                     tax
   232  c083 a8                     tay
   233  c084 900a                   bcc ++
   234  c086 bd56cc             +   lda instidx, x
   235  c089 bcedcc                 ldy modeidx, x
   236  c08c 2097c0                 jsr getsize
   237  c08f 38                     sec
   238  c090 8523               ++  sta inidx
   239  c092 8622                   stx opidx
   240  c094 8424                   sty mode
   241  c096 60                     rts
   242                          
   243                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   244                              ; result returned in size
   245  c097 48                     pha
   246  c098 a901                   lda #1
   247  c09a 8525                   sta size
   248  c09c 68                     pla
   249  c09d c002                   cpy #2 // Immediate
   250  c09f 9008                   bcc +
   251  c0a1 e625                   inc size
   252  c0a3 c009                   cpy #9 // Absolute
   253  c0a5 9002                   bcc +
   254  c0a7 e625                   inc size
   255  c0a9 60                 +   rts
   256                          
   257                          disp_opcode: ; .A opcode byte
   258  c0aa 206ec0                 jsr find_opcode
   259  c0ad 8a                     txa
   260                              ; fall through to display instruction
   261                          
   262                          dispinst: ; .A instruction index 0..55, note modifies A and X
   263  c0ae aa                     tax
   264  c0af e038                   cpx #ninst
   265  c0b1 b012                   bcs +
   266  c0b3 bdffc9                 lda inst0, x
   267  c0b6 20d2ff                 jsr charout
   268  c0b9 bd37ca                 lda inst1, x
   269  c0bc 20d2ff                 jsr charout
   270  c0bf bd6fca                 lda inst2, x
   271  c0c2 4cd2ff                 jmp charout
   272  c0c5 a93f               +   lda #'?'
   273  c0c7 20d2ff                 jsr charout
   274  c0ca 20d2ff                 jsr charout
   275  c0cd 20d2ff                 jsr charout
   276  c0d0 60                     rts
   277                          
   278                          disp_current:
   279  c0d1 a5fb                   lda ptr1
   280  c0d3 a6fc                   ldx ptr1+1
   281  c0d5 200ac2                 jsr disphexword
   282  c0d8 a920                   lda #$20
   283  c0da 20d2ff                 jsr charout
   284  c0dd a000                   ldy #0
   285  c0df a625                   ldx size
   286  c0e1 b1fb               -   lda (ptr1),y
   287  c0e3 2010c2                 jsr disphexbyte
   288  c0e6 a920                   lda #$20
   289  c0e8 20d2ff                 jsr charout
   290  c0eb c8                     iny
   291  c0ec ca                     dex
   292  c0ed d0f2                   bne -
   293  c0ef c003               -   cpy #3
   294  c0f1 f00e                   beq +
   295  c0f3 a920                   lda #$20
   296  c0f5 20d2ff                 jsr charout
   297  c0f8 20d2ff                 jsr charout
   298  c0fb 20d2ff                 jsr charout
   299  c0fe c8                     iny
   300  c0ff d0ee                   bne -
   301  c101 a523               +   lda inidx
   302  c103 20aec0                 jsr dispinst
   303  c106 a920                   lda #$20
   304  c108 20d2ff                 jsr charout
   305  c10b 2013c1                 jsr disp_mode
   306  c10e a90d                   lda #13
   307  c110 4cd2ff                 jmp charout
   308                          
   309                          disp_mode
   310  c113 a524                   lda mode
   311  c115 c90d                   cmp #13
   312  c117 b00a                   bcs +
   313  c119 0a                     asl
   314  c11a aa                     tax
   315  c11b bda8ca                 lda mode_jmptable+1,x
   316  c11e 48                     pha
   317  c11f bda7ca                 lda mode_jmptable,x
   318  c122 48                     pha
   319  c123 60                 +   rts
   320                          
   321                          dispModeAcc:
   322  c124 a941                   lda #'A'
   323  c126 4cd2ff                 jmp charout
   324                          
   325                          dispModeNone:
   326  c129 60                     rts
   327                          
   328                          dispModeImm:
   329  c12a a923                   lda #'#'
   330  c12c 20d2ff                 jsr charout
   331                          dispModeZP:
   332  c12f a924                   lda #'$'
   333  c131 20d2ff                 jsr charout
   334  c134 a001                   ldy #1
   335  c136 b1fb                   lda (ptr1),y
   336  c138 4c10c2                 jmp disphexbyte
   337                          
   338                          dispModeIndX:
   339  c13b a928                   lda #'('
   340  c13d 20d2ff                 jsr charout
   341  c140 a924                   lda #'$'
   342  c142 20d2ff                 jsr charout
   343  c145 a001                   ldy #1
   344  c147 b1fb                   lda (ptr1),y
   345  c149 2010c2                 jsr disphexbyte
   346  c14c a92c                   lda #','
   347  c14e 20d2ff                 jsr charout
   348  c151 a958                   lda #'X'
   349  c153 20d2ff                 jsr charout
   350  c156 a929                   lda #')'
   351  c158 4cd2ff                 jmp charout
   352                          
   353                          dispModeIndY:
   354  c15b a928                   lda #'('
   355  c15d 20d2ff                 jsr charout
   356  c160 a924                   lda #'$'
   357  c162 20d2ff                 jsr charout
   358  c165 a001                   ldy #1
   359  c167 b1fb                   lda (ptr1),y
   360  c169 2010c2                 jsr disphexbyte
   361  c16c a929                   lda #')'
   362  c16e 20d2ff                 jsr charout
   363  c171 a92c                   lda #','
   364  c173 20d2ff                 jsr charout
   365  c176 a959                   lda #'Y'
   366  c178 4cd2ff                 jmp charout
   367                          
   368                          dispModeRel:
   369  c17b a924                   lda #'$'
   370  c17d 20d2ff                 jsr charout
   371  c180 18                     clc
   372  c181 a5fb                   lda ptr1
   373  c183 6902                   adc #2
   374  c185 8526                   sta ptr3
   375  c187 a5fc                   lda ptr1+1
   376  c189 6900                   adc #0
   377  c18b 8527                   sta ptr3+1
   378  c18d a001                   ldy #1
   379  c18f b1fb                   lda (ptr1),y
   380  c191 1014                   bpl +
   381                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   382  c193 49ff                   eor #$FF ; inverse
   383  c195 18                     clc
   384  c196 6901                   adc #1 ; complete getting absolute value from two's complement
   385  c198 85ff                   sta tmp
   386  c19a 38                     sec
   387  c19b a526                   lda ptr3
   388  c19d e5ff                   sbc tmp
   389  c19f 8526                   sta ptr3
   390  c1a1 b00d                   bcs ++
   391  c1a3 c627                   dec ptr3+1
   392  c1a5 9009                   bcc ++
   393  c1a7 18                 +   clc ; simple case of adding
   394  c1a8 6526                   adc ptr3
   395  c1aa 8526                   sta ptr3
   396  c1ac 9002                   bcc ++
   397  c1ae e627                   inc ptr3+1
   398  c1b0 a526               ++  lda ptr3
   399  c1b2 a627                   ldx ptr3+1
   400  c1b4 4c0ac2                 jmp disphexword
   401                          
   402                          dispModeZPX:
   403  c1b7 202fc1                 jsr dispModeZP
   404  c1ba a92c                   lda #','
   405  c1bc 20d2ff                 jsr charout
   406  c1bf a958                   lda #'X'
   407  c1c1 4cd2ff                 jmp charout
   408                          
   409                          dispModeZPY:
   410  c1c4 202fc1                 jsr dispModeZP
   411  c1c7 a92c                   lda #','
   412  c1c9 20d2ff                 jsr charout
   413  c1cc a959                   lda #'Y'
   414  c1ce 4cd2ff                 jmp charout
   415                          
   416                          dispModeAbs:
   417  c1d1 a924                   lda #'$'
   418  c1d3 20d2ff                 jsr charout
   419  c1d6 a001                   ldy #1
   420  c1d8 b1fb                   lda (ptr1),y
   421  c1da 48                     pha
   422  c1db c8                     iny
   423  c1dc b1fb                   lda (ptr1),y
   424  c1de aa                     tax
   425  c1df 68                     pla
   426  c1e0 4c0ac2                 jmp disphexword
   427                          
   428                          dispModeAbsX:
   429  c1e3 20d1c1                 jsr dispModeAbs
   430  c1e6 a92c                   lda #','
   431  c1e8 20d2ff                 jsr charout
   432  c1eb a958                   lda #'X'
   433  c1ed 4cd2ff                 jmp charout
   434                          
   435                          dispModeAbsY:
   436  c1f0 20d1c1                 jsr dispModeAbs
   437  c1f3 a92c                   lda #','
   438  c1f5 20d2ff                 jsr charout
   439  c1f8 a959                   lda #'Y'
   440  c1fa 4cd2ff                 jmp charout
   441                          
   442                          dispModeInd:
   443  c1fd a928                   lda #'('
   444  c1ff 20d2ff                 jsr charout
   445  c202 20d1c1                 jsr dispModeAbs
   446  c205 a929                   lda #')'
   447  c207 4cd2ff                 jmp charout
   448                          
   449                          disphexword: ; .A low, .X high, 0000..FFFF
   450  c20a 48                     pha
   451  c20b 8a                     txa
   452  c20c 2010c2                 jsr disphexbyte
   453  c20f 68                     pla
   454                              ;fall through to call again
   455                          
   456                          disphexbyte: ; .A 00..FF
   457  c210 48                     pha
   458  c211 4a                     lsr
   459  c212 4a                     lsr
   460  c213 4a                     lsr
   461  c214 4a                     lsr
   462  c215 2019c2                 jsr disphexnybble
   463  c218 68                     pla
   464                              ;fall through to call again
   465                          
   466                          disphexnybble: ; .A 0..F
   467  c219 290f                   and #$0F
   468  c21b 0930                   ora #$30
   469  c21d c93a                   cmp #$3A
   470  c21f 9002                   bcc +
   471  c221 6906                   adc #$06
   472  c223 4cd2ff             +   jmp charout
   473                          
   474                          inputhexword: ; C set if fails
   475  c226 a900                   lda #0
   476  c228 85fb                   sta ptr1
   477  c22a 85fc                   sta ptr1+1
   478                          
   479  c22c a904                   lda #4 ; word is at most 4 nybbles
   480  c22e 85a3                   sta count
   481  c230 2066c2             --  jsr inputhexnybble
   482  c233 b012                   bcs +
   483                          
   484                              ; shift nibble up
   485  c235 0a                     asl
   486  c236 0a                     asl
   487  c237 0a                     asl
   488  c238 0a                     asl
   489                          
   490  c239 a204                   ldx #4 ; 4 bits rotated into word
   491  c23b 2a                 -   rol
   492  c23c 26fb                   rol ptr1
   493  c23e 26fc                   rol ptr1+1
   494  c240 ca                     dex
   495  c241 d0f8                   bne - ; repeat bits
   496                          
   497  c243 c6a3                   dec count
   498  c245 d0e9                   bne -- ; repeat nybbles
   499                          
   500  c247 a5a3               +   lda count
   501  c249 c904                   cmp #4 ; set C if 4, otherwise clear
   502  c24b 60                     rts
   503                          
   504                          inputhexbyte:
   505  c24c 2066c2                 jsr inputhexnybble
   506  c24f b014                   bcs ++
   507  c251 85ff                   sta tmp
   508  c253 2066c2                 jsr inputhexnybble
   509  c256 9005                   bcc +
   510  c258 18                     clc ; allow single digit as byte
   511  c259 a5ff                   lda tmp
   512  c25b 9008                   bcc ++
   513  c25d 06ff               +   asl tmp
   514  c25f 06ff                   asl tmp
   515  c261 06ff                   asl tmp
   516  c263 06ff                   asl tmp
   517  c265 60                 ++  rts
   518                          
   519                          inputhexnybble:
   520  c266 b90002                 lda $0200,y
   521  c269 297f                   and #$7F
   522  c26b 38                     sec
   523  c26c e930                   sbc #$30
   524  c26e 9012                   bcc ++
   525  c270 c90a                   cmp #10
   526  c272 900c                   bcc +
   527  c274 e907                   sbc #7
   528  c276 900a                   bcc ++
   529  c278 c90a                   cmp #10
   530  c27a 9006                   bcc ++
   531  c27c c910                   cmp #16
   532  c27e b002                   bcs ++
   533  c280 c8                 +   iny
   534  c281 60                     rts
   535  c282 38                 ++  sec
   536  c283 60                     rts
   537                          
   538                          strout:
   539  c284 8526                   sta ptr3
   540  c286 8627                   stx ptr3+1
   541                          strout2:    
   542  c288 a000                   ldy #0
   543  c28a b126               -   lda (ptr3),y
   544  c28c f006                   beq +
   545  c28e 20d2ff                 jsr charout
   546  c291 c8                     iny
   547  c292 d0f6                   bne -
   548  c294 98                 +   tya
   549  c295 38                     sec
   550  c296 6526                   adc ptr3
   551  c298 8526                   sta ptr3
   552  c29a 9002                   bcc +
   553  c29c e627                   inc ptr3+1
   554  c29e 60                 +   rts
   555                          
   556                          inputline:
   557                          !ifdef C64SCREEN {
   558  c29f a000                   ldy #0
   559  c2a1 20cfff             -   jsr charin
   560  c2a4 990002                 sta inputbuf,y
   561  c2a7 c8                     iny
   562  c2a8 c90d                   cmp #13
   563  c2aa d0f5                   bne -
   564  c2ac 60                     rts
   565                          } else {
   566                              ldy #0
   567                          --  sty count
   568                          -   jsr getkey
   569                              beq -
   570                              ldy count
   571                          !ifdef MINIMUM {
   572                              cmp #8 ; backspace
   573                          } else {
   574                              cmp #20
   575                          }
   576                              bne +
   577                              cpy #0
   578                              beq -
   579                              dey
   580                          !if NEEDECHO = 1 {    
   581                              jsr charout
   582                          }
   583                              jmp --
   584                          +   cmp #13
   585                              beq +
   586                              cmp #' '
   587                              bcc -
   588                              cmp #128
   589                              bcs -
   590                          +
   591                          !if NEEDECHO = 1 {    
   592                              jsr charout
   593                          }
   594                              sta inputbuf,y
   595                              iny
   596                              cmp #13
   597                              bne --
   598                              rts
   599                          }
   600                          
   601                          parseline:
   602  c2ad c001                   cpy #1
   603  c2af d003                   bne +
   604                          -
   605                          !ifdef C64SCREEN {   
   606  c2b1 4cfac9                 jmp newline
   607                          } else {
   608                              rts
   609                          }
   610  c2b4 88                 +   dey
   611  c2b5 84a4                   sty len
   612                              ; skip whitespace
   613                              ; check for address, put in ptr1
   614                              ; or check for dot, then require address put in ptr2
   615                              ; or check for ?, and optional parameter, execute help
   616                              ; check for whitespace
   617                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   618                              ; check for string, store at start of inputbuf
   619                              ; check for drive number
   620                              ; check for whitespace
   621                              ; check command ":rda?mls", execute command
   622  c2b7 a000                   ldy #0
   623  c2b9 203dc9                 jsr skipspaces
   624  c2bc c4a4                   cpy len
   625  c2be f0f1                   beq -
   626  c2c0 20f3c8                 jsr chkcontinuedis
   627  c2c3 d003                   bne +
   628  c2c5 2017c9                 jsr executedisassemble ; note won't return
   629  c2c8 2005c9             +   jsr chkcontinueasm
   630  c2cb d003                   bne +
   631  c2cd 2027c5                 jsr continueassemble ; note won't return
   632  c2d0 2048c9             +   jsr chkdot
   633  c2d3 d003                   bne +
   634  c2d5 4cbdc3                 jmp executedot
   635  c2d8 2053c9             +   jsr chkhelp
   636  c2db d003                   bne +
   637  c2dd 4cc7c3                 jmp executehelp
   638  c2e0 209dc9             +   jsr chkhexaddr1
   639  c2e3 d003                   bne error
   640  c2e5 4cebc2                 jmp executeaddr1
   641                          error:
   642  c2e8 4c26c9                 jmp reporterr
   643                          
   644                          executeaddr1:
   645  c2eb c4a4                   cpy len
   646  c2ed d003                   bne +
   647  c2ef 4c3ec3                 jmp executedisplay1
   648  c2f2 2048c9             +   jsr chkdot
   649  c2f5 d00f                   bne +
   650  c2f7 c4a4                   cpy len
   651  c2f9 f021                   beq executepagedisplay
   652  c2fb 20bdc9                 jsr chkhexaddr2
   653  c2fe d0e8                   bne error
   654  c300 18                     clc
   655  c301 66a7                   ror flag
   656  c303 4c34c3                 jmp executeaddr12
   657  c306 203dc9             +   jsr skipspaces
   658  c309 205ec9                 jsr chkcolon
   659  c30c d003                   bne +
   660  c30e 4c9bc3                 jmp executemodify
   661  c311 20dec9             +   jsr chkaddr1cmd ; rda, will not return here if cmd
   662  c314 2069c9                 jsr chkfilename
   663  c317 d0cf                   bne error
   664  c319 4cc4c3                 jmp executeloadfilename
   665                          
   666                          executepagedisplay:
   667  c31c a5fb                   lda ptr1
   668  c31e 18                     clc
   669                          !ifdef MINIMUM {
   670                              adc #$5f
   671                          } else {
   672  c31f 69b7                   adc #$b7
   673                          }
   674  c321 85fd                   sta ptr2
   675  c323 a5fc                   lda ptr1+1
   676                          !ifdef MINIMUM {
   677                              adc #$01
   678                          } else {
   679  c325 6900                   adc #$00
   680                          }
   681  c327 85fe                   sta ptr2+1
   682  c329 9006                   bcc +
   683  c32b a9ff                   lda #$ff
   684  c32d 85fd                   sta ptr2
   685  c32f 85fe                   sta ptr2+1
   686  c331 38                 +   sec
   687  c332 66a7                   ror flag
   688                              ; fall through to executeaddr12
   689                          
   690                          executeaddr12:
   691  c334 c4a4                   cpy len
   692  c336 d003                   bne +
   693  c338 4c46c3                 jmp executedisplay12
   694  c33b 4c1fc9             +   jmp reportnotimplemented
   695                          
   696                          executedisplay1:
   697  c33e a5fb                   lda ptr1
   698  c340 85fd                   sta ptr2
   699  c342 a5fc                   lda ptr1+1
   700  c344 85fe                   sta ptr2+1
   701                              ; fall through executedisplay12
   702                          
   703                          executedisplay12:
   704  c346 a9ff                   lda #$ff
   705  c348 85a3                   sta count
   706  c34a e6a3               -   inc count
   707  c34c a5a3                   lda count
   708                          !ifdef MINIMUM {    
   709                              and #$0f
   710                          } else {
   711  c34e 2907                   and #$07
   712                          }
   713  c350 d016                   bne +
   714  c352 a90d                   lda #13
   715  c354 20d2ff                 jsr charout
   716  c357 a5fb                   lda ptr1
   717  c359 a6fc                   ldx ptr1+1
   718  c35b 200ac2                 jsr disphexword
   719  c35e a93a                   lda #':'
   720  c360 20d2ff                 jsr charout
   721  c363 a920                   lda #' '
   722  c365 20d2ff                 jsr charout
   723  c368 a000               +   ldy #0
   724  c36a b1fb                   lda (ptr1),y
   725  c36c 2010c2                 jsr disphexbyte
   726  c36f a920                   lda #' '
   727  c371 20d2ff                 jsr charout
   728  c374 e6fb                   inc ptr1
   729  c376 d004                   bne +
   730  c378 e6fc                   inc ptr1+1
   731  c37a f01c                   beq ++
   732  c37c 2063c0             +   jsr compareptrs
   733  c37f 90c9                   bcc -
   734  c381 f0c7                   beq -
   735  c383 24a7                   bit flag
   736  c385 1011                   bpl ++
   737                          !ifdef C64SCREEN {
   738  c387 20fac9                 jsr newline
   739  c38a a5fb                   lda ptr1
   740  c38c a6fc                   ldx ptr1+1
   741  c38e 200ac2                 jsr disphexword
   742  c391 a9a9                   lda #<page_displaymemory
   743  c393 a2cf                   ldx #>page_displaymemory
   744  c395 4c84c2                 jmp strout
   745                          }
   746  c398 4cfac9             ++  jmp newline
   747                          
   748                          executemodify:
   749  c39b 203dc9                 jsr skipspaces
   750  c39e c4a4                   cpy len
   751  c3a0 f018                   beq ++
   752  c3a2 2083c9                 jsr chkhexbyteofsequence
   753  c3a5 f003                   beq +
   754  c3a7 4ce8c2                 jmp error
   755  c3aa 84ff               +   sty tmp
   756  c3ac a000                   ldy #0
   757  c3ae 91fb                   sta (ptr1),y
   758  c3b0 e6fb                   inc ptr1
   759  c3b2 d002                   bne +
   760  c3b4 e6fc                   inc ptr1+1
   761  c3b6 a4ff               +   ldy tmp
   762  c3b8 d0e1                   bne executemodify
   763  c3ba 4cfac9             ++  jmp newline
   764                          
   765                          executedot:
   766  c3bd c4a4                   cpy len
   767  c3bf d003                   bne +
   768  c3c1 4c1cc3                 jmp executepagedisplay
   769                          
   770                          executeloadfilename:
   771                          executeaddr1cmd:
   772  c3c4 4c1fc9             +   jmp reportnotimplemented
   773                          
   774                          executehelp:
   775                          !ifdef C64SCREEN {
   776  c3c7 20fac9                 jsr newline
   777                          }
   778  c3ca c4a4                   cpy len
   779  c3cc d003                   bne +
   780  c3ce 4cefc3                 jmp displayhelp
   781  c3d1 203dc9             +   jsr skipspaces
   782  c3d4 2004c4                 jsr chkhelpinstructions
   783  c3d7 d003                   bne +
   784  c3d9 4c33c4                 jmp displayinstructions
   785  c3dc 2011c4             +   jsr chkhelpmodes
   786  c3df d003                   bne +
   787  c3e1 4c4ac4                 jmp displaymodes
   788  c3e4 2070c8             +   jsr chkinstruction
   789  c3e7 d003                   bne +
   790  c3e9 4cfac4                 jmp executehelpinstruction
   791  c3ec 4c1fc9             +   jmp reportnotimplemented
   792                          
   793                          displayhelp:
   794  c3ef a963                   lda #<generalhelp
   795  c3f1 a2ce                   ldx #>generalhelp
   796  c3f3 2084c2                 jsr strout
   797  c3f6 a9d2                   lda #<generalhelp2
   798  c3f8 a2ce                   ldx #>generalhelp2
   799  c3fa 2084c2                 jsr strout
   800  c3fd a9e2                   lda #<firsthelp
   801  c3ff a2cd                   ldx #>firsthelp
   802  c401 4c84c2                 jmp strout
   803                          
   804                          chkhelpinstructions:
   805  c404 b90002                 lda inputbuf, y
   806  c407 c941                   cmp #'A'
   807  c409 d005                   bne +
   808  c40b b90102                 lda inputbuf+1, y
   809  c40e c90d                   cmp #13
   810                              ; no need to increment y if found, done parsing line
   811  c410 60                 +   rts
   812                          
   813                          chkhelpmodes:
   814  c411 a99d                   lda #<modes_keyword
   815  c413 a2cf                   ldx #>modes_keyword
   816                              ; fall through to chkkeyword
   817                          
   818                          chkkeyword:
   819  c415 84a3                   sty count
   820  c417 8526                   sta ptr3
   821  c419 8627                   stx ptr3+1
   822  c41b a6a3                   ldx count
   823  c41d a000                   ldy #0
   824  c41f bd0002             -   lda inputbuf, x
   825  c422 d126                   cmp (ptr3),y
   826  c424 d008                   bne +
   827  c426 e8                     inx
   828  c427 c8                     iny
   829  c428 e4a4                   cpx len
   830  c42a d0f3                   bne -
   831  c42c b126                   lda (ptr3),y ; matched if end of string, will set Z
   832  c42e 08                 +   php ; save Z
   833  c42f a4a3                   ldy count
   834  c431 28                     plp ; restore Z
   835  c432 60                     rts
   836                          
   837                          displayinstructions:
   838  c433 a038                   ldy #ninst
   839  c435 a200                   ldx #0
   840  c437 8a                 -   txa
   841  c438 48                     pha
   842  c439 20aec0                 jsr dispinst
   843  c43c a920                   lda #' '
   844  c43e 20d2ff                 jsr charout
   845  c441 68                     pla
   846  c442 aa                     tax
   847  c443 e8                     inx
   848  c444 88                     dey
   849  c445 d0f0                   bne -
   850  c447 4cfac9                 jmp newline
   851                          
   852                          displaymodes:
   853  c44a 38                     sec
   854  c44b a900                   lda #0
   855  c44d 48                 -   pha
   856  c44e aa                     tax
   857  c44f bdc1ca                 lda mode_sorted, x
   858  c452 205fc4                 jsr dispmode
   859  c455 68                     pla
   860  c456 18                     clc
   861  c457 6901                   adc #1
   862  c459 c90d                   cmp #nmodes
   863  c45b 90f0                   bcc -
   864  c45d 18                     clc
   865  c45e 60                     rts
   866                          
   867                          dispmode:
   868  c45f c90d                   cmp #nmodes
   869  c461 b008                   bcs +
   870  c463 8524                   sta mode
   871  c465 20a7c4                 jsr disp_modename_and_example
   872  c468 4c6cc4                 jmp dispmodeinstructions
   873  c46b 60                 +   rts
   874                          
   875                          dispmodeinstructions:
   876                          !ifdef C64SCREEN {
   877                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
   878  c46c a524                   lda mode
   879  c46e c903                   cmp #3
   880  c470 d005                   bne +
   881  c472 a920                   lda #' '
   882  c474 4cd2ff                 jmp charout
   883                          }
   884                              ; display instructions with this mode
   885  c477 a000               +   ldy #0
   886  c479 8423               --  sty inidx
   887  c47b a200                   ldx #0
   888  c47d 86ff               -   stx tmp
   889  c47f a523                   lda inidx
   890  c481 dd56cc                 cmp instidx, x
   891  c484 d014                   bne ++
   892  c486 bdedcc                 lda modeidx, x
   893  c489 c524                   cmp mode
   894  c48b d00d                   bne ++
   895  c48d a920                   lda #' '
   896  c48f 20d2ff                 jsr charout
   897  c492 bd56cc                 lda instidx, x
   898  c495 20aec0                 jsr dispinst
   899  c498 a6ff                   ldx tmp
   900  c49a e8                 ++  inx
   901  c49b e097                   cpx #nopcodes
   902  c49d 90de                   bcc -
   903  c49f c8                     iny
   904  c4a0 c038                   cpy #ninst
   905  c4a2 d0d5                   bne --
   906  c4a4 4cfac9                 jmp newline
   907                          
   908                          disp_modename_and_example:
   909  c4a7 0a                     asl
   910  c4a8 aa                     tax
   911  c4a9 bda5cb                 lda modes, x
   912  c4ac 48                     pha
   913  c4ad bda6cb                 lda modes+1, x
   914  c4b0 aa                     tax
   915                          !ifdef C64SCREEN {
   916  c4b1 a912                   lda #18
   917  c4b3 20d2ff                 jsr charout
   918                          }    
   919  c4b6 68                     pla
   920  c4b7 2084c2                 jsr strout
   921  c4ba a920                   lda #' '
   922  c4bc 20d2ff                 jsr charout
   923  c4bf 2088c2                 jsr strout2
   924                          !ifdef C64SCREEN {    
   925  c4c2 a992                   lda #146
   926  c4c4 20d2ff                 jsr charout
   927                          }   
   928  c4c7 60                     rts
   929                          
   930                          disp_modename_instruction_example:
   931  c4c8 0a                     asl
   932  c4c9 aa                     tax
   933  c4ca bda5cb                 lda modes, x
   934  c4cd 48                     pha
   935  c4ce bda6cb                 lda modes+1, x
   936  c4d1 aa                     tax
   937  c4d2 68                     pla
   938  c4d3 2084c2                 jsr strout ; mode name
   939  c4d6 a526                   lda ptr3
   940  c4d8 48                     pha
   941  c4d9 a527                   lda ptr3+1
   942  c4db 48                     pha
   943  c4dc a93a                   lda #':'
   944  c4de 20d2ff                 jsr charout
   945  c4e1 a920                   lda #' '
   946  c4e3 20d2ff                 jsr charout
   947  c4e6 a523                   lda inidx
   948  c4e8 20aec0                 jsr dispinst ; instruction
   949  c4eb a920                   lda #' '
   950  c4ed 20d2ff                 jsr charout
   951  c4f0 68                     pla
   952  c4f1 8527                   sta ptr3+1
   953  c4f3 68                     pla
   954  c4f4 8526                   sta ptr3
   955  c4f6 2088c2                 jsr strout2 ; example
   956  c4f9 60                     rts
   957                          
   958                          
   959                          executehelpinstruction:
   960  c4fa a000                   ldy #0
   961  c4fc 8422               -   sty opidx
   962  c4fe b956cc                 lda instidx, y
   963  c501 c523                   cmp inidx
   964  c503 d01a                   bne +
   965  c505 b9edcc                 lda modeidx, y
   966  c508 8524                   sta mode
   967  c50a a622                   ldx opidx
   968  c50c bdbfcb                 lda opcodes, x
   969  c50f 2010c2                 jsr disphexbyte
   970  c512 a920                   lda #' '
   971  c514 20d2ff                 jsr charout
   972  c517 a524                   lda mode
   973  c519 20c8c4                 jsr disp_modename_instruction_example
   974  c51c 20fac9                 jsr newline
   975  c51f a422               +   ldy opidx
   976  c521 c8                     iny
   977  c522 c097                   cpy #nopcodes
   978  c524 90d6                   bcc -
   979  c526 60                     rts
   980                          
   981                          continueassemble:
   982                          !ifdef C64SCREEN {   
   983  c527 a914                   lda #20
   984  c529 20d2ff                 jsr charout
   985  c52c 20d2ff                 jsr charout
   986  c52f a5fb                   lda ptr1
   987  c531 a6fc                   ldx ptr1+1
   988  c533 200ac2                 jsr disphexword
   989  c536 a920                   lda #' '
   990  c538 20d2ff                 jsr charout
   991  c53b 20d2ff                 jsr charout
   992  c53e 20d2ff                 jsr charout
   993                          }
   994                              ; continue...
   995                          
   996                          executeassemble:
   997  c541 68                     pla ; remove low byte return address
   998  c542 68                     pla ; return high byte return address
   999                          !ifdef C64SCREEN {    
  1000  c543 a914                   lda #20
  1001  c545 20d2ff                 jsr charout
  1002  c548 20d2ff                 jsr charout
  1003                          } else {
  1004                              lda ptr1
  1005                              ldx ptr1+1
  1006                              jsr disphexword
  1007                              lda #' '
  1008                              jsr charout
  1009                          }
  1010                              ; save current pointer
  1011  c54b a5fb               --  lda ptr1
  1012  c54d a6fc                   ldx ptr1+1
  1013  c54f 8526                   sta ptr3
  1014  c551 8627                   stx ptr3+1
  1015  c553 209fc2                 jsr inputline
  1016  c556 c001                   cpy #1
  1017  c558 f040                   beq ++
  1018  c55a 88                     dey
  1019  c55b 84a4                   sty len
  1020  c55d a000                   ldy #0
  1021  c55f 203dc9                 jsr skipspaces
  1022  c562 c4a4                   cpy len
  1023  c564 f034                   beq ++
  1024                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1025                              ;jsr skipspaces
  1026  c566 2070c8                 jsr chkinstruction
  1027  c569 f003                   beq +
  1028  c56b 4ce8c2             -   jmp error    
  1029  c56e 20c4c5             +   jsr chkaddressing
  1030  c571 d0f8                   bne -
  1031  c573 20a1c8                 jsr find_inst_and_mode
  1032  c576 d0f3                   bne -
  1033  c578 209dc5                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1034  c57b 18                     clc
  1035  c57c a525                   lda size
  1036  c57e 6526                   adc ptr3
  1037  c580 85fb                   sta ptr1
  1038  c582 a527                   lda ptr3+1
  1039  c584 6900                   adc #0
  1040  c586 85fc                   sta ptr1+1
  1041                          !ifdef C64SCREEN {    
  1042  c588 20fac9                 jsr newline
  1043                          }
  1044  c58b a5fb                   lda ptr1
  1045  c58d a6fc                   ldx ptr1+1
  1046  c58f 200ac2                 jsr disphexword
  1047  c592 a920                   lda #' '
  1048  c594 20d2ff                 jsr charout
  1049  c597 4c4bc5                 jmp --
  1050                          ++  
  1051                          !ifdef C64SCREEN {
  1052  c59a 4cfac9                 jmp newline
  1053                          } else {
  1054                              rts
  1055                          }
  1056                          
  1057                          store_assembly:
  1058  c59d a622                   ldx opidx
  1059  c59f bdbfcb                 lda opcodes, x
  1060  c5a2 a000                   ldy #0
  1061  c5a4 9126                   sta (ptr3), y
  1062  c5a6 c8                     iny
  1063  c5a7 a625                   ldx size
  1064  c5a9 e001                   cpx #1
  1065  c5ab f016                   beq ++
  1066  c5ad e002               +   cpx #2
  1067  c5af d005                   bne +
  1068  c5b1 a5a6                   lda tmp2
  1069  c5b3 9126                   sta (ptr3), y
  1070  c5b5 60                     rts
  1071  c5b6 e003               +   cpx #3
  1072  c5b8 d009                   bne ++
  1073  c5ba a5fb                   lda ptr1
  1074  c5bc 9126                   sta (ptr3), y
  1075  c5be c8                     iny
  1076  c5bf a5fc                   lda ptr1+1
  1077  c5c1 9126                   sta (ptr3), y
  1078  c5c3 60                 ++  rts
  1079                          
  1080                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1081  c5c4 203dc9                 jsr skipspaces
  1082  c5c7 a200                   ldx #0
  1083  c5c9 8624                   stx mode
  1084  c5cb 2026c6                 jsr chkaccumulator
  1085  c5ce f051                   beq +
  1086  c5d0 e624                   inc mode
  1087  c5d2 c4a4                   cpy len ; chknone
  1088  c5d4 f04b                   beq +
  1089  c5d6 e624                   inc mode
  1090  c5d8 204ac6                 jsr chkimmediate
  1091  c5db f044                   beq +
  1092  c5dd e624                   inc mode
  1093  c5df 206ec6                 jsr chkindirectx
  1094  c5e2 f03d                   beq +
  1095  c5e4 e624                   inc mode
  1096  c5e6 20b3c6                 jsr chkindirecty
  1097  c5e9 f036                   beq +
  1098  c5eb e624                   inc mode
  1099  c5ed 20f8c6                 jsr chkrelative
  1100  c5f0 f02f                   beq +
  1101  c5f2 e624                   inc mode
  1102  c5f4 2053c7                 jsr chkzeropage
  1103  c5f7 f028                   beq +
  1104  c5f9 e624                   inc mode
  1105  c5fb 206cc7                 jsr chkzeropagex
  1106  c5fe f021                   beq +
  1107  c600 e624                   inc mode
  1108  c602 209bc7                 jsr chkzeropagey
  1109  c605 f01a                   beq +
  1110  c607 e624                   inc mode
  1111  c609 20cac7                 jsr chkabsolute
  1112  c60c f013                   beq +
  1113  c60e e624                   inc mode
  1114  c610 20e3c7                 jsr chkabsolutex
  1115  c613 f00c                   beq +
  1116  c615 e624                   inc mode
  1117  c617 2012c8                 jsr chkabsolutey
  1118  c61a f005                   beq +
  1119  c61c e624                   inc mode
  1120  c61e 2041c8                 jsr chkindirect
  1121  c621 08                 +   php ; save Z
  1122  c622 a524                   lda mode
  1123  c624 28                     plp ; restore Z 
  1124  c625 60                     rts
  1125                          
  1126                          chkaccumulator:
  1127  c626 c4a4                   cpy len
  1128  c628 d013                   bne +
  1129  c62a a523                   lda inidx
  1130  c62c c902                   cmp #2 ; ASL
  1131  c62e f019                   beq ++
  1132  c630 c920                   cmp #32 ; LSR
  1133  c632 f015                   beq ++
  1134  c634 c927                   cmp #39 ; ROL
  1135  c636 f011                   beq ++
  1136  c638 c928                   cmp #40 ; ROR
  1137  c63a 4c49c6                 jmp ++
  1138  c63d b90002             +   lda inputbuf, y
  1139  c640 c941                   cmp #'A'
  1140  c642 d005                   bne ++
  1141  c644 b90102                 lda inputbuf+1,y
  1142  c647 c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1143  c649 60                 ++  rts
  1144                          
  1145                          chkimmediate:
  1146  c64a 84a5                   sty savepos
  1147  c64c b90002                 lda inputbuf, y
  1148  c64f c923                   cmp #'#'
  1149  c651 d016                   bne ++
  1150  c653 c8                     iny
  1151  c654 203dc9                 jsr skipspaces
  1152  c657 b90002                 lda inputbuf, y
  1153  c65a c924                   cmp #'$'
  1154  c65c d001                   bne +
  1155  c65e c8                     iny
  1156  c65f 20a6c9             +   jsr chkhexbyte
  1157  c662 d005                   bne ++
  1158  c664 c4a4               +   cpy len
  1159  c666 d001                   bne ++
  1160  c668 60                     rts
  1161  c669 a4a5               ++  ldy savepos
  1162  c66b a201                   ldx #1 ; Z false (NE)
  1163  c66d 60                     rts
  1164                          
  1165                          chkindirectx:
  1166  c66e 84a5                   sty savepos
  1167  c670 b90002                 lda inputbuf, y
  1168  c673 c928                   cmp #'('
  1169  c675 d037                   bne ++
  1170  c677 c8                     iny
  1171  c678 203dc9                 jsr skipspaces
  1172  c67b b90002                 lda inputbuf, y
  1173  c67e c924                   cmp #'$'
  1174  c680 d001                   bne +
  1175  c682 c8                     iny
  1176  c683 20a6c9             +   jsr chkhexbyte
  1177  c686 d026                   bne ++
  1178  c688 203dc9                 jsr skipspaces
  1179  c68b b90002                 lda inputbuf, y
  1180  c68e c92c                   cmp #','
  1181  c690 d01c                   bne ++
  1182  c692 c8                     iny
  1183  c693 203dc9                 jsr skipspaces
  1184  c696 b90002                 lda inputbuf, y
  1185  c699 c958                   cmp #'X'
  1186  c69b d011                   bne ++
  1187  c69d c8                     iny
  1188  c69e 203dc9                 jsr skipspaces
  1189  c6a1 b90002                 lda inputbuf, y
  1190  c6a4 c929                   cmp #')'
  1191  c6a6 d006                   bne ++
  1192  c6a8 c8                     iny
  1193  c6a9 c4a4                   cpy len
  1194  c6ab d001                   bne ++
  1195  c6ad 60                     rts
  1196  c6ae a4a5               ++  ldy savepos
  1197  c6b0 a201                   ldx #1 ; Z false (NE)
  1198  c6b2 60                     rts
  1199                          
  1200                          chkindirecty:
  1201  c6b3 84a5                   sty savepos
  1202  c6b5 b90002                 lda inputbuf, y
  1203  c6b8 c928                   cmp #'('
  1204  c6ba d037                   bne ++
  1205  c6bc c8                     iny
  1206  c6bd 203dc9                 jsr skipspaces
  1207  c6c0 b90002                 lda inputbuf, y
  1208  c6c3 c924                   cmp #'$'
  1209  c6c5 d001                   bne +
  1210  c6c7 c8                     iny
  1211  c6c8 20a6c9             +   jsr chkhexbyte
  1212  c6cb d026                   bne ++
  1213  c6cd 203dc9                 jsr skipspaces
  1214  c6d0 b90002                 lda inputbuf, y
  1215  c6d3 c929                   cmp #')'
  1216  c6d5 d01c                   bne ++
  1217  c6d7 c8                     iny
  1218  c6d8 203dc9                 jsr skipspaces
  1219  c6db b90002                 lda inputbuf, y
  1220  c6de c92c                   cmp #','
  1221  c6e0 d011                   bne ++
  1222  c6e2 c8                     iny
  1223  c6e3 203dc9                 jsr skipspaces
  1224  c6e6 b90002                 lda inputbuf, y
  1225  c6e9 c959                   cmp #'Y'
  1226  c6eb d006                   bne ++
  1227  c6ed c8                     iny
  1228  c6ee c4a4                   cpy len
  1229  c6f0 d001                   bne ++
  1230  c6f2 60                     rts
  1231  c6f3 a4a5               ++  ldy savepos
  1232  c6f5 a201                   ldx #1 ; Z false (NE)
  1233  c6f7 60                     rts
  1234                          
  1235                          chkrelative:
  1236  c6f8 84a5                   sty savepos
  1237  c6fa a623                   ldx inidx
  1238  c6fc e006                   cpx #6 ; BIT
  1239  c6fe f01e                   beq ++
  1240  c700 bdffc9                 lda inst0, x
  1241  c703 c942                   cmp #'B'
  1242  c705 d017                   bne ++
  1243  c707 b90002                 lda inputbuf, y
  1244  c70a c924                   cmp #'$'
  1245  c70c d001                   bne +
  1246  c70e c8                     iny
  1247  c70f 209dc9             +   jsr chkhexword
  1248  c712 d00a                   bne ++
  1249  c714 c4a4                   cpy len
  1250  c716 d006                   bne ++
  1251  c718 2023c7                 jsr computeoffset
  1252  c71b d001                   bne ++
  1253  c71d 60                     rts ; Z true (EQ)
  1254  c71e a4a5               ++  ldy savepos
  1255  c720 a201                   ldx #1 ; Z false (NE)
  1256  c722 60                     rts
  1257                          
  1258                          computeoffset:
  1259                          ;   compute next address
  1260  c723 a527                   lda ptr3+1
  1261  c725 85fe                   sta ptr2+1
  1262  c727 a526                   lda ptr3
  1263  c729 18                     clc
  1264  c72a 6902                   adc #2
  1265  c72c 85fd                   sta ptr2
  1266  c72e 9002                   bcc +
  1267  c730 e6fe                   inc ptr2+1
  1268                          +  ; subtract argument
  1269  c732 38                     sec
  1270  c733 a5fb                   lda ptr1
  1271  c735 e5fd                   sbc ptr2
  1272  c737 85a6                   sta tmp2
  1273  c739 a5fc                   lda ptr1+1
  1274  c73b e5fe                   sbc ptr2+1
  1275  c73d f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1276  c73f c9ff                   cmp #$FF
  1277  c741 d00d                   bne failedoffset ; 0 and FF were only options so fail
  1278                              ; chkeck negative offset
  1279  c743 a5a6                   lda tmp2
  1280  c745 3006                   bmi successoffset ; branch if signed byte is negative
  1281  c747 1007                   bpl failedoffset ; otherwise fail
  1282                          chkoffsetto127:
  1283  c749 a5a6                   lda tmp2
  1284  c74b 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1285                          successoffset:    
  1286  c74d a900                   lda #0 ; Z true (EQ)
  1287  c74f 60                     rts
  1288                          failedoffset:
  1289  c750 a901                   lda #1 ; Z false (NE)
  1290  c752 60                     rts
  1291                          
  1292                          chkzeropage:
  1293  c753 84a5                   sty savepos
  1294  c755 b90002                 lda inputbuf, y
  1295  c758 c924                   cmp #'$'
  1296  c75a d001                   bne +
  1297  c75c c8                     iny
  1298  c75d 20a6c9             +   jsr chkhexbyte
  1299  c760 d005                   bne ++
  1300  c762 c4a4                   cpy len
  1301  c764 d001                   bne ++
  1302  c766 60                     rts ; Z true (EQ)
  1303  c767 a4a5               ++  ldy savepos
  1304  c769 a201                   ldx #1 ; Z false (NE)
  1305  c76b 60                     rts
  1306                          
  1307                          chkzeropagex:
  1308  c76c 84a5                   sty savepos
  1309  c76e b90002                 lda inputbuf, y
  1310  c771 c924                   cmp #'$'
  1311  c773 d001                   bne +
  1312  c775 c8                     iny
  1313  c776 20a6c9             +   jsr chkhexbyte
  1314  c779 d01b                   bne ++
  1315  c77b 203dc9                 jsr skipspaces
  1316  c77e b90002                 lda inputbuf, y
  1317  c781 c92c                   cmp #','
  1318  c783 d011                   bne ++
  1319  c785 c8                     iny
  1320  c786 203dc9                 jsr skipspaces
  1321  c789 b90002                 lda inputbuf, y
  1322  c78c c958                   cmp #'X'
  1323  c78e d006                   bne ++
  1324  c790 c8                     iny
  1325  c791 c4a4                   cpy len
  1326  c793 d001                   bne ++
  1327  c795 60                     rts ; Z true (EQ)
  1328  c796 a4a5               ++  ldy savepos
  1329  c798 a201                   ldx #1 ; Z false (NE)
  1330  c79a 60                     rts
  1331                          
  1332                          chkzeropagey:
  1333  c79b 84a5                   sty savepos
  1334  c79d b90002                 lda inputbuf, y
  1335  c7a0 c924                   cmp #'$'
  1336  c7a2 d001                   bne +
  1337  c7a4 c8                     iny
  1338  c7a5 20a6c9             +   jsr chkhexbyte
  1339  c7a8 d01b                   bne ++
  1340  c7aa 203dc9                 jsr skipspaces
  1341  c7ad b90002                 lda inputbuf, y
  1342  c7b0 c92c                   cmp #','
  1343  c7b2 d011                   bne ++
  1344  c7b4 c8                     iny
  1345  c7b5 203dc9                 jsr skipspaces
  1346  c7b8 b90002                 lda inputbuf, y
  1347  c7bb c959                   cmp #'Y'
  1348  c7bd d006                   bne ++
  1349  c7bf c8                     iny
  1350  c7c0 c4a4                   cpy len
  1351  c7c2 d001                   bne ++
  1352  c7c4 60                     rts ; Z true (EQ)
  1353  c7c5 a4a5               ++  ldy savepos
  1354  c7c7 a201                   ldx #1 ; Z false (NE)
  1355  c7c9 60                     rts
  1356                          
  1357                          chkabsolute:
  1358  c7ca 84a5                   sty savepos
  1359  c7cc b90002                 lda inputbuf, y
  1360  c7cf c924                   cmp #'$'
  1361  c7d1 d001                   bne +
  1362  c7d3 c8                     iny
  1363  c7d4 209dc9             +   jsr chkhexword
  1364  c7d7 d005                   bne ++
  1365  c7d9 c4a4                   cpy len
  1366  c7db d001                   bne ++
  1367  c7dd 60                     rts ; Z true (EQ)
  1368  c7de a4a5               ++  ldy savepos
  1369  c7e0 a201                   ldx #1 ; Z false (NE)
  1370  c7e2 60                     rts
  1371                          
  1372                          chkabsolutex:
  1373  c7e3 84a5                   sty savepos
  1374  c7e5 b90002                 lda inputbuf, y
  1375  c7e8 c924                   cmp #'$'
  1376  c7ea d001                   bne +
  1377  c7ec c8                     iny
  1378  c7ed 209dc9             +   jsr chkhexword
  1379  c7f0 d01b                   bne ++
  1380  c7f2 203dc9                 jsr skipspaces
  1381  c7f5 b90002                 lda inputbuf, y
  1382  c7f8 c92c                   cmp #','
  1383  c7fa d011                   bne ++
  1384  c7fc c8                     iny
  1385  c7fd 203dc9                 jsr skipspaces
  1386  c800 b90002                 lda inputbuf, y
  1387  c803 c958                   cmp #'X'
  1388  c805 d006                   bne ++
  1389  c807 c8                     iny
  1390  c808 c4a4                   cpy len
  1391  c80a d001                   bne ++
  1392  c80c 60                     rts ; Z true (EQ)
  1393  c80d a4a5               ++  ldy savepos
  1394  c80f a201                   ldx #1 ; Z false (NE)
  1395  c811 60                     rts
  1396                          
  1397                          chkabsolutey:
  1398  c812 84a5                   sty savepos
  1399  c814 b90002                 lda inputbuf, y
  1400  c817 c924                   cmp #'$'
  1401  c819 d001                   bne +
  1402  c81b c8                     iny
  1403  c81c 209dc9             +   jsr chkhexword
  1404  c81f d01b                   bne ++
  1405  c821 203dc9                 jsr skipspaces
  1406  c824 b90002                 lda inputbuf, y
  1407  c827 c92c                   cmp #','
  1408  c829 d011                   bne ++
  1409  c82b c8                     iny
  1410  c82c 203dc9                 jsr skipspaces
  1411  c82f b90002                 lda inputbuf, y
  1412  c832 c959                   cmp #'Y'
  1413  c834 d006                   bne ++
  1414  c836 c8                     iny
  1415  c837 c4a4                   cpy len
  1416  c839 d001                   bne ++
  1417  c83b 60                     rts ; Z true (EQ)
  1418  c83c a4a5               ++  ldy savepos
  1419  c83e a201                   ldx #1 ; Z false (NE)
  1420  c840 60                     rts
  1421                          
  1422                          chkindirect:
  1423  c841 84a5                   sty savepos
  1424  c843 b90002                 lda inputbuf, y
  1425  c846 c928                   cmp #'('
  1426  c848 d021                   bne ++
  1427  c84a c8                     iny
  1428  c84b 203dc9                 jsr skipspaces
  1429  c84e b90002                 lda inputbuf, y
  1430  c851 c924                   cmp #'$'
  1431  c853 d001                   bne +
  1432  c855 c8                     iny
  1433  c856 209dc9             +   jsr chkhexword
  1434  c859 d010                   bne ++
  1435  c85b 203dc9                 jsr skipspaces
  1436  c85e b90002                 lda inputbuf, y
  1437  c861 c929                   cmp #')'
  1438  c863 d006                   bne ++
  1439  c865 c8                     iny
  1440  c866 c4a4                   cpy len
  1441  c868 d001                   bne ++
  1442  c86a 60                     rts ; Z true (EQ)
  1443  c86b a4a5               ++  ldy savepos
  1444  c86d a201                   ldx #1 ; Z false (NE)
  1445  c86f 60                     rts
  1446                          
  1447                          chkinstruction:
  1448  c870 c4a4                   cpy len
  1449  c872 f02a                   beq ++
  1450  c874 84ff                   sty tmp
  1451  c876 a237                   ldx #(ninst-1)
  1452  c878 b90002             -   lda inputbuf,y
  1453  c87b ddffc9                 cmp inst0,x
  1454  c87e d019                   bne +
  1455  c880 c8                     iny
  1456  c881 b90002                 lda inputbuf,y
  1457  c884 dd37ca                 cmp inst1,x
  1458  c887 d010                   bne +
  1459  c889 c8                     iny
  1460  c88a b90002                 lda inputbuf,y
  1461  c88d dd6fca                 cmp inst2,x
  1462  c890 d007                   bne +
  1463  c892 c8                     iny
  1464  c893 8a                     txa
  1465  c894 8523                   sta inidx
  1466  c896 a200                   ldx #0
  1467  c898 60                     rts
  1468  c899 a4ff               +   ldy tmp
  1469  c89b ca                     dex
  1470  c89c 10da                   bpl -
  1471  c89e a201               ++  ldx #1 ; Z false (NE)
  1472  c8a0 60                     rts
  1473                          
  1474                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1475                              ; and allows mode promotion
  1476  c8a1 20bac8                 jsr find_inst_and_mode2
  1477  c8a4 f013                   beq ++
  1478  c8a6 a524                   lda mode
  1479  c8a8 c906                   cmp #6
  1480  c8aa 900d                   bcc ++
  1481  c8ac c90a                   cmp #10
  1482  c8ae b007                   bcs +
  1483  c8b0 6903                   adc #3
  1484  c8b2 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1485  c8b4 4cbac8                 jmp find_inst_and_mode2 ; try again once
  1486  c8b7 a201               +   ldx #1 ; Z false (NE)
  1487  c8b9 60                 ++  rts
  1488                          
  1489                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1490  c8ba a296                   ldx #nopcodes-1
  1491  c8bc bd56cc             -   lda instidx, x
  1492  c8bf bcedcc                 ldy modeidx, x
  1493  c8c2 c523                   cmp inidx
  1494  c8c4 d00c                   bne +
  1495  c8c6 c424                   cpy mode
  1496  c8c8 d008                   bne +
  1497  c8ca 8622                   stx opidx
  1498  c8cc 2097c0                 jsr getsize
  1499  c8cf a200                   ldx #0 ; Z true (EQ)
  1500  c8d1 60                     rts
  1501  c8d2 ca                 +   dex
  1502  c8d3 e0ff                   cpx #$ff
  1503  c8d5 d0e5                   bne -
  1504  c8d7 a201                   ldx #1 ; Z false (NE)
  1505  c8d9 60                     rts
  1506                          
  1507                          executerun:
  1508  c8da 68                     pla ; remove low byte return address
  1509  c8db 68                     pla ; return high byte return address
  1510  c8dc 68                     pla ; again, we're really not returning
  1511  c8dd 68                     pla ; again, we're really not returning
  1512  c8de 20fac9                 jsr newline
  1513  c8e1 38                     sec
  1514  c8e2 a5fb                   lda ptr1
  1515  c8e4 e901                   sbc #1
  1516  c8e6 85fb                   sta ptr1
  1517  c8e8 b002                   bcs +
  1518  c8ea c6fc                   dec ptr1+1
  1519  c8ec a5fc               +   lda ptr1+1
  1520  c8ee 48                     pha
  1521  c8ef a5fb                   lda ptr1
  1522  c8f1 48                     pha
  1523  c8f2 60                     rts
  1524                          
  1525                          chkcontinuedis:
  1526  c8f3 b90002                 lda inputbuf,y
  1527  c8f6 c944                   cmp #'D'
  1528  c8f8 d00a                   bne +
  1529  c8fa b90102                 lda inputbuf+1,y
  1530  c8fd c90d                   cmp #13
  1531  c8ff d003                   bne +
  1532  c901 c8                     iny
  1533  c902 a200                   ldx #0 ; restore Z set
  1534  c904 60                 +   rts
  1535                          
  1536                          chkcontinueasm:
  1537  c905 b90002                 lda inputbuf,y
  1538  c908 c941                   cmp #'A'
  1539  c90a d00a                   bne +
  1540  c90c b90102                 lda inputbuf+1,y
  1541  c90f c90d                   cmp #13
  1542  c911 d003                   bne +
  1543  c913 c8                     iny
  1544  c914 a200                   ldx #0 ; restore Z set
  1545  c916 60                 +   rts
  1546                          
  1547                          executedisassemble:
  1548  c917 68                     pla ; remove low byte return address
  1549  c918 68                     pla ; return high byte return address
  1550  c919 20fac9                 jsr newline
  1551  c91c 4c34c0                 jmp disassemble
  1552                          
  1553                          reportnotimplemented:
  1554  c91f a952                   lda #<notimplemented
  1555  c921 a2ce                   ldx #>notimplemented
  1556  c923 4c84c2                 jmp strout
  1557                          
  1558                          reporterr:
  1559  c926 c000                   cpy #0
  1560  c928 f008                   beq +
  1561  c92a a920                   lda #' '
  1562  c92c 20d2ff             -   jsr charout
  1563  c92f 88                     dey
  1564  c930 d0fa                   bne -
  1565  c932 a93f               +   lda #'?'
  1566  c934 20d2ff                 jsr charout
  1567  c937 a90d                   lda #13
  1568  c939 20d2ff                 jsr charout
  1569  c93c 60                     rts
  1570                          
  1571                          skipspaces:
  1572  c93d b90002             -   lda inputbuf, y
  1573  c940 c920                   cmp #$20
  1574  c942 d003                   bne +
  1575  c944 c8                     iny
  1576  c945 d0f6                   bne -
  1577  c947 60                 +   rts
  1578                          
  1579                          chkdot:
  1580  c948 b90002                 lda inputbuf, y
  1581  c94b c92e                   cmp #'.'
  1582  c94d d003                   bne +
  1583  c94f c8                     iny
  1584  c950 a900                   lda #0 ; Z true (EQ)
  1585  c952 60                 +   rts
  1586                          
  1587                          chkhelp:
  1588  c953 b90002                 lda inputbuf, y
  1589  c956 c93f                   cmp #'?'
  1590  c958 d003                   bne +
  1591  c95a c8                     iny
  1592  c95b a900                   lda #0 ; Z true (EQ)
  1593  c95d 60                 +   rts
  1594                          
  1595                          chkcolon:
  1596  c95e b90002                 lda inputbuf, y
  1597  c961 c93a                   cmp #':'
  1598  c963 d003                   bne +
  1599  c965 c8                     iny
  1600  c966 a900                   lda #0 ; Z true (EQ)
  1601  c968 60                 +   rts
  1602                          
  1603                          chkfilename:
  1604  c969 84ff                   sty tmp
  1605  c96b b90002                 lda inputbuf, y
  1606  c96e c922                   cmp #34
  1607  c970 d010                   bne ++
  1608  c972 c8                 -   iny
  1609  c973 b90002                 lda inputbuf, y
  1610  c976 c90d                   cmp #13
  1611  c978 d004                   bne +
  1612  c97a a4ff                   ldy tmp
  1613  c97c d004                   bne ++
  1614  c97e c922               +   cmp #34
  1615  c980 d0f0                   bne -
  1616  c982 60                 ++  rts
  1617                          
  1618                          chkhexbyteofsequence:
  1619  c983 204cc2                 jsr inputhexbyte
  1620  c986 20a0c9                 jsr +
  1621  c989 d011                   bne ++ ; Z false (NE) if failed checks
  1622  c98b c4a4                   cpy len
  1623  c98d f00d                   beq ++ ; Z true (EQ) if end of input
  1624  c98f 85ff                   sta tmp
  1625  c991 b90002                 lda inputbuf,y
  1626  c994 c920                   cmp #$20
  1627  c996 d004                   bne ++ ; Z false (NE) if not space
  1628  c998 a5ff                   lda tmp
  1629  c99a a200                   ldx #0 ; Z true (EQ) is space delimeter
  1630  c99c 60                 ++  rts
  1631                          
  1632                          chkhexword:
  1633                          chkhexaddr1:
  1634  c99d 2026c2                 jsr inputhexword
  1635  c9a0 a200               +   ldx #0 ; Z true (EQ)
  1636  c9a2 9001                   bcc +
  1637  c9a4 e8                     inx ; Z false (NE)
  1638  c9a5 60                 +   rts
  1639                          
  1640                          chkhexbyte
  1641  c9a6 98                     tya
  1642  c9a7 48                     pha ; save y
  1643  c9a8 204cc2                 jsr inputhexbyte
  1644  c9ab b00d                   bcs +
  1645  c9ad 85a6                   sta tmp2
  1646  c9af 2066c2                 jsr inputhexnybble
  1647  c9b2 9006                   bcc +
  1648  c9b4 68                     pla ; throw away saved y
  1649  c9b5 a5a6                   lda tmp2
  1650  c9b7 a200                   ldx #0 ; Z true (EQ)
  1651  c9b9 60                     rts
  1652  c9ba 68                 +   pla
  1653  c9bb a8                     tay ; won't be zero, so Z false (NE)
  1654  c9bc 60                     rts    
  1655                          
  1656                          chkhexaddr2:
  1657  c9bd a5fb                   lda ptr1
  1658  c9bf 48                     pha
  1659  c9c0 a5fc                   lda ptr1+1
  1660  c9c2 48                     pha
  1661  c9c3 209dc9                 jsr chkhexaddr1
  1662  c9c6 f005                   beq +
  1663  c9c8 68                     pla
  1664  c9c9 68                     pla
  1665  c9ca a901                   lda #1 ; Z false (NE)
  1666  c9cc 60                     rts
  1667  c9cd a5fb               +   lda ptr1
  1668  c9cf 85fd                   sta ptr2
  1669  c9d1 a5fc                   lda ptr1+1
  1670  c9d3 85fe                   sta ptr2+1
  1671  c9d5 68                     pla
  1672  c9d6 85fc                   sta ptr1+1
  1673  c9d8 68                     pla
  1674  c9d9 85fb                   sta ptr1
  1675  c9db a900                   lda #0 ; Z true (EQ)
  1676  c9dd 60                     rts    
  1677                          
  1678                          chkaddr1cmd:
  1679  c9de b90002                 lda inputbuf, y
  1680  c9e1 c941               +   cmp #'A'
  1681  c9e3 d004                   bne +
  1682  c9e5 c8                     iny
  1683  c9e6 4c41c5                 jmp executeassemble
  1684  c9e9 c944               +   cmp #'D'
  1685  c9eb d004                   bne +
  1686  c9ed c8                     iny
  1687  c9ee 4c17c9                 jmp executedisassemble
  1688  c9f1 c952               +   cmp #'R'
  1689  c9f3 d004                   bne +
  1690  c9f5 c8                     iny
  1691  c9f6 4cdac8                 jmp executerun
  1692  c9f9 60                 +   rts
  1693                          
  1694                          newline:
  1695  c9fa a90d                   lda #13
  1696  c9fc 4cd2ff                 jmp charout
  1697                          
  1698                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1699                          ;     jsr $ffd2
  1700                          ;     pha
  1701                          ; -   lda $d011
  1702                          ;     bpl -
  1703                          ; -   lda $d011
  1704                          ;     bmi -
  1705                          ; -   lda $d011
  1706                          ;     bpl -
  1707                          ; -   lda $d011
  1708                          ;     bmi -
  1709                          ;     pla
  1710                          ;     rts
  1711                          
  1712                          !ifdef MINIMUM {
  1713                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1714                          ;; MC6850
  1715                          UART_DATA=$FFF8
  1716                          UART_STCR=$FFF9
  1717                          
  1718                          UART_INIT:
  1719                          	ldx #0b00000111 ; 11=reset device
  1720                          	stx UART_STCR
  1721                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  1722                          	sta UART_STCR
  1723                          	rts
  1724                          UART_OUT:
  1725                          	pha
  1726                          -	lda UART_STCR
  1727                          	and #2
  1728                          	beq - ; branch if TDRE=0, not finished transmitting
  1729                          	pla
  1730                          	pha
  1731                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  1732                          	sta UART_DATA
  1733                          	pla
  1734                          	rts
  1735                          UART_IN:
  1736                          -	lda UART_STCR
  1737                          	and #1
  1738                          	beq - ; branch if TDRF=0, not received
  1739                          	lda UART_DATA
  1740                          	; software "CAPS LOCK" because wozmon expects only uppercase
  1741                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  1742                          	beq BREAK
  1743                              ; force lowercase alphabet to uppercase
  1744                              cmp #'a'
  1745                          	bcc +
  1746                          	cmp #'z'+1
  1747                          	bcs +
  1748                          	eor #$20
  1749                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  1750                           	rts
  1751                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  1752                          	pha ; save A
  1753                          	lda UART_STCR
  1754                          	lsr ; put rightmost bit in carry
  1755                          	pla ; restore A affects flags
  1756                          	ror ; move carry to left bit, right bit to carry
  1757                          	php ; push processor to save N
  1758                          	rol ; restore A affects flags
  1759                          	plp ; pull processor to restore N
  1760                          	rts
  1761                          
  1762                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1763                          ; Processor start and interrupts
  1764                          
  1765                          NMI: ; unused on minimum (no source of interrupt)
  1766                              rti
  1767                          
  1768                          IRQ:
  1769                              rti ; TODO implement BRK HANDLING in monitor
  1770                          
  1771                          BREAK:
  1772                              jmp RESET
  1773                          
  1774                          RESET:
  1775                              cld
  1776                              ldx #$00
  1777                              txs
  1778                              jsr JUART_INIT
  1779                              cli
  1780                              jmp start
  1781                          } ; !ifdef MINIMUM
  1782                          
  1783                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1784                          ; data
  1785                          
  1786                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  1787                          ninst = 56
  1788  c9ff 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  1789  ca37 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  1790  ca6f 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  1791                          
  1792                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  1793                          mode_jmptable:
  1794  caa7 23c1               !word dispModeAcc-1; 0 Accumulator 1
  1795  caa9 28c1               !word dispModeNone-1 ; 1 None 1
  1796  caab 29c1               !word dispModeImm-1 ; 2 Immediate 2
  1797  caad 3ac1               !word dispModeIndX-1 ; 3 IndirectX 2
  1798  caaf 5ac1               !word dispModeIndY-1 ; 4 IndirectY 2
  1799  cab1 7ac1               !word dispModeRel-1 ; 5 Relative 2
  1800  cab3 2ec1               !word dispModeZP-1 ; 6 ZeroPage 2
  1801  cab5 b6c1               !word dispModeZPX-1 ; 7 ZeroPageX 2
  1802  cab7 c3c1               !word dispModeZPY-1 ; 8 ZeroPageY 2
  1803  cab9 d0c1               !word dispModeAbs-1 ; 9 Absolute 3
  1804  cabb e2c1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  1805  cabd efc1               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  1806  cabf fcc1               !word dispModeInd-1 ; 12 Indirect 3
  1807                          
  1808                          nmodes = 13
  1809                          
  1810                          mode_sorted:
  1811  cac1 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  1812                          
  1813                          !ifdef MINIMUM {
  1814                          mode_0: !text "Accumulator", 0, "A", 0
  1815                          mode_1: !text "None", 0, "", 0
  1816                          mode_2: !text "Immediate", 0, "#$12", 0
  1817                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  1818                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  1819                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  1820                          mode_6: !text "ZeroPage", 0, "$12", 0
  1821                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  1822                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  1823                          mode_9: !text "Absolute", 0, "$1234", 0
  1824                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  1825                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  1826                          mode_12: !text "Indirect", 0, "($1234)", 0
  1827                          } else {
  1828  cace 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  1829  cadc 4e4f4e450000       mode_1: !text "NONE", 0, "", 0
  1830  cae2 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  1831  caf1 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  1832  cb03 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  1833  cb15 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  1834  cb34 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  1835  cb41 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  1836  cb51 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  1837  cb61 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  1838  cb70 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  1839  cb82 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  1840  cb94 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  1841                          }
  1842                          
  1843                          modes: ; table for easily displaying each mode_example
  1844  cba5 ceca               !word mode_0
  1845  cba7 dcca               !word mode_1
  1846  cba9 e2ca               !word mode_2
  1847  cbab f1ca               !word mode_3
  1848  cbad 03cb               !word mode_4
  1849  cbaf 15cb               !word mode_5
  1850  cbb1 34cb               !word mode_6
  1851  cbb3 41cb               !word mode_7
  1852  cbb5 51cb               !word mode_8
  1853  cbb7 61cb               !word mode_9
  1854  cbb9 70cb               !word mode_10
  1855  cbbb 82cb               !word mode_11
  1856  cbbd 94cb               !word mode_12
  1857                          
  1858                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  1859                          nopcodes = 151
  1860  cbbf 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  1861  cc56 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  1862  cced 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  1863                          
  1864                          copyright 
  1865                          ;                  1         2         3         4
  1866                          ;         1234567890123456789012345678901234567890
  1867  cd84 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  1868                          !ifdef C64TERMINAL {
  1869                              !text 13, "(TERMINAL VERSION)"
  1870                          }
  1871  cda4 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  1872  cdca 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  1873  cde1 00                 !text 0
  1874                          
  1875                          firsthelp
  1876  cde2 0d3f202020202020...!text 13, "?       (SYNTAX)"
  1877  cdf3 0d3f204120202020...!text 13, "? A     (LIST 6502 INSTRUCTIONS)"
  1878  ce14 0d3f204144432020...!text 13, "? ADC   (/ADC/ ADDRESSING MODES)"
  1879  ce35 0d3f204d4f444520...!text 13, "? MODE  (ADDRESSING MODES)"
  1880                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  1881  ce50 0d00               !text 13, 0
  1882                          
  1883  ce52 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  1884                          
  1885                          generalhelp
  1886  ce63 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  1887  ce89 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  1888  ceae 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  1889  ced1 00                 !text 0
  1890                          generalhelp2
  1891  ced2 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  1892  cefa 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  1893  cf16 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  1894  cf36 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  1895  cf58 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  1896  cf7d 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  1897  cf9c 00                 !text 0
  1898                          
  1899  cf9d 4d4f444500         modes_keyword !text "MODE", 0
  1900                          
  1901                          !ifdef C64SCREEN {
  1902  cfa2 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  1903  cfa9 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  1904                          }
  1905                          
  1906                          !ifdef MINIMUM {
  1907                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1908                          ; JUMP table for some stability
  1909                          * = $FFEE
  1910                          JUART_INIT: JMP UART_INIT
  1911                          JUART_OUT: JMP UART_OUT
  1912                          JUART_IN: JMP UART_IN
  1913                          JUART_CHK: JMP UART_CHK
  1914                          
  1915                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1916                          ; 6502 vectors 
  1917                          * = $fffa
  1918                              !word NMI
  1919                              !word RESET
  1920                              !word IRQ
  1921                          }
  1922                          
  1923                          finish = *
