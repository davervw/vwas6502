
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<<
     5                          ;; >>>       ****************************************************        <<<
     6                          ;; >>>       **           TARGETS:                              *        <<<
     7                          ;; >>>       ** (1)  C64 8000-9FFF screen editor                *        <<<
     8                          ;; >>>       ** (2)  C64 8000-9FFF terminal edition             *        <<<
     9                          ;; >>>       ** (3)  6502+MC6850 E000-FFFF minimum system       *        <<<
    10                          ;; >>>       *   56K(RAM),8K(ROM), 2 bytes IO for MC6850 UART   *        <<<
    11                          ;; >>>       ****************************************************        <<<
    12                          ;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          ;; MIT License
    15                          ;;
    16                          ;; Copyright (c) 2024 David R. Van Wagner
    17                          ;; davevw.com
    18                          ;;
    19                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    20                          ;; of this software and associated documentation files (the "Software"), to deal
    21                          ;; in the Software without restriction, including without limitation the rights
    22                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    23                          ;; copies of the Software, and to permit persons to whom the Software is
    24                          ;; furnished to do so, subject to the following conditions:
    25                          ;;
    26                          ;; The above copyright notice and this permission notice shall be included in all
    27                          ;; copies or substantial portions of the Software.
    28                          ;;
    29                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    30                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    31                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    32                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    33                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    34                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    35                          ;; SOFTWARE.
    36                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                          
    40                          ; Important! define exactly ONE target (set in build.sh)
    41                          ;C64SCREEN = 1
    42                          ;C64TERMINAL = 1
    43                          ;MINIMUM = 1
    44                          
    45                          ; options (set in build.sh)
    46                          ;NEEDECHO = 0
    47                          
    48                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                          
    50                          ;; _
    51                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    52                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    53                          ;; 1000 (display memory at $1000)
    54                          ;; 1000.2000 (display memory range $1000 to $2000)
    55                          ;; 1000. (display next screenful of memory starting at $1000)
    56                          ;; . (display next screenful of memory)
    57                          ;; 1000 r (JMP $1000)
    58                          ;; 1000: 01 02 03 (modify memory)
    59                          ;; (NEW SYNTAX)
    60                          ;; 1000 d (disassemble starting at address, for screenful)
    61                          ;; d (continue disassembling from last address)
    62                          ;; 1000 a (assemble starting at, interactive until empty line)
    63                          ;; x (exit monitor -- C64 only)
    64                          ;; ? (commands help)
    65                          ;; ?a (list instructions available)
    66                          ;; ?adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    67                          ;; ?mode (show addressing modes example syntax for 6502)
    68                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    69                          ;; .? (display registers in format .1234 10110000 01 02 03 f6)
    70                          ;; .1234 10110000 01 02 03 f6 (set registers PC FLAGS A X Y S)
    71                          ;; .A:00 (change register, replace A with X, Y, S, P as appropriate, use space or colon as separator)
    72                          ;; (FUTURE SYNTAX, not implemented)
    73                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    74                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    75                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    76                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    77                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    78                          ;;
    79                          ;; (INTERACTIVE ASSEMBLER)
    80                          ;; 1000 _
    81                          ;;      ADC #$12
    82                          ;; 1000 69 12    ADC #$12
    83                          ;; 1002 _
    84                          ;;      JSR $1234
    85                          ;; 1002 20 34 12 JSR $1234
    86                          ;; 1005 _
    87                          ;;      RTS
    88                          ;; 1005 60       RTS
    89                          ;; 1006 _
    90                          ;;      XYZ
    91                          ;;      XYZ ?
    92                          ;; 1006 _
    93                          ;; _
    94                          ;;
    95                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    96                          ;; and can cursor up to revise,
    97                          ;;
    98                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    99                          ;;
   100                          
   101                          ; global
   102                          inputbuf=$0200
   103                          
   104                          
   105                          ; kernal/system calls
   106                          
   107                          !ifdef MINIMUM {
   108                          charout=JUART_OUT
   109                          getkey=JUART_IN
   110                          }
   111                          
   112                          !ifdef C64SCREEN {
   113                          setlfs=$ffba
   114                          setnam=$ffbd
   115                          charin=$ffcf ; screen editor
   116                          charout=$ffd2
   117                          fsave =$ffd8
   118                          getkey=$ffe4
   119                          }
   120                          
   121                          !ifdef C64TERMINAL {
   122                          setlfs=$ffba
   123                          setnam=$ffbd
   124                          charout=$ffd2
   125                          getkey=$ffe4
   126                          fsave =$ffd8
   127                          }
   128                          
   129                          ; zeropage
   130                          !ifdef MINIMUM {
   131                          ptr1=$fc ; and $fd
   132                          ptr3=$fe ; and $ff
   133                          }
   134                          
   135                          !ifdef MINIMUM {
   136                          * = $e000
   137                              jmp start
   138                          } else { // any C64
   139                          * = $8000
   140  8000 4c2080                 jmp init64
   141                          }
   142                          
   143                          test: ; all the addressing modes here for testing disassembly
   144  8003 ea                     nop
   145  8004 ad3412                 lda $1234
   146  8007 bd3412                 lda $1234,x
   147  800a b93412                 lda $1234,y
   148  800d 0a                     asl
   149  800e a912                   lda #$12
   150  8010 a112                   lda ($12,x)
   151  8012 b112                   lda ($12),y
   152  8014 6c3412                 jmp ($1234)
   153  8017 d0fe               -   bne -
   154  8019 a512                   lda $12
   155  801b b512                   lda $12,x
   156  801d b612                   ldx $12,y
   157  801f ff                     !byte $FF ; unknown
   158                          
   159                          !ifndef MINIMUM {
   160                              ; any C64
   161                          init64:    
   162                              ; check if irq/brk vector installed
   163  8020 ad1603                 lda $316
   164  8023 ae1703                 ldx $317
   165  8026 e08e                   cpx #>brk64
   166  8028 f010                   beq +
   167  802a 8d0495                 sta savebrkvector
   168  802d 8e0595                 stx savebrkvector+1
   169  8030 a92a                   lda #<brk64
   170  8032 a28e                   ldx #>brk64
   171  8034 8d1603                 sta $316
   172  8037 8e1703                 stx $317
   173  803a 205980             +   jsr install_nmi64
   174                              ; fall through to start
   175                          }
   176                          
   177                          start:
   178  803d d8                     cld
   179  803e 58                     cli
   180  803f a9d8                   lda #<copyright
   181  8041 a291                   ldx #>copyright
   182  8043 204284                 jsr strout
   183  8046 a936                   lda #<firsthelp
   184  8048 a292                   ldx #>firsthelp
   185  804a 204284                 jsr strout
   186  804d 4c7e8d                 jmp save_registers
   187                          
   188                          input_loop:
   189  8050 206384                 jsr inputline
   190  8053 206684                 jsr parseline
   191  8056 4c5080                 jmp input_loop
   192                          
   193                          !ifndef MINIMUM {
   194                          ; C64 only
   195                          
   196                          install_nmi64:
   197                              ; check if nmi vector installed
   198  8059 ad1803                 lda $318
   199  805c ae1903                 ldx $319
   200  805f e08e                   cpx #>nmi64
   201  8061 f010                   beq +
   202  8063 8d0695                 sta savenmivector
   203  8066 8e0795                 stx savenmivector+1
   204  8069 a90b                   lda #<nmi64
   205  806b a28e                   ldx #>nmi64
   206  806d 8d1803                 sta $318
   207  8070 8e1903                 stx $319
   208  8073 60                 +   rts
   209                          
   210                          uninstall_nmi64:
   211  8074 ad0695                 lda savenmivector
   212  8077 ae0795                 ldx savenmivector+1
   213  807a 8d1803                 sta $318
   214  807d 8e1903                 stx $319
   215  8080 60                     rts
   216                          
   217                          chkextrac64:
   218  8081 208d80                 jsr chkexit
   219  8084 d003                   bne +
   220  8086 4ca280                 jmp execute_exit
   221  8089 18                 +   clc ; no error
   222  808a a201                   ldx #1 ; Z false - not consumed
   223  808c 60                     rts
   224                          
   225                          chkexit:
   226  808d b90002                 lda inputbuf, y
   227  8090 c958                   cmp #'X'
   228  8092 d009                   bne +
   229  8094 c8                     iny
   230  8095 ccfd94                 cpy len ; validate no extra characters
   231  8098 f003                   beq +
   232  809a 4c9e80                 jmp extra_error
   233  809d 60                 +   rts
   234                          
   235                          extra_error:
   236                              ; pop local return address
   237  809e 68                     pla
   238  809f 68                     pla
   239  80a0 38                     sec ; error
   240  80a1 60                     rts
   241                          
   242                          execute_exit:
   243  80a2 ad0495                 lda savebrkvector
   244  80a5 ae0595                 ldx savebrkvector+1
   245  80a8 8d1603                 sta $316
   246  80ab 8e1703                 stx $317
   247  80ae 207480                 jsr uninstall_nmi64
   248                              ; pop monitor return addresses, so only original caller is left
   249  80b1 68                     pla
   250  80b2 68                     pla
   251  80b3 68                     pla
   252  80b4 68                     pla
   253  80b5 68                     pla
   254  80b6 68                     pla
   255  80b7 60                     rts
   256                          
   257                          display_extra_help:
   258  80b8 a949                   lda #<extra_help
   259  80ba a292                   ldx #>extra_help
   260  80bc 4c4284                 jmp strout
   261                          
   262                          !ifdef C64SCREEN {
   263                          display_page_disassemble:
   264  80bf adf48d                 lda ptr1
   265  80c2 aef58d                 ldx ptr1+1
   266  80c5 20b883                 jsr disphexword
   267  80c8 a987                   lda #<page_disassemble
   268  80ca a292                   ldx #>page_disassemble
   269  80cc 4c4284                 jmp strout
   270                          
   271                          display_page_displaymemory:
   272  80cf 20748d                 jsr newline
   273  80d2 adf48d                 lda ptr1
   274  80d5 aef58d                 ldx ptr1+1
   275  80d8 20b883                 jsr disphexword
   276  80db a98e                   lda #<page_displaymemory
   277  80dd a292                   ldx #>page_displaymemory
   278  80df 4c4284                 jmp strout
   279                          
   280                          inputlinec64:
   281  80e2 a000                   ldy #0
   282  80e4 20cfff             -   jsr charin
   283  80e7 990002                 sta inputbuf,y
   284  80ea c8                     iny
   285  80eb c90d                   cmp #13
   286  80ed d0f5                   bne -
   287  80ef 60                     rts
   288                          
   289                          continueassemblec64:
   290  80f0 a914                   lda #20
   291  80f2 20d2ff                 jsr charout
   292  80f5 20d2ff                 jsr charout
   293  80f8 adf48d                 lda ptr1
   294  80fb aef58d                 ldx ptr1+1
   295  80fe 20b883                 jsr disphexword
   296  8101 a920                   lda #' '
   297  8103 20d2ff                 jsr charout
   298  8106 20d2ff                 jsr charout
   299  8109 4cd2ff                 jmp charout
   300                          }
   301                          
   302                          chkfilename:
   303  810c 20878c                 jsr skipspaces
   304  810f 8c0195                 sty tmp
   305  8112 b90002                 lda inputbuf, y
   306  8115 c922                   cmp #34 ; double quote
   307  8117 d025                   bne ++
   308  8119 c8                 -   iny
   309  811a b90002                 lda inputbuf, y
   310  811d c90d                   cmp #13
   311  811f d005                   bne +
   312  8121 ac0195                 ldy tmp
   313  8124 d018                   bne ++
   314  8126 c922               +   cmp #34 ; double quote
   315  8128 d0ef                   bne -
   316  812a 98                     tya ; index of ending double quotes
   317  812b 48                     pha ; save
   318  812c 18                     clc ; will subtract one more
   319  812d ed0195                 sbc tmp ; subtract index of first quote, have filename length
   320  8130 ae0195                 ldx tmp
   321  8133 e8                     inx ; low address of filename
   322  8134 a002                   ldy #>inputbuf ; high address of filename
   323  8136 20bdff                 jsr setnam
   324  8139 68                     pla
   325  813a a8                     tay
   326  813b c8                     iny ; advance past ending double quotes
   327  813c a900                   lda #0 ; set Z true
   328  813e 60                 ++  rts
   329                          
   330                          check_execute_save:
   331  813f 200c81             +   jsr chkfilename
   332  8142 f006                   beq +
   333  8144 205e8c                 jsr reporterr
   334  8147 a201                   ldx #1 ; set Z false
   335  8149 60                     rts
   336  814a 205881             +   jsr chkoptionaldrive
   337  814d 206e81                 jsr chksave
   338  8150 d005                   bne +
   339  8152 207781                 jsr executesave
   340  8155 a200                   ldx #0 ; set Z true
   341  8157 60                 +   rts
   342                          
   343                          chkoptionaldrive:
   344  8158 a908                   lda #8
   345  815a 8d0895                 sta drive
   346  815d 20878c                 jsr skipspaces
   347  8160 20dd8c                 jsr chkhexbyte
   348  8163 d008                   bne +
   349  8165 8d0895                 sta drive
   350  8168 20878c                 jsr skipspaces
   351  816b a900                   lda #0 ; set Z true
   352  816d 60                 +   rts
   353                          
   354                          chksave:
   355  816e 20878c                 jsr skipspaces
   356  8171 b90002                 lda inputbuf, y
   357  8174 c953                   cmp #'S'
   358  8176 60                     rts
   359                          
   360                          executesave:
   361  8177 20748d                 jsr newline
   362  817a a522                   lda $22
   363  817c 48                     pha
   364  817d a523                   lda $23
   365  817f 48                     pha
   366  8180 adf48d                 lda ptr1
   367  8183 8522                   sta $22
   368  8185 adf58d                 lda ptr1+1
   369  8188 8523                   sta $23
   370  818a a9c0                   lda #$c0 ; KERNAL control and error messages
   371  818c 859d                   sta $9d ; set messages to be displayed
   372  818e a901                   lda #1
   373  8190 ae0895                 ldx drive
   374  8193 a00f                   ldy #15
   375  8195 20baff                 jsr setlfs
   376  8198 a922                   lda #$22
   377  819a ae0295                 ldx ptr2
   378  819d ac0395                 ldy ptr2+1
   379  81a0 20d8ff                 jsr fsave
   380  81a3 68                     pla
   381  81a4 8523                   sta $23
   382  81a6 68                     pla
   383  81a7 8522                   sta $22
   384  81a9 4c748d                 jmp newline
   385                          }
   386                          
   387                          disassemble:
   388  81ac a917                   lda #23
   389  81ae 8dfc94                 sta count
   390  81b1 a000               -   ldy #0
   391  81b3 20e38d                 jsr lda_at_ptr1_y
   392  81b6 20e681                 jsr find_opcode
   393  81b9 205082                 jsr disp_current
   394  81bc adfb94                 lda size
   395  81bf 1002                   bpl +
   396  81c1 a901                   lda #1
   397  81c3 18                 +   clc
   398  81c4 6df48d                 adc ptr1
   399  81c7 8df48d                 sta ptr1
   400  81ca 9003                   bcc +
   401  81cc eef58d                 inc ptr1+1
   402  81cf cefc94             +   dec count
   403  81d2 d0dd                   bne -
   404                          !ifdef C64SCREEN {
   405  81d4 4cbf80                 jmp display_page_disassemble
   406                          } else {
   407                              rts
   408                          }
   409                          
   410                          compareptrs:
   411  81d7 adf58d                 lda ptr1+1
   412  81da cd0395                 cmp ptr2+1
   413  81dd d006                   bne +
   414  81df adf48d                 lda ptr1
   415  81e2 cd0295                 cmp ptr2
   416  81e5 60                 +   rts
   417                          
   418                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   419                          ; and properties updated in ZP globals size,inidx,opidx,mode
   420  81e6 a097                   ldy #nopcodes
   421  81e8 a296                   ldx #nopcodes-1
   422  81ea dd1390             -   cmp opcodes,x
   423  81ed f010                   beq +
   424  81ef ca                     dex
   425  81f0 88                     dey
   426  81f1 d0f7                   bne -
   427  81f3 18                     clc
   428  81f4 a901                   lda #1
   429  81f6 8dfb94                 sta size
   430  81f9 a9ff                   lda #$FF
   431  81fb aa                     tax
   432  81fc a8                     tay
   433  81fd 900a                   bcc ++
   434  81ff bdaa90             +   lda instidx, x
   435  8202 bc4191                 ldy modeidx, x
   436  8205 201382                 jsr getsize
   437  8208 38                     sec
   438  8209 8df994             ++  sta inidx
   439  820c 8ef894                 stx opidx
   440  820f 8cfa94                 sty mode
   441  8212 60                     rts
   442                          
   443                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   444                              ; result returned in size
   445  8213 48                     pha
   446  8214 a901                   lda #1
   447  8216 8dfb94                 sta size
   448  8219 68                     pla
   449  821a c002                   cpy #2 // Immediate
   450  821c 900a                   bcc +
   451  821e eefb94                 inc size
   452  8221 c009                   cpy #9 // Absolute
   453  8223 9003                   bcc +
   454  8225 eefb94                 inc size
   455  8228 60                 +   rts
   456                          
   457                          disp_opcode: ; .A opcode byte
   458  8229 20e681                 jsr find_opcode
   459  822c 8a                     txa
   460                              ; fall through to display instruction
   461                          
   462                          dispinst: ; .A instruction index 0..55, note modifies A and X
   463  822d aa                     tax
   464  822e e038                   cpx #ninst
   465  8230 b012                   bcs +
   466  8232 bd528e                 lda inst0, x
   467  8235 20d2ff                 jsr charout
   468  8238 bd8a8e                 lda inst1, x
   469  823b 20d2ff                 jsr charout
   470  823e bdc28e                 lda inst2, x
   471  8241 4cd2ff                 jmp charout
   472  8244 a93f               +   lda #'?'
   473  8246 20d2ff                 jsr charout
   474  8249 20d2ff                 jsr charout
   475  824c 20d2ff                 jsr charout
   476  824f 60                     rts
   477                          
   478                          disp_current:
   479  8250 adf48d                 lda ptr1
   480  8253 aef58d                 ldx ptr1+1
   481  8256 20b883                 jsr disphexword
   482  8259 a920                   lda #$20
   483  825b 20d2ff                 jsr charout
   484  825e a000                   ldy #0
   485  8260 aefb94                 ldx size
   486  8263 20e38d             -   jsr lda_at_ptr1_y
   487  8266 20be83                 jsr disphexbyte
   488  8269 a920                   lda #$20
   489  826b 20d2ff                 jsr charout
   490  826e c8                     iny
   491  826f ca                     dex
   492  8270 d0f1                   bne -
   493  8272 c003               -   cpy #3
   494  8274 f00e                   beq +
   495  8276 a920                   lda #$20
   496  8278 20d2ff                 jsr charout
   497  827b 20d2ff                 jsr charout
   498  827e 20d2ff                 jsr charout
   499  8281 c8                     iny
   500  8282 d0ee                   bne -
   501  8284 adf994             +   lda inidx
   502  8287 202d82                 jsr dispinst
   503  828a a920                   lda #$20
   504  828c 20d2ff                 jsr charout
   505  828f 209782                 jsr disp_mode
   506  8292 a90d                   lda #13
   507  8294 4cd2ff                 jmp charout
   508                          
   509                          disp_mode
   510  8297 adfa94                 lda mode
   511  829a c90d                   cmp #13
   512  829c b00a                   bcs +
   513  829e 0a                     asl
   514  829f aa                     tax
   515  82a0 bdfb8e                 lda mode_jmptable+1,x
   516  82a3 48                     pha
   517  82a4 bdfa8e                 lda mode_jmptable,x
   518  82a7 48                     pha
   519  82a8 60                 +   rts
   520                          
   521                          dispModeAcc:
   522  82a9 a941                   lda #'A'
   523  82ab 4cd2ff                 jmp charout
   524                          
   525                          dispModeNone:
   526  82ae 60                     rts
   527                          
   528                          dispModeImm:
   529  82af a923                   lda #'#'
   530  82b1 20d2ff                 jsr charout
   531                          dispModeZP:
   532  82b4 a924                   lda #'$'
   533  82b6 20d2ff                 jsr charout
   534  82b9 a001                   ldy #1
   535  82bb 20e38d                 jsr lda_at_ptr1_y
   536  82be 4cbe83                 jmp disphexbyte
   537                          
   538                          dispModeIndX:
   539  82c1 a928                   lda #'('
   540  82c3 20d2ff                 jsr charout
   541  82c6 a924                   lda #'$'
   542  82c8 20d2ff                 jsr charout
   543  82cb a001                   ldy #1
   544  82cd 20e38d                 jsr lda_at_ptr1_y
   545  82d0 20be83                 jsr disphexbyte
   546  82d3 a92c                   lda #','
   547  82d5 20d2ff                 jsr charout
   548  82d8 a958                   lda #'X'
   549  82da 20d2ff                 jsr charout
   550  82dd a929                   lda #')'
   551  82df 4cd2ff                 jmp charout
   552                          
   553                          dispModeIndY:
   554  82e2 a928                   lda #'('
   555  82e4 20d2ff                 jsr charout
   556  82e7 a924                   lda #'$'
   557  82e9 20d2ff                 jsr charout
   558  82ec a001                   ldy #1
   559  82ee 20e38d                 jsr lda_at_ptr1_y
   560  82f1 20be83                 jsr disphexbyte
   561  82f4 a929                   lda #')'
   562  82f6 20d2ff                 jsr charout
   563  82f9 a92c                   lda #','
   564  82fb 20d2ff                 jsr charout
   565  82fe a959                   lda #'Y'
   566  8300 4cd2ff                 jmp charout
   567                          
   568                          dispModeRel:
   569  8303 a924                   lda #'$'
   570  8305 20d2ff                 jsr charout
   571  8308 18                     clc
   572  8309 adf48d                 lda ptr1
   573  830c 6902                   adc #2
   574  830e 8d088e                 sta ptr3
   575  8311 adf58d                 lda ptr1+1
   576  8314 6900                   adc #0
   577  8316 8d098e                 sta ptr3+1
   578  8319 a001                   ldy #1
   579  831b 20e38d                 jsr lda_at_ptr1_y
   580  831e 1019                   bpl +
   581                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   582  8320 49ff                   eor #$FF ; inverse
   583  8322 18                     clc
   584  8323 6901                   adc #1 ; complete getting absolute value from two's complement
   585  8325 8d0195                 sta tmp
   586  8328 38                     sec
   587  8329 ad088e                 lda ptr3
   588  832c ed0195                 sbc tmp
   589  832f 8d088e                 sta ptr3
   590  8332 b011                   bcs ++
   591  8334 ce098e                 dec ptr3+1
   592  8337 900c                   bcc ++
   593  8339 18                 +   clc ; simple case of adding
   594  833a 6d088e                 adc ptr3
   595  833d 8d088e                 sta ptr3
   596  8340 9003                   bcc ++
   597  8342 ee098e                 inc ptr3+1
   598  8345 ad088e             ++  lda ptr3
   599  8348 ae098e                 ldx ptr3+1
   600  834b 4cb883                 jmp disphexword
   601                          
   602                          dispModeZPX:
   603  834e 20b482                 jsr dispModeZP
   604  8351 a92c                   lda #','
   605  8353 20d2ff                 jsr charout
   606  8356 a958                   lda #'X'
   607  8358 4cd2ff                 jmp charout
   608                          
   609                          dispModeZPY:
   610  835b 20b482                 jsr dispModeZP
   611  835e a92c                   lda #','
   612  8360 20d2ff                 jsr charout
   613  8363 a959                   lda #'Y'
   614  8365 4cd2ff                 jmp charout
   615                          
   616                          dispModeAbs:
   617  8368 a924                   lda #'$'
   618  836a 20d2ff                 jsr charout
   619  836d a001                   ldy #1
   620  836f 20e38d                 jsr lda_at_ptr1_y
   621  8372 48                     pha
   622  8373 c8                     iny
   623  8374 20e38d                 jsr lda_at_ptr1_y
   624  8377 aa                     tax
   625  8378 68                     pla
   626  8379 4cb883                 jmp disphexword
   627                          
   628                          dispModeAbsX:
   629  837c 206883                 jsr dispModeAbs
   630  837f a92c                   lda #','
   631  8381 20d2ff                 jsr charout
   632  8384 a958                   lda #'X'
   633  8386 4cd2ff                 jmp charout
   634                          
   635                          dispModeAbsY:
   636  8389 206883                 jsr dispModeAbs
   637  838c a92c                   lda #','
   638  838e 20d2ff                 jsr charout
   639  8391 a959                   lda #'Y'
   640  8393 4cd2ff                 jmp charout
   641                          
   642                          dispModeInd:
   643  8396 a928                   lda #'('
   644  8398 20d2ff                 jsr charout
   645  839b 206883                 jsr dispModeAbs
   646  839e a929                   lda #')'
   647  83a0 4cd2ff                 jmp charout
   648                          
   649                          dispbinbyte: ; .A 00..FF
   650  83a3 a208                   ldx #8
   651  83a5 8d0195                 sta tmp
   652  83a8 a930               -   lda #'0'
   653  83aa 2e0195                 rol tmp
   654  83ad 9002                   bcc +
   655  83af a931                   lda #'1'
   656  83b1 20d2ff             +   jsr charout
   657  83b4 ca                     dex
   658  83b5 d0f1                   bne -
   659  83b7 60                     rts
   660                          
   661                          disphexword: ; .A low, .X high, 0000..FFFF
   662  83b8 48                     pha
   663  83b9 8a                     txa
   664  83ba 20be83                 jsr disphexbyte
   665  83bd 68                     pla
   666                              ;fall through to call again
   667                          
   668                          disphexbyte: ; .A 00..FF
   669  83be 48                     pha
   670  83bf 4a                     lsr
   671  83c0 4a                     lsr
   672  83c1 4a                     lsr
   673  83c2 4a                     lsr
   674  83c3 20c783                 jsr disphexnybble
   675  83c6 68                     pla
   676                              ;fall through to call again
   677                          
   678                          disphexnybble: ; .A 0..F
   679  83c7 290f                   and #$0F
   680  83c9 0930                   ora #$30
   681  83cb c93a                   cmp #$3A
   682  83cd 9002                   bcc +
   683  83cf 6906                   adc #$06
   684  83d1 4cd2ff             +   jmp charout
   685                          
   686                          inputhexword: ; C set if fails
   687  83d4 a900                   lda #0
   688  83d6 8df48d                 sta ptr1
   689  83d9 8df58d                 sta ptr1+1
   690                          
   691  83dc a904                   lda #4 ; word is at most 4 nybbles
   692  83de 8dfc94                 sta count
   693  83e1 202484             --  jsr inputhexnybble
   694  83e4 b015                   bcs +
   695                          
   696                              ; shift nibble up
   697  83e6 0a                     asl
   698  83e7 0a                     asl
   699  83e8 0a                     asl
   700  83e9 0a                     asl
   701                          
   702  83ea a204                   ldx #4 ; 4 bits rotated into word
   703  83ec 2a                 -   rol
   704  83ed 2ef48d                 rol ptr1
   705  83f0 2ef58d                 rol ptr1+1
   706  83f3 ca                     dex
   707  83f4 d0f6                   bne - ; repeat bits
   708                          
   709  83f6 cefc94                 dec count
   710  83f9 d0e6                   bne -- ; repeat nybbles
   711                          
   712  83fb adfc94             +   lda count
   713  83fe c904                   cmp #4 ; set C if 4, otherwise clear
   714  8400 60                     rts
   715                          
   716                          inputhexbyte:
   717  8401 202484                 jsr inputhexnybble
   718  8404 b01d                   bcs ++
   719  8406 8d0195                 sta tmp
   720  8409 202484                 jsr inputhexnybble
   721  840c 9006                   bcc +
   722  840e 18                     clc ; allow single digit as byte
   723  840f ad0195                 lda tmp
   724  8412 900f                   bcc ++
   725  8414 0e0195             +   asl tmp
   726  8417 0e0195                 asl tmp
   727  841a 0e0195                 asl tmp
   728  841d 0e0195                 asl tmp
   729  8420 0d0195                 ora tmp ; necessary to assemble the two nybbles
   730  8423 60                 ++  rts
   731                          
   732                          inputhexnybble:
   733  8424 b90002                 lda $0200,y
   734  8427 297f                   and #$7F
   735  8429 38                     sec
   736  842a e930                   sbc #$30
   737  842c 9012                   bcc ++
   738  842e c90a                   cmp #10
   739  8430 900c                   bcc +
   740  8432 e907                   sbc #7
   741  8434 900a                   bcc ++
   742  8436 c90a                   cmp #10
   743  8438 9006                   bcc ++
   744  843a c910                   cmp #16
   745  843c b002                   bcs ++
   746  843e c8                 +   iny
   747  843f 60                     rts
   748  8440 38                 ++  sec
   749  8441 60                     rts
   750                          
   751                          strout:
   752  8442 8d088e                 sta ptr3
   753  8445 8e098e                 stx ptr3+1
   754                          strout2:
   755  8448 a000                   ldy #0
   756  844a 20f78d             -   jsr lda_at_ptr3_y
   757  844d f006                   beq +
   758  844f 20d2ff                 jsr charout
   759  8452 c8                     iny
   760  8453 d0f5                   bne -
   761  8455 98                 +   tya
   762  8456 38                     sec
   763  8457 6d088e                 adc ptr3
   764  845a 8d088e                 sta ptr3
   765  845d 9003                   bcc +
   766  845f ee098e                 inc ptr3+1
   767  8462 60                 +   rts
   768                          
   769                          inputline:
   770                          !ifdef C64SCREEN {
   771  8463 4ce280                 jmp inputlinec64
   772                          } else {
   773                              ldy #0
   774                          --  sty count
   775                          -   jsr getkey
   776                              beq -
   777                              ldy count
   778                          !ifdef MINIMUM {
   779                              cmp #8 ; backspace
   780                          } else {
   781                              cmp #20
   782                          }
   783                              bne +
   784                              cpy #0
   785                              beq -
   786                              dey
   787                          !if NEEDECHO = 1 {
   788                              jsr charout
   789                          }
   790                              jmp --
   791                          +   cmp #13
   792                              beq +
   793                              cmp #' '
   794                              bcc -
   795                              cmp #128
   796                              bcs -
   797                          +
   798                          !if NEEDECHO = 1 {
   799                              jsr charout
   800                          }
   801                              sta inputbuf,y
   802                              iny
   803                              cmp #13
   804                              bne --
   805                              rts
   806                          }
   807                          
   808                          parseline:
   809  8466 c001                   cpy #1
   810  8468 d003                   bne +
   811                          -
   812                          !ifdef C64SCREEN {
   813  846a 4c748d                 jmp newline
   814                          } else {
   815                              rts
   816                          }
   817  846d 88                 +   dey
   818  846e 8cfd94                 sty len
   819                              ; skip whitespace
   820                              ; check for address, put in ptr1
   821                              ; or check for dot, then require address put in ptr2
   822                              ; or check for ?, and optional parameter, execute help
   823                              ; check for whitespace
   824                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   825                              ; check for string, store at start of inputbuf
   826                              ; check for drive number
   827                              ; check for whitespace
   828                              ; check command ":rda?mls", execute command
   829  8471 a000                   ldy #0
   830  8473 20878c                 jsr skipspaces
   831  8476 ccfd94                 cpy len
   832  8479 f0ef                   beq -
   833  847b 202b8c                 jsr chkcontinuedis
   834  847e d003                   bne +
   835  8480 204f8c                 jsr executedisassemble ; note won't return
   836  8483 203d8c             +   jsr chkcontinueasm
   837  8486 d003                   bne +
   838  8488 20f887                 jsr continueassemble ; note won't return
   839  848b 20968c             +   jsr chkdot
   840  848e d003                   bne +
   841  8490 4c9585                 jmp executedot
   842  8493 20a18c             +   jsr chkhelp
   843  8496 d003                   bne +
   844  8498 4c6286                 jmp executehelp
   845                          +
   846                          !ifndef MINIMUM {
   847  849b 208180                 jsr chkextrac64 ; check syntax only available on C64
   848  849e b015                   bcs + ; error if C set
   849  84a0 f005                   beq ++ ; consumed if Z set, skip next test(s)
   850                          }
   851  84a2 20d48c                 jsr chkhexaddr1
   852  84a5 d003                   bne error
   853  84a7 4cad84             ++  jmp executeaddr1
   854                          error:
   855  84aa 4c5e8c                 jmp reporterr
   856                          
   857                          executeaddr1:
   858  84ad ccfd94                 cpy len
   859  84b0 d003                   bne +
   860  84b2 4c1185                 jmp executedisplay1
   861  84b5 20968c             +   jsr chkdot
   862  84b8 d011                   bne +
   863  84ba ccfd94                 cpy len
   864  84bd f022                   beq executepagedisplay
   865  84bf 20f68c                 jsr chkhexaddr2
   866  84c2 d0e6                   bne error
   867  84c4 18                     clc
   868  84c5 6e0095                 ror flag
   869  84c8 4c0085                 jmp executeaddr12
   870  84cb 20878c             +   jsr skipspaces
   871  84ce 20ac8c                 jsr chkcolon
   872  84d1 d003                   bne +
   873  84d3 4c6d85                 jmp executemodify
   874  84d6 20438d             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   875                          !ifdef MINIMUM {
   876                              jmp reportnotimplemented
   877                          } else {
   878  84d9 200c81                 jsr chkfilename
   879  84dc d0cc                   bne error
   880  84de 4ca585                 jmp executeloadfilename
   881                          }
   882                          
   883                          executepagedisplay:
   884  84e1 adf48d                 lda ptr1
   885  84e4 18                     clc
   886                          !ifdef MINIMUM {
   887                              adc #$5f
   888                          } else {
   889  84e5 69b7                   adc #$b7
   890                          }
   891  84e7 8d0295                 sta ptr2
   892  84ea adf58d                 lda ptr1+1
   893                          !ifdef MINIMUM {
   894                              adc #$01
   895                          } else {
   896  84ed 6900                   adc #$00
   897                          }
   898  84ef 8d0395                 sta ptr2+1
   899  84f2 9008                   bcc +
   900  84f4 a9ff                   lda #$ff
   901  84f6 8d0295                 sta ptr2
   902  84f9 8d0395                 sta ptr2+1
   903  84fc 38                 +   sec
   904  84fd 6e0095                 ror flag
   905                              ; fall through to executeaddr12
   906                          
   907                          executeaddr12:
   908  8500 ccfd94                 cpy len
   909  8503 d003                   bne +
   910  8505 4c1d85                 jmp executedisplay12
   911                          !ifndef MINIMUM { // any C64
   912  8508 203f81             +   jsr check_execute_save
   913  850b f003                   beq ++
   914                          }
   915  850d 4c578c             +   jmp reportnotimplemented
   916  8510 60                 ++  rts
   917                          
   918                          executedisplay1:
   919  8511 adf48d                 lda ptr1
   920  8514 8d0295                 sta ptr2
   921  8517 adf58d                 lda ptr1+1
   922  851a 8d0395                 sta ptr2+1
   923                              ; fall through executedisplay12
   924                          
   925                          executedisplay12:
   926  851d a9ff                   lda #$ff
   927  851f 8dfc94                 sta count
   928  8522 eefc94             -   inc count
   929  8525 adfc94                 lda count
   930                          !ifdef MINIMUM {
   931                              and #$0f
   932                          } else {
   933  8528 2907                   and #$07
   934                          }
   935  852a d018                   bne +
   936  852c a90d                   lda #13
   937  852e 20d2ff                 jsr charout
   938  8531 adf48d                 lda ptr1
   939  8534 aef58d                 ldx ptr1+1
   940  8537 20b883                 jsr disphexword
   941  853a a93a                   lda #':'
   942  853c 20d2ff                 jsr charout
   943  853f a920                   lda #' '
   944  8541 20d2ff                 jsr charout
   945  8544 a000               +   ldy #0
   946  8546 20e38d                 jsr lda_at_ptr1_y
   947  8549 20be83                 jsr disphexbyte
   948  854c a920                   lda #' '
   949  854e 20d2ff                 jsr charout
   950  8551 eef48d                 inc ptr1
   951  8554 d005                   bne +
   952  8556 eef58d                 inc ptr1+1
   953  8559 f00f                   beq ++
   954  855b 20d781             +   jsr compareptrs
   955  855e 90c2                   bcc -
   956  8560 f0c0                   beq -
   957  8562 2c0095                 bit flag
   958  8565 1003                   bpl ++
   959                          !ifdef C64SCREEN {
   960  8567 4ccf80                 jmp display_page_displaymemory
   961                          }
   962  856a 4c748d             ++  jmp newline
   963                          
   964                          executemodify:
   965  856d 20878c                 jsr skipspaces
   966  8570 ccfd94                 cpy len
   967  8573 f01d                   beq ++
   968  8575 20b78c                 jsr chkhexbyteofsequence
   969  8578 f003                   beq +
   970  857a 4caa84                 jmp error
   971  857d 8c0195             +   sty tmp
   972  8580 a000                   ldy #0
   973  8582 20f38d                 jsr sta_at_ptr1_y
   974  8585 eef48d                 inc ptr1
   975  8588 d003                   bne +
   976  858a eef58d                 inc ptr1+1
   977  858d ac0195             +   ldy tmp
   978  8590 d0db                   bne executemodify
   979  8592 4c748d             ++  jmp newline
   980                          
   981                          executedot:
   982  8595 ccfd94                 cpy len
   983  8598 d003                   bne +
   984  859a 4ce184                 jmp executepagedisplay
   985  859d 20a885             +   jsr chkloadregister
   986  85a0 d000                   bne +
   987  85a2 200886             +   jsr chkloadregisters
   988                          
   989                          executeloadfilename:
   990                          executeaddr1cmd:
   991  85a5 4c578c             +   jmp reportnotimplemented
   992                          
   993                          chkloadregister:
   994  85a8 20b285                 jsr chkload_a_x_y_s_p
   995  85ab 200286                 jsr chkload_pc
   996  85ae 200586                 jsr chkload_n_v_b_d_i_z_c
   997  85b1 60                     rts
   998                          
   999                          chkload_a_x_y_s_p:
  1000  85b2 8c0195                 sty tmp
  1001  85b5 b90002                 lda inputbuf, y
  1002  85b8 a200                   ldx #0
  1003  85ba c941                   cmp #'A'
  1004  85bc f014                   beq +
  1005  85be e8                     inx
  1006  85bf c958                   cmp #'X'
  1007  85c1 f00f                   beq +
  1008  85c3 e8                     inx
  1009  85c4 c959                   cmp #'Y'
  1010  85c6 f00a                   beq +
  1011  85c8 e8                     inx
  1012  85c9 c953                   cmp #'S'
  1013  85cb f005                   beq +
  1014  85cd e8                     inx
  1015  85ce c950                   cmp #'P'
  1016  85d0 d02c                   bne ++
  1017  85d2 c8                 +   iny
  1018  85d3 b90002                 lda inputbuf, y
  1019                          !ifndef MINIMUM {
  1020  85d6 c9a0                   cmp #$A0
  1021  85d8 f008                   beq +
  1022                          }
  1023  85da c920                   cmp #' '
  1024  85dc f004                   beq +
  1025  85de c93a                   cmp #':'
  1026  85e0 d01c                   bne ++
  1027  85e2 c8                 +   iny
  1028  85e3 20878c                 jsr skipspaces
  1029  85e6 8efa94                 stx mode
  1030  85e9 20dd8c                 jsr chkhexbyte
  1031  85ec d010                   bne ++
  1032  85ee aefa94                 ldx mode
  1033  85f1 9d0995                 sta registerA, x
  1034                          !ifndef MINIMUM {
  1035  85f4 20748d                 jsr newline
  1036                          }
  1037                              ; pop call stack so return to input_loop
  1038  85f7 68                     pla
  1039  85f8 68                     pla
  1040  85f9 68                     pla
  1041  85fa 68                     pla
  1042  85fb 4c0186                 jmp +++
  1043  85fe ac0195             ++  ldy tmp ; not Z (NE)
  1044  8601 60                 +++ rts
  1045                          
  1046                          chkload_pc:
  1047  8602 a901                   lda #1 ; not Z (NE)
  1048  8604 60                     rts
  1049                          
  1050                          chkload_n_v_b_d_i_z_c:
  1051  8605 a901                   lda #1 ; not Z (NE)
  1052  8607 60                     rts
  1053                          
  1054                          chkloadregisters:
  1055  8608 20d48c                 jsr chkhexword
  1056  860b d054                   bne ++
  1057  860d adf48d                 lda ptr1
  1058  8610 8d0e95                 sta registerPC
  1059  8613 adf58d                 lda ptr1+1
  1060  8616 8d0f95                 sta registerPC+1
  1061  8619 20758c                 jsr chkspace
  1062  861c d03c                   bne +
  1063  861e 201f8d                 jsr chkbinbyte
  1064  8621 d037                   bne +
  1065  8623 8d0d95                 sta registerSR
  1066  8626 20758c                 jsr chkspace
  1067  8629 d02f                   bne +
  1068  862b 20dd8c                 jsr chkhexbyte
  1069  862e d02a                   bne +
  1070  8630 8d0995                 sta registerA
  1071  8633 20758c                 jsr chkspace
  1072  8636 d022                   bne +
  1073  8638 20dd8c                 jsr chkhexbyte
  1074  863b d01d                   bne +
  1075  863d 8d0a95                 sta registerX
  1076  8640 20758c                 jsr chkspace
  1077  8643 d015                   bne +
  1078  8645 20dd8c                 jsr chkhexbyte
  1079  8648 d010                   bne +
  1080  864a 8d0b95                 sta registerY
  1081  864d 20758c                 jsr chkspace
  1082  8650 d008                   bne +
  1083  8652 20dd8c                 jsr chkhexbyte
  1084  8655 d003                   bne +
  1085  8657 8d0c95                 sta registerSP
  1086                              ; don't return to executedot
  1087  865a 68                 +   pla
  1088  865b 68                     pla
  1089                          !ifdef C64SCREEN {
  1090  865c 20748d                 jsr newline
  1091                          }
  1092  865f a900                   lda #0 ; set Z
  1093  8661 60                 ++  rts
  1094                          
  1095                          executehelp:
  1096                          !ifdef C64SCREEN {
  1097  8662 20748d                 jsr newline
  1098                          }
  1099  8665 ccfd94                 cpy len
  1100  8668 d003                   bne +
  1101  866a 4c9386                 jmp displayhelp
  1102  866d 20878c             +   jsr skipspaces
  1103  8670 20ae86                 jsr chkhelpinstructions
  1104  8673 d003                   bne +
  1105  8675 4cf286                 jmp displayinstructions
  1106  8678 20c886             +   jsr chkhelpmodes
  1107  867b d003                   bne +
  1108  867d 4c0987                 jmp displaymodes
  1109  8680 208b8b             +   jsr chkinstruction
  1110  8683 d003                   bne +
  1111  8685 4cc587                 jmp executehelpinstruction
  1112  8688 20bb86             +   jsr chkhelpregisters
  1113  868b d003                   bne +
  1114  868d 4c938d                 jmp execute_display_registers
  1115  8690 4c578c             +   jmp reportnotimplemented
  1116                          
  1117                          displayhelp:
  1118  8693 a9a6                   lda #<generalhelp
  1119  8695 a292                   ldx #>generalhelp
  1120  8697 204284                 jsr strout
  1121  869a a99b                   lda #<generalhelp2
  1122  869c a293                   ldx #>generalhelp2
  1123  869e 204284                 jsr strout
  1124  86a1 a965                   lda #<generalhelp3
  1125  86a3 a294                   ldx #>generalhelp3
  1126  86a5 204284                 jsr strout
  1127                          !ifndef MINIMUM { // any C64
  1128  86a8 20b880                 jsr display_extra_help
  1129                          }
  1130  86ab 4c748d                 jmp newline
  1131                          
  1132                          chkhelpinstructions:
  1133  86ae b90002                 lda inputbuf, y
  1134  86b1 c941                   cmp #'A'
  1135  86b3 d005                   bne +
  1136  86b5 b90102                 lda inputbuf+1, y
  1137  86b8 c90d                   cmp #13
  1138                              ; no need to increment y if found, done parsing line
  1139  86ba 60                 +   rts
  1140                          
  1141                          chkhelpregisters:
  1142  86bb b90002                 lda inputbuf, y
  1143  86be c92e                   cmp #'.'
  1144  86c0 d005                   bne +
  1145  86c2 b90102                 lda inputbuf+1, y
  1146  86c5 c90d                   cmp #13
  1147  86c7 60                 +   rts
  1148                          
  1149                          chkhelpmodes:
  1150  86c8 a9d6                   lda #<modes_keyword
  1151  86ca a294                   ldx #>modes_keyword
  1152                              ; fall through to chkkeyword
  1153                          
  1154                          chkkeyword:
  1155  86cc 8cfc94                 sty count
  1156  86cf 8d088e                 sta ptr3
  1157  86d2 8e098e                 stx ptr3+1
  1158  86d5 aefc94                 ldx count
  1159  86d8 a000                   ldy #0
  1160  86da 20f78d             -   jsr lda_at_ptr3_y
  1161  86dd dd0002                 cmp inputbuf, x
  1162  86e0 d00a                   bne +
  1163  86e2 e8                     inx
  1164  86e3 c8                     iny
  1165  86e4 ecfd94                 cpx len
  1166  86e7 d0f1                   bne -
  1167  86e9 20f78d                 jsr lda_at_ptr3_y ; matched if end of string, will set Z
  1168  86ec 08                 +   php ; save Z
  1169  86ed acfc94                 ldy count
  1170  86f0 28                     plp ; restore Z
  1171  86f1 60                     rts
  1172                          
  1173                          displayinstructions:
  1174  86f2 a038                   ldy #ninst
  1175  86f4 a200                   ldx #0
  1176  86f6 8a                 -   txa
  1177  86f7 48                     pha
  1178  86f8 202d82                 jsr dispinst
  1179  86fb a920                   lda #' '
  1180  86fd 20d2ff                 jsr charout
  1181  8700 68                     pla
  1182  8701 aa                     tax
  1183  8702 e8                     inx
  1184  8703 88                     dey
  1185  8704 d0f0                   bne -
  1186  8706 4c748d                 jmp newline
  1187                          
  1188                          displaymodes:
  1189  8709 38                     sec
  1190  870a a900                   lda #0
  1191  870c 48                 -   pha
  1192  870d aa                     tax
  1193  870e bd148f                 lda mode_sorted, x
  1194  8711 201e87                 jsr dispmode
  1195  8714 68                     pla
  1196  8715 18                     clc
  1197  8716 6901                   adc #1
  1198  8718 c90d                   cmp #nmodes
  1199  871a 90f0                   bcc -
  1200  871c 18                     clc
  1201  871d 60                     rts
  1202                          
  1203                          dispmode:
  1204  871e c90d                   cmp #nmodes
  1205  8720 b009                   bcs +
  1206  8722 8dfa94                 sta mode
  1207  8725 206d87                 jsr disp_modename_and_example
  1208  8728 4c2c87                 jmp dispmodeinstructions
  1209  872b 60                 +   rts
  1210                          
  1211                          dispmodeinstructions:
  1212                          !ifdef C64SCREEN {
  1213                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1214  872c adfa94                 lda mode
  1215  872f c903                   cmp #3
  1216  8731 d005                   bne +
  1217  8733 a920                   lda #' '
  1218  8735 4cd2ff                 jmp charout
  1219                          }
  1220                              ; display instructions with this mode
  1221  8738 a000               +   ldy #0
  1222  873a 8cf994             --  sty inidx
  1223  873d a200                   ldx #0
  1224  873f 8e0195             -   stx tmp
  1225  8742 adf994                 lda inidx
  1226  8745 ddaa90                 cmp instidx, x
  1227  8748 d016                   bne ++
  1228  874a bd4191                 lda modeidx, x
  1229  874d cdfa94                 cmp mode
  1230  8750 d00e                   bne ++
  1231  8752 a920                   lda #' '
  1232  8754 20d2ff                 jsr charout
  1233  8757 bdaa90                 lda instidx, x
  1234  875a 202d82                 jsr dispinst
  1235  875d ae0195                 ldx tmp
  1236  8760 e8                 ++  inx
  1237  8761 e097                   cpx #nopcodes
  1238  8763 90da                   bcc -
  1239  8765 c8                     iny
  1240  8766 c038                   cpy #ninst
  1241  8768 d0d0                   bne --
  1242  876a 4c748d                 jmp newline
  1243                          
  1244                          disp_modename_and_example:
  1245  876d 0a                     asl
  1246  876e aa                     tax
  1247  876f bdf98f                 lda modes, x
  1248  8772 48                     pha
  1249  8773 bdfa8f                 lda modes+1, x
  1250  8776 aa                     tax
  1251                          !ifdef C64SCREEN {
  1252  8777 a912                   lda #18
  1253  8779 20d2ff                 jsr charout
  1254                          }
  1255  877c 68                     pla
  1256  877d 204284                 jsr strout
  1257  8780 a920                   lda #' '
  1258  8782 20d2ff                 jsr charout
  1259  8785 204884                 jsr strout2
  1260                          !ifdef C64SCREEN {
  1261  8788 a992                   lda #146
  1262  878a 20d2ff                 jsr charout
  1263                          }
  1264  878d 60                     rts
  1265                          
  1266                          disp_modename_instruction_example:
  1267  878e 0a                     asl
  1268  878f aa                     tax
  1269  8790 bdf98f                 lda modes, x
  1270  8793 48                     pha
  1271  8794 bdfa8f                 lda modes+1, x
  1272  8797 aa                     tax
  1273  8798 68                     pla
  1274  8799 204284                 jsr strout ; mode name
  1275  879c ad088e                 lda ptr3
  1276  879f 48                     pha
  1277  87a0 ad098e                 lda ptr3+1
  1278  87a3 48                     pha
  1279  87a4 a93a                   lda #':'
  1280  87a6 20d2ff                 jsr charout
  1281  87a9 a920                   lda #' '
  1282  87ab 20d2ff                 jsr charout
  1283  87ae adf994                 lda inidx
  1284  87b1 202d82                 jsr dispinst ; instruction
  1285  87b4 a920                   lda #' '
  1286  87b6 20d2ff                 jsr charout
  1287  87b9 68                     pla
  1288  87ba 8d098e                 sta ptr3+1
  1289  87bd 68                     pla
  1290  87be 8d088e                 sta ptr3
  1291  87c1 204884                 jsr strout2 ; example
  1292  87c4 60                     rts
  1293                          
  1294                          
  1295                          executehelpinstruction:
  1296  87c5 a000                   ldy #0
  1297  87c7 8cf894             -   sty opidx
  1298  87ca b9aa90                 lda instidx, y
  1299  87cd cdf994                 cmp inidx
  1300  87d0 d01d                   bne +
  1301  87d2 b94191                 lda modeidx, y
  1302  87d5 8dfa94                 sta mode
  1303  87d8 aef894                 ldx opidx
  1304  87db bd1390                 lda opcodes, x
  1305  87de 20be83                 jsr disphexbyte
  1306  87e1 a920                   lda #' '
  1307  87e3 20d2ff                 jsr charout
  1308  87e6 adfa94                 lda mode
  1309  87e9 208e87                 jsr disp_modename_instruction_example
  1310  87ec 20748d                 jsr newline
  1311  87ef acf894             +   ldy opidx
  1312  87f2 c8                     iny
  1313  87f3 c097                   cpy #nopcodes
  1314  87f5 90d0                   bcc -
  1315  87f7 60                     rts
  1316                          
  1317                          continueassemble:
  1318                          !ifdef C64SCREEN {
  1319  87f8 20f080                 jsr continueassemblec64
  1320                          }
  1321                              ; continue...
  1322                          
  1323                          executeassemble:
  1324  87fb 68                     pla ; remove low byte return address
  1325  87fc 68                     pla ; return high byte return address
  1326                          !ifdef C64SCREEN {
  1327  87fd a914                   lda #20
  1328  87ff 20d2ff                 jsr charout
  1329  8802 20d2ff                 jsr charout
  1330                          } else {
  1331                              lda ptr1
  1332                              ldx ptr1+1
  1333                              jsr disphexword
  1334                              lda #' '
  1335                              jsr charout
  1336                          }
  1337                              ; save current pointer
  1338  8805 adf48d             --  lda ptr1
  1339  8808 aef58d                 ldx ptr1+1
  1340  880b 8d088e                 sta ptr3
  1341  880e 8e098e                 stx ptr3+1
  1342  8811 206384                 jsr inputline
  1343  8814 c001                   cpy #1
  1344  8816 f055                   beq ++
  1345  8818 88                     dey
  1346  8819 8cfd94                 sty len
  1347  881c a000                   ldy #0
  1348  881e 20878c                 jsr skipspaces
  1349  8821 ccfd94                 cpy len
  1350  8824 f047                   beq ++
  1351                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1352                              ;jsr skipspaces
  1353  8826 208b8b                 jsr chkinstruction
  1354  8829 f00f                   beq +
  1355  882b ad088e             -   lda ptr3
  1356  882e 8df48d                 sta ptr1
  1357  8831 ad098e                 lda ptr3+1
  1358  8834 8df58d                 sta ptr1+1
  1359  8837 4caa84                 jmp error
  1360  883a 20a088             +   jsr chkaddressing
  1361  883d d0ec                   bne -
  1362  883f 20c08b                 jsr find_inst_and_mode
  1363  8842 d0e7                   bne -
  1364  8844 207088                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1365  8847 18                     clc
  1366  8848 adfb94                 lda size
  1367  884b 6d088e                 adc ptr3
  1368  884e 8df48d                 sta ptr1
  1369  8851 ad098e                 lda ptr3+1
  1370  8854 6900                   adc #0
  1371  8856 8df58d                 sta ptr1+1
  1372                          !ifdef C64SCREEN {
  1373  8859 20748d                 jsr newline
  1374                          }
  1375  885c adf48d                 lda ptr1
  1376  885f aef58d                 ldx ptr1+1
  1377  8862 20b883                 jsr disphexword
  1378  8865 a920                   lda #' '
  1379  8867 20d2ff                 jsr charout
  1380  886a 4c0588                 jmp --
  1381                          ++
  1382                          !ifdef C64SCREEN {
  1383  886d 4c748d                 jmp newline
  1384                          } else {
  1385                              rts
  1386                          }
  1387                          
  1388                          store_assembly:
  1389  8870 aef894                 ldx opidx
  1390  8873 bd1390                 lda opcodes, x
  1391  8876 a000                   ldy #0
  1392  8878 20078e                 jsr sta_at_ptr3_y
  1393  887b c8                     iny
  1394  887c aefb94                 ldx size
  1395  887f e001                   cpx #1
  1396  8881 f01c                   beq ++
  1397  8883 e002               +   cpx #2
  1398  8885 d007                   bne +
  1399  8887 adff94                 lda tmp2
  1400  888a 20078e                 jsr sta_at_ptr3_y
  1401  888d 60                     rts
  1402  888e e003               +   cpx #3
  1403  8890 d00d                   bne ++
  1404  8892 adf48d                 lda ptr1
  1405  8895 20078e                 jsr sta_at_ptr3_y
  1406  8898 c8                     iny
  1407  8899 adf58d                 lda ptr1+1
  1408  889c 20078e                 jsr sta_at_ptr3_y
  1409  889f 60                 ++  rts
  1410                          
  1411                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1412  88a0 20878c                 jsr skipspaces
  1413  88a3 a200                   ldx #0
  1414  88a5 8efa94                 stx mode
  1415  88a8 201189                 jsr chkaccumulator
  1416  88ab f05e                   beq +
  1417  88ad eefa94                 inc mode
  1418  88b0 ccfd94                 cpy len ; chknone
  1419  88b3 f056                   beq +
  1420  88b5 eefa94                 inc mode
  1421  88b8 203789                 jsr chkimmediate
  1422  88bb f04e                   beq +
  1423  88bd eefa94                 inc mode
  1424  88c0 205e89                 jsr chkindirectx
  1425  88c3 f046                   beq +
  1426  88c5 eefa94                 inc mode
  1427  88c8 20a689                 jsr chkindirecty
  1428  88cb f03e                   beq +
  1429  88cd eefa94                 inc mode
  1430  88d0 20ee89                 jsr chkrelative
  1431  88d3 f036                   beq +
  1432  88d5 eefa94                 inc mode
  1433  88d8 20598a                 jsr chkzeropage
  1434  88db f02e                   beq +
  1435  88dd eefa94                 inc mode
  1436  88e0 20758a                 jsr chkzeropagex
  1437  88e3 f026                   beq +
  1438  88e5 eefa94                 inc mode
  1439  88e8 20a78a                 jsr chkzeropagey
  1440  88eb f01e                   beq +
  1441  88ed eefa94                 inc mode
  1442  88f0 20d98a                 jsr chkabsolute
  1443  88f3 f016                   beq +
  1444  88f5 eefa94                 inc mode
  1445  88f8 20f58a                 jsr chkabsolutex
  1446  88fb f00e                   beq +
  1447  88fd eefa94                 inc mode
  1448  8900 20278b                 jsr chkabsolutey
  1449  8903 f006                   beq +
  1450  8905 eefa94                 inc mode
  1451  8908 20598b                 jsr chkindirect
  1452  890b 08                 +   php ; save Z
  1453  890c adfa94                 lda mode
  1454  890f 28                     plp ; restore Z
  1455  8910 60                     rts
  1456                          
  1457                          chkaccumulator:
  1458  8911 ccfd94                 cpy len
  1459  8914 d014                   bne +
  1460  8916 adf994                 lda inidx
  1461  8919 c902                   cmp #2 ; ASL
  1462  891b f019                   beq ++
  1463  891d c920                   cmp #32 ; LSR
  1464  891f f015                   beq ++
  1465  8921 c927                   cmp #39 ; ROL
  1466  8923 f011                   beq ++
  1467  8925 c928                   cmp #40 ; ROR
  1468  8927 4c3689                 jmp ++
  1469  892a b90002             +   lda inputbuf, y
  1470  892d c941                   cmp #'A'
  1471  892f d005                   bne ++
  1472  8931 b90102                 lda inputbuf+1,y
  1473  8934 c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1474  8936 60                 ++  rts
  1475                          
  1476                          chkimmediate:
  1477  8937 8cfe94                 sty savepos
  1478  893a b90002                 lda inputbuf, y
  1479  893d c923                   cmp #'#'
  1480  893f d017                   bne ++
  1481  8941 c8                     iny
  1482  8942 20878c                 jsr skipspaces
  1483  8945 b90002                 lda inputbuf, y
  1484  8948 c924                   cmp #'$'
  1485  894a d001                   bne +
  1486  894c c8                     iny
  1487  894d 20dd8c             +   jsr chkhexbyte
  1488  8950 d006                   bne ++
  1489  8952 ccfd94             +   cpy len
  1490  8955 d001                   bne ++
  1491  8957 60                     rts
  1492  8958 acfe94             ++  ldy savepos
  1493  895b a201                   ldx #1 ; Z false (NE)
  1494  895d 60                     rts
  1495                          
  1496                          chkindirectx:
  1497  895e 8cfe94                 sty savepos
  1498  8961 b90002                 lda inputbuf, y
  1499  8964 c928                   cmp #'('
  1500  8966 d038                   bne ++
  1501  8968 c8                     iny
  1502  8969 20878c                 jsr skipspaces
  1503  896c b90002                 lda inputbuf, y
  1504  896f c924                   cmp #'$'
  1505  8971 d001                   bne +
  1506  8973 c8                     iny
  1507  8974 20dd8c             +   jsr chkhexbyte
  1508  8977 d027                   bne ++
  1509  8979 20878c                 jsr skipspaces
  1510  897c b90002                 lda inputbuf, y
  1511  897f c92c                   cmp #','
  1512  8981 d01d                   bne ++
  1513  8983 c8                     iny
  1514  8984 20878c                 jsr skipspaces
  1515  8987 b90002                 lda inputbuf, y
  1516  898a c958                   cmp #'X'
  1517  898c d012                   bne ++
  1518  898e c8                     iny
  1519  898f 20878c                 jsr skipspaces
  1520  8992 b90002                 lda inputbuf, y
  1521  8995 c929                   cmp #')'
  1522  8997 d007                   bne ++
  1523  8999 c8                     iny
  1524  899a ccfd94                 cpy len
  1525  899d d001                   bne ++
  1526  899f 60                     rts
  1527  89a0 acfe94             ++  ldy savepos
  1528  89a3 a201                   ldx #1 ; Z false (NE)
  1529  89a5 60                     rts
  1530                          
  1531                          chkindirecty:
  1532  89a6 8cfe94                 sty savepos
  1533  89a9 b90002                 lda inputbuf, y
  1534  89ac c928                   cmp #'('
  1535  89ae d038                   bne ++
  1536  89b0 c8                     iny
  1537  89b1 20878c                 jsr skipspaces
  1538  89b4 b90002                 lda inputbuf, y
  1539  89b7 c924                   cmp #'$'
  1540  89b9 d001                   bne +
  1541  89bb c8                     iny
  1542  89bc 20dd8c             +   jsr chkhexbyte
  1543  89bf d027                   bne ++
  1544  89c1 20878c                 jsr skipspaces
  1545  89c4 b90002                 lda inputbuf, y
  1546  89c7 c929                   cmp #')'
  1547  89c9 d01d                   bne ++
  1548  89cb c8                     iny
  1549  89cc 20878c                 jsr skipspaces
  1550  89cf b90002                 lda inputbuf, y
  1551  89d2 c92c                   cmp #','
  1552  89d4 d012                   bne ++
  1553  89d6 c8                     iny
  1554  89d7 20878c                 jsr skipspaces
  1555  89da b90002                 lda inputbuf, y
  1556  89dd c959                   cmp #'Y'
  1557  89df d007                   bne ++
  1558  89e1 c8                     iny
  1559  89e2 ccfd94                 cpy len
  1560  89e5 d001                   bne ++
  1561  89e7 60                     rts
  1562  89e8 acfe94             ++  ldy savepos
  1563  89eb a201                   ldx #1 ; Z false (NE)
  1564  89ed 60                     rts
  1565                          
  1566                          chkrelative:
  1567  89ee 8cfe94                 sty savepos
  1568  89f1 aef994                 ldx inidx
  1569  89f4 e006                   cpx #6 ; BIT
  1570  89f6 f01f                   beq ++
  1571  89f8 bd528e                 lda inst0, x
  1572  89fb c942                   cmp #'B'
  1573  89fd d018                   bne ++
  1574  89ff b90002                 lda inputbuf, y
  1575  8a02 c924                   cmp #'$'
  1576  8a04 d001                   bne +
  1577  8a06 c8                     iny
  1578  8a07 20d48c             +   jsr chkhexword
  1579  8a0a d00b                   bne ++
  1580  8a0c ccfd94                 cpy len
  1581  8a0f d006                   bne ++
  1582  8a11 201d8a                 jsr computeoffset
  1583  8a14 d001                   bne ++
  1584  8a16 60                     rts ; Z true (EQ)
  1585  8a17 acfe94             ++  ldy savepos
  1586  8a1a a201                   ldx #1 ; Z false (NE)
  1587  8a1c 60                     rts
  1588                          
  1589                          computeoffset:
  1590                          ;   compute next address
  1591  8a1d ad098e                 lda ptr3+1
  1592  8a20 8d0395                 sta ptr2+1
  1593  8a23 ad088e                 lda ptr3
  1594  8a26 18                     clc
  1595  8a27 6902                   adc #2
  1596  8a29 8d0295                 sta ptr2
  1597  8a2c 9003                   bcc +
  1598  8a2e ee0395                 inc ptr2+1
  1599                          +  ; subtract argument
  1600  8a31 38                     sec
  1601  8a32 adf48d                 lda ptr1
  1602  8a35 ed0295                 sbc ptr2
  1603  8a38 8dff94                 sta tmp2
  1604  8a3b adf58d                 lda ptr1+1
  1605  8a3e ed0395                 sbc ptr2+1
  1606  8a41 f00b                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1607  8a43 c9ff                   cmp #$FF
  1608  8a45 d00f                   bne failedoffset ; 0 and FF were only options so fail
  1609                              ; chkeck negative offset
  1610  8a47 adff94                 lda tmp2
  1611  8a4a 3007                   bmi successoffset ; branch if signed byte is negative
  1612  8a4c 1008                   bpl failedoffset ; otherwise fail
  1613                          chkoffsetto127:
  1614  8a4e adff94                 lda tmp2
  1615  8a51 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1616                          successoffset:
  1617  8a53 a900                   lda #0 ; Z true (EQ)
  1618  8a55 60                     rts
  1619                          failedoffset:
  1620  8a56 a901                   lda #1 ; Z false (NE)
  1621  8a58 60                     rts
  1622                          
  1623                          chkzeropage:
  1624  8a59 8cfe94                 sty savepos
  1625  8a5c b90002                 lda inputbuf, y
  1626  8a5f c924                   cmp #'$'
  1627  8a61 d001                   bne +
  1628  8a63 c8                     iny
  1629  8a64 20dd8c             +   jsr chkhexbyte
  1630  8a67 d006                   bne ++
  1631  8a69 ccfd94                 cpy len
  1632  8a6c d001                   bne ++
  1633  8a6e 60                     rts ; Z true (EQ)
  1634  8a6f acfe94             ++  ldy savepos
  1635  8a72 a201                   ldx #1 ; Z false (NE)
  1636  8a74 60                     rts
  1637                          
  1638                          chkzeropagex:
  1639  8a75 8cfe94                 sty savepos
  1640  8a78 b90002                 lda inputbuf, y
  1641  8a7b c924                   cmp #'$'
  1642  8a7d d001                   bne +
  1643  8a7f c8                     iny
  1644  8a80 20dd8c             +   jsr chkhexbyte
  1645  8a83 d01c                   bne ++
  1646  8a85 20878c                 jsr skipspaces
  1647  8a88 b90002                 lda inputbuf, y
  1648  8a8b c92c                   cmp #','
  1649  8a8d d012                   bne ++
  1650  8a8f c8                     iny
  1651  8a90 20878c                 jsr skipspaces
  1652  8a93 b90002                 lda inputbuf, y
  1653  8a96 c958                   cmp #'X'
  1654  8a98 d007                   bne ++
  1655  8a9a c8                     iny
  1656  8a9b ccfd94                 cpy len
  1657  8a9e d001                   bne ++
  1658  8aa0 60                     rts ; Z true (EQ)
  1659  8aa1 acfe94             ++  ldy savepos
  1660  8aa4 a201                   ldx #1 ; Z false (NE)
  1661  8aa6 60                     rts
  1662                          
  1663                          chkzeropagey:
  1664  8aa7 8cfe94                 sty savepos
  1665  8aaa b90002                 lda inputbuf, y
  1666  8aad c924                   cmp #'$'
  1667  8aaf d001                   bne +
  1668  8ab1 c8                     iny
  1669  8ab2 20dd8c             +   jsr chkhexbyte
  1670  8ab5 d01c                   bne ++
  1671  8ab7 20878c                 jsr skipspaces
  1672  8aba b90002                 lda inputbuf, y
  1673  8abd c92c                   cmp #','
  1674  8abf d012                   bne ++
  1675  8ac1 c8                     iny
  1676  8ac2 20878c                 jsr skipspaces
  1677  8ac5 b90002                 lda inputbuf, y
  1678  8ac8 c959                   cmp #'Y'
  1679  8aca d007                   bne ++
  1680  8acc c8                     iny
  1681  8acd ccfd94                 cpy len
  1682  8ad0 d001                   bne ++
  1683  8ad2 60                     rts ; Z true (EQ)
  1684  8ad3 acfe94             ++  ldy savepos
  1685  8ad6 a201                   ldx #1 ; Z false (NE)
  1686  8ad8 60                     rts
  1687                          
  1688                          chkabsolute:
  1689  8ad9 8cfe94                 sty savepos
  1690  8adc b90002                 lda inputbuf, y
  1691  8adf c924                   cmp #'$'
  1692  8ae1 d001                   bne +
  1693  8ae3 c8                     iny
  1694  8ae4 20d48c             +   jsr chkhexword
  1695  8ae7 d006                   bne ++
  1696  8ae9 ccfd94                 cpy len
  1697  8aec d001                   bne ++
  1698  8aee 60                     rts ; Z true (EQ)
  1699  8aef acfe94             ++  ldy savepos
  1700  8af2 a201                   ldx #1 ; Z false (NE)
  1701  8af4 60                     rts
  1702                          
  1703                          chkabsolutex:
  1704  8af5 8cfe94                 sty savepos
  1705  8af8 b90002                 lda inputbuf, y
  1706  8afb c924                   cmp #'$'
  1707  8afd d001                   bne +
  1708  8aff c8                     iny
  1709  8b00 20d48c             +   jsr chkhexword
  1710  8b03 d01c                   bne ++
  1711  8b05 20878c                 jsr skipspaces
  1712  8b08 b90002                 lda inputbuf, y
  1713  8b0b c92c                   cmp #','
  1714  8b0d d012                   bne ++
  1715  8b0f c8                     iny
  1716  8b10 20878c                 jsr skipspaces
  1717  8b13 b90002                 lda inputbuf, y
  1718  8b16 c958                   cmp #'X'
  1719  8b18 d007                   bne ++
  1720  8b1a c8                     iny
  1721  8b1b ccfd94                 cpy len
  1722  8b1e d001                   bne ++
  1723  8b20 60                     rts ; Z true (EQ)
  1724  8b21 acfe94             ++  ldy savepos
  1725  8b24 a201                   ldx #1 ; Z false (NE)
  1726  8b26 60                     rts
  1727                          
  1728                          chkabsolutey:
  1729  8b27 8cfe94                 sty savepos
  1730  8b2a b90002                 lda inputbuf, y
  1731  8b2d c924                   cmp #'$'
  1732  8b2f d001                   bne +
  1733  8b31 c8                     iny
  1734  8b32 20d48c             +   jsr chkhexword
  1735  8b35 d01c                   bne ++
  1736  8b37 20878c                 jsr skipspaces
  1737  8b3a b90002                 lda inputbuf, y
  1738  8b3d c92c                   cmp #','
  1739  8b3f d012                   bne ++
  1740  8b41 c8                     iny
  1741  8b42 20878c                 jsr skipspaces
  1742  8b45 b90002                 lda inputbuf, y
  1743  8b48 c959                   cmp #'Y'
  1744  8b4a d007                   bne ++
  1745  8b4c c8                     iny
  1746  8b4d ccfd94                 cpy len
  1747  8b50 d001                   bne ++
  1748  8b52 60                     rts ; Z true (EQ)
  1749  8b53 acfe94             ++  ldy savepos
  1750  8b56 a201                   ldx #1 ; Z false (NE)
  1751  8b58 60                     rts
  1752                          
  1753                          chkindirect:
  1754  8b59 8cfe94                 sty savepos
  1755  8b5c b90002                 lda inputbuf, y
  1756  8b5f c928                   cmp #'('
  1757  8b61 d022                   bne ++
  1758  8b63 c8                     iny
  1759  8b64 20878c                 jsr skipspaces
  1760  8b67 b90002                 lda inputbuf, y
  1761  8b6a c924                   cmp #'$'
  1762  8b6c d001                   bne +
  1763  8b6e c8                     iny
  1764  8b6f 20d48c             +   jsr chkhexword
  1765  8b72 d011                   bne ++
  1766  8b74 20878c                 jsr skipspaces
  1767  8b77 b90002                 lda inputbuf, y
  1768  8b7a c929                   cmp #')'
  1769  8b7c d007                   bne ++
  1770  8b7e c8                     iny
  1771  8b7f ccfd94                 cpy len
  1772  8b82 d001                   bne ++
  1773  8b84 60                     rts ; Z true (EQ)
  1774  8b85 acfe94             ++  ldy savepos
  1775  8b88 a201                   ldx #1 ; Z false (NE)
  1776  8b8a 60                     rts
  1777                          
  1778                          chkinstruction:
  1779  8b8b ccfd94                 cpy len
  1780  8b8e f02d                   beq ++
  1781  8b90 8c0195                 sty tmp
  1782  8b93 a237                   ldx #(ninst-1)
  1783  8b95 b90002             -   lda inputbuf,y
  1784  8b98 dd528e                 cmp inst0,x
  1785  8b9b d01a                   bne +
  1786  8b9d c8                     iny
  1787  8b9e b90002                 lda inputbuf,y
  1788  8ba1 dd8a8e                 cmp inst1,x
  1789  8ba4 d011                   bne +
  1790  8ba6 c8                     iny
  1791  8ba7 b90002                 lda inputbuf,y
  1792  8baa ddc28e                 cmp inst2,x
  1793  8bad d008                   bne +
  1794  8baf c8                     iny
  1795  8bb0 8a                     txa
  1796  8bb1 8df994                 sta inidx
  1797  8bb4 a200                   ldx #0
  1798  8bb6 60                     rts
  1799  8bb7 ac0195             +   ldy tmp
  1800  8bba ca                     dex
  1801  8bbb 10d8                   bpl -
  1802  8bbd a201               ++  ldx #1 ; Z false (NE)
  1803  8bbf 60                     rts
  1804                          
  1805                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1806                              ; and allows mode promotion
  1807  8bc0 20e98b                 jsr find_inst_and_mode2
  1808  8bc3 f023                   beq ++
  1809  8bc5 adfa94                 lda mode
  1810  8bc8 c906                   cmp #6
  1811  8bca 901c                   bcc ++
  1812  8bcc c90a                   cmp #10
  1813  8bce b016                   bcs +
  1814  8bd0 6903                   adc #3
  1815  8bd2 8dfa94                 sta mode ; promote ZeroPage modes to Absolute modes
  1816  8bd5 20e98b                 jsr find_inst_and_mode2 ; try again once
  1817  8bd8 d00e                   bne ++
  1818  8bda adff94                 lda tmp2
  1819  8bdd 8df48d                 sta ptr1
  1820  8be0 a900                   lda #0
  1821  8be2 8df58d                 sta ptr1+1
  1822  8be5 60                     rts ; Z true (EQ)
  1823  8be6 a201               +   ldx #1 ; Z false (NE)
  1824  8be8 60                 ++  rts
  1825                          
  1826                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1827  8be9 a296                   ldx #nopcodes-1
  1828  8beb bdaa90             -   lda instidx, x
  1829  8bee bc4191                 ldy modeidx, x
  1830  8bf1 cdf994                 cmp inidx
  1831  8bf4 d00e                   bne +
  1832  8bf6 ccfa94                 cpy mode
  1833  8bf9 d009                   bne +
  1834  8bfb 8ef894                 stx opidx
  1835  8bfe 201382                 jsr getsize
  1836  8c01 a200                   ldx #0 ; Z true (EQ)
  1837  8c03 60                     rts
  1838  8c04 ca                 +   dex
  1839  8c05 e0ff                   cpx #$ff
  1840  8c07 d0e2                   bne -
  1841  8c09 a201                   ldx #1 ; Z false (NE)
  1842  8c0b 60                     rts
  1843                          
  1844                          executerun:
  1845  8c0c 68                     pla ; remove low byte return address
  1846  8c0d 68                     pla ; return high byte return address
  1847  8c0e 68                     pla ; again, we're really not returning
  1848  8c0f 68                     pla ; again, we're really not returning
  1849  8c10 20748d                 jsr newline
  1850                          !ifndef MINIMUM {
  1851                          ; any C64
  1852  8c13 205980                 jsr install_nmi64
  1853                          }
  1854                          +   ; restore registers
  1855  8c16 ae0c95                 ldx registerSP
  1856  8c19 9a                     txs
  1857  8c1a ad0d95                 lda registerSR
  1858  8c1d 48                     pha
  1859  8c1e ad0995                 lda registerA
  1860  8c21 ae0a95                 ldx registerX
  1861  8c24 ac0b95                 ldy registerY
  1862  8c27 28                     plp
  1863  8c28 6cf48d                 jmp (ptr1)
  1864                          
  1865                          chkcontinuedis:
  1866  8c2b b90002                 lda inputbuf,y
  1867  8c2e c944                   cmp #'D'
  1868  8c30 d00a                   bne +
  1869  8c32 b90102                 lda inputbuf+1,y
  1870  8c35 c90d                   cmp #13
  1871  8c37 d003                   bne +
  1872  8c39 c8                     iny
  1873  8c3a a200                   ldx #0 ; restore Z set
  1874  8c3c 60                 +   rts
  1875                          
  1876                          chkcontinueasm:
  1877  8c3d b90002                 lda inputbuf,y
  1878  8c40 c941                   cmp #'A'
  1879  8c42 d00a                   bne +
  1880  8c44 b90102                 lda inputbuf+1,y
  1881  8c47 c90d                   cmp #13
  1882  8c49 d003                   bne +
  1883  8c4b c8                     iny
  1884  8c4c a200                   ldx #0 ; restore Z set
  1885  8c4e 60                 +   rts
  1886                          
  1887                          executedisassemble:
  1888  8c4f 68                     pla ; remove low byte return address
  1889  8c50 68                     pla ; return high byte return address
  1890  8c51 20748d                 jsr newline
  1891  8c54 4cac81                 jmp disassemble
  1892                          
  1893                          reportnotimplemented:
  1894  8c57 a995                   lda #<notimplemented
  1895  8c59 a292                   ldx #>notimplemented
  1896  8c5b 4c4284                 jmp strout
  1897                          
  1898                          reporterr:
  1899  8c5e c000                   cpy #0
  1900  8c60 f008                   beq +
  1901  8c62 a920                   lda #' '
  1902  8c64 20d2ff             -   jsr charout
  1903  8c67 88                     dey
  1904  8c68 d0fa                   bne -
  1905  8c6a a93f               +   lda #'?'
  1906  8c6c 20d2ff                 jsr charout
  1907  8c6f a90d                   lda #13
  1908  8c71 20d2ff                 jsr charout
  1909  8c74 60                     rts
  1910                          
  1911                          chkspace:
  1912  8c75 b90002                 lda inputbuf, y
  1913                          !ifndef MINIMUM {
  1914                              ; skip SHIFT-SPACES too on Commodore
  1915  8c78 c9a0                   cmp #$A0
  1916  8c7a f004                   beq +
  1917                          }
  1918  8c7c c920                   cmp #$20
  1919  8c7e d006                   bne ++
  1920  8c80 c8                 +   iny
  1921  8c81 20878c                 jsr skipspaces
  1922  8c84 a900                   lda #0 ; set Z
  1923  8c86 60                 ++  rts
  1924                          
  1925                          skipspaces:
  1926  8c87 b90002             -   lda inputbuf, y
  1927                          !ifndef MINIMUM {
  1928                              ; skip SHIFT-SPACES too on Commodore
  1929  8c8a c9a0                   cmp #$A0
  1930  8c8c f004                   beq +
  1931                          }
  1932  8c8e c920                   cmp #$20
  1933  8c90 d003                   bne ++
  1934  8c92 c8                 +   iny
  1935  8c93 d0f2                   bne -
  1936  8c95 60                 ++  rts
  1937                          
  1938                          chkdot:
  1939  8c96 b90002                 lda inputbuf, y
  1940  8c99 c92e                   cmp #'.'
  1941  8c9b d003                   bne +
  1942  8c9d c8                     iny
  1943  8c9e a900                   lda #0 ; Z true (EQ)
  1944  8ca0 60                 +   rts
  1945                          
  1946                          chkhelp:
  1947  8ca1 b90002                 lda inputbuf, y
  1948  8ca4 c93f                   cmp #'?'
  1949  8ca6 d003                   bne +
  1950  8ca8 c8                     iny
  1951  8ca9 a900                   lda #0 ; Z true (EQ)
  1952  8cab 60                 +   rts
  1953                          
  1954                          chkcolon:
  1955  8cac b90002                 lda inputbuf, y
  1956  8caf c93a                   cmp #':'
  1957  8cb1 d003                   bne +
  1958  8cb3 c8                     iny
  1959  8cb4 a900                   lda #0 ; Z true (EQ)
  1960  8cb6 60                 +   rts
  1961                          
  1962                          chkhexbyteofsequence:
  1963  8cb7 200184                 jsr inputhexbyte
  1964  8cba 20d78c                 jsr +
  1965  8cbd d014                   bne ++ ; Z false (NE) if failed checks
  1966  8cbf ccfd94                 cpy len
  1967  8cc2 f00f                   beq ++ ; Z true (EQ) if end of input
  1968  8cc4 8d0195                 sta tmp
  1969  8cc7 b90002                 lda inputbuf,y
  1970  8cca c920                   cmp #$20
  1971  8ccc d005                   bne ++ ; Z false (NE) if not space
  1972  8cce ad0195                 lda tmp
  1973  8cd1 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1974  8cd3 60                 ++  rts
  1975                          
  1976                          chkhexword:
  1977                          chkhexaddr1:
  1978  8cd4 20d483                 jsr inputhexword
  1979  8cd7 a200               +   ldx #0 ; Z true (EQ)
  1980  8cd9 9001                   bcc +
  1981  8cdb e8                     inx ; Z false (NE)
  1982  8cdc 60                 +   rts
  1983                          
  1984                          chkhexbyte:
  1985  8cdd 98                     tya
  1986  8cde 48                     pha ; save y
  1987  8cdf 200184                 jsr inputhexbyte
  1988  8ce2 b00f                   bcs +
  1989  8ce4 8dff94                 sta tmp2
  1990  8ce7 202484                 jsr inputhexnybble
  1991  8cea 9007                   bcc +
  1992  8cec 68                     pla ; throw away saved y
  1993  8ced adff94                 lda tmp2
  1994  8cf0 a200                   ldx #0 ; Z true (EQ)
  1995  8cf2 60                     rts
  1996  8cf3 68                 +   pla
  1997  8cf4 a8                     tay ; won't be zero, so Z false (NE)
  1998  8cf5 60                     rts
  1999                          
  2000                          chkhexaddr2:
  2001  8cf6 adf48d                 lda ptr1
  2002  8cf9 48                     pha
  2003  8cfa adf58d                 lda ptr1+1
  2004  8cfd 48                     pha
  2005  8cfe 20d48c                 jsr chkhexaddr1
  2006  8d01 f005                   beq +
  2007  8d03 68                     pla
  2008  8d04 68                     pla
  2009  8d05 a901                   lda #1 ; Z false (NE)
  2010  8d07 60                     rts
  2011  8d08 adf48d             +   lda ptr1
  2012  8d0b 8d0295                 sta ptr2
  2013  8d0e adf58d                 lda ptr1+1
  2014  8d11 8d0395                 sta ptr2+1
  2015  8d14 68                     pla
  2016  8d15 8df58d                 sta ptr1+1
  2017  8d18 68                     pla
  2018  8d19 8df48d                 sta ptr1
  2019  8d1c a900                   lda #0 ; Z true (EQ)
  2020  8d1e 60                     rts
  2021                          
  2022                          chkbinbyte:
  2023  8d1f a208                   ldx #8
  2024  8d21 202f8d             -   jsr chkbindigit
  2025  8d24 d008                   bne +
  2026  8d26 ca                     dex
  2027  8d27 d0f8                   bne -
  2028  8d29 08                     php ; save Z true
  2029  8d2a adff94                 lda tmp2
  2030  8d2d 28                     plp ; restore Z true
  2031  8d2e 60                 +   rts
  2032                          
  2033                          chkbindigit:
  2034  8d2f b90002                 lda inputbuf, y
  2035  8d32 38                     sec
  2036  8d33 e930                   sbc #$30
  2037  8d35 900b                   bcc +
  2038  8d37 c902                   cmp #$02
  2039  8d39 b007                   bcs +
  2040  8d3b 4a                     lsr ; rotate bit value into C
  2041  8d3c 2eff94                 rol tmp2 ; rotate bit value into tmp2
  2042  8d3f c8                     iny ; advance in buffer
  2043  8d40 a900                   lda #0 ; set Z
  2044  8d42 60                 +   rts
  2045                          
  2046                          chkaddr1cmd:
  2047  8d43 b90002                 lda inputbuf, y
  2048  8d46 c941               +   cmp #'A'
  2049  8d48 d00b                   bne +
  2050  8d4a be0102                 ldx inputbuf+1, y
  2051  8d4d e00d                   cpx #13
  2052  8d4f d004                   bne +
  2053  8d51 c8                     iny
  2054  8d52 4cfb87                 jmp executeassemble
  2055  8d55 c944               +   cmp #'D'
  2056  8d57 d00b                   bne +
  2057  8d59 be0102                 ldx inputbuf+1, y
  2058  8d5c e00d                   cpx #13
  2059  8d5e d004                   bne +
  2060  8d60 c8                     iny
  2061  8d61 4c4f8c                 jmp executedisassemble
  2062  8d64 c952               +   cmp #'R'
  2063  8d66 d00b                   bne +
  2064  8d68 be0102                 ldx inputbuf+1, y
  2065  8d6b e00d                   cpx #13
  2066  8d6d d004                   bne +
  2067  8d6f c8                     iny
  2068  8d70 4c0c8c                 jmp executerun
  2069  8d73 60                 +   rts
  2070                          
  2071                          newline:
  2072  8d74 a90d                   lda #13
  2073  8d76 4cd2ff                 jmp charout
  2074                          
  2075                          space:
  2076  8d79 a920                   lda #32
  2077  8d7b 4cd2ff                 jmp charout
  2078                          
  2079                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  2080                          ;     jsr $ffd2
  2081                          ;     pha
  2082                          ; -   lda $d011
  2083                          ;     bpl -
  2084                          ; -   lda $d011
  2085                          ;     bmi -
  2086                          ; -   lda $d011
  2087                          ;     bpl -
  2088                          ; -   lda $d011
  2089                          ;     bmi -
  2090                          ;     pla
  2091                          ;     rts
  2092                          
  2093                          save_registers:
  2094  8d7e 08                     php
  2095  8d7f 8d0995                 sta registerA
  2096  8d82 8e0a95                 stx registerX
  2097  8d85 8c0b95                 sty registerY
  2098  8d88 68                     pla
  2099  8d89 8d0d95                 sta registerSR
  2100  8d8c ba                     tsx
  2101  8d8d 8e0c95                 stx registerSP
  2102  8d90 4c958d                 jmp +
  2103                          
  2104                          execute_display_registers:
  2105  8d93 68                     pla ; remove return address
  2106  8d94 68                     pla
  2107                          +
  2108                              ; need some normality
  2109  8d95 58                     cli
  2110  8d96 d8                     cld
  2111                          
  2112  8d97 20748d                 jsr newline
  2113  8d9a 20a38d                 jsr display_registers
  2114                          !ifndef MINIMUM {
  2115                              ; any C64
  2116  8d9d 207480                 jsr uninstall_nmi64
  2117                          }
  2118  8da0 4c5080                 jmp input_loop
  2119                          
  2120                          ; PC   NV-BDIZC .A .X .Y .S
  2121                          ; 1234 10111011 01 02 03 FF
  2122                          display_registers:
  2123  8da3 a9db                   lda #<reg_header
  2124  8da5 a294                   ldx #>reg_header
  2125  8da7 204284                 jsr strout
  2126  8daa ad0e95                 lda registerPC
  2127  8dad ae0f95                 ldx registerPC+1
  2128  8db0 20b883                 jsr disphexword
  2129  8db3 20798d                 jsr space
  2130  8db6 ad0d95                 lda registerSR
  2131  8db9 20a383                 jsr dispbinbyte
  2132  8dbc 20798d                 jsr space
  2133  8dbf ad0995                 lda registerA
  2134  8dc2 20be83                 jsr disphexbyte
  2135  8dc5 20798d                 jsr space
  2136  8dc8 ad0a95                 lda registerX
  2137  8dcb 20be83                 jsr disphexbyte
  2138  8dce 20798d                 jsr space
  2139  8dd1 ad0b95                 lda registerY
  2140  8dd4 20be83                 jsr disphexbyte
  2141  8dd7 20798d                 jsr space
  2142  8dda ad0c95                 lda registerSP
  2143  8ddd 20be83                 jsr disphexbyte
  2144  8de0 4c748d                 jmp newline
  2145                          
  2146                          !ifdef MINIMUM {
  2147                          
  2148                          lda_at_ptr1_y:
  2149                              lda (ptr1),y
  2150                              rts
  2151                          
  2152                          sta_at_ptr1_y:
  2153                              sta (ptr1),y
  2154                              rts
  2155                          
  2156                          lda_at_ptr3_y:
  2157                              lda (ptr3),y
  2158                              rts
  2159                          
  2160                          sta_at_ptr3_y:
  2161                              sta (ptr3),y
  2162                              rts
  2163                          
  2164                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2165                          ;; MC6850
  2166                          UART_DATA=$FFF8
  2167                          UART_STCR=$FFF9
  2168                          
  2169                          UART_INIT:
  2170                          	ldx #0b00000111 ; 11=reset device
  2171                          	stx UART_STCR
  2172                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  2173                          	sta UART_STCR
  2174                          	rts
  2175                          UART_OUT:
  2176                          	pha
  2177                          -	lda UART_STCR
  2178                          	and #2
  2179                          	beq - ; branch if TDRE=0, not finished transmitting
  2180                          	pla
  2181                          	pha
  2182                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  2183                          	sta UART_DATA
  2184                          	pla
  2185                          	rts
  2186                          UART_IN:
  2187                          -	lda UART_STCR
  2188                          	and #1
  2189                          	beq - ; branch if TDRF=0, not received
  2190                          	lda UART_DATA
  2191                          	; software "CAPS LOCK" because wozmon expects only uppercase
  2192                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  2193                          	beq BREAK
  2194                              ; force lowercase alphabet to uppercase
  2195                              cmp #'a'
  2196                          	bcc +
  2197                          	cmp #'z'+1
  2198                          	bcs +
  2199                          	eor #$20
  2200                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  2201                           	rts
  2202                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  2203                          	pha ; save A
  2204                          	lda UART_STCR
  2205                          	lsr ; put rightmost bit in carry
  2206                          	pla ; restore A affects flags
  2207                          	ror ; move carry to left bit, right bit to carry
  2208                          	php ; push processor to save N
  2209                          	rol ; restore A affects flags
  2210                          	plp ; pull processor to restore N
  2211                          	rts
  2212                          
  2213                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2214                          ; Processor start and interrupts
  2215                          
  2216                          NMI: ; unused on minimum (no source of interrupt)
  2217                              rti
  2218                          
  2219                          IRQ:
  2220                              pha
  2221                              php
  2222                              pla
  2223                              and #$10
  2224                              beq ++ ; not break
  2225                          ;BREAK HANDLER
  2226                              pla
  2227                              sta registerA
  2228                              pla
  2229                              sta registerSR
  2230                              pla
  2231                              cld
  2232                              sec
  2233                              sbc #2
  2234                              sta registerPC
  2235                              pla
  2236                              sbc #0
  2237                              sta registerPC+1
  2238                              lda #>save_registers
  2239                              pha
  2240                              lda #<save_registers
  2241                              pha
  2242                              lda registerSR
  2243                              pha
  2244                              lda registerA
  2245                              pha
  2246                          ++  pla
  2247                              rti
  2248                          
  2249                          BREAK:
  2250                              jmp RESET
  2251                          
  2252                          RESET:
  2253                              cld
  2254                              ldx #$FF
  2255                              txs
  2256                              jsr JUART_INIT
  2257                              cli
  2258                              jmp start
  2259                          ; !ifdef MINIMUM
  2260                          } else { ; not MINIMUM
  2261                          
  2262                          ptr1 = sta_at_ptr1_y + 1 ; and + 2
  2263                          
  2264                          lda_at_ptr1_y:
  2265  8de3 adf48d                 lda ptr1
  2266  8de6 8df08d                 sta lda_ptr1_op+1
  2267  8de9 adf58d                 lda ptr1+1
  2268  8dec 8df18d                 sta lda_ptr1_op+2
  2269                          lda_ptr1_op:
  2270  8def b9ffff                 lda $ffff, y
  2271  8df2 60                     rts
  2272                          
  2273                          sta_at_ptr1_y:
  2274  8df3 99ffff                 sta $ffff, y
  2275  8df6 60                     rts
  2276                          
  2277                          ptr3 = sta_at_ptr3_y + 1 ; and + 2
  2278                          
  2279                          lda_at_ptr3_y:
  2280  8df7 ad088e                 lda ptr3
  2281  8dfa 8d048e                 sta lda_ptr3_op+1
  2282  8dfd ad098e                 lda ptr3+1
  2283  8e00 8d058e                 sta lda_ptr3_op+2
  2284                          lda_ptr3_op:
  2285  8e03 b9ffff                 lda $ffff, y
  2286  8e06 60                     rts
  2287                          
  2288                          sta_at_ptr3_y:
  2289  8e07 99ffff                 sta $ffff, y
  2290  8e0a 60                     rts
  2291                          
  2292                          nmi64:
  2293  8e0b 78                     sei
  2294  8e0c 8d0995                 sta registerA
  2295  8e0f 68                     pla
  2296  8e10 8d0d95                 sta registerSR
  2297  8e13 68                     pla
  2298  8e14 d8                     cld
  2299  8e15 8d0e95                 sta registerPC
  2300  8e18 68                     pla
  2301  8e19 8d0f95                 sta registerPC+1
  2302  8e1c a98d                   lda #>save_registers
  2303  8e1e 48                     pha
  2304  8e1f a97e                   lda #<save_registers
  2305  8e21 48                     pha
  2306  8e22 ad0d95                 lda registerSR
  2307  8e25 48                     pha
  2308  8e26 ad0995                 lda registerA
  2309  8e29 40                     rti
  2310                          
  2311                          brk64:
  2312  8e2a 68                     pla
  2313  8e2b a8                     tay
  2314  8e2c 68                     pla
  2315  8e2d aa                     tax
  2316  8e2e 68                     pla
  2317  8e2f 8d0995                 sta registerA
  2318  8e32 68                     pla
  2319  8e33 8d0d95                 sta registerSR
  2320  8e36 68                     pla
  2321  8e37 d8                     cld
  2322  8e38 38                     sec
  2323  8e39 e902                   sbc #2
  2324  8e3b 8d0e95                 sta registerPC
  2325  8e3e 68                     pla
  2326  8e3f e900                   sbc #0
  2327  8e41 8d0f95                 sta registerPC+1
  2328  8e44 a98d                   lda #>save_registers
  2329  8e46 48                     pha
  2330  8e47 a97e                   lda #<save_registers
  2331  8e49 48                     pha
  2332  8e4a ad0d95                 lda registerSR
  2333  8e4d 48                     pha
  2334  8e4e ad0995                 lda registerA
  2335  8e51 40                     rti
  2336                          }
  2337                          
  2338                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2339                          ; data
  2340                          
  2341                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  2342                          ninst = 56
  2343  8e52 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  2344  8e8a 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  2345  8ec2 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  2346                          
  2347                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  2348                          mode_jmptable:
  2349  8efa a882               !word dispModeAcc-1; 0 Accumulator 1
  2350  8efc ad82               !word dispModeNone-1 ; 1 None 1
  2351  8efe ae82               !word dispModeImm-1 ; 2 Immediate 2
  2352  8f00 c082               !word dispModeIndX-1 ; 3 IndirectX 2
  2353  8f02 e182               !word dispModeIndY-1 ; 4 IndirectY 2
  2354  8f04 0283               !word dispModeRel-1 ; 5 Relative 2
  2355  8f06 b382               !word dispModeZP-1 ; 6 ZeroPage 2
  2356  8f08 4d83               !word dispModeZPX-1 ; 7 ZeroPageX 2
  2357  8f0a 5a83               !word dispModeZPY-1 ; 8 ZeroPageY 2
  2358  8f0c 6783               !word dispModeAbs-1 ; 9 Absolute 3
  2359  8f0e 7b83               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  2360  8f10 8883               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  2361  8f12 9583               !word dispModeInd-1 ; 12 Indirect 3
  2362                          
  2363                          nmodes = 13
  2364                          
  2365                          mode_sorted:
  2366  8f14 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  2367                          
  2368                          !ifdef MINIMUM {
  2369                          mode_0: !text "Accumulator", 0, "A", 0
  2370                          mode_1: !text "None", 0, 8, 0
  2371                          mode_2: !text "Immediate", 0, "#$12", 0
  2372                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  2373                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  2374                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  2375                          mode_6: !text "ZeroPage", 0, "$12", 0
  2376                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  2377                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  2378                          mode_9: !text "Absolute", 0, "$1234", 0
  2379                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  2380                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  2381                          mode_12: !text "Indirect", 0, "($1234)", 0
  2382                          } else {
  2383  8f21 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2384  8f2f 4e4f4e45001400     mode_1: !text "NONE", 0, 20, 0
  2385  8f36 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2386  8f45 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2387  8f57 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2388  8f69 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2389  8f88 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2390  8f95 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2391  8fa5 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2392  8fb5 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2393  8fc4 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2394  8fd6 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2395  8fe8 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2396                          }
  2397                          
  2398                          modes: ; table for easily displaying each mode_example
  2399  8ff9 218f               !word mode_0
  2400  8ffb 2f8f               !word mode_1
  2401  8ffd 368f               !word mode_2
  2402  8fff 458f               !word mode_3
  2403  9001 578f               !word mode_4
  2404  9003 698f               !word mode_5
  2405  9005 888f               !word mode_6
  2406  9007 958f               !word mode_7
  2407  9009 a58f               !word mode_8
  2408  900b b58f               !word mode_9
  2409  900d c48f               !word mode_10
  2410  900f d68f               !word mode_11
  2411  9011 e88f               !word mode_12
  2412                          
  2413                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2414                          nopcodes = 151
  2415  9013 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2416  90aa 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2417  9141 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2418                          
  2419                          copyright
  2420                          ;                  1         2         3         4
  2421                          ;         1234567890123456789012345678901234567890
  2422  91d8 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2423                          !ifdef C64TERMINAL {
  2424                              !text 13, "(TERMINAL VERSION)"
  2425                          }
  2426  91f8 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2427  921e 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2428  9235 00                 !text 0
  2429                          
  2430                          firsthelp
  2431                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2432  9236 0d0d               !text 13, 13
  2433  9238 54595045203f2046...!text "TYPE ? FOR HELP"
  2434  9247 0d00               !text 13, 0
  2435                          
  2436                          !ifndef MINIMUM {
  2437                          ; C64 only
  2438                          extra_help:
  2439  9249 5820202020202020...    !text "X           (EXIT MONITOR)", 13
  2440  9264 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S  (SAVE)", 13
  2441  9286 00                     !text 0
  2442                          
  2443                          !ifdef C64SCREEN {
  2444  9287 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  2445  928e 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  2446                          }
  2447                          
  2448                          }
  2449                          
  2450  9295 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2451                          
  2452                          generalhelp
  2453  92a6 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2454  92cc 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2455  92f1 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2456  9314 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2457  933c 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2458  9358 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2459  9378 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2460  939a 00                 !text 0
  2461                          generalhelp2
  2462  939b 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2463  93c0 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2464  93dc 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2465  93fb 3f41202020202020...!text "?A          (LIST 6502 INSTRUCTIONS)", 13
  2466  9420 3f41444320202020...!text "?ADC        (/ADC/ ADDRESSING MODES)", 13
  2467  9445 3f4d4f4445202020...!text "?MODE       (ADDRESSING MODES)", 13
  2468  9464 00                 !text 0
  2469                          generalhelp3
  2470  9465 3f2e202020202020...!text "?.          (DISPLAY REGISTERS)", 13
  2471  9485 2e31323334202020...!text ".1234       (MODIFY PC,FLAGS,REGISTERS)", 13
  2472  94ad 2e413a3031202020...!text ".A:01       (MODIFY REGISTER A,X,Y,S,P)", 13
  2473  94d5 00                 !text 0
  2474                          
  2475  94d6 4d4f444500         modes_keyword !text "MODE", 0
  2476                          
  2477  94db 2050432020204e56...reg_header !text " PC   NV-BDIZC .A .X .Y .S", 13, '.', 0
  2478                          
  2479                          !ifdef MINIMUM {
  2480                          opidx=$dfed
  2481                          inidx=$dfee
  2482                          mode=$dfef
  2483                          size=$dff0
  2484                          count=$dff1
  2485                          len=$dff2
  2486                          savepos=$dff3
  2487                          tmp2=$dff4
  2488                          flag=$dff5
  2489                          ptr2=$dff6;/7
  2490                          tmp=$dff8
  2491                          registerA = $dff9
  2492                          registerX = $dffa
  2493                          registerY = $dffb
  2494                          registerSP = $dffc
  2495                          registerSR = $dffd
  2496                          registerPC = $dffe;/f
  2497                          } else {
  2498  94f8 00                 opidx !byte 0
  2499  94f9 00                 inidx !byte 0
  2500  94fa 00                 mode !byte 0
  2501  94fb 00                 size !byte 0
  2502  94fc 00                 count !byte 0
  2503  94fd 00                 len !byte 0
  2504  94fe 00                 savepos !byte 0
  2505  94ff 00                 tmp2 !byte 0
  2506  9500 00                 flag !byte 0
  2507  9501 00                 tmp !byte 0
  2508  9502 0000               ptr2 !word 0
  2509  9504 0000               savebrkvector !word 0
  2510  9506 0000               savenmivector !word 0
  2511  9508 00                 drive !byte 0
  2512  9509 00                 registerA !byte 0
  2513  950a 00                 registerX !byte 0
  2514  950b 00                 registerY !byte 0
  2515  950c 00                 registerSP !byte 0
  2516  950d 00                 registerSR !byte 0
  2517  950e 0000               registerPC !word 0
  2518                          }
  2519                          
  2520                          !ifdef MINIMUM {
  2521                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2522                          ; JUMP table for some stability
  2523                          * = $FFEE
  2524                          JUART_INIT: JMP UART_INIT
  2525                          JUART_OUT: JMP UART_OUT
  2526                          JUART_IN: JMP UART_IN
  2527                          JUART_CHK: JMP UART_CHK
  2528                          
  2529                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2530                          ; 6502 vectors
  2531                          * = $fffa
  2532                              !word NMI
  2533                              !word RESET
  2534                              !word IRQ
  2535                          } else { // C64
  2536                              !if * > $a000 {
  2537                                  !error "code/data overran $a000"
  2538                              }
  2539                          }
  2540                          
  2541                          finish = *
