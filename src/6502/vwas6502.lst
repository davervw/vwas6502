
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGETS:                              *        <<<
     7                          ;; >>>       ** (1)  C64 8000-9FFF screen editor                *        <<<
     8                          ;; >>>       ** (2)  C64 8000-9FFF terminal edition             *        <<<
     9                          ;; >>>       ** (3)  6502+MC6850 minimum system                 *        <<<
    10                          ;; >>>       *   56K(RAM),8K(ROM), 2 bytes IO for MC6850 UART   *        <<<
    11                          ;; >>>       ****************************************************        <<<
    12                          ;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          ;; MIT License
    15                          ;;
    16                          ;; Copyright (c) 2024 David R. Van Wagner
    17                          ;; davevw.com
    18                          ;;
    19                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    20                          ;; of this software and associated documentation files (the "Software"), to deal
    21                          ;; in the Software without restriction, including without limitation the rights
    22                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    23                          ;; copies of the Software, and to permit persons to whom the Software is
    24                          ;; furnished to do so, subject to the following conditions:
    25                          ;;
    26                          ;; The above copyright notice and this permission notice shall be included in all
    27                          ;; copies or substantial portions of the Software.
    28                          ;;
    29                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    30                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    31                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    32                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    33                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    34                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    35                          ;; SOFTWARE.
    36                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                          
    40                          ; Important! define exactly ONE target (set in build.sh)
    41                          ;C64SCREEN = 1
    42                          ;C64TERMINAL = 1
    43                          ;MINIMUM = 1
    44                          
    45                          ; options (set in build.sh)
    46                          ;NEEDECHO = 0
    47                          
    48                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                          
    50                          ;; _
    51                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    52                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    53                          ;; 1000 (display memory at $1000)
    54                          ;; 1000.2000 (display memory range $1000 to $2000)
    55                          ;; 1000. (display next screenful of memory starting at $1000)
    56                          ;; . (display next screenful of memory)
    57                          ;; 1000 r (JMP $1000)
    58                          ;; 1000: 01 02 03 (modify memory)
    59                          ;; (NEW SYNTAX)
    60                          ;; 1000 d (disassemble starting at address, for screenful)
    61                          ;; d (continue disassembling from last address)
    62                          ;; 1000 a (assemble starting at, interactive until empty line) 
    63                          ;; x (exit monitor -- C64 only)
    64                          ;; ? (commands help)
    65                          ;; ? a (list instructions available)
    66                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    67                          ;; ? mode (show addressing modes example syntax for 6502)
    68                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    69                          ;; (FUTURE SYNTAX, not implemented)
    70                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    71                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    72                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    73                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    74                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    75                          ;; .A: 00 (change register, replace A with X, Y, SP, S, PC, SR, P, N, V, B, D, I, Z, C as appropriate, colon is optional)
    76                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    77                          ;;
    78                          ;; (INTERACTIVE ASSEMBLER)
    79                          ;; 1000 _
    80                          ;;      ADC #$12
    81                          ;; 1000 69 12    ADC #$12
    82                          ;; 1002 _
    83                          ;;      JSR $1234
    84                          ;; 1002 20 34 12 JSR $1234
    85                          ;; 1005 _
    86                          ;;      RTS
    87                          ;; 1005 60       RTS
    88                          ;; 1006 _
    89                          ;;      XYZ
    90                          ;;      XYZ ?
    91                          ;; 1006 _
    92                          ;; _
    93                          ;;
    94                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    95                          ;; and can cursor up to revise, 
    96                          ;;
    97                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    98                          ;;
    99                          
   100                          ; global
   101                          inputbuf=$0200
   102                          
   103                          
   104                          ; kernal/system calls
   105                          
   106                          !ifdef MINIMUM {
   107                          charout=JUART_OUT
   108                          getkey=JUART_IN
   109                          }
   110                          
   111                          !ifdef C64SCREEN {
   112                          setlfs=$ffba
   113                          setnam=$ffbd
   114                          charin=$ffcf ; screen editor
   115                          charout=$ffd2
   116                          fsave =$ffd8
   117                          getkey=$ffe4
   118                          }
   119                          
   120                          !ifdef C64TERMINAL {
   121                          setlfs=$ffba
   122                          setnam=$ffbd
   123                          charout=$ffd2
   124                          getkey=$ffe4
   125                          fsave =$ffd8
   126                          }
   127                          
   128                          ; zeropage
   129                          !ifdef MINIMUM {
   130                          opidx=$f0
   131                          inidx=$f1
   132                          mode=$f2
   133                          size=$f3
   134                          ptr3=$f4 ; and $f5
   135                          count=$f6
   136                          len=$f7
   137                          savepos=$f8
   138                          tmp2=$f9
   139                          flag=$fa
   140                          ptr1=$fb ; and $fc
   141                          ptr2=$fd ; and $fe
   142                          tmp=$ff
   143                          } else {
   144                          ptr1=$fb ; and $fc
   145                          ptr2=$fd ; and $fe
   146                          tmp=$ff
   147                          opidx=$22
   148                          inidx=$23
   149                          mode=$24
   150                          size=$25
   151                          ptr3=$26 ; and $27
   152                          count=$a3
   153                          len=$a4
   154                          savepos=$a5
   155                          tmp2=$a6
   156                          flag=$a7
   157                          banksel=$02
   158                          drive=$a8
   159                          }
   160                          
   161                          !ifdef MINIMUM {
   162                          * = $e000
   163                          } else { // any C64
   164                          * = $8000
   165  8000 ad1603                 lda $316
   166  8003 ae1703                 ldx $317
   167  8006 e08b                   cpx #>brk64
   168  8008 f010                   beq start
   169  800a 8d3192                 sta savebrkvector
   170  800d 8e3292                 stx savebrkvector+1
   171  8010 a9b5                   lda #<brk64
   172  8012 a28b                   ldx #>brk64
   173  8014 8d1603                 sta $316
   174  8017 8e1703                 stx $317
   175                          }
   176                          
   177                          start:
   178  801a a962                   lda #<copyright
   179  801c a28f                   ldx #>copyright
   180  801e 209083                 jsr strout
   181  8021 a9c0                   lda #<firsthelp
   182  8023 a28f                   ldx #>firsthelp
   183  8025 209083                 jsr strout
   184  8028 4cfe8a                 jmp save_regs_and_stack
   185                          
   186                          input_loop:
   187  802b 20ab83                 jsr inputline
   188  802e 20ae83                 jsr parseline
   189  8031 4c2b80                 jmp input_loop
   190                          
   191                          !ifndef MINIMUM {
   192                          ; C64 only
   193                          chkextrac64:
   194  8034 204080                 jsr chkexit
   195  8037 d003                   bne +
   196  8039 4c5480                 jmp execute_exit
   197  803c 18                 +   clc ; no error
   198  803d a201                   ldx #1 ; Z false - not consumed
   199  803f 60                     rts
   200                          
   201                          chkexit:
   202  8040 b90002                 lda inputbuf, y
   203  8043 c958                   cmp #'X'
   204  8045 d008                   bne +
   205  8047 c8                     iny
   206  8048 c4a4                   cpy len ; validate no extra characters
   207  804a f003                   beq +
   208  804c 4c5080                 jmp extra_error
   209  804f 60                 +   rts
   210                          
   211                          extra_error:
   212                              ; pop local return address
   213  8050 68                     pla
   214  8051 68                     pla
   215  8052 38                     sec ; error
   216  8053 60                     rts
   217                          
   218                          execute_exit:
   219  8054 ad3192                 lda savebrkvector
   220  8057 ae3292                 ldx savebrkvector+1
   221  805a 8d1603                 sta $316
   222  805d 8e1703                 stx $317
   223                              ; pop monitor return addresses, so only original caller is left
   224  8060 68                     pla
   225  8061 68                     pla
   226  8062 68                     pla
   227  8063 68                     pla
   228  8064 68                     pla
   229  8065 68                     pla
   230  8066 60                     rts
   231                          
   232                          display_extra_help:
   233  8067 a9d3                   lda #<extra_help
   234  8069 a28f                   ldx #>extra_help
   235  806b 4c9083                 jmp strout
   236                          
   237                          !ifdef C64SCREEN {
   238                          display_page_disassemble:
   239  806e a5fb                   lda ptr1
   240  8070 a6fc                   ldx ptr1+1
   241  8072 201483                 jsr disphexword
   242  8075 a911                   lda #<page_disassemble
   243  8077 a290                   ldx #>page_disassemble
   244  8079 4c9083                 jmp strout
   245                          
   246                          display_page_displaymemory:
   247  807c 20f48a                 jsr newline
   248  807f a5fb                   lda ptr1
   249  8081 a6fc                   ldx ptr1+1
   250  8083 201483                 jsr disphexword
   251  8086 a918                   lda #<page_displaymemory
   252  8088 a290                   ldx #>page_displaymemory
   253  808a 4c9083                 jmp strout
   254                          
   255                          inputlinec64:
   256  808d a000                   ldy #0
   257  808f 20cfff             -   jsr charin
   258  8092 990002                 sta inputbuf,y
   259  8095 c8                     iny
   260  8096 c90d                   cmp #13
   261  8098 d0f5                   bne -
   262  809a 60                     rts
   263                          
   264                          continueassemblec64:
   265  809b a914                   lda #20
   266  809d 20d2ff                 jsr charout
   267  80a0 20d2ff                 jsr charout
   268  80a3 a5fb                   lda ptr1
   269  80a5 a6fc                   ldx ptr1+1
   270  80a7 201483                 jsr disphexword
   271  80aa a920                   lda #' '
   272  80ac 20d2ff                 jsr charout
   273  80af 20d2ff                 jsr charout
   274  80b2 4cd2ff                 jmp charout
   275                          }
   276                          
   277                          chkfilename:
   278  80b5 204d8a                 jsr skipspaces
   279  80b8 84ff                   sty tmp
   280  80ba b90002                 lda inputbuf, y
   281  80bd c922                   cmp #34 ; double quote
   282  80bf d022                   bne ++
   283  80c1 c8                 -   iny
   284  80c2 b90002                 lda inputbuf, y
   285  80c5 c90d                   cmp #13
   286  80c7 d004                   bne +
   287  80c9 a4ff                   ldy tmp
   288  80cb d016                   bne ++
   289  80cd c922               +   cmp #34 ; double quote
   290  80cf d0f0                   bne -
   291  80d1 98                     tya ; index of ending double quotes
   292  80d2 48                     pha ; save
   293  80d3 18                     clc ; will subtract one more
   294  80d4 e5ff                   sbc tmp ; subtract index of first quote, have filename length
   295  80d6 a6ff                   ldx tmp
   296  80d8 e8                     inx ; low address of filename
   297  80d9 a002                   ldy #>inputbuf ; high address of filename
   298  80db 20bdff                 jsr setnam
   299  80de 68                     pla
   300  80df a8                     tay
   301  80e0 c8                     iny ; advance past ending double quotes
   302  80e1 a900                   lda #0 ; set Z true
   303  80e3 60                 ++  rts
   304                          
   305                          check_execute_save:
   306  80e4 20b580             +   jsr chkfilename
   307  80e7 f006                   beq +
   308  80e9 20368a                 jsr reporterr
   309  80ec a201                   ldx #1 ; set Z false
   310  80ee 60                     rts
   311  80ef 20fd80             +   jsr chkoptionaldrive
   312  80f2 201181                 jsr chksave
   313  80f5 d005                   bne +
   314  80f7 201a81                 jsr executesave
   315  80fa a200                   ldx #0 ; set Z true
   316  80fc 60                 +   rts
   317                          
   318                          chkoptionaldrive:
   319  80fd a908                   lda #8
   320  80ff 85a8                   sta drive
   321  8101 204d8a                 jsr skipspaces
   322  8104 20a08a                 jsr chkhexbyte
   323  8107 d007                   bne +
   324  8109 85a8                   sta drive
   325  810b 204d8a                 jsr skipspaces
   326  810e a900                   lda #0 ; set Z true
   327  8110 60                 +   rts
   328                          
   329                          chksave:
   330  8111 204d8a                 jsr skipspaces
   331  8114 b90002                 lda inputbuf, y
   332  8117 c953                   cmp #'S'
   333  8119 60                     rts
   334                          
   335                          executesave:
   336  811a 20f48a                 jsr newline
   337  811d a9c0                   lda #$c0 ; KERNAL control and error messages
   338  811f 859d                   sta $9d ; set messages to be displayed
   339  8121 a901                   lda #1
   340  8123 a6a8                   ldx drive
   341  8125 a00f                   ldy #15
   342  8127 20baff                 jsr setlfs
   343  812a a9fb                   lda #ptr1
   344  812c a6fd                   ldx ptr2
   345  812e a4fe                   ldy ptr2+1
   346  8130 20d8ff                 jsr fsave
   347  8133 4cf48a                 jmp newline
   348                          }
   349                          
   350                          ; test: ; all the addressing modes here for testing disassembly
   351                          ;     nop
   352                          ;     lda $1234
   353                          ;     lda $1234,x
   354                          ;     lda $1234,y
   355                          ;     asl
   356                          ;     lda #$12
   357                          ;     lda ($12,x)
   358                          ;     lda ($12),y
   359                          ;     jmp ($1234)
   360                          ; -   bne -
   361                          ;     lda $12
   362                          ;     lda $12,x
   363                          ;     ldx $12,y
   364                          ;     !byte $FF ; unknown
   365                          
   366                          disassemble:
   367  8136 a917                   lda #23
   368  8138 85a3                   sta count
   369  813a a000               -   ldy #0
   370  813c b1fb                   lda (ptr1),y
   371  813e 206581                 jsr find_opcode
   372  8141 20c881                 jsr disp_current
   373  8144 a525                   lda size
   374  8146 1002                   bpl +
   375  8148 a901                   lda #1
   376  814a 18                 +   clc
   377  814b 65fb                   adc ptr1
   378  814d 85fb                   sta ptr1
   379  814f 9002                   bcc +
   380  8151 e6fc                   inc ptr1+1
   381  8153 c6a3               +   dec count
   382  8155 d0e3                   bne -
   383                          !ifdef C64SCREEN {
   384  8157 4c6e80                 jmp display_page_disassemble
   385                          } else {    
   386                              rts
   387                          }
   388                          
   389                          compareptrs:
   390  815a a5fc                   lda ptr1+1
   391  815c c5fe                   cmp ptr2+1
   392  815e d004                   bne +
   393  8160 a5fb                   lda ptr1
   394  8162 c5fd                   cmp ptr2
   395  8164 60                 +   rts
   396                          
   397                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   398                          ; and properties updated in ZP globals size,inidx,opidx,mode
   399  8165 a097                   ldy #nopcodes
   400  8167 a296                   ldx #nopcodes-1
   401  8169 dd9d8d             -   cmp opcodes,x
   402  816c f00f                   beq +
   403  816e ca                     dex
   404  816f 88                     dey
   405  8170 d0f7                   bne -
   406  8172 18                     clc
   407  8173 a901                   lda #1
   408  8175 8525                   sta size
   409  8177 a9ff                   lda #$FF
   410  8179 aa                     tax
   411  817a a8                     tay
   412  817b 900a                   bcc ++
   413  817d bd348e             +   lda instidx, x
   414  8180 bccb8e                 ldy modeidx, x
   415  8183 208e81                 jsr getsize
   416  8186 38                     sec
   417  8187 8523               ++  sta inidx
   418  8189 8622                   stx opidx
   419  818b 8424                   sty mode
   420  818d 60                     rts
   421                          
   422                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   423                              ; result returned in size
   424  818e 48                     pha
   425  818f a901                   lda #1
   426  8191 8525                   sta size
   427  8193 68                     pla
   428  8194 c002                   cpy #2 // Immediate
   429  8196 9008                   bcc +
   430  8198 e625                   inc size
   431  819a c009                   cpy #9 // Absolute
   432  819c 9002                   bcc +
   433  819e e625                   inc size
   434  81a0 60                 +   rts
   435                          
   436                          disp_opcode: ; .A opcode byte
   437  81a1 206581                 jsr find_opcode
   438  81a4 8a                     txa
   439                              ; fall through to display instruction
   440                          
   441                          dispinst: ; .A instruction index 0..55, note modifies A and X
   442  81a5 aa                     tax
   443  81a6 e038                   cpx #ninst
   444  81a8 b012                   bcs +
   445  81aa bddc8b                 lda inst0, x
   446  81ad 20d2ff                 jsr charout
   447  81b0 bd148c                 lda inst1, x
   448  81b3 20d2ff                 jsr charout
   449  81b6 bd4c8c                 lda inst2, x
   450  81b9 4cd2ff                 jmp charout
   451  81bc a93f               +   lda #'?'
   452  81be 20d2ff                 jsr charout
   453  81c1 20d2ff                 jsr charout
   454  81c4 20d2ff                 jsr charout
   455  81c7 60                     rts
   456                          
   457                          disp_current:
   458  81c8 a5fb                   lda ptr1
   459  81ca a6fc                   ldx ptr1+1
   460  81cc 201483                 jsr disphexword
   461  81cf a920                   lda #$20
   462  81d1 20d2ff                 jsr charout
   463  81d4 a000                   ldy #0
   464  81d6 a625                   ldx size
   465  81d8 b1fb               -   lda (ptr1),y
   466  81da 201a83                 jsr disphexbyte
   467  81dd a920                   lda #$20
   468  81df 20d2ff                 jsr charout
   469  81e2 c8                     iny
   470  81e3 ca                     dex
   471  81e4 d0f2                   bne -
   472  81e6 c003               -   cpy #3
   473  81e8 f00e                   beq +
   474  81ea a920                   lda #$20
   475  81ec 20d2ff                 jsr charout
   476  81ef 20d2ff                 jsr charout
   477  81f2 20d2ff                 jsr charout
   478  81f5 c8                     iny
   479  81f6 d0ee                   bne -
   480  81f8 a523               +   lda inidx
   481  81fa 20a581                 jsr dispinst
   482  81fd a920                   lda #$20
   483  81ff 20d2ff                 jsr charout
   484  8202 200a82                 jsr disp_mode
   485  8205 a90d                   lda #13
   486  8207 4cd2ff                 jmp charout
   487                          
   488                          disp_mode
   489  820a a524                   lda mode
   490  820c c90d                   cmp #13
   491  820e b00a                   bcs +
   492  8210 0a                     asl
   493  8211 aa                     tax
   494  8212 bd858c                 lda mode_jmptable+1,x
   495  8215 48                     pha
   496  8216 bd848c                 lda mode_jmptable,x
   497  8219 48                     pha
   498  821a 60                 +   rts
   499                          
   500                          dispModeAcc:
   501  821b a941                   lda #'A'
   502  821d 4cd2ff                 jmp charout
   503                          
   504                          dispModeNone:
   505  8220 60                     rts
   506                          
   507                          dispModeImm:
   508  8221 a923                   lda #'#'
   509  8223 20d2ff                 jsr charout
   510                          dispModeZP:
   511  8226 a924                   lda #'$'
   512  8228 20d2ff                 jsr charout
   513  822b a001                   ldy #1
   514  822d b1fb                   lda (ptr1),y
   515  822f 4c1a83                 jmp disphexbyte
   516                          
   517                          dispModeIndX:
   518  8232 a928                   lda #'('
   519  8234 20d2ff                 jsr charout
   520  8237 a924                   lda #'$'
   521  8239 20d2ff                 jsr charout
   522  823c a001                   ldy #1
   523  823e b1fb                   lda (ptr1),y
   524  8240 201a83                 jsr disphexbyte
   525  8243 a92c                   lda #','
   526  8245 20d2ff                 jsr charout
   527  8248 a958                   lda #'X'
   528  824a 20d2ff                 jsr charout
   529  824d a929                   lda #')'
   530  824f 4cd2ff                 jmp charout
   531                          
   532                          dispModeIndY:
   533  8252 a928                   lda #'('
   534  8254 20d2ff                 jsr charout
   535  8257 a924                   lda #'$'
   536  8259 20d2ff                 jsr charout
   537  825c a001                   ldy #1
   538  825e b1fb                   lda (ptr1),y
   539  8260 201a83                 jsr disphexbyte
   540  8263 a929                   lda #')'
   541  8265 20d2ff                 jsr charout
   542  8268 a92c                   lda #','
   543  826a 20d2ff                 jsr charout
   544  826d a959                   lda #'Y'
   545  826f 4cd2ff                 jmp charout
   546                          
   547                          dispModeRel:
   548  8272 a924                   lda #'$'
   549  8274 20d2ff                 jsr charout
   550  8277 18                     clc
   551  8278 a5fb                   lda ptr1
   552  827a 6902                   adc #2
   553  827c 8526                   sta ptr3
   554  827e a5fc                   lda ptr1+1
   555  8280 6900                   adc #0
   556  8282 8527                   sta ptr3+1
   557  8284 a001                   ldy #1
   558  8286 b1fb                   lda (ptr1),y
   559  8288 1014                   bpl +
   560                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   561  828a 49ff                   eor #$FF ; inverse
   562  828c 18                     clc
   563  828d 6901                   adc #1 ; complete getting absolute value from two's complement
   564  828f 85ff                   sta tmp
   565  8291 38                     sec
   566  8292 a526                   lda ptr3
   567  8294 e5ff                   sbc tmp
   568  8296 8526                   sta ptr3
   569  8298 b00d                   bcs ++
   570  829a c627                   dec ptr3+1
   571  829c 9009                   bcc ++
   572  829e 18                 +   clc ; simple case of adding
   573  829f 6526                   adc ptr3
   574  82a1 8526                   sta ptr3
   575  82a3 9002                   bcc ++
   576  82a5 e627                   inc ptr3+1
   577  82a7 a526               ++  lda ptr3
   578  82a9 a627                   ldx ptr3+1
   579  82ab 4c1483                 jmp disphexword
   580                          
   581                          dispModeZPX:
   582  82ae 202682                 jsr dispModeZP
   583  82b1 a92c                   lda #','
   584  82b3 20d2ff                 jsr charout
   585  82b6 a958                   lda #'X'
   586  82b8 4cd2ff                 jmp charout
   587                          
   588                          dispModeZPY:
   589  82bb 202682                 jsr dispModeZP
   590  82be a92c                   lda #','
   591  82c0 20d2ff                 jsr charout
   592  82c3 a959                   lda #'Y'
   593  82c5 4cd2ff                 jmp charout
   594                          
   595                          dispModeAbs:
   596  82c8 a924                   lda #'$'
   597  82ca 20d2ff                 jsr charout
   598  82cd a001                   ldy #1
   599  82cf b1fb                   lda (ptr1),y
   600  82d1 48                     pha
   601  82d2 c8                     iny
   602  82d3 b1fb                   lda (ptr1),y
   603  82d5 aa                     tax
   604  82d6 68                     pla
   605  82d7 4c1483                 jmp disphexword
   606                          
   607                          dispModeAbsX:
   608  82da 20c882                 jsr dispModeAbs
   609  82dd a92c                   lda #','
   610  82df 20d2ff                 jsr charout
   611  82e2 a958                   lda #'X'
   612  82e4 4cd2ff                 jmp charout
   613                          
   614                          dispModeAbsY:
   615  82e7 20c882                 jsr dispModeAbs
   616  82ea a92c                   lda #','
   617  82ec 20d2ff                 jsr charout
   618  82ef a959                   lda #'Y'
   619  82f1 4cd2ff                 jmp charout
   620                          
   621                          dispModeInd:
   622  82f4 a928                   lda #'('
   623  82f6 20d2ff                 jsr charout
   624  82f9 20c882                 jsr dispModeAbs
   625  82fc a929                   lda #')'
   626  82fe 4cd2ff                 jmp charout
   627                          
   628                          dispbinbyte: ; .A 00..FF
   629  8301 a208                   ldx #8
   630  8303 85ff                   sta tmp
   631  8305 a930               -   lda #'0'
   632  8307 26ff                   rol tmp
   633  8309 9002                   bcc +
   634  830b a931                   lda #'1'
   635  830d 20d2ff             +   jsr charout
   636  8310 ca                     dex
   637  8311 d0f2                   bne -
   638  8313 60                     rts
   639                          
   640                          disphexword: ; .A low, .X high, 0000..FFFF
   641  8314 48                     pha
   642  8315 8a                     txa
   643  8316 201a83                 jsr disphexbyte
   644  8319 68                     pla
   645                              ;fall through to call again
   646                          
   647                          disphexbyte: ; .A 00..FF
   648  831a 48                     pha
   649  831b 4a                     lsr
   650  831c 4a                     lsr
   651  831d 4a                     lsr
   652  831e 4a                     lsr
   653  831f 202383                 jsr disphexnybble
   654  8322 68                     pla
   655                              ;fall through to call again
   656                          
   657                          disphexnybble: ; .A 0..F
   658  8323 290f                   and #$0F
   659  8325 0930                   ora #$30
   660  8327 c93a                   cmp #$3A
   661  8329 9002                   bcc +
   662  832b 6906                   adc #$06
   663  832d 4cd2ff             +   jmp charout
   664                          
   665                          inputhexword: ; C set if fails
   666  8330 a900                   lda #0
   667  8332 85fb                   sta ptr1
   668  8334 85fc                   sta ptr1+1
   669                          
   670  8336 a904                   lda #4 ; word is at most 4 nybbles
   671  8338 85a3                   sta count
   672  833a 207283             --  jsr inputhexnybble
   673  833d b012                   bcs +
   674                          
   675                              ; shift nibble up
   676  833f 0a                     asl
   677  8340 0a                     asl
   678  8341 0a                     asl
   679  8342 0a                     asl
   680                          
   681  8343 a204                   ldx #4 ; 4 bits rotated into word
   682  8345 2a                 -   rol
   683  8346 26fb                   rol ptr1
   684  8348 26fc                   rol ptr1+1
   685  834a ca                     dex
   686  834b d0f8                   bne - ; repeat bits
   687                          
   688  834d c6a3                   dec count
   689  834f d0e9                   bne -- ; repeat nybbles
   690                          
   691  8351 a5a3               +   lda count
   692  8353 c904                   cmp #4 ; set C if 4, otherwise clear
   693  8355 60                     rts
   694                          
   695                          inputhexbyte:
   696  8356 207283                 jsr inputhexnybble
   697  8359 b016                   bcs ++
   698  835b 85ff                   sta tmp
   699  835d 207283                 jsr inputhexnybble
   700  8360 9005                   bcc +
   701  8362 18                     clc ; allow single digit as byte
   702  8363 a5ff                   lda tmp
   703  8365 900a                   bcc ++
   704  8367 06ff               +   asl tmp
   705  8369 06ff                   asl tmp
   706  836b 06ff                   asl tmp
   707  836d 06ff                   asl tmp
   708  836f 05ff                   ora tmp ; necessary to assemble the two nybbles
   709  8371 60                 ++  rts
   710                          
   711                          inputhexnybble:
   712  8372 b90002                 lda $0200,y
   713  8375 297f                   and #$7F
   714  8377 38                     sec
   715  8378 e930                   sbc #$30
   716  837a 9012                   bcc ++
   717  837c c90a                   cmp #10
   718  837e 900c                   bcc +
   719  8380 e907                   sbc #7
   720  8382 900a                   bcc ++
   721  8384 c90a                   cmp #10
   722  8386 9006                   bcc ++
   723  8388 c910                   cmp #16
   724  838a b002                   bcs ++
   725  838c c8                 +   iny
   726  838d 60                     rts
   727  838e 38                 ++  sec
   728  838f 60                     rts
   729                          
   730                          strout:
   731  8390 8526                   sta ptr3
   732  8392 8627                   stx ptr3+1
   733                          strout2:    
   734  8394 a000                   ldy #0
   735  8396 b126               -   lda (ptr3),y
   736  8398 f006                   beq +
   737  839a 20d2ff                 jsr charout
   738  839d c8                     iny
   739  839e d0f6                   bne -
   740  83a0 98                 +   tya
   741  83a1 38                     sec
   742  83a2 6526                   adc ptr3
   743  83a4 8526                   sta ptr3
   744  83a6 9002                   bcc +
   745  83a8 e627                   inc ptr3+1
   746  83aa 60                 +   rts
   747                          
   748                          inputline:
   749                          !ifdef C64SCREEN {
   750  83ab 4c8d80                 jmp inputlinec64
   751                          } else {
   752                              ldy #0
   753                          --  sty count
   754                          -   jsr getkey
   755                              beq -
   756                              ldy count
   757                          !ifdef MINIMUM {
   758                              cmp #8 ; backspace
   759                          } else {
   760                              cmp #20
   761                          }
   762                              bne +
   763                              cpy #0
   764                              beq -
   765                              dey
   766                          !if NEEDECHO = 1 {    
   767                              jsr charout
   768                          }
   769                              jmp --
   770                          +   cmp #13
   771                              beq +
   772                              cmp #' '
   773                              bcc -
   774                              cmp #128
   775                              bcs -
   776                          +
   777                          !if NEEDECHO = 1 {    
   778                              jsr charout
   779                          }
   780                              sta inputbuf,y
   781                              iny
   782                              cmp #13
   783                              bne --
   784                              rts
   785                          }
   786                          
   787                          parseline:
   788  83ae c001                   cpy #1
   789  83b0 d003                   bne +
   790                          -
   791                          !ifdef C64SCREEN {   
   792  83b2 4cf48a                 jmp newline
   793                          } else {
   794                              rts
   795                          }
   796  83b5 88                 +   dey
   797  83b6 84a4                   sty len
   798                              ; skip whitespace
   799                              ; check for address, put in ptr1
   800                              ; or check for dot, then require address put in ptr2
   801                              ; or check for ?, and optional parameter, execute help
   802                              ; check for whitespace
   803                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   804                              ; check for string, store at start of inputbuf
   805                              ; check for drive number
   806                              ; check for whitespace
   807                              ; check command ":rda?mls", execute command
   808  83b8 a000                   ldy #0
   809  83ba 204d8a                 jsr skipspaces
   810  83bd c4a4                   cpy len
   811  83bf f0f1                   beq -
   812  83c1 20038a                 jsr chkcontinuedis
   813  83c4 d003                   bne +
   814  83c6 20278a                 jsr executedisassemble ; note won't return
   815  83c9 20158a             +   jsr chkcontinueasm
   816  83cc d003                   bne +
   817  83ce 203b86                 jsr continueassemble ; note won't return
   818  83d1 205c8a             +   jsr chkdot
   819  83d4 d003                   bne +
   820  83d6 4cbd84                 jmp executedot
   821  83d9 20678a             +   jsr chkhelp
   822  83dc d003                   bne +
   823  83de 4cc784                 jmp executehelp
   824                          +
   825                          !ifndef MINIMUM {
   826  83e1 203480                 jsr chkextrac64 ; check syntax only available on C64
   827  83e4 b014                   bcs + ; error if C set
   828  83e6 f005                   beq ++ ; consumed if Z set, skip next test(s)
   829                          }    
   830  83e8 20978a                 jsr chkhexaddr1
   831  83eb d003                   bne error
   832  83ed 4cf383             ++  jmp executeaddr1
   833                          error:
   834  83f0 4c368a                 jmp reporterr
   835                          
   836                          executeaddr1:
   837  83f3 c4a4                   cpy len
   838  83f5 d003                   bne +
   839  83f7 4c4c84                 jmp executedisplay1
   840  83fa 205c8a             +   jsr chkdot
   841  83fd d00f                   bne +
   842  83ff c4a4                   cpy len
   843  8401 f021                   beq executepagedisplay
   844  8403 20b78a                 jsr chkhexaddr2
   845  8406 d0e8                   bne error
   846  8408 18                     clc
   847  8409 66a7                   ror flag
   848  840b 4c3c84                 jmp executeaddr12
   849  840e 204d8a             +   jsr skipspaces
   850  8411 20728a                 jsr chkcolon
   851  8414 d003                   bne +
   852  8416 4c9b84                 jmp executemodify
   853  8419 20d88a             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   854                          !ifdef MINIMUM {
   855                              jmp reportnotimplemented
   856                          } else {
   857  841c 20b580                 jsr chkfilename
   858  841f d0cf                   bne error
   859  8421 4cc484                 jmp executeloadfilename
   860                          }
   861                          
   862                          executepagedisplay:
   863  8424 a5fb                   lda ptr1
   864  8426 18                     clc
   865                          !ifdef MINIMUM {
   866                              adc #$5f
   867                          } else {
   868  8427 69b7                   adc #$b7
   869                          }
   870  8429 85fd                   sta ptr2
   871  842b a5fc                   lda ptr1+1
   872                          !ifdef MINIMUM {
   873                              adc #$01
   874                          } else {
   875  842d 6900                   adc #$00
   876                          }
   877  842f 85fe                   sta ptr2+1
   878  8431 9006                   bcc +
   879  8433 a9ff                   lda #$ff
   880  8435 85fd                   sta ptr2
   881  8437 85fe                   sta ptr2+1
   882  8439 38                 +   sec
   883  843a 66a7                   ror flag
   884                              ; fall through to executeaddr12
   885                          
   886                          executeaddr12:
   887  843c c4a4                   cpy len
   888  843e d003                   bne +
   889  8440 4c5484                 jmp executedisplay12
   890                          !ifndef MINIMUM { // any C64
   891  8443 20e480             +   jsr check_execute_save
   892  8446 f003                   beq ++
   893                          }
   894  8448 4c2f8a             +   jmp reportnotimplemented
   895  844b 60                 ++  rts
   896                          
   897                          executedisplay1:
   898  844c a5fb                   lda ptr1
   899  844e 85fd                   sta ptr2
   900  8450 a5fc                   lda ptr1+1
   901  8452 85fe                   sta ptr2+1
   902                              ; fall through executedisplay12
   903                          
   904                          executedisplay12:
   905  8454 a9ff                   lda #$ff
   906  8456 85a3                   sta count
   907  8458 e6a3               -   inc count
   908  845a a5a3                   lda count
   909                          !ifdef MINIMUM {    
   910                              and #$0f
   911                          } else {
   912  845c 2907                   and #$07
   913                          }
   914  845e d016                   bne +
   915  8460 a90d                   lda #13
   916  8462 20d2ff                 jsr charout
   917  8465 a5fb                   lda ptr1
   918  8467 a6fc                   ldx ptr1+1
   919  8469 201483                 jsr disphexword
   920  846c a93a                   lda #':'
   921  846e 20d2ff                 jsr charout
   922  8471 a920                   lda #' '
   923  8473 20d2ff                 jsr charout
   924  8476 a000               +   ldy #0
   925  8478 b1fb                   lda (ptr1),y
   926  847a 201a83                 jsr disphexbyte
   927  847d a920                   lda #' '
   928  847f 20d2ff                 jsr charout
   929  8482 e6fb                   inc ptr1
   930  8484 d004                   bne +
   931  8486 e6fc                   inc ptr1+1
   932  8488 f00e                   beq ++
   933  848a 205a81             +   jsr compareptrs
   934  848d 90c9                   bcc -
   935  848f f0c7                   beq -
   936  8491 24a7                   bit flag
   937  8493 1003                   bpl ++
   938                          !ifdef C64SCREEN {
   939  8495 4c7c80                 jmp display_page_displaymemory
   940                          }
   941  8498 4cf48a             ++  jmp newline
   942                          
   943                          executemodify:
   944  849b 204d8a                 jsr skipspaces
   945  849e c4a4                   cpy len
   946  84a0 f018                   beq ++
   947  84a2 207d8a                 jsr chkhexbyteofsequence
   948  84a5 f003                   beq +
   949  84a7 4cf083                 jmp error
   950  84aa 84ff               +   sty tmp
   951  84ac a000                   ldy #0
   952  84ae 91fb                   sta (ptr1),y
   953  84b0 e6fb                   inc ptr1
   954  84b2 d002                   bne +
   955  84b4 e6fc                   inc ptr1+1
   956  84b6 a4ff               +   ldy tmp
   957  84b8 d0e1                   bne executemodify
   958  84ba 4cf48a             ++  jmp newline
   959                          
   960                          executedot:
   961  84bd c4a4                   cpy len
   962  84bf d003                   bne +
   963  84c1 4c2484                 jmp executepagedisplay
   964                          
   965                          executeloadfilename:
   966                          executeaddr1cmd:
   967  84c4 4c2f8a             +   jmp reportnotimplemented
   968                          
   969                          executehelp:
   970                          !ifdef C64SCREEN {
   971  84c7 20f48a                 jsr newline
   972                          }
   973  84ca c4a4                   cpy len
   974  84cc d003                   bne +
   975  84ce 4cf784                 jmp displayhelp
   976  84d1 204d8a             +   jsr skipspaces
   977  84d4 200b85                 jsr chkhelpinstructions
   978  84d7 d003                   bne +
   979  84d9 4c4785                 jmp displayinstructions
   980  84dc 202585             +   jsr chkhelpmodes
   981  84df d003                   bne +
   982  84e1 4c5e85                 jmp displaymodes
   983  84e4 207589             +   jsr chkinstruction
   984  84e7 d003                   bne +
   985  84e9 4c0e86                 jmp executehelpinstruction
   986  84ec 201885             +   jsr chkhelpregisters
   987  84ef d003                   bne +
   988  84f1 4c4a8b                 jmp execute_display_registers
   989  84f4 4c2f8a             +   jmp reportnotimplemented
   990                          
   991                          displayhelp:
   992  84f7 a930                   lda #<generalhelp
   993  84f9 a290                   ldx #>generalhelp
   994  84fb 209083                 jsr strout
   995  84fe a925                   lda #<generalhelp2
   996  8500 a291                   ldx #>generalhelp2
   997  8502 209083                 jsr strout
   998                          !ifndef MINIMUM { // any C64
   999  8505 206780                 jsr display_extra_help
  1000                          }
  1001  8508 4cf48a                 jmp newline
  1002                          
  1003                          chkhelpinstructions:
  1004  850b b90002                 lda inputbuf, y
  1005  850e c941                   cmp #'A'
  1006  8510 d005                   bne +
  1007  8512 b90102                 lda inputbuf+1, y
  1008  8515 c90d                   cmp #13
  1009                              ; no need to increment y if found, done parsing line
  1010  8517 60                 +   rts
  1011                          
  1012                          chkhelpregisters:
  1013  8518 b90002                 lda inputbuf, y
  1014  851b c92e                   cmp #'.'
  1015  851d d005                   bne +
  1016  851f b90102                 lda inputbuf+1, y
  1017  8522 c90d                   cmp #13
  1018  8524 60                 +   rts
  1019                          
  1020                          chkhelpmodes:
  1021  8525 a90f                   lda #<modes_keyword
  1022  8527 a292                   ldx #>modes_keyword
  1023                              ; fall through to chkkeyword
  1024                          
  1025                          chkkeyword:
  1026  8529 84a3                   sty count
  1027  852b 8526                   sta ptr3
  1028  852d 8627                   stx ptr3+1
  1029  852f a6a3                   ldx count
  1030  8531 a000                   ldy #0
  1031  8533 bd0002             -   lda inputbuf, x
  1032  8536 d126                   cmp (ptr3),y
  1033  8538 d008                   bne +
  1034  853a e8                     inx
  1035  853b c8                     iny
  1036  853c e4a4                   cpx len
  1037  853e d0f3                   bne -
  1038  8540 b126                   lda (ptr3),y ; matched if end of string, will set Z
  1039  8542 08                 +   php ; save Z
  1040  8543 a4a3                   ldy count
  1041  8545 28                     plp ; restore Z
  1042  8546 60                     rts
  1043                          
  1044                          displayinstructions:
  1045  8547 a038                   ldy #ninst
  1046  8549 a200                   ldx #0
  1047  854b 8a                 -   txa
  1048  854c 48                     pha
  1049  854d 20a581                 jsr dispinst
  1050  8550 a920                   lda #' '
  1051  8552 20d2ff                 jsr charout
  1052  8555 68                     pla
  1053  8556 aa                     tax
  1054  8557 e8                     inx
  1055  8558 88                     dey
  1056  8559 d0f0                   bne -
  1057  855b 4cf48a                 jmp newline
  1058                          
  1059                          displaymodes:
  1060  855e 38                     sec
  1061  855f a900                   lda #0
  1062  8561 48                 -   pha
  1063  8562 aa                     tax
  1064  8563 bd9e8c                 lda mode_sorted, x
  1065  8566 207385                 jsr dispmode
  1066  8569 68                     pla
  1067  856a 18                     clc
  1068  856b 6901                   adc #1
  1069  856d c90d                   cmp #nmodes
  1070  856f 90f0                   bcc -
  1071  8571 18                     clc
  1072  8572 60                     rts
  1073                          
  1074                          dispmode:
  1075  8573 c90d                   cmp #nmodes
  1076  8575 b008                   bcs +
  1077  8577 8524                   sta mode
  1078  8579 20bb85                 jsr disp_modename_and_example
  1079  857c 4c8085                 jmp dispmodeinstructions
  1080  857f 60                 +   rts
  1081                          
  1082                          dispmodeinstructions:
  1083                          !ifdef C64SCREEN {
  1084                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1085  8580 a524                   lda mode
  1086  8582 c903                   cmp #3
  1087  8584 d005                   bne +
  1088  8586 a920                   lda #' '
  1089  8588 4cd2ff                 jmp charout
  1090                          }
  1091                              ; display instructions with this mode
  1092  858b a000               +   ldy #0
  1093  858d 8423               --  sty inidx
  1094  858f a200                   ldx #0
  1095  8591 86ff               -   stx tmp
  1096  8593 a523                   lda inidx
  1097  8595 dd348e                 cmp instidx, x
  1098  8598 d014                   bne ++
  1099  859a bdcb8e                 lda modeidx, x
  1100  859d c524                   cmp mode
  1101  859f d00d                   bne ++
  1102  85a1 a920                   lda #' '
  1103  85a3 20d2ff                 jsr charout
  1104  85a6 bd348e                 lda instidx, x
  1105  85a9 20a581                 jsr dispinst
  1106  85ac a6ff                   ldx tmp
  1107  85ae e8                 ++  inx
  1108  85af e097                   cpx #nopcodes
  1109  85b1 90de                   bcc -
  1110  85b3 c8                     iny
  1111  85b4 c038                   cpy #ninst
  1112  85b6 d0d5                   bne --
  1113  85b8 4cf48a                 jmp newline
  1114                          
  1115                          disp_modename_and_example:
  1116  85bb 0a                     asl
  1117  85bc aa                     tax
  1118  85bd bd838d                 lda modes, x
  1119  85c0 48                     pha
  1120  85c1 bd848d                 lda modes+1, x
  1121  85c4 aa                     tax
  1122                          !ifdef C64SCREEN {
  1123  85c5 a912                   lda #18
  1124  85c7 20d2ff                 jsr charout
  1125                          }    
  1126  85ca 68                     pla
  1127  85cb 209083                 jsr strout
  1128  85ce a920                   lda #' '
  1129  85d0 20d2ff                 jsr charout
  1130  85d3 209483                 jsr strout2
  1131                          !ifdef C64SCREEN {    
  1132  85d6 a992                   lda #146
  1133  85d8 20d2ff                 jsr charout
  1134                          }   
  1135  85db 60                     rts
  1136                          
  1137                          disp_modename_instruction_example:
  1138  85dc 0a                     asl
  1139  85dd aa                     tax
  1140  85de bd838d                 lda modes, x
  1141  85e1 48                     pha
  1142  85e2 bd848d                 lda modes+1, x
  1143  85e5 aa                     tax
  1144  85e6 68                     pla
  1145  85e7 209083                 jsr strout ; mode name
  1146  85ea a526                   lda ptr3
  1147  85ec 48                     pha
  1148  85ed a527                   lda ptr3+1
  1149  85ef 48                     pha
  1150  85f0 a93a                   lda #':'
  1151  85f2 20d2ff                 jsr charout
  1152  85f5 a920                   lda #' '
  1153  85f7 20d2ff                 jsr charout
  1154  85fa a523                   lda inidx
  1155  85fc 20a581                 jsr dispinst ; instruction
  1156  85ff a920                   lda #' '
  1157  8601 20d2ff                 jsr charout
  1158  8604 68                     pla
  1159  8605 8527                   sta ptr3+1
  1160  8607 68                     pla
  1161  8608 8526                   sta ptr3
  1162  860a 209483                 jsr strout2 ; example
  1163  860d 60                     rts
  1164                          
  1165                          
  1166                          executehelpinstruction:
  1167  860e a000                   ldy #0
  1168  8610 8422               -   sty opidx
  1169  8612 b9348e                 lda instidx, y
  1170  8615 c523                   cmp inidx
  1171  8617 d01a                   bne +
  1172  8619 b9cb8e                 lda modeidx, y
  1173  861c 8524                   sta mode
  1174  861e a622                   ldx opidx
  1175  8620 bd9d8d                 lda opcodes, x
  1176  8623 201a83                 jsr disphexbyte
  1177  8626 a920                   lda #' '
  1178  8628 20d2ff                 jsr charout
  1179  862b a524                   lda mode
  1180  862d 20dc85                 jsr disp_modename_instruction_example
  1181  8630 20f48a                 jsr newline
  1182  8633 a422               +   ldy opidx
  1183  8635 c8                     iny
  1184  8636 c097                   cpy #nopcodes
  1185  8638 90d6                   bcc -
  1186  863a 60                     rts
  1187                          
  1188                          continueassemble:
  1189                          !ifdef C64SCREEN {   
  1190  863b 209b80                 jsr continueassemblec64
  1191                          }
  1192                              ; continue...
  1193                          
  1194                          executeassemble:
  1195  863e 68                     pla ; remove low byte return address
  1196  863f 68                     pla ; return high byte return address
  1197                          !ifdef C64SCREEN {    
  1198  8640 a914                   lda #20
  1199  8642 20d2ff                 jsr charout
  1200  8645 20d2ff                 jsr charout
  1201                          } else {
  1202                              lda ptr1
  1203                              ldx ptr1+1
  1204                              jsr disphexword
  1205                              lda #' '
  1206                              jsr charout
  1207                          }
  1208                              ; save current pointer
  1209  8648 a5fb               --  lda ptr1
  1210  864a a6fc                   ldx ptr1+1
  1211  864c 8526                   sta ptr3
  1212  864e 8627                   stx ptr3+1
  1213  8650 20ab83                 jsr inputline
  1214  8653 c001                   cpy #1
  1215  8655 f048                   beq ++
  1216  8657 88                     dey
  1217  8658 84a4                   sty len
  1218  865a a000                   ldy #0
  1219  865c 204d8a                 jsr skipspaces
  1220  865f c4a4                   cpy len
  1221  8661 f03c                   beq ++
  1222                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1223                              ;jsr skipspaces
  1224  8663 207589                 jsr chkinstruction
  1225  8666 f00b                   beq +
  1226  8668 a526               -   lda ptr3
  1227  866a 85fb                   sta ptr1
  1228  866c a527                   lda ptr3+1
  1229  866e 85fc                   sta ptr1+1
  1230  8670 4cf083                 jmp error
  1231  8673 20c986             +   jsr chkaddressing
  1232  8676 d0f0                   bne -
  1233  8678 20a689                 jsr find_inst_and_mode
  1234  867b d0eb                   bne -
  1235  867d 20a286                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1236  8680 18                     clc
  1237  8681 a525                   lda size
  1238  8683 6526                   adc ptr3
  1239  8685 85fb                   sta ptr1
  1240  8687 a527                   lda ptr3+1
  1241  8689 6900                   adc #0
  1242  868b 85fc                   sta ptr1+1
  1243                          !ifdef C64SCREEN {    
  1244  868d 20f48a                 jsr newline
  1245                          }
  1246  8690 a5fb                   lda ptr1
  1247  8692 a6fc                   ldx ptr1+1
  1248  8694 201483                 jsr disphexword
  1249  8697 a920                   lda #' '
  1250  8699 20d2ff                 jsr charout
  1251  869c 4c4886                 jmp --
  1252                          ++  
  1253                          !ifdef C64SCREEN {
  1254  869f 4cf48a                 jmp newline
  1255                          } else {
  1256                              rts
  1257                          }
  1258                          
  1259                          store_assembly:
  1260  86a2 a622                   ldx opidx
  1261  86a4 bd9d8d                 lda opcodes, x
  1262  86a7 a000                   ldy #0
  1263  86a9 9126                   sta (ptr3), y
  1264  86ab c8                     iny
  1265  86ac a625                   ldx size
  1266  86ae e001                   cpx #1
  1267  86b0 f016                   beq ++
  1268  86b2 e002               +   cpx #2
  1269  86b4 d005                   bne +
  1270  86b6 a5a6                   lda tmp2
  1271  86b8 9126                   sta (ptr3), y
  1272  86ba 60                     rts
  1273  86bb e003               +   cpx #3
  1274  86bd d009                   bne ++
  1275  86bf a5fb                   lda ptr1
  1276  86c1 9126                   sta (ptr3), y
  1277  86c3 c8                     iny
  1278  86c4 a5fc                   lda ptr1+1
  1279  86c6 9126                   sta (ptr3), y
  1280  86c8 60                 ++  rts
  1281                          
  1282                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1283  86c9 204d8a                 jsr skipspaces
  1284  86cc a200                   ldx #0
  1285  86ce 8624                   stx mode
  1286  86d0 202b87                 jsr chkaccumulator
  1287  86d3 f051                   beq +
  1288  86d5 e624                   inc mode
  1289  86d7 c4a4                   cpy len ; chknone
  1290  86d9 f04b                   beq +
  1291  86db e624                   inc mode
  1292  86dd 204f87                 jsr chkimmediate
  1293  86e0 f044                   beq +
  1294  86e2 e624                   inc mode
  1295  86e4 207387                 jsr chkindirectx
  1296  86e7 f03d                   beq +
  1297  86e9 e624                   inc mode
  1298  86eb 20b887                 jsr chkindirecty
  1299  86ee f036                   beq +
  1300  86f0 e624                   inc mode
  1301  86f2 20fd87                 jsr chkrelative
  1302  86f5 f02f                   beq +
  1303  86f7 e624                   inc mode
  1304  86f9 205888                 jsr chkzeropage
  1305  86fc f028                   beq +
  1306  86fe e624                   inc mode
  1307  8700 207188                 jsr chkzeropagex
  1308  8703 f021                   beq +
  1309  8705 e624                   inc mode
  1310  8707 20a088                 jsr chkzeropagey
  1311  870a f01a                   beq +
  1312  870c e624                   inc mode
  1313  870e 20cf88                 jsr chkabsolute
  1314  8711 f013                   beq +
  1315  8713 e624                   inc mode
  1316  8715 20e888                 jsr chkabsolutex
  1317  8718 f00c                   beq +
  1318  871a e624                   inc mode
  1319  871c 201789                 jsr chkabsolutey
  1320  871f f005                   beq +
  1321  8721 e624                   inc mode
  1322  8723 204689                 jsr chkindirect
  1323  8726 08                 +   php ; save Z
  1324  8727 a524                   lda mode
  1325  8729 28                     plp ; restore Z 
  1326  872a 60                     rts
  1327                          
  1328                          chkaccumulator:
  1329  872b c4a4                   cpy len
  1330  872d d013                   bne +
  1331  872f a523                   lda inidx
  1332  8731 c902                   cmp #2 ; ASL
  1333  8733 f019                   beq ++
  1334  8735 c920                   cmp #32 ; LSR
  1335  8737 f015                   beq ++
  1336  8739 c927                   cmp #39 ; ROL
  1337  873b f011                   beq ++
  1338  873d c928                   cmp #40 ; ROR
  1339  873f 4c4e87                 jmp ++
  1340  8742 b90002             +   lda inputbuf, y
  1341  8745 c941                   cmp #'A'
  1342  8747 d005                   bne ++
  1343  8749 b90102                 lda inputbuf+1,y
  1344  874c c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1345  874e 60                 ++  rts
  1346                          
  1347                          chkimmediate:
  1348  874f 84a5                   sty savepos
  1349  8751 b90002                 lda inputbuf, y
  1350  8754 c923                   cmp #'#'
  1351  8756 d016                   bne ++
  1352  8758 c8                     iny
  1353  8759 204d8a                 jsr skipspaces
  1354  875c b90002                 lda inputbuf, y
  1355  875f c924                   cmp #'$'
  1356  8761 d001                   bne +
  1357  8763 c8                     iny
  1358  8764 20a08a             +   jsr chkhexbyte
  1359  8767 d005                   bne ++
  1360  8769 c4a4               +   cpy len
  1361  876b d001                   bne ++
  1362  876d 60                     rts
  1363  876e a4a5               ++  ldy savepos
  1364  8770 a201                   ldx #1 ; Z false (NE)
  1365  8772 60                     rts
  1366                          
  1367                          chkindirectx:
  1368  8773 84a5                   sty savepos
  1369  8775 b90002                 lda inputbuf, y
  1370  8778 c928                   cmp #'('
  1371  877a d037                   bne ++
  1372  877c c8                     iny
  1373  877d 204d8a                 jsr skipspaces
  1374  8780 b90002                 lda inputbuf, y
  1375  8783 c924                   cmp #'$'
  1376  8785 d001                   bne +
  1377  8787 c8                     iny
  1378  8788 20a08a             +   jsr chkhexbyte
  1379  878b d026                   bne ++
  1380  878d 204d8a                 jsr skipspaces
  1381  8790 b90002                 lda inputbuf, y
  1382  8793 c92c                   cmp #','
  1383  8795 d01c                   bne ++
  1384  8797 c8                     iny
  1385  8798 204d8a                 jsr skipspaces
  1386  879b b90002                 lda inputbuf, y
  1387  879e c958                   cmp #'X'
  1388  87a0 d011                   bne ++
  1389  87a2 c8                     iny
  1390  87a3 204d8a                 jsr skipspaces
  1391  87a6 b90002                 lda inputbuf, y
  1392  87a9 c929                   cmp #')'
  1393  87ab d006                   bne ++
  1394  87ad c8                     iny
  1395  87ae c4a4                   cpy len
  1396  87b0 d001                   bne ++
  1397  87b2 60                     rts
  1398  87b3 a4a5               ++  ldy savepos
  1399  87b5 a201                   ldx #1 ; Z false (NE)
  1400  87b7 60                     rts
  1401                          
  1402                          chkindirecty:
  1403  87b8 84a5                   sty savepos
  1404  87ba b90002                 lda inputbuf, y
  1405  87bd c928                   cmp #'('
  1406  87bf d037                   bne ++
  1407  87c1 c8                     iny
  1408  87c2 204d8a                 jsr skipspaces
  1409  87c5 b90002                 lda inputbuf, y
  1410  87c8 c924                   cmp #'$'
  1411  87ca d001                   bne +
  1412  87cc c8                     iny
  1413  87cd 20a08a             +   jsr chkhexbyte
  1414  87d0 d026                   bne ++
  1415  87d2 204d8a                 jsr skipspaces
  1416  87d5 b90002                 lda inputbuf, y
  1417  87d8 c929                   cmp #')'
  1418  87da d01c                   bne ++
  1419  87dc c8                     iny
  1420  87dd 204d8a                 jsr skipspaces
  1421  87e0 b90002                 lda inputbuf, y
  1422  87e3 c92c                   cmp #','
  1423  87e5 d011                   bne ++
  1424  87e7 c8                     iny
  1425  87e8 204d8a                 jsr skipspaces
  1426  87eb b90002                 lda inputbuf, y
  1427  87ee c959                   cmp #'Y'
  1428  87f0 d006                   bne ++
  1429  87f2 c8                     iny
  1430  87f3 c4a4                   cpy len
  1431  87f5 d001                   bne ++
  1432  87f7 60                     rts
  1433  87f8 a4a5               ++  ldy savepos
  1434  87fa a201                   ldx #1 ; Z false (NE)
  1435  87fc 60                     rts
  1436                          
  1437                          chkrelative:
  1438  87fd 84a5                   sty savepos
  1439  87ff a623                   ldx inidx
  1440  8801 e006                   cpx #6 ; BIT
  1441  8803 f01e                   beq ++
  1442  8805 bddc8b                 lda inst0, x
  1443  8808 c942                   cmp #'B'
  1444  880a d017                   bne ++
  1445  880c b90002                 lda inputbuf, y
  1446  880f c924                   cmp #'$'
  1447  8811 d001                   bne +
  1448  8813 c8                     iny
  1449  8814 20978a             +   jsr chkhexword
  1450  8817 d00a                   bne ++
  1451  8819 c4a4                   cpy len
  1452  881b d006                   bne ++
  1453  881d 202888                 jsr computeoffset
  1454  8820 d001                   bne ++
  1455  8822 60                     rts ; Z true (EQ)
  1456  8823 a4a5               ++  ldy savepos
  1457  8825 a201                   ldx #1 ; Z false (NE)
  1458  8827 60                     rts
  1459                          
  1460                          computeoffset:
  1461                          ;   compute next address
  1462  8828 a527                   lda ptr3+1
  1463  882a 85fe                   sta ptr2+1
  1464  882c a526                   lda ptr3
  1465  882e 18                     clc
  1466  882f 6902                   adc #2
  1467  8831 85fd                   sta ptr2
  1468  8833 9002                   bcc +
  1469  8835 e6fe                   inc ptr2+1
  1470                          +  ; subtract argument
  1471  8837 38                     sec
  1472  8838 a5fb                   lda ptr1
  1473  883a e5fd                   sbc ptr2
  1474  883c 85a6                   sta tmp2
  1475  883e a5fc                   lda ptr1+1
  1476  8840 e5fe                   sbc ptr2+1
  1477  8842 f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1478  8844 c9ff                   cmp #$FF
  1479  8846 d00d                   bne failedoffset ; 0 and FF were only options so fail
  1480                              ; chkeck negative offset
  1481  8848 a5a6                   lda tmp2
  1482  884a 3006                   bmi successoffset ; branch if signed byte is negative
  1483  884c 1007                   bpl failedoffset ; otherwise fail
  1484                          chkoffsetto127:
  1485  884e a5a6                   lda tmp2
  1486  8850 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1487                          successoffset:    
  1488  8852 a900                   lda #0 ; Z true (EQ)
  1489  8854 60                     rts
  1490                          failedoffset:
  1491  8855 a901                   lda #1 ; Z false (NE)
  1492  8857 60                     rts
  1493                          
  1494                          chkzeropage:
  1495  8858 84a5                   sty savepos
  1496  885a b90002                 lda inputbuf, y
  1497  885d c924                   cmp #'$'
  1498  885f d001                   bne +
  1499  8861 c8                     iny
  1500  8862 20a08a             +   jsr chkhexbyte
  1501  8865 d005                   bne ++
  1502  8867 c4a4                   cpy len
  1503  8869 d001                   bne ++
  1504  886b 60                     rts ; Z true (EQ)
  1505  886c a4a5               ++  ldy savepos
  1506  886e a201                   ldx #1 ; Z false (NE)
  1507  8870 60                     rts
  1508                          
  1509                          chkzeropagex:
  1510  8871 84a5                   sty savepos
  1511  8873 b90002                 lda inputbuf, y
  1512  8876 c924                   cmp #'$'
  1513  8878 d001                   bne +
  1514  887a c8                     iny
  1515  887b 20a08a             +   jsr chkhexbyte
  1516  887e d01b                   bne ++
  1517  8880 204d8a                 jsr skipspaces
  1518  8883 b90002                 lda inputbuf, y
  1519  8886 c92c                   cmp #','
  1520  8888 d011                   bne ++
  1521  888a c8                     iny
  1522  888b 204d8a                 jsr skipspaces
  1523  888e b90002                 lda inputbuf, y
  1524  8891 c958                   cmp #'X'
  1525  8893 d006                   bne ++
  1526  8895 c8                     iny
  1527  8896 c4a4                   cpy len
  1528  8898 d001                   bne ++
  1529  889a 60                     rts ; Z true (EQ)
  1530  889b a4a5               ++  ldy savepos
  1531  889d a201                   ldx #1 ; Z false (NE)
  1532  889f 60                     rts
  1533                          
  1534                          chkzeropagey:
  1535  88a0 84a5                   sty savepos
  1536  88a2 b90002                 lda inputbuf, y
  1537  88a5 c924                   cmp #'$'
  1538  88a7 d001                   bne +
  1539  88a9 c8                     iny
  1540  88aa 20a08a             +   jsr chkhexbyte
  1541  88ad d01b                   bne ++
  1542  88af 204d8a                 jsr skipspaces
  1543  88b2 b90002                 lda inputbuf, y
  1544  88b5 c92c                   cmp #','
  1545  88b7 d011                   bne ++
  1546  88b9 c8                     iny
  1547  88ba 204d8a                 jsr skipspaces
  1548  88bd b90002                 lda inputbuf, y
  1549  88c0 c959                   cmp #'Y'
  1550  88c2 d006                   bne ++
  1551  88c4 c8                     iny
  1552  88c5 c4a4                   cpy len
  1553  88c7 d001                   bne ++
  1554  88c9 60                     rts ; Z true (EQ)
  1555  88ca a4a5               ++  ldy savepos
  1556  88cc a201                   ldx #1 ; Z false (NE)
  1557  88ce 60                     rts
  1558                          
  1559                          chkabsolute:
  1560  88cf 84a5                   sty savepos
  1561  88d1 b90002                 lda inputbuf, y
  1562  88d4 c924                   cmp #'$'
  1563  88d6 d001                   bne +
  1564  88d8 c8                     iny
  1565  88d9 20978a             +   jsr chkhexword
  1566  88dc d005                   bne ++
  1567  88de c4a4                   cpy len
  1568  88e0 d001                   bne ++
  1569  88e2 60                     rts ; Z true (EQ)
  1570  88e3 a4a5               ++  ldy savepos
  1571  88e5 a201                   ldx #1 ; Z false (NE)
  1572  88e7 60                     rts
  1573                          
  1574                          chkabsolutex:
  1575  88e8 84a5                   sty savepos
  1576  88ea b90002                 lda inputbuf, y
  1577  88ed c924                   cmp #'$'
  1578  88ef d001                   bne +
  1579  88f1 c8                     iny
  1580  88f2 20978a             +   jsr chkhexword
  1581  88f5 d01b                   bne ++
  1582  88f7 204d8a                 jsr skipspaces
  1583  88fa b90002                 lda inputbuf, y
  1584  88fd c92c                   cmp #','
  1585  88ff d011                   bne ++
  1586  8901 c8                     iny
  1587  8902 204d8a                 jsr skipspaces
  1588  8905 b90002                 lda inputbuf, y
  1589  8908 c958                   cmp #'X'
  1590  890a d006                   bne ++
  1591  890c c8                     iny
  1592  890d c4a4                   cpy len
  1593  890f d001                   bne ++
  1594  8911 60                     rts ; Z true (EQ)
  1595  8912 a4a5               ++  ldy savepos
  1596  8914 a201                   ldx #1 ; Z false (NE)
  1597  8916 60                     rts
  1598                          
  1599                          chkabsolutey:
  1600  8917 84a5                   sty savepos
  1601  8919 b90002                 lda inputbuf, y
  1602  891c c924                   cmp #'$'
  1603  891e d001                   bne +
  1604  8920 c8                     iny
  1605  8921 20978a             +   jsr chkhexword
  1606  8924 d01b                   bne ++
  1607  8926 204d8a                 jsr skipspaces
  1608  8929 b90002                 lda inputbuf, y
  1609  892c c92c                   cmp #','
  1610  892e d011                   bne ++
  1611  8930 c8                     iny
  1612  8931 204d8a                 jsr skipspaces
  1613  8934 b90002                 lda inputbuf, y
  1614  8937 c959                   cmp #'Y'
  1615  8939 d006                   bne ++
  1616  893b c8                     iny
  1617  893c c4a4                   cpy len
  1618  893e d001                   bne ++
  1619  8940 60                     rts ; Z true (EQ)
  1620  8941 a4a5               ++  ldy savepos
  1621  8943 a201                   ldx #1 ; Z false (NE)
  1622  8945 60                     rts
  1623                          
  1624                          chkindirect:
  1625  8946 84a5                   sty savepos
  1626  8948 b90002                 lda inputbuf, y
  1627  894b c928                   cmp #'('
  1628  894d d021                   bne ++
  1629  894f c8                     iny
  1630  8950 204d8a                 jsr skipspaces
  1631  8953 b90002                 lda inputbuf, y
  1632  8956 c924                   cmp #'$'
  1633  8958 d001                   bne +
  1634  895a c8                     iny
  1635  895b 20978a             +   jsr chkhexword
  1636  895e d010                   bne ++
  1637  8960 204d8a                 jsr skipspaces
  1638  8963 b90002                 lda inputbuf, y
  1639  8966 c929                   cmp #')'
  1640  8968 d006                   bne ++
  1641  896a c8                     iny
  1642  896b c4a4                   cpy len
  1643  896d d001                   bne ++
  1644  896f 60                     rts ; Z true (EQ)
  1645  8970 a4a5               ++  ldy savepos
  1646  8972 a201                   ldx #1 ; Z false (NE)
  1647  8974 60                     rts
  1648                          
  1649                          chkinstruction:
  1650  8975 c4a4                   cpy len
  1651  8977 f02a                   beq ++
  1652  8979 84ff                   sty tmp
  1653  897b a237                   ldx #(ninst-1)
  1654  897d b90002             -   lda inputbuf,y
  1655  8980 dddc8b                 cmp inst0,x
  1656  8983 d019                   bne +
  1657  8985 c8                     iny
  1658  8986 b90002                 lda inputbuf,y
  1659  8989 dd148c                 cmp inst1,x
  1660  898c d010                   bne +
  1661  898e c8                     iny
  1662  898f b90002                 lda inputbuf,y
  1663  8992 dd4c8c                 cmp inst2,x
  1664  8995 d007                   bne +
  1665  8997 c8                     iny
  1666  8998 8a                     txa
  1667  8999 8523                   sta inidx
  1668  899b a200                   ldx #0
  1669  899d 60                     rts
  1670  899e a4ff               +   ldy tmp
  1671  89a0 ca                     dex
  1672  89a1 10da                   bpl -
  1673  89a3 a201               ++  ldx #1 ; Z false (NE)
  1674  89a5 60                     rts
  1675                          
  1676                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1677                              ; and allows mode promotion
  1678  89a6 20ca89                 jsr find_inst_and_mode2
  1679  89a9 f01e                   beq ++
  1680  89ab a524                   lda mode
  1681  89ad c906                   cmp #6
  1682  89af 9018                   bcc ++
  1683  89b1 c90a                   cmp #10
  1684  89b3 b012                   bcs +
  1685  89b5 6903                   adc #3
  1686  89b7 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1687  89b9 20ca89                 jsr find_inst_and_mode2 ; try again once
  1688  89bc d00b                   bne ++
  1689  89be a5a6                   lda tmp2
  1690  89c0 85fb                   sta ptr1
  1691  89c2 a900                   lda #0
  1692  89c4 85fc                   sta ptr1+1
  1693  89c6 60                     rts ; Z true (EQ)
  1694  89c7 a201               +   ldx #1 ; Z false (NE)
  1695  89c9 60                 ++  rts
  1696                          
  1697                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1698  89ca a296                   ldx #nopcodes-1
  1699  89cc bd348e             -   lda instidx, x
  1700  89cf bccb8e                 ldy modeidx, x
  1701  89d2 c523                   cmp inidx
  1702  89d4 d00c                   bne +
  1703  89d6 c424                   cpy mode
  1704  89d8 d008                   bne +
  1705  89da 8622                   stx opidx
  1706  89dc 208e81                 jsr getsize
  1707  89df a200                   ldx #0 ; Z true (EQ)
  1708  89e1 60                     rts
  1709  89e2 ca                 +   dex
  1710  89e3 e0ff                   cpx #$ff
  1711  89e5 d0e5                   bne -
  1712  89e7 a201                   ldx #1 ; Z false (NE)
  1713  89e9 60                     rts
  1714                          
  1715                          executerun:
  1716  89ea 68                     pla ; remove low byte return address
  1717  89eb 68                     pla ; return high byte return address
  1718  89ec 68                     pla ; again, we're really not returning
  1719  89ed 68                     pla ; again, we're really not returning
  1720  89ee 20f48a                 jsr newline
  1721  89f1 38                     sec
  1722  89f2 a5fb                   lda ptr1
  1723  89f4 e901                   sbc #1
  1724  89f6 85fb                   sta ptr1
  1725  89f8 b002                   bcs +
  1726  89fa c6fc                   dec ptr1+1
  1727  89fc a5fc               +   lda ptr1+1
  1728  89fe 48                     pha
  1729  89ff a5fb                   lda ptr1
  1730  8a01 48                     pha
  1731  8a02 60                     rts
  1732                          
  1733                          chkcontinuedis:
  1734  8a03 b90002                 lda inputbuf,y
  1735  8a06 c944                   cmp #'D'
  1736  8a08 d00a                   bne +
  1737  8a0a b90102                 lda inputbuf+1,y
  1738  8a0d c90d                   cmp #13
  1739  8a0f d003                   bne +
  1740  8a11 c8                     iny
  1741  8a12 a200                   ldx #0 ; restore Z set
  1742  8a14 60                 +   rts
  1743                          
  1744                          chkcontinueasm:
  1745  8a15 b90002                 lda inputbuf,y
  1746  8a18 c941                   cmp #'A'
  1747  8a1a d00a                   bne +
  1748  8a1c b90102                 lda inputbuf+1,y
  1749  8a1f c90d                   cmp #13
  1750  8a21 d003                   bne +
  1751  8a23 c8                     iny
  1752  8a24 a200                   ldx #0 ; restore Z set
  1753  8a26 60                 +   rts
  1754                          
  1755                          executedisassemble:
  1756  8a27 68                     pla ; remove low byte return address
  1757  8a28 68                     pla ; return high byte return address
  1758  8a29 20f48a                 jsr newline
  1759  8a2c 4c3681                 jmp disassemble
  1760                          
  1761                          reportnotimplemented:
  1762  8a2f a91f                   lda #<notimplemented
  1763  8a31 a290                   ldx #>notimplemented
  1764  8a33 4c9083                 jmp strout
  1765                          
  1766                          reporterr:
  1767  8a36 c000                   cpy #0
  1768  8a38 f008                   beq +
  1769  8a3a a920                   lda #' '
  1770  8a3c 20d2ff             -   jsr charout
  1771  8a3f 88                     dey
  1772  8a40 d0fa                   bne -
  1773  8a42 a93f               +   lda #'?'
  1774  8a44 20d2ff                 jsr charout
  1775  8a47 a90d                   lda #13
  1776  8a49 20d2ff                 jsr charout
  1777  8a4c 60                     rts
  1778                          
  1779                          skipspaces:
  1780  8a4d b90002             -   lda inputbuf, y
  1781                          !ifndef MINIMUM {
  1782                              ; skip SHIFT-SPACES too on Commodore
  1783  8a50 c9a0                   cmp #$A0
  1784  8a52 f004                   beq +
  1785                          }
  1786  8a54 c920                   cmp #$20
  1787  8a56 d003                   bne ++
  1788  8a58 c8                 +   iny
  1789  8a59 d0f2                   bne -
  1790  8a5b 60                 ++  rts
  1791                          
  1792                          chkdot:
  1793  8a5c b90002                 lda inputbuf, y
  1794  8a5f c92e                   cmp #'.'
  1795  8a61 d003                   bne +
  1796  8a63 c8                     iny
  1797  8a64 a900                   lda #0 ; Z true (EQ)
  1798  8a66 60                 +   rts
  1799                          
  1800                          chkhelp:
  1801  8a67 b90002                 lda inputbuf, y
  1802  8a6a c93f                   cmp #'?'
  1803  8a6c d003                   bne +
  1804  8a6e c8                     iny
  1805  8a6f a900                   lda #0 ; Z true (EQ)
  1806  8a71 60                 +   rts
  1807                          
  1808                          chkcolon:
  1809  8a72 b90002                 lda inputbuf, y
  1810  8a75 c93a                   cmp #':'
  1811  8a77 d003                   bne +
  1812  8a79 c8                     iny
  1813  8a7a a900                   lda #0 ; Z true (EQ)
  1814  8a7c 60                 +   rts
  1815                          
  1816                          chkhexbyteofsequence:
  1817  8a7d 205683                 jsr inputhexbyte
  1818  8a80 209a8a                 jsr +
  1819  8a83 d011                   bne ++ ; Z false (NE) if failed checks
  1820  8a85 c4a4                   cpy len
  1821  8a87 f00d                   beq ++ ; Z true (EQ) if end of input
  1822  8a89 85ff                   sta tmp
  1823  8a8b b90002                 lda inputbuf,y
  1824  8a8e c920                   cmp #$20
  1825  8a90 d004                   bne ++ ; Z false (NE) if not space
  1826  8a92 a5ff                   lda tmp
  1827  8a94 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1828  8a96 60                 ++  rts
  1829                          
  1830                          chkhexword:
  1831                          chkhexaddr1:
  1832  8a97 203083                 jsr inputhexword
  1833  8a9a a200               +   ldx #0 ; Z true (EQ)
  1834  8a9c 9001                   bcc +
  1835  8a9e e8                     inx ; Z false (NE)
  1836  8a9f 60                 +   rts
  1837                          
  1838                          chkhexbyte:
  1839  8aa0 98                     tya
  1840  8aa1 48                     pha ; save y
  1841  8aa2 205683                 jsr inputhexbyte
  1842  8aa5 b00d                   bcs +
  1843  8aa7 85a6                   sta tmp2
  1844  8aa9 207283                 jsr inputhexnybble
  1845  8aac 9006                   bcc +
  1846  8aae 68                     pla ; throw away saved y
  1847  8aaf a5a6                   lda tmp2
  1848  8ab1 a200                   ldx #0 ; Z true (EQ)
  1849  8ab3 60                     rts
  1850  8ab4 68                 +   pla
  1851  8ab5 a8                     tay ; won't be zero, so Z false (NE)
  1852  8ab6 60                     rts    
  1853                          
  1854                          chkhexaddr2:
  1855  8ab7 a5fb                   lda ptr1
  1856  8ab9 48                     pha
  1857  8aba a5fc                   lda ptr1+1
  1858  8abc 48                     pha
  1859  8abd 20978a                 jsr chkhexaddr1
  1860  8ac0 f005                   beq +
  1861  8ac2 68                     pla
  1862  8ac3 68                     pla
  1863  8ac4 a901                   lda #1 ; Z false (NE)
  1864  8ac6 60                     rts
  1865  8ac7 a5fb               +   lda ptr1
  1866  8ac9 85fd                   sta ptr2
  1867  8acb a5fc                   lda ptr1+1
  1868  8acd 85fe                   sta ptr2+1
  1869  8acf 68                     pla
  1870  8ad0 85fc                   sta ptr1+1
  1871  8ad2 68                     pla
  1872  8ad3 85fb                   sta ptr1
  1873  8ad5 a900                   lda #0 ; Z true (EQ)
  1874  8ad7 60                     rts    
  1875                          
  1876                          chkaddr1cmd:
  1877  8ad8 b90002                 lda inputbuf, y
  1878  8adb c941               +   cmp #'A'
  1879  8add d004                   bne +
  1880  8adf c8                     iny
  1881  8ae0 4c3e86                 jmp executeassemble
  1882  8ae3 c944               +   cmp #'D'
  1883  8ae5 d004                   bne +
  1884  8ae7 c8                     iny
  1885  8ae8 4c278a                 jmp executedisassemble
  1886  8aeb c952               +   cmp #'R'
  1887  8aed d004                   bne +
  1888  8aef c8                     iny
  1889  8af0 4cea89                 jmp executerun
  1890  8af3 60                 +   rts
  1891                          
  1892                          newline:
  1893  8af4 a90d                   lda #13
  1894  8af6 4cd2ff                 jmp charout
  1895                          
  1896                          space:
  1897  8af9 a920                   lda #32
  1898  8afb 4cd2ff                 jmp charout
  1899                          
  1900                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1901                          ;     jsr $ffd2
  1902                          ;     pha
  1903                          ; -   lda $d011
  1904                          ;     bpl -
  1905                          ; -   lda $d011
  1906                          ;     bmi -
  1907                          ; -   lda $d011
  1908                          ;     bpl -
  1909                          ; -   lda $d011
  1910                          ;     bmi -
  1911                          ;     pla
  1912                          ;     rts
  1913                          
  1914                          save_regs_and_stack:
  1915                          
  1916                          ; save registers
  1917  8afe 8d3392             sta registerA
  1918  8b01 8e3492             stx registerX
  1919  8b04 8c3592             sty registerY
  1920                          
  1921                          ; detect N/Z flags without affecting stack
  1922  8b07 3010               bmi +
  1923  8b09 f007               beq p_pl_eq
  1924                          
  1925  8b0b a900               lda #$00 ;p_pl_ne
  1926  8b0d 8d3792             sta registerSR
  1927  8b10 f015               beq ++
  1928                          
  1929                          p_pl_eq:
  1930  8b12 a902               lda #$02
  1931  8b14 8d3792             sta registerSR
  1932  8b17 100e               bpl ++ 
  1933                          
  1934  8b19 f007               + beq p_mi_eq
  1935  8b1b a980               lda #$80 ;p_mi_ne
  1936  8b1d 8d3792             sta registerSR
  1937  8b20 3005               bmi ++
  1938                          
  1939                          p_mi_eq:
  1940  8b22 a982               lda #$82
  1941  8b24 8d3792             sta registerSR
  1942                          
  1943                          ; save SP register, affects N/Z
  1944  8b27 ba                 ++tsx
  1945  8b28 8e3692             stx registerSP
  1946                          
  1947                          ; save stack, affects N/Z
  1948  8b2b a200               ldx #0
  1949  8b2d bd0001             -lda $100,x
  1950  8b30 9d3a92             sta savestack,x
  1951  8b33 e8                 inx
  1952  8b34 d0f7               bne -
  1953                          
  1954                          ; save flags, combining unaffected ones with saved N/Z
  1955  8b36 08                 php
  1956  8b37 68                 pla
  1957  8b38 297d               and #$7d
  1958  8b3a 0d3792             ora registerSR
  1959  8b3d 8d3792             sta registerSR
  1960                          
  1961                          ; restore stack byte affected
  1962  8b40 aa                 tax
  1963  8b41 bd3a92             lda savestack,x
  1964  8b44 9d0001             sta $100,x
  1965                          
  1966  8b47 4c4c8b             jmp +
  1967                          
  1968                          execute_display_registers:
  1969  8b4a 68                 pla ; remove return address
  1970  8b4b 68                 pla
  1971                          +
  1972  8b4c 20f48a             jsr newline
  1973  8b4f 20558b             jsr display_registers
  1974  8b52 4c2b80             jmp input_loop
  1975                          
  1976                          ; PC   NV-BDIZC .A .X .Y .S
  1977                          ; 1234 10111011 01 02 03 FF
  1978                          display_registers:
  1979  8b55 a914                   lda #<reg_header
  1980  8b57 a292                   ldx #>reg_header
  1981  8b59 209083                 jsr strout
  1982  8b5c ad3892                 lda registerPC
  1983  8b5f ae3992                 ldx registerPC+1
  1984  8b62 201483                 jsr disphexword
  1985  8b65 20f98a                 jsr space
  1986  8b68 ad3792                 lda registerSR
  1987  8b6b 200183                 jsr dispbinbyte
  1988  8b6e 20f98a                 jsr space
  1989  8b71 ad3392                 lda registerA
  1990  8b74 201a83                 jsr disphexbyte
  1991  8b77 20f98a                 jsr space
  1992  8b7a ad3492                 lda registerX
  1993  8b7d 201a83                 jsr disphexbyte
  1994  8b80 20f98a                 jsr space
  1995  8b83 ad3592                 lda registerY
  1996  8b86 201a83                 jsr disphexbyte
  1997  8b89 20f98a                 jsr space
  1998  8b8c ad3692                 lda registerSP
  1999  8b8f 201a83                 jsr disphexbyte
  2000  8b92 4cf48a                 jmp newline
  2001                          
  2002                          loadregs_go:
  2003  8b95 a000                   ldy #0
  2004  8b97 b93a92             -   lda savestack,y
  2005  8b9a 990001                 sta $100,y
  2006  8b9d c8                     iny
  2007  8b9e d0f7                   bne -
  2008  8ba0 ae3692                 ldx registerSP
  2009  8ba3 9a                     txs
  2010  8ba4 ad3792                 lda registerSR
  2011  8ba7 48                     pha
  2012  8ba8 ad3392                 lda registerA
  2013  8bab ae3492                 ldx registerX
  2014  8bae ac3592                 ldy registerY
  2015  8bb1 28                     plp
  2016  8bb2 6c3892                 jmp (registerPC)
  2017                          
  2018                          !ifdef MINIMUM {
  2019                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2020                          ;; MC6850
  2021                          UART_DATA=$FFF8
  2022                          UART_STCR=$FFF9
  2023                          
  2024                          UART_INIT:
  2025                          	ldx #0b00000111 ; 11=reset device
  2026                          	stx UART_STCR
  2027                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  2028                          	sta UART_STCR
  2029                          	rts
  2030                          UART_OUT:
  2031                          	pha
  2032                          -	lda UART_STCR
  2033                          	and #2
  2034                          	beq - ; branch if TDRE=0, not finished transmitting
  2035                          	pla
  2036                          	pha
  2037                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  2038                          	sta UART_DATA
  2039                          	pla
  2040                          	rts
  2041                          UART_IN:
  2042                          -	lda UART_STCR
  2043                          	and #1
  2044                          	beq - ; branch if TDRF=0, not received
  2045                          	lda UART_DATA
  2046                          	; software "CAPS LOCK" because wozmon expects only uppercase
  2047                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  2048                          	beq BREAK
  2049                              ; force lowercase alphabet to uppercase
  2050                              cmp #'a'
  2051                          	bcc +
  2052                          	cmp #'z'+1
  2053                          	bcs +
  2054                          	eor #$20
  2055                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  2056                           	rts
  2057                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  2058                          	pha ; save A
  2059                          	lda UART_STCR
  2060                          	lsr ; put rightmost bit in carry
  2061                          	pla ; restore A affects flags
  2062                          	ror ; move carry to left bit, right bit to carry
  2063                          	php ; push processor to save N
  2064                          	rol ; restore A affects flags
  2065                          	plp ; pull processor to restore N
  2066                          	rts
  2067                          
  2068                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2069                          ; Processor start and interrupts
  2070                          
  2071                          NMI: ; unused on minimum (no source of interrupt)
  2072                              rti
  2073                          
  2074                          IRQ:
  2075                              pha
  2076                              php
  2077                              pla
  2078                              and #$10
  2079                              beq ++ ; not break
  2080                          ;BREAK HANDLER
  2081                              pla
  2082                              sta registerA
  2083                              pla
  2084                              sta registerSR
  2085                              pla
  2086                              sec
  2087                              sbc #2
  2088                              sta registerPC
  2089                              pla
  2090                              sbc #0
  2091                              sta registerPC+1
  2092                              lda #>save_regs_and_stack
  2093                              pha
  2094                              lda #<save_regs_and_stack
  2095                              pha
  2096                              lda registerSR
  2097                              pha
  2098                              lda registerA
  2099                              pha
  2100                          ++  pla
  2101                              rti
  2102                          
  2103                          BREAK:
  2104                              jmp RESET
  2105                          
  2106                          RESET:
  2107                              cld
  2108                              ldx #$FF
  2109                              txs
  2110                              jsr JUART_INIT
  2111                              cli
  2112                              jmp start
  2113                          ; !ifdef MINIMUM
  2114                          } else { ; not MINIMUM
  2115                          brk64:
  2116  8bb5 68                     pla
  2117  8bb6 a8                     tay
  2118  8bb7 68                     pla
  2119  8bb8 aa                     tax
  2120  8bb9 68                     pla
  2121  8bba 8d3392                 sta registerA
  2122  8bbd 68                     pla
  2123  8bbe 8d3792                 sta registerSR
  2124  8bc1 68                     pla
  2125  8bc2 38                     sec
  2126  8bc3 e902                   sbc #2
  2127  8bc5 8d3892                 sta registerPC
  2128  8bc8 68                     pla
  2129  8bc9 e900                   sbc #0
  2130  8bcb 8d3992                 sta registerPC+1
  2131  8bce a98a                   lda #>save_regs_and_stack
  2132  8bd0 48                     pha
  2133  8bd1 a9fe                   lda #<save_regs_and_stack
  2134  8bd3 48                     pha
  2135  8bd4 ad3792                 lda registerSR
  2136  8bd7 48                     pha
  2137  8bd8 ad3392                 lda registerA
  2138  8bdb 40                     rti
  2139                          }
  2140                          
  2141                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2142                          ; data
  2143                          
  2144                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  2145                          ninst = 56
  2146  8bdc 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  2147  8c14 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  2148  8c4c 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  2149                          
  2150                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  2151                          mode_jmptable:
  2152  8c84 1a82               !word dispModeAcc-1; 0 Accumulator 1
  2153  8c86 1f82               !word dispModeNone-1 ; 1 None 1
  2154  8c88 2082               !word dispModeImm-1 ; 2 Immediate 2
  2155  8c8a 3182               !word dispModeIndX-1 ; 3 IndirectX 2
  2156  8c8c 5182               !word dispModeIndY-1 ; 4 IndirectY 2
  2157  8c8e 7182               !word dispModeRel-1 ; 5 Relative 2
  2158  8c90 2582               !word dispModeZP-1 ; 6 ZeroPage 2
  2159  8c92 ad82               !word dispModeZPX-1 ; 7 ZeroPageX 2
  2160  8c94 ba82               !word dispModeZPY-1 ; 8 ZeroPageY 2
  2161  8c96 c782               !word dispModeAbs-1 ; 9 Absolute 3
  2162  8c98 d982               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  2163  8c9a e682               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  2164  8c9c f382               !word dispModeInd-1 ; 12 Indirect 3
  2165                          
  2166                          nmodes = 13
  2167                          
  2168                          mode_sorted:
  2169  8c9e 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  2170                          
  2171                          !ifdef MINIMUM {
  2172                          mode_0: !text "Accumulator", 0, "A", 0
  2173                          mode_1: !text "None", 0, 8, 0
  2174                          mode_2: !text "Immediate", 0, "#$12", 0
  2175                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  2176                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  2177                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  2178                          mode_6: !text "ZeroPage", 0, "$12", 0
  2179                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  2180                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  2181                          mode_9: !text "Absolute", 0, "$1234", 0
  2182                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  2183                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  2184                          mode_12: !text "Indirect", 0, "($1234)", 0
  2185                          } else {
  2186  8cab 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2187  8cb9 4e4f4e45001400     mode_1: !text "NONE", 0, 20, 0
  2188  8cc0 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2189  8ccf 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2190  8ce1 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2191  8cf3 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2192  8d12 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2193  8d1f 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2194  8d2f 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2195  8d3f 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2196  8d4e 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2197  8d60 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2198  8d72 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2199                          }
  2200                          
  2201                          modes: ; table for easily displaying each mode_example
  2202  8d83 ab8c               !word mode_0
  2203  8d85 b98c               !word mode_1
  2204  8d87 c08c               !word mode_2
  2205  8d89 cf8c               !word mode_3
  2206  8d8b e18c               !word mode_4
  2207  8d8d f38c               !word mode_5
  2208  8d8f 128d               !word mode_6
  2209  8d91 1f8d               !word mode_7
  2210  8d93 2f8d               !word mode_8
  2211  8d95 3f8d               !word mode_9
  2212  8d97 4e8d               !word mode_10
  2213  8d99 608d               !word mode_11
  2214  8d9b 728d               !word mode_12
  2215                          
  2216                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2217                          nopcodes = 151
  2218  8d9d 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2219  8e34 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2220  8ecb 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2221                          
  2222                          copyright 
  2223                          ;                  1         2         3         4
  2224                          ;         1234567890123456789012345678901234567890
  2225  8f62 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2226                          !ifdef C64TERMINAL {
  2227                              !text 13, "(TERMINAL VERSION)"
  2228                          }
  2229  8f82 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2230  8fa8 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2231  8fbf 00                 !text 0
  2232                          
  2233                          firsthelp
  2234                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2235  8fc0 0d0d               !text 13, 13
  2236  8fc2 54595045203f2046...!text "TYPE ? FOR HELP"
  2237  8fd1 0d00               !text 13, 0
  2238                          
  2239                          !ifndef MINIMUM {
  2240                          ; C64 only
  2241                          extra_help:
  2242  8fd3 5820202020202020...    !text "X           (EXIT MONITOR)", 13
  2243  8fee 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S  (SAVE)", 13
  2244  9010 00                     !text 0
  2245                          
  2246                          !ifdef C64SCREEN {
  2247  9011 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  2248  9018 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  2249                          }
  2250                          
  2251                          }
  2252                          
  2253  901f 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2254                          
  2255                          generalhelp
  2256  9030 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2257  9056 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2258  907b 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2259  909e 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2260  90c6 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2261  90e2 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2262  9102 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2263  9124 00                 !text 0
  2264                          generalhelp2
  2265  9125 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2266  914a 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2267  9166 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2268  9185 3f20412020202020...!text "? A         (LIST 6502 INSTRUCTIONS)", 13
  2269  91aa 3f20414443202020...!text "? ADC       (/ADC/ ADDRESSING MODES)", 13
  2270  91cf 3f204d4f44452020...!text "? MODE      (ADDRESSING MODES)", 13
  2271  91ee 3f2e202020202020...!text "?.          (DISPLAY REGISTERS)", 13
  2272  920e 00                 !text 0
  2273                          
  2274  920f 4d4f444500         modes_keyword !text "MODE", 0
  2275                          
  2276  9214 2050432020204e56...reg_header !text " PC   NV-BDIZC .A .X .Y .S", 13, '.', 0
  2277                          
  2278                          !ifdef MINIMUM {
  2279                          registerA = $def9
  2280                          registerX = $defa
  2281                          registerY = $defb
  2282                          registerSP = $defc
  2283                          registerSR = $defd
  2284                          registerPC = $defe;/f
  2285                          savestack = $df00
  2286                          } else {
  2287  9231 0000               savebrkvector !word 0
  2288  9233 00                 registerA !byte 0
  2289  9234 00                 registerX !byte 0
  2290  9235 00                 registerY !byte 0
  2291  9236 00                 registerSP !byte 0
  2292  9237 00                 registerSR !byte 0
  2293  9238 0000               registerPC !word 0
  2294                          savestack ; 256 bytes
  2295  923a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2296  924a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2297  925a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2298  926a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2299  927a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2300  928a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2301  929a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2302  92aa 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2303  92ba 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2304  92ca 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2305  92da 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2306  92ea 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2307  92fa 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2308  930a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2309  931a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2310  932a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2311                          }
  2312                          
  2313                          !ifdef MINIMUM {
  2314                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2315                          ; JUMP table for some stability
  2316                          * = $FFEE
  2317                          JUART_INIT: JMP UART_INIT
  2318                          JUART_OUT: JMP UART_OUT
  2319                          JUART_IN: JMP UART_IN
  2320                          JUART_CHK: JMP UART_CHK
  2321                          
  2322                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2323                          ; 6502 vectors 
  2324                          * = $fffa
  2325                              !word NMI
  2326                              !word RESET
  2327                              !word IRQ
  2328                          } else { // C64
  2329                              !if * > $a000 {
  2330                                  !error "code/data overran $a000"
  2331                              }
  2332                          }
  2333                          
  2334                          finish = *
