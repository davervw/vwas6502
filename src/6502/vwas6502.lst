
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: work in progress, disassembles itself <<<
     4                          ;;
     5                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     6                          ;; MIT License
     7                          ;;
     8                          ;; Copyright (c) 2024 David R. Van Wagner
     9                          ;; davevw.com
    10                          ;;
    11                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    12                          ;; of this software and associated documentation files (the "Software"), to deal
    13                          ;; in the Software without restriction, including without limitation the rights
    14                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    15                          ;; copies of the Software, and to permit persons to whom the Software is
    16                          ;; furnished to do so, subject to the following conditions:
    17                          ;;
    18                          ;; The above copyright notice and this permission notice shall be included in all
    19                          ;; copies or substantial portions of the Software.
    20                          ;;
    21                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    22                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    23                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    24                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    25                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    26                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    27                          ;; SOFTWARE.
    28                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    29                          
    30                          *=$c000
    31                          
    32                          ; kernal/system calls
    33                          charout=$ffd2
    34                          
    35                          ; zeropage
    36                          ptr1=$fb ; and $fc
    37                          ptr2=$fd ; and $fe
    38                          tmp=$ff
    39                          opidx=$22
    40                          inidx=$23
    41                          mode=$24
    42                          size=$25
    43                          ptr3=$26 ; and $27
    44                          
    45                          ; test
    46                          start:
    47  c000 4c20c0                 jmp +
    48                          
    49                          test: ; all the addressing modes here for testing disassembly
    50  c003 ea                     nop
    51  c004 ad3412                 lda $1234
    52  c007 bd3412                 lda $1234,x
    53  c00a b93412                 lda $1234,y
    54  c00d 0a                     asl
    55  c00e a912                   lda #$12
    56  c010 a112                   lda ($12,x)
    57  c012 b112                   lda ($12),y
    58  c014 6c3412                 jmp ($1234)
    59  c017 d0fe               -   bne -
    60  c019 a512                   lda $12
    61  c01b b512                   lda $12,x
    62  c01d b612                   ldx $12,y
    63  c01f ff                     !byte $FF ; unknown
    64                          
    65  c020 a900               +   lda #<start
    66  c022 a2c0                   ldx #>start
    67  c024 85fb                   sta ptr1
    68  c026 86fc                   stx ptr1+1
    69  c028 a952                   lda #<end
    70  c02a a2c2                   ldx #>end
    71  c02c 85fd                   sta ptr2
    72  c02e 86fe                   stx ptr2+1
    73  c030 2046c0                 jsr disassemble
    74  c033 a5fd                   lda ptr2
    75  c035 a6fe                   ldx ptr2+1
    76  c037 85fb                   sta ptr1
    77  c039 86fc                   stx ptr1+1
    78  c03b a9da                   lda #<finish
    79  c03d a2c4                   ldx #>finish
    80  c03f 85fd                   sta ptr2
    81  c041 86fe                   stx ptr2+1
    82  c043 4c1ec2                 jmp display_memory
    83                          
    84                          disassemble:
    85  c046 a000               -   ldy #0
    86  c048 b1fb                   lda (ptr1),y
    87  c04a 2070c0                 jsr find_opcode
    88  c04d 20c9c0                 jsr disp_current
    89  c050 a525                   lda size
    90  c052 1002                   bpl +
    91  c054 a901                   lda #1
    92  c056 18                 +   clc
    93  c057 65fb                   adc ptr1
    94  c059 85fb                   sta ptr1
    95  c05b 9002                   bcc +
    96  c05d e6fc                   inc ptr1+1
    97  c05f 2065c0             +   jsr compareptrs
    98  c062 90e2                   bcc -
    99  c064 60                     rts
   100                          
   101                          compareptrs:
   102  c065 a5fc                   lda ptr1+1
   103  c067 c5fe                   cmp ptr2+1
   104  c069 d004                   bne +
   105  c06b a5fb                   lda ptr1
   106  c06d c5fd                   cmp ptr2
   107  c06f 60                 +   rts
   108                          
   109                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   110                          ; and properties updated in ZP globals size,inidx,opidx,mode
   111  c070 a001                   ldy #1
   112  c072 8425                   sty size
   113  c074 a097                   ldy #nopcodes
   114  c076 a296                   ldx #nopcodes-1
   115  c078 dd15c3             -   cmp opcodes,x
   116  c07b f00b                   beq +
   117  c07d ca                     dex
   118  c07e 88                     dey
   119  c07f d0f7                   bne -
   120  c081 18                     clc
   121  c082 a9ff                   lda #$FF
   122  c084 aa                     tax
   123  c085 a8                     tay
   124  c086 9013                   bcc ++
   125  c088 bdacc3             +   lda instidx, x
   126  c08b bc43c4                 ldy modeidx, x
   127  c08e c002                   cpy #2 // Immediate
   128  c090 9008                   bcc +
   129  c092 e625                   inc size
   130  c094 c009                   cpy #9 // Absolute
   131  c096 9002                   bcc +
   132  c098 e625                   inc size
   133  c09a 38                 +   sec
   134  c09b 8523               ++  sta inidx
   135  c09d 8622                   stx opidx
   136  c09f 8424                   sty mode
   137  c0a1 60                     rts
   138                          
   139                          disp_opcode: ; .A opcode byte
   140  c0a2 2070c0                 jsr find_opcode
   141  c0a5 8a                     txa
   142                              ; fall through to display instruction
   143                          
   144                          dispinst: ; .A instruction index 0..55
   145  c0a6 aa                     tax
   146  c0a7 e038                   cpx #ninst
   147  c0a9 b012                   bcs +
   148  c0ab bd53c2                 lda inst0, x
   149  c0ae 20d2ff                 jsr charout
   150  c0b1 bd8bc2                 lda inst1, x
   151  c0b4 20d2ff                 jsr charout
   152  c0b7 bdc3c2                 lda inst2, x
   153  c0ba 4cd2ff                 jmp charout
   154  c0bd a93f               +   lda #'?'
   155  c0bf 20d2ff                 jsr charout
   156  c0c2 20d2ff                 jsr charout
   157  c0c5 20d2ff                 jsr charout
   158  c0c8 60                     rts
   159                          
   160                          disp_current:
   161  c0c9 a5fb                   lda ptr1
   162  c0cb a6fc                   ldx ptr1+1
   163  c0cd 2002c2                 jsr disphexword
   164  c0d0 a920                   lda #$20
   165  c0d2 20d2ff                 jsr charout
   166  c0d5 a000                   ldy #0
   167  c0d7 a625                   ldx size
   168  c0d9 b1fb               -   lda (ptr1),y
   169  c0db 2008c2                 jsr disphexbyte
   170  c0de a920                   lda #$20
   171  c0e0 20d2ff                 jsr charout
   172  c0e3 c8                     iny
   173  c0e4 ca                     dex
   174  c0e5 d0f2                   bne -
   175  c0e7 c003               -   cpy #3
   176  c0e9 f00e                   beq +
   177  c0eb a920                   lda #$20
   178  c0ed 20d2ff                 jsr charout
   179  c0f0 20d2ff                 jsr charout
   180  c0f3 20d2ff                 jsr charout
   181  c0f6 c8                     iny
   182  c0f7 d0ee                   bne -
   183  c0f9 a523               +   lda inidx
   184  c0fb 20a6c0                 jsr dispinst
   185  c0fe a920                   lda #$20
   186  c100 20d2ff                 jsr charout
   187  c103 200bc1                 jsr disp_mode
   188  c106 a90d                   lda #13
   189  c108 4cd2ff                 jmp charout
   190                          
   191                          disp_mode
   192  c10b a524                   lda mode
   193  c10d c90d                   cmp #13
   194  c10f b00a                   bcs +
   195  c111 0a                     asl
   196  c112 aa                     tax
   197  c113 bdfcc2                 lda mode_jmptable+1,x
   198  c116 48                     pha
   199  c117 bdfbc2                 lda mode_jmptable,x
   200  c11a 48                     pha
   201  c11b 60                 +   rts
   202                          
   203                          dispModeAcc:
   204  c11c a941                   lda #'A'
   205  c11e 4cd2ff                 jmp charout
   206                          
   207                          dispModeNone:
   208  c121 60                     rts
   209                          
   210                          dispModeImm:
   211  c122 a923                   lda #'#'
   212  c124 20d2ff                 jsr charout
   213                          dispModeZP:
   214  c127 a924                   lda #'$'
   215  c129 20d2ff                 jsr charout
   216  c12c a001                   ldy #1
   217  c12e b1fb                   lda (ptr1),y
   218  c130 4c08c2                 jmp disphexbyte
   219                          
   220                          dispModeIndX:
   221  c133 a928                   lda #'('
   222  c135 20d2ff                 jsr charout
   223  c138 a924                   lda #'$'
   224  c13a 20d2ff                 jsr charout
   225  c13d a001                   ldy #1
   226  c13f b1fb                   lda (ptr1),y
   227  c141 2008c2                 jsr disphexbyte
   228  c144 a92c                   lda #','
   229  c146 20d2ff                 jsr charout
   230  c149 a958                   lda #'X'
   231  c14b 20d2ff                 jsr charout
   232  c14e a929                   lda #')'
   233  c150 4cd2ff                 jmp charout
   234                          
   235                          dispModeIndY:
   236  c153 a928                   lda #'('
   237  c155 20d2ff                 jsr charout
   238  c158 a924                   lda #'$'
   239  c15a 20d2ff                 jsr charout
   240  c15d a001                   ldy #1
   241  c15f b1fb                   lda (ptr1),y
   242  c161 2008c2                 jsr disphexbyte
   243  c164 a929                   lda #')'
   244  c166 20d2ff                 jsr charout
   245  c169 a92c                   lda #','
   246  c16b 20d2ff                 jsr charout
   247  c16e a959                   lda #'Y'
   248  c170 4cd2ff                 jmp charout
   249                          
   250                          dispModeRel:
   251  c173 a924                   lda #'$'
   252  c175 20d2ff                 jsr charout
   253  c178 18                     clc
   254  c179 a5fb                   lda ptr1
   255  c17b 6902                   adc #2
   256  c17d 8526                   sta ptr3
   257  c17f a5fc                   lda ptr1+1
   258  c181 6900                   adc #0
   259  c183 8527                   sta ptr3+1
   260  c185 a001                   ldy #1
   261  c187 b1fb                   lda (ptr1),y
   262  c189 1014                   bpl +
   263                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   264  c18b 49ff                   eor #$FF ; inverse
   265  c18d 18                     clc
   266  c18e 6901                   adc #1 ; complete getting absolute value from two's complement
   267  c190 85ff                   sta tmp
   268  c192 38                     sec
   269  c193 a526                   lda ptr3
   270  c195 e5ff                   sbc tmp
   271  c197 8526                   sta ptr3
   272  c199 b00d                   bcs ++
   273  c19b c627                   dec ptr3+1
   274  c19d 9009                   bcc ++
   275  c19f 18                 +   clc ; simple case of adding
   276  c1a0 6526                   adc ptr3
   277  c1a2 8526                   sta ptr3
   278  c1a4 9002                   bcc ++
   279  c1a6 e627                   inc ptr3+1
   280  c1a8 a526               ++  lda ptr3
   281  c1aa a627                   ldx ptr3+1
   282  c1ac 4c02c2                 jmp disphexword
   283                          
   284                          dispModeZPX:
   285  c1af 2027c1                 jsr dispModeZP
   286  c1b2 a92c                   lda #','
   287  c1b4 20d2ff                 jsr charout
   288  c1b7 a958                   lda #'X'
   289  c1b9 4cd2ff                 jmp charout
   290                          
   291                          dispModeZPY:
   292  c1bc 2027c1                 jsr dispModeZP
   293  c1bf a92c                   lda #','
   294  c1c1 20d2ff                 jsr charout
   295  c1c4 a959                   lda #'Y'
   296  c1c6 4cd2ff                 jmp charout
   297                          
   298                          dispModeAbs:
   299  c1c9 a924                   lda #'$'
   300  c1cb 20d2ff                 jsr charout
   301  c1ce a001                   ldy #1
   302  c1d0 b1fb                   lda (ptr1),y
   303  c1d2 48                     pha
   304  c1d3 c8                     iny
   305  c1d4 b1fb                   lda (ptr1),y
   306  c1d6 aa                     tax
   307  c1d7 68                     pla
   308  c1d8 4c02c2                 jmp disphexword
   309                          
   310                          dispModeAbsX:
   311  c1db 20c9c1                 jsr dispModeAbs
   312  c1de a92c                   lda #','
   313  c1e0 20d2ff                 jsr charout
   314  c1e3 a958                   lda #'X'
   315  c1e5 4cd2ff                 jmp charout
   316                          
   317                          dispModeAbsY:
   318  c1e8 20c9c1                 jsr dispModeAbs
   319  c1eb a92c                   lda #','
   320  c1ed 20d2ff                 jsr charout
   321  c1f0 a959                   lda #'Y'
   322  c1f2 4cd2ff                 jmp charout
   323                          
   324                          dispModeInd:
   325  c1f5 a928                   lda #'('
   326  c1f7 20d2ff                 jsr charout
   327  c1fa 20c9c1                 jsr dispModeAbs
   328  c1fd a929                   lda #')'
   329  c1ff 4cd2ff                 jmp charout
   330                          
   331                          disphexword: ; .A low, .X high, 0000..FFFF
   332  c202 48                     pha
   333  c203 8a                     txa
   334  c204 2008c2                 jsr disphexbyte
   335  c207 68                     pla
   336                              ;fall through to call again
   337                          
   338                          disphexbyte: ; .A 00..FF
   339  c208 48                     pha
   340  c209 4a                     lsr
   341  c20a 4a                     lsr
   342  c20b 4a                     lsr
   343  c20c 4a                     lsr
   344  c20d 2011c2                 jsr disphexnybble
   345  c210 68                     pla
   346                              ;fall through to call again
   347                          
   348                          disphexnybble: ; .A 0..F
   349  c211 290f                   and #$0F
   350  c213 0930                   ora #$30
   351  c215 c93a                   cmp #$3A
   352  c217 9002                   bcc +
   353  c219 6906                   adc #$06
   354  c21b 4cd2ff             +   jmp charout
   355                          
   356                          display_memory:
   357  c21e a5fb               --  lda ptr1
   358  c220 a6fc                   ldx ptr1+1
   359  c222 2002c2                 jsr disphexword
   360  c225 a920                   lda #$20
   361  c227 20d2ff                 jsr charout
   362  c22a 2065c0             -   jsr compareptrs
   363  c22d b00c                   bcs +
   364  c22f a000                   ldy #0
   365  c231 b1fb                   lda (ptr1),y
   366  c233 2008c2                 jsr disphexbyte
   367  c236 a920                   lda #$20
   368  c238 20d2ff                 jsr charout
   369  c23b e6fb               +   inc ptr1
   370  c23d d002                   bne +
   371  c23f e6fc                   inc ptr1+1
   372  c241 a5fb               +   lda ptr1
   373  c243 2907                   and #$07
   374  c245 d0e3                   bne -
   375  c247 a90d                   lda #13
   376  c249 20d2ff                 jsr charout
   377  c24c 2065c0                 jsr compareptrs
   378  c24f 90cd                   bcc --
   379  c251 60                     rts
   380                          
   381                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
   382                          ;     jsr $ffd2
   383                          ;     pha
   384                          ; -   lda $d011
   385                          ;     bpl -
   386                          ; -   lda $d011
   387                          ;     bmi -
   388                          ; -   lda $d011
   389                          ;     bpl -
   390                          ; -   lda $d011
   391                          ;     bmi -
   392                          ;     pla
   393                          ;     rts
   394                          
   395  c252 00                 end: brk
   396                          
   397                          ; instruction textual mnuemonic first, second, third letters (read down in source)
   398                          ninst = 56
   399  c253 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
   400  c28b 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
   401  c2c3 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
   402                          
   403                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
   404                          mode_jmptable:
   405  c2fb 1bc1               !word dispModeAcc-1; 0 Accumulator 1
   406  c2fd 20c1               !word dispModeNone-1 ; 1 None 1
   407  c2ff 21c1               !word dispModeImm-1 ; 2 Immediate 2
   408  c301 32c1               !word dispModeIndX-1 ; 3 IndirectX 2
   409  c303 52c1               !word dispModeIndY-1 ; 4 IndirectY 2
   410  c305 72c1               !word dispModeRel-1 ; 5 Relative 2
   411  c307 26c1               !word dispModeZP-1 ; 6 ZeroPage 2
   412  c309 aec1               !word dispModeZPX-1 ; 7 ZeroPageX 2
   413  c30b bbc1               !word dispModeZPY-1 ; 8 ZeroPageY 2
   414  c30d c8c1               !word dispModeAbs-1 ; 9 Absolute 3
   415  c30f dac1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
   416  c311 e7c1               !word dispModeAbsY-1 ; 11 AbsoluteY 3
   417  c313 f4c1               !word dispModeInd-1 ; 12 Indirect 3
   418                          
   419                          ; opcode table of byte values (opcodes), instructions, and addressing modes
   420                          nopcodes = 151
   421  c315 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
   422  c3ac 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
   423  c443 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
   424                          
   425                          finish = *
