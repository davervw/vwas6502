
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGETS:                              *        <<<
     7                          ;; >>>       ** (1)  C64 8000-9FFF screen editor                *        <<<
     8                          ;; >>>       ** (2)  C64 8000-9FFF terminal edition             *        <<<
     9                          ;; >>>       ** (3)  6502+MC6850 minimum system                 *        <<<
    10                          ;; >>>       *   56K(RAM),8K(ROM), 2 bytes IO for MC6850 UART   *        <<<
    11                          ;; >>>       ****************************************************        <<<
    12                          ;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          ;; MIT License
    15                          ;;
    16                          ;; Copyright (c) 2024 David R. Van Wagner
    17                          ;; davevw.com
    18                          ;;
    19                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    20                          ;; of this software and associated documentation files (the "Software"), to deal
    21                          ;; in the Software without restriction, including without limitation the rights
    22                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    23                          ;; copies of the Software, and to permit persons to whom the Software is
    24                          ;; furnished to do so, subject to the following conditions:
    25                          ;;
    26                          ;; The above copyright notice and this permission notice shall be included in all
    27                          ;; copies or substantial portions of the Software.
    28                          ;;
    29                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    30                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    31                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    32                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    33                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    34                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    35                          ;; SOFTWARE.
    36                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                          
    40                          ; Important! define exactly ONE target (set in build.sh)
    41                          ;C64SCREEN = 1
    42                          ;C64TERMINAL = 1
    43                          ;MINIMUM = 1
    44                          
    45                          ; options (set in build.sh)
    46                          ;NEEDECHO = 0
    47                          
    48                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                          
    50                          ;; _
    51                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    52                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    53                          ;; 1000 (display memory at $1000)
    54                          ;; 1000.2000 (display memory range $1000 to $2000)
    55                          ;; 1000. (display next screenful of memory starting at $1000)
    56                          ;; . (display next screenful of memory)
    57                          ;; 1000 r (JMP $1000)
    58                          ;; 1000: 01 02 03 (modify memory)
    59                          ;; (NEW SYNTAX)
    60                          ;; 1000 d (disassemble starting at address, for screenful)
    61                          ;; d (continue disassembling from last address)
    62                          ;; 1000 a (assemble starting at, interactive until empty line) 
    63                          ;; x (exit monitor -- C64 only)
    64                          ;; ? (commands help)
    65                          ;; ? a (list instructions available)
    66                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    67                          ;; ? mode (show addressing modes example syntax for 6502)
    68                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    69                          ;; (FUTURE SYNTAX, not implemented)
    70                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    71                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    72                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    73                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    74                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    75                          ;; .A: 00 (change register, replace A with X, Y, SP, S, PC, SR, P, N, V, B, D, I, Z, C as appropriate, colon is optional)
    76                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    77                          ;;
    78                          ;; (INTERACTIVE ASSEMBLER)
    79                          ;; 1000 _
    80                          ;;      ADC #$12
    81                          ;; 1000 69 12    ADC #$12
    82                          ;; 1002 _
    83                          ;;      JSR $1234
    84                          ;; 1002 20 34 12 JSR $1234
    85                          ;; 1005 _
    86                          ;;      RTS
    87                          ;; 1005 60       RTS
    88                          ;; 1006 _
    89                          ;;      XYZ
    90                          ;;      XYZ ?
    91                          ;; 1006 _
    92                          ;; _
    93                          ;;
    94                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    95                          ;; and can cursor up to revise, 
    96                          ;;
    97                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    98                          ;;
    99                          
   100                          ; global
   101                          inputbuf=$0200
   102                          
   103                          
   104                          ; kernal/system calls
   105                          
   106                          !ifdef MINIMUM {
   107                          charout=JUART_OUT
   108                          getkey=JUART_IN
   109                          }
   110                          
   111                          !ifdef C64SCREEN {
   112                          setlfs=$ffba
   113                          setnam=$ffbd
   114                          charin=$ffcf ; screen editor
   115                          charout=$ffd2
   116                          fsave =$ffd8
   117                          getkey=$ffe4
   118                          }
   119                          
   120                          !ifdef C64TERMINAL {
   121                          setlfs=$ffba
   122                          setnam=$ffbd
   123                          charout=$ffd2
   124                          getkey=$ffe4
   125                          fsave =$ffd8
   126                          }
   127                          
   128                          ; zeropage
   129                          !ifdef MINIMUM {
   130                          opidx=$f0
   131                          inidx=$f1
   132                          mode=$f2
   133                          size=$f3
   134                          ptr3=$f4 ; and $f5
   135                          count=$f6
   136                          len=$f7
   137                          savepos=$f8
   138                          tmp2=$f9
   139                          flag=$fa
   140                          ptr1=$fb ; and $fc
   141                          ptr2=$fd ; and $fe
   142                          tmp=$ff
   143                          } else {
   144                          opidx=$22
   145                          inidx=$23
   146                          mode=$24
   147                          size=$25
   148                          ptr3=$26 ; and $27
   149                          count=$a3
   150                          len=$a4
   151                          savepos=$a5
   152                          tmp2=$a6
   153                          flag=$a7
   154                          ptr1=$fb ; and $fc
   155                          ptr2=$fd ; and $fe
   156                          tmp=$ff
   157                          }
   158                          
   159                          !ifdef MINIMUM {
   160                          * = $e000
   161                          } else { // any C64
   162                          * = $8000
   163  8000 ad1603                 lda $316
   164  8003 ae1703                 ldx $317
   165  8006 e08b                   cpx #>brk64
   166  8008 f010                   beq start
   167  800a 8d3992                 sta savebrkvector
   168  800d 8e3a92                 stx savebrkvector+1
   169  8010 a9bc                   lda #<brk64
   170  8012 a28b                   ldx #>brk64
   171  8014 8d1603                 sta $316
   172  8017 8e1703                 stx $317
   173                          }
   174                          
   175                          start:
   176  801a d8                     cld
   177  801b 58                     cli
   178  801c a96a                   lda #<copyright
   179  801e a28f                   ldx #>copyright
   180  8020 209583                 jsr strout
   181  8023 a9c8                   lda #<firsthelp
   182  8025 a28f                   ldx #>firsthelp
   183  8027 209583                 jsr strout
   184  802a 4c038b                 jmp save_regs_and_stack
   185                          
   186                          input_loop:
   187  802d 20b083                 jsr inputline
   188  8030 20b383                 jsr parseline
   189  8033 4c2d80                 jmp input_loop
   190                          
   191                          !ifndef MINIMUM {
   192                          ; C64 only
   193                          chkextrac64:
   194  8036 204280                 jsr chkexit
   195  8039 d003                   bne +
   196  803b 4c5680                 jmp execute_exit
   197  803e 18                 +   clc ; no error
   198  803f a201                   ldx #1 ; Z false - not consumed
   199  8041 60                     rts
   200                          
   201                          chkexit:
   202  8042 b90002                 lda inputbuf, y
   203  8045 c958                   cmp #'X'
   204  8047 d008                   bne +
   205  8049 c8                     iny
   206  804a c4a4                   cpy len ; validate no extra characters
   207  804c f003                   beq +
   208  804e 4c5280                 jmp extra_error
   209  8051 60                 +   rts
   210                          
   211                          extra_error:
   212                              ; pop local return address
   213  8052 68                     pla
   214  8053 68                     pla
   215  8054 38                     sec ; error
   216  8055 60                     rts
   217                          
   218                          execute_exit:
   219  8056 ad3992                 lda savebrkvector
   220  8059 ae3a92                 ldx savebrkvector+1
   221  805c 8d1603                 sta $316
   222  805f 8e1703                 stx $317
   223                              ; pop monitor return addresses, so only original caller is left
   224  8062 68                     pla
   225  8063 68                     pla
   226  8064 68                     pla
   227  8065 68                     pla
   228  8066 68                     pla
   229  8067 68                     pla
   230  8068 60                     rts
   231                          
   232                          display_extra_help:
   233  8069 a9db                   lda #<extra_help
   234  806b a28f                   ldx #>extra_help
   235  806d 4c9583                 jmp strout
   236                          
   237                          !ifdef C64SCREEN {
   238                          display_page_disassemble:
   239  8070 a5fb                   lda ptr1
   240  8072 a6fc                   ldx ptr1+1
   241  8074 201983                 jsr disphexword
   242  8077 a919                   lda #<page_disassemble
   243  8079 a290                   ldx #>page_disassemble
   244  807b 4c9583                 jmp strout
   245                          
   246                          display_page_displaymemory:
   247  807e 20f98a                 jsr newline
   248  8081 a5fb                   lda ptr1
   249  8083 a6fc                   ldx ptr1+1
   250  8085 201983                 jsr disphexword
   251  8088 a920                   lda #<page_displaymemory
   252  808a a290                   ldx #>page_displaymemory
   253  808c 4c9583                 jmp strout
   254                          
   255                          inputlinec64:
   256  808f a000                   ldy #0
   257  8091 20cfff             -   jsr charin
   258  8094 990002                 sta inputbuf,y
   259  8097 c8                     iny
   260  8098 c90d                   cmp #13
   261  809a d0f5                   bne -
   262  809c 60                     rts
   263                          
   264                          continueassemblec64:
   265  809d a914                   lda #20
   266  809f 20d2ff                 jsr charout
   267  80a2 20d2ff                 jsr charout
   268  80a5 a5fb                   lda ptr1
   269  80a7 a6fc                   ldx ptr1+1
   270  80a9 201983                 jsr disphexword
   271  80ac a920                   lda #' '
   272  80ae 20d2ff                 jsr charout
   273  80b1 20d2ff                 jsr charout
   274  80b4 4cd2ff                 jmp charout
   275                          }
   276                          
   277                          chkfilename:
   278  80b7 20528a                 jsr skipspaces
   279  80ba 84ff                   sty tmp
   280  80bc b90002                 lda inputbuf, y
   281  80bf c922                   cmp #34 ; double quote
   282  80c1 d022                   bne ++
   283  80c3 c8                 -   iny
   284  80c4 b90002                 lda inputbuf, y
   285  80c7 c90d                   cmp #13
   286  80c9 d004                   bne +
   287  80cb a4ff                   ldy tmp
   288  80cd d016                   bne ++
   289  80cf c922               +   cmp #34 ; double quote
   290  80d1 d0f0                   bne -
   291  80d3 98                     tya ; index of ending double quotes
   292  80d4 48                     pha ; save
   293  80d5 18                     clc ; will subtract one more
   294  80d6 e5ff                   sbc tmp ; subtract index of first quote, have filename length
   295  80d8 a6ff                   ldx tmp
   296  80da e8                     inx ; low address of filename
   297  80db a002                   ldy #>inputbuf ; high address of filename
   298  80dd 20bdff                 jsr setnam
   299  80e0 68                     pla
   300  80e1 a8                     tay
   301  80e2 c8                     iny ; advance past ending double quotes
   302  80e3 a900                   lda #0 ; set Z true
   303  80e5 60                 ++  rts
   304                          
   305                          check_execute_save:
   306  80e6 20b780             +   jsr chkfilename
   307  80e9 f006                   beq +
   308  80eb 203b8a                 jsr reporterr
   309  80ee a201                   ldx #1 ; set Z false
   310  80f0 60                     rts
   311  80f1 20ff80             +   jsr chkoptionaldrive
   312  80f4 201581                 jsr chksave
   313  80f7 d005                   bne +
   314  80f9 201e81                 jsr executesave
   315  80fc a200                   ldx #0 ; set Z true
   316  80fe 60                 +   rts
   317                          
   318                          chkoptionaldrive:
   319  80ff a908                   lda #8
   320  8101 8d3b92                 sta drive
   321  8104 20528a                 jsr skipspaces
   322  8107 20a58a                 jsr chkhexbyte
   323  810a d008                   bne +
   324  810c 8d3b92                 sta drive
   325  810f 20528a                 jsr skipspaces
   326  8112 a900                   lda #0 ; set Z true
   327  8114 60                 +   rts
   328                          
   329                          chksave:
   330  8115 20528a                 jsr skipspaces
   331  8118 b90002                 lda inputbuf, y
   332  811b c953                   cmp #'S'
   333  811d 60                     rts
   334                          
   335                          executesave:
   336  811e 20f98a                 jsr newline
   337  8121 a9c0                   lda #$c0 ; KERNAL control and error messages
   338  8123 859d                   sta $9d ; set messages to be displayed
   339  8125 a901                   lda #1
   340  8127 ae3b92                 ldx drive
   341  812a a00f                   ldy #15
   342  812c 20baff                 jsr setlfs
   343  812f a9fb                   lda #ptr1
   344  8131 a6fd                   ldx ptr2
   345  8133 a4fe                   ldy ptr2+1
   346  8135 20d8ff                 jsr fsave
   347  8138 4cf98a                 jmp newline
   348                          }
   349                          
   350                          ; test: ; all the addressing modes here for testing disassembly
   351                          ;     nop
   352                          ;     lda $1234
   353                          ;     lda $1234,x
   354                          ;     lda $1234,y
   355                          ;     asl
   356                          ;     lda #$12
   357                          ;     lda ($12,x)
   358                          ;     lda ($12),y
   359                          ;     jmp ($1234)
   360                          ; -   bne -
   361                          ;     lda $12
   362                          ;     lda $12,x
   363                          ;     ldx $12,y
   364                          ;     !byte $FF ; unknown
   365                          
   366                          disassemble:
   367  813b a917                   lda #23
   368  813d 85a3                   sta count
   369  813f a000               -   ldy #0
   370  8141 b1fb                   lda (ptr1),y
   371  8143 206a81                 jsr find_opcode
   372  8146 20cd81                 jsr disp_current
   373  8149 a525                   lda size
   374  814b 1002                   bpl +
   375  814d a901                   lda #1
   376  814f 18                 +   clc
   377  8150 65fb                   adc ptr1
   378  8152 85fb                   sta ptr1
   379  8154 9002                   bcc +
   380  8156 e6fc                   inc ptr1+1
   381  8158 c6a3               +   dec count
   382  815a d0e3                   bne -
   383                          !ifdef C64SCREEN {
   384  815c 4c7080                 jmp display_page_disassemble
   385                          } else {    
   386                              rts
   387                          }
   388                          
   389                          compareptrs:
   390  815f a5fc                   lda ptr1+1
   391  8161 c5fe                   cmp ptr2+1
   392  8163 d004                   bne +
   393  8165 a5fb                   lda ptr1
   394  8167 c5fd                   cmp ptr2
   395  8169 60                 +   rts
   396                          
   397                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   398                          ; and properties updated in ZP globals size,inidx,opidx,mode
   399  816a a097                   ldy #nopcodes
   400  816c a296                   ldx #nopcodes-1
   401  816e dda58d             -   cmp opcodes,x
   402  8171 f00f                   beq +
   403  8173 ca                     dex
   404  8174 88                     dey
   405  8175 d0f7                   bne -
   406  8177 18                     clc
   407  8178 a901                   lda #1
   408  817a 8525                   sta size
   409  817c a9ff                   lda #$FF
   410  817e aa                     tax
   411  817f a8                     tay
   412  8180 900a                   bcc ++
   413  8182 bd3c8e             +   lda instidx, x
   414  8185 bcd38e                 ldy modeidx, x
   415  8188 209381                 jsr getsize
   416  818b 38                     sec
   417  818c 8523               ++  sta inidx
   418  818e 8622                   stx opidx
   419  8190 8424                   sty mode
   420  8192 60                     rts
   421                          
   422                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   423                              ; result returned in size
   424  8193 48                     pha
   425  8194 a901                   lda #1
   426  8196 8525                   sta size
   427  8198 68                     pla
   428  8199 c002                   cpy #2 // Immediate
   429  819b 9008                   bcc +
   430  819d e625                   inc size
   431  819f c009                   cpy #9 // Absolute
   432  81a1 9002                   bcc +
   433  81a3 e625                   inc size
   434  81a5 60                 +   rts
   435                          
   436                          disp_opcode: ; .A opcode byte
   437  81a6 206a81                 jsr find_opcode
   438  81a9 8a                     txa
   439                              ; fall through to display instruction
   440                          
   441                          dispinst: ; .A instruction index 0..55, note modifies A and X
   442  81aa aa                     tax
   443  81ab e038                   cpx #ninst
   444  81ad b012                   bcs +
   445  81af bde48b                 lda inst0, x
   446  81b2 20d2ff                 jsr charout
   447  81b5 bd1c8c                 lda inst1, x
   448  81b8 20d2ff                 jsr charout
   449  81bb bd548c                 lda inst2, x
   450  81be 4cd2ff                 jmp charout
   451  81c1 a93f               +   lda #'?'
   452  81c3 20d2ff                 jsr charout
   453  81c6 20d2ff                 jsr charout
   454  81c9 20d2ff                 jsr charout
   455  81cc 60                     rts
   456                          
   457                          disp_current:
   458  81cd a5fb                   lda ptr1
   459  81cf a6fc                   ldx ptr1+1
   460  81d1 201983                 jsr disphexword
   461  81d4 a920                   lda #$20
   462  81d6 20d2ff                 jsr charout
   463  81d9 a000                   ldy #0
   464  81db a625                   ldx size
   465  81dd b1fb               -   lda (ptr1),y
   466  81df 201f83                 jsr disphexbyte
   467  81e2 a920                   lda #$20
   468  81e4 20d2ff                 jsr charout
   469  81e7 c8                     iny
   470  81e8 ca                     dex
   471  81e9 d0f2                   bne -
   472  81eb c003               -   cpy #3
   473  81ed f00e                   beq +
   474  81ef a920                   lda #$20
   475  81f1 20d2ff                 jsr charout
   476  81f4 20d2ff                 jsr charout
   477  81f7 20d2ff                 jsr charout
   478  81fa c8                     iny
   479  81fb d0ee                   bne -
   480  81fd a523               +   lda inidx
   481  81ff 20aa81                 jsr dispinst
   482  8202 a920                   lda #$20
   483  8204 20d2ff                 jsr charout
   484  8207 200f82                 jsr disp_mode
   485  820a a90d                   lda #13
   486  820c 4cd2ff                 jmp charout
   487                          
   488                          disp_mode
   489  820f a524                   lda mode
   490  8211 c90d                   cmp #13
   491  8213 b00a                   bcs +
   492  8215 0a                     asl
   493  8216 aa                     tax
   494  8217 bd8d8c                 lda mode_jmptable+1,x
   495  821a 48                     pha
   496  821b bd8c8c                 lda mode_jmptable,x
   497  821e 48                     pha
   498  821f 60                 +   rts
   499                          
   500                          dispModeAcc:
   501  8220 a941                   lda #'A'
   502  8222 4cd2ff                 jmp charout
   503                          
   504                          dispModeNone:
   505  8225 60                     rts
   506                          
   507                          dispModeImm:
   508  8226 a923                   lda #'#'
   509  8228 20d2ff                 jsr charout
   510                          dispModeZP:
   511  822b a924                   lda #'$'
   512  822d 20d2ff                 jsr charout
   513  8230 a001                   ldy #1
   514  8232 b1fb                   lda (ptr1),y
   515  8234 4c1f83                 jmp disphexbyte
   516                          
   517                          dispModeIndX:
   518  8237 a928                   lda #'('
   519  8239 20d2ff                 jsr charout
   520  823c a924                   lda #'$'
   521  823e 20d2ff                 jsr charout
   522  8241 a001                   ldy #1
   523  8243 b1fb                   lda (ptr1),y
   524  8245 201f83                 jsr disphexbyte
   525  8248 a92c                   lda #','
   526  824a 20d2ff                 jsr charout
   527  824d a958                   lda #'X'
   528  824f 20d2ff                 jsr charout
   529  8252 a929                   lda #')'
   530  8254 4cd2ff                 jmp charout
   531                          
   532                          dispModeIndY:
   533  8257 a928                   lda #'('
   534  8259 20d2ff                 jsr charout
   535  825c a924                   lda #'$'
   536  825e 20d2ff                 jsr charout
   537  8261 a001                   ldy #1
   538  8263 b1fb                   lda (ptr1),y
   539  8265 201f83                 jsr disphexbyte
   540  8268 a929                   lda #')'
   541  826a 20d2ff                 jsr charout
   542  826d a92c                   lda #','
   543  826f 20d2ff                 jsr charout
   544  8272 a959                   lda #'Y'
   545  8274 4cd2ff                 jmp charout
   546                          
   547                          dispModeRel:
   548  8277 a924                   lda #'$'
   549  8279 20d2ff                 jsr charout
   550  827c 18                     clc
   551  827d a5fb                   lda ptr1
   552  827f 6902                   adc #2
   553  8281 8526                   sta ptr3
   554  8283 a5fc                   lda ptr1+1
   555  8285 6900                   adc #0
   556  8287 8527                   sta ptr3+1
   557  8289 a001                   ldy #1
   558  828b b1fb                   lda (ptr1),y
   559  828d 1014                   bpl +
   560                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   561  828f 49ff                   eor #$FF ; inverse
   562  8291 18                     clc
   563  8292 6901                   adc #1 ; complete getting absolute value from two's complement
   564  8294 85ff                   sta tmp
   565  8296 38                     sec
   566  8297 a526                   lda ptr3
   567  8299 e5ff                   sbc tmp
   568  829b 8526                   sta ptr3
   569  829d b00d                   bcs ++
   570  829f c627                   dec ptr3+1
   571  82a1 9009                   bcc ++
   572  82a3 18                 +   clc ; simple case of adding
   573  82a4 6526                   adc ptr3
   574  82a6 8526                   sta ptr3
   575  82a8 9002                   bcc ++
   576  82aa e627                   inc ptr3+1
   577  82ac a526               ++  lda ptr3
   578  82ae a627                   ldx ptr3+1
   579  82b0 4c1983                 jmp disphexword
   580                          
   581                          dispModeZPX:
   582  82b3 202b82                 jsr dispModeZP
   583  82b6 a92c                   lda #','
   584  82b8 20d2ff                 jsr charout
   585  82bb a958                   lda #'X'
   586  82bd 4cd2ff                 jmp charout
   587                          
   588                          dispModeZPY:
   589  82c0 202b82                 jsr dispModeZP
   590  82c3 a92c                   lda #','
   591  82c5 20d2ff                 jsr charout
   592  82c8 a959                   lda #'Y'
   593  82ca 4cd2ff                 jmp charout
   594                          
   595                          dispModeAbs:
   596  82cd a924                   lda #'$'
   597  82cf 20d2ff                 jsr charout
   598  82d2 a001                   ldy #1
   599  82d4 b1fb                   lda (ptr1),y
   600  82d6 48                     pha
   601  82d7 c8                     iny
   602  82d8 b1fb                   lda (ptr1),y
   603  82da aa                     tax
   604  82db 68                     pla
   605  82dc 4c1983                 jmp disphexword
   606                          
   607                          dispModeAbsX:
   608  82df 20cd82                 jsr dispModeAbs
   609  82e2 a92c                   lda #','
   610  82e4 20d2ff                 jsr charout
   611  82e7 a958                   lda #'X'
   612  82e9 4cd2ff                 jmp charout
   613                          
   614                          dispModeAbsY:
   615  82ec 20cd82                 jsr dispModeAbs
   616  82ef a92c                   lda #','
   617  82f1 20d2ff                 jsr charout
   618  82f4 a959                   lda #'Y'
   619  82f6 4cd2ff                 jmp charout
   620                          
   621                          dispModeInd:
   622  82f9 a928                   lda #'('
   623  82fb 20d2ff                 jsr charout
   624  82fe 20cd82                 jsr dispModeAbs
   625  8301 a929                   lda #')'
   626  8303 4cd2ff                 jmp charout
   627                          
   628                          dispbinbyte: ; .A 00..FF
   629  8306 a208                   ldx #8
   630  8308 85ff                   sta tmp
   631  830a a930               -   lda #'0'
   632  830c 26ff                   rol tmp
   633  830e 9002                   bcc +
   634  8310 a931                   lda #'1'
   635  8312 20d2ff             +   jsr charout
   636  8315 ca                     dex
   637  8316 d0f2                   bne -
   638  8318 60                     rts
   639                          
   640                          disphexword: ; .A low, .X high, 0000..FFFF
   641  8319 48                     pha
   642  831a 8a                     txa
   643  831b 201f83                 jsr disphexbyte
   644  831e 68                     pla
   645                              ;fall through to call again
   646                          
   647                          disphexbyte: ; .A 00..FF
   648  831f 48                     pha
   649  8320 4a                     lsr
   650  8321 4a                     lsr
   651  8322 4a                     lsr
   652  8323 4a                     lsr
   653  8324 202883                 jsr disphexnybble
   654  8327 68                     pla
   655                              ;fall through to call again
   656                          
   657                          disphexnybble: ; .A 0..F
   658  8328 290f                   and #$0F
   659  832a 0930                   ora #$30
   660  832c c93a                   cmp #$3A
   661  832e 9002                   bcc +
   662  8330 6906                   adc #$06
   663  8332 4cd2ff             +   jmp charout
   664                          
   665                          inputhexword: ; C set if fails
   666  8335 a900                   lda #0
   667  8337 85fb                   sta ptr1
   668  8339 85fc                   sta ptr1+1
   669                          
   670  833b a904                   lda #4 ; word is at most 4 nybbles
   671  833d 85a3                   sta count
   672  833f 207783             --  jsr inputhexnybble
   673  8342 b012                   bcs +
   674                          
   675                              ; shift nibble up
   676  8344 0a                     asl
   677  8345 0a                     asl
   678  8346 0a                     asl
   679  8347 0a                     asl
   680                          
   681  8348 a204                   ldx #4 ; 4 bits rotated into word
   682  834a 2a                 -   rol
   683  834b 26fb                   rol ptr1
   684  834d 26fc                   rol ptr1+1
   685  834f ca                     dex
   686  8350 d0f8                   bne - ; repeat bits
   687                          
   688  8352 c6a3                   dec count
   689  8354 d0e9                   bne -- ; repeat nybbles
   690                          
   691  8356 a5a3               +   lda count
   692  8358 c904                   cmp #4 ; set C if 4, otherwise clear
   693  835a 60                     rts
   694                          
   695                          inputhexbyte:
   696  835b 207783                 jsr inputhexnybble
   697  835e b016                   bcs ++
   698  8360 85ff                   sta tmp
   699  8362 207783                 jsr inputhexnybble
   700  8365 9005                   bcc +
   701  8367 18                     clc ; allow single digit as byte
   702  8368 a5ff                   lda tmp
   703  836a 900a                   bcc ++
   704  836c 06ff               +   asl tmp
   705  836e 06ff                   asl tmp
   706  8370 06ff                   asl tmp
   707  8372 06ff                   asl tmp
   708  8374 05ff                   ora tmp ; necessary to assemble the two nybbles
   709  8376 60                 ++  rts
   710                          
   711                          inputhexnybble:
   712  8377 b90002                 lda $0200,y
   713  837a 297f                   and #$7F
   714  837c 38                     sec
   715  837d e930                   sbc #$30
   716  837f 9012                   bcc ++
   717  8381 c90a                   cmp #10
   718  8383 900c                   bcc +
   719  8385 e907                   sbc #7
   720  8387 900a                   bcc ++
   721  8389 c90a                   cmp #10
   722  838b 9006                   bcc ++
   723  838d c910                   cmp #16
   724  838f b002                   bcs ++
   725  8391 c8                 +   iny
   726  8392 60                     rts
   727  8393 38                 ++  sec
   728  8394 60                     rts
   729                          
   730                          strout:
   731  8395 8526                   sta ptr3
   732  8397 8627                   stx ptr3+1
   733                          strout2:    
   734  8399 a000                   ldy #0
   735  839b b126               -   lda (ptr3),y
   736  839d f006                   beq +
   737  839f 20d2ff                 jsr charout
   738  83a2 c8                     iny
   739  83a3 d0f6                   bne -
   740  83a5 98                 +   tya
   741  83a6 38                     sec
   742  83a7 6526                   adc ptr3
   743  83a9 8526                   sta ptr3
   744  83ab 9002                   bcc +
   745  83ad e627                   inc ptr3+1
   746  83af 60                 +   rts
   747                          
   748                          inputline:
   749                          !ifdef C64SCREEN {
   750  83b0 4c8f80                 jmp inputlinec64
   751                          } else {
   752                              ldy #0
   753                          --  sty count
   754                          -   jsr getkey
   755                              beq -
   756                              ldy count
   757                          !ifdef MINIMUM {
   758                              cmp #8 ; backspace
   759                          } else {
   760                              cmp #20
   761                          }
   762                              bne +
   763                              cpy #0
   764                              beq -
   765                              dey
   766                          !if NEEDECHO = 1 {    
   767                              jsr charout
   768                          }
   769                              jmp --
   770                          +   cmp #13
   771                              beq +
   772                              cmp #' '
   773                              bcc -
   774                              cmp #128
   775                              bcs -
   776                          +
   777                          !if NEEDECHO = 1 {    
   778                              jsr charout
   779                          }
   780                              sta inputbuf,y
   781                              iny
   782                              cmp #13
   783                              bne --
   784                              rts
   785                          }
   786                          
   787                          parseline:
   788  83b3 c001                   cpy #1
   789  83b5 d003                   bne +
   790                          -
   791                          !ifdef C64SCREEN {   
   792  83b7 4cf98a                 jmp newline
   793                          } else {
   794                              rts
   795                          }
   796  83ba 88                 +   dey
   797  83bb 84a4                   sty len
   798                              ; skip whitespace
   799                              ; check for address, put in ptr1
   800                              ; or check for dot, then require address put in ptr2
   801                              ; or check for ?, and optional parameter, execute help
   802                              ; check for whitespace
   803                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   804                              ; check for string, store at start of inputbuf
   805                              ; check for drive number
   806                              ; check for whitespace
   807                              ; check command ":rda?mls", execute command
   808  83bd a000                   ldy #0
   809  83bf 20528a                 jsr skipspaces
   810  83c2 c4a4                   cpy len
   811  83c4 f0f1                   beq -
   812  83c6 20088a                 jsr chkcontinuedis
   813  83c9 d003                   bne +
   814  83cb 202c8a                 jsr executedisassemble ; note won't return
   815  83ce 201a8a             +   jsr chkcontinueasm
   816  83d1 d003                   bne +
   817  83d3 204086                 jsr continueassemble ; note won't return
   818  83d6 20618a             +   jsr chkdot
   819  83d9 d003                   bne +
   820  83db 4cc284                 jmp executedot
   821  83de 206c8a             +   jsr chkhelp
   822  83e1 d003                   bne +
   823  83e3 4ccc84                 jmp executehelp
   824                          +
   825                          !ifndef MINIMUM {
   826  83e6 203680                 jsr chkextrac64 ; check syntax only available on C64
   827  83e9 b014                   bcs + ; error if C set
   828  83eb f005                   beq ++ ; consumed if Z set, skip next test(s)
   829                          }    
   830  83ed 209c8a                 jsr chkhexaddr1
   831  83f0 d003                   bne error
   832  83f2 4cf883             ++  jmp executeaddr1
   833                          error:
   834  83f5 4c3b8a                 jmp reporterr
   835                          
   836                          executeaddr1:
   837  83f8 c4a4                   cpy len
   838  83fa d003                   bne +
   839  83fc 4c5184                 jmp executedisplay1
   840  83ff 20618a             +   jsr chkdot
   841  8402 d00f                   bne +
   842  8404 c4a4                   cpy len
   843  8406 f021                   beq executepagedisplay
   844  8408 20bc8a                 jsr chkhexaddr2
   845  840b d0e8                   bne error
   846  840d 18                     clc
   847  840e 66a7                   ror flag
   848  8410 4c4184                 jmp executeaddr12
   849  8413 20528a             +   jsr skipspaces
   850  8416 20778a                 jsr chkcolon
   851  8419 d003                   bne +
   852  841b 4ca084                 jmp executemodify
   853  841e 20dd8a             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   854                          !ifdef MINIMUM {
   855                              jmp reportnotimplemented
   856                          } else {
   857  8421 20b780                 jsr chkfilename
   858  8424 d0cf                   bne error
   859  8426 4cc984                 jmp executeloadfilename
   860                          }
   861                          
   862                          executepagedisplay:
   863  8429 a5fb                   lda ptr1
   864  842b 18                     clc
   865                          !ifdef MINIMUM {
   866                              adc #$5f
   867                          } else {
   868  842c 69b7                   adc #$b7
   869                          }
   870  842e 85fd                   sta ptr2
   871  8430 a5fc                   lda ptr1+1
   872                          !ifdef MINIMUM {
   873                              adc #$01
   874                          } else {
   875  8432 6900                   adc #$00
   876                          }
   877  8434 85fe                   sta ptr2+1
   878  8436 9006                   bcc +
   879  8438 a9ff                   lda #$ff
   880  843a 85fd                   sta ptr2
   881  843c 85fe                   sta ptr2+1
   882  843e 38                 +   sec
   883  843f 66a7                   ror flag
   884                              ; fall through to executeaddr12
   885                          
   886                          executeaddr12:
   887  8441 c4a4                   cpy len
   888  8443 d003                   bne +
   889  8445 4c5984                 jmp executedisplay12
   890                          !ifndef MINIMUM { // any C64
   891  8448 20e680             +   jsr check_execute_save
   892  844b f003                   beq ++
   893                          }
   894  844d 4c348a             +   jmp reportnotimplemented
   895  8450 60                 ++  rts
   896                          
   897                          executedisplay1:
   898  8451 a5fb                   lda ptr1
   899  8453 85fd                   sta ptr2
   900  8455 a5fc                   lda ptr1+1
   901  8457 85fe                   sta ptr2+1
   902                              ; fall through executedisplay12
   903                          
   904                          executedisplay12:
   905  8459 a9ff                   lda #$ff
   906  845b 85a3                   sta count
   907  845d e6a3               -   inc count
   908  845f a5a3                   lda count
   909                          !ifdef MINIMUM {    
   910                              and #$0f
   911                          } else {
   912  8461 2907                   and #$07
   913                          }
   914  8463 d016                   bne +
   915  8465 a90d                   lda #13
   916  8467 20d2ff                 jsr charout
   917  846a a5fb                   lda ptr1
   918  846c a6fc                   ldx ptr1+1
   919  846e 201983                 jsr disphexword
   920  8471 a93a                   lda #':'
   921  8473 20d2ff                 jsr charout
   922  8476 a920                   lda #' '
   923  8478 20d2ff                 jsr charout
   924  847b a000               +   ldy #0
   925  847d b1fb                   lda (ptr1),y
   926  847f 201f83                 jsr disphexbyte
   927  8482 a920                   lda #' '
   928  8484 20d2ff                 jsr charout
   929  8487 e6fb                   inc ptr1
   930  8489 d004                   bne +
   931  848b e6fc                   inc ptr1+1
   932  848d f00e                   beq ++
   933  848f 205f81             +   jsr compareptrs
   934  8492 90c9                   bcc -
   935  8494 f0c7                   beq -
   936  8496 24a7                   bit flag
   937  8498 1003                   bpl ++
   938                          !ifdef C64SCREEN {
   939  849a 4c7e80                 jmp display_page_displaymemory
   940                          }
   941  849d 4cf98a             ++  jmp newline
   942                          
   943                          executemodify:
   944  84a0 20528a                 jsr skipspaces
   945  84a3 c4a4                   cpy len
   946  84a5 f018                   beq ++
   947  84a7 20828a                 jsr chkhexbyteofsequence
   948  84aa f003                   beq +
   949  84ac 4cf583                 jmp error
   950  84af 84ff               +   sty tmp
   951  84b1 a000                   ldy #0
   952  84b3 91fb                   sta (ptr1),y
   953  84b5 e6fb                   inc ptr1
   954  84b7 d002                   bne +
   955  84b9 e6fc                   inc ptr1+1
   956  84bb a4ff               +   ldy tmp
   957  84bd d0e1                   bne executemodify
   958  84bf 4cf98a             ++  jmp newline
   959                          
   960                          executedot:
   961  84c2 c4a4                   cpy len
   962  84c4 d003                   bne +
   963  84c6 4c2984                 jmp executepagedisplay
   964                          
   965                          executeloadfilename:
   966                          executeaddr1cmd:
   967  84c9 4c348a             +   jmp reportnotimplemented
   968                          
   969                          executehelp:
   970                          !ifdef C64SCREEN {
   971  84cc 20f98a                 jsr newline
   972                          }
   973  84cf c4a4                   cpy len
   974  84d1 d003                   bne +
   975  84d3 4cfc84                 jmp displayhelp
   976  84d6 20528a             +   jsr skipspaces
   977  84d9 201085                 jsr chkhelpinstructions
   978  84dc d003                   bne +
   979  84de 4c4c85                 jmp displayinstructions
   980  84e1 202a85             +   jsr chkhelpmodes
   981  84e4 d003                   bne +
   982  84e6 4c6385                 jmp displaymodes
   983  84e9 207a89             +   jsr chkinstruction
   984  84ec d003                   bne +
   985  84ee 4c1386                 jmp executehelpinstruction
   986  84f1 201d85             +   jsr chkhelpregisters
   987  84f4 d003                   bne +
   988  84f6 4c4f8b                 jmp execute_display_registers
   989  84f9 4c348a             +   jmp reportnotimplemented
   990                          
   991                          displayhelp:
   992  84fc a938                   lda #<generalhelp
   993  84fe a290                   ldx #>generalhelp
   994  8500 209583                 jsr strout
   995  8503 a92d                   lda #<generalhelp2
   996  8505 a291                   ldx #>generalhelp2
   997  8507 209583                 jsr strout
   998                          !ifndef MINIMUM { // any C64
   999  850a 206980                 jsr display_extra_help
  1000                          }
  1001  850d 4cf98a                 jmp newline
  1002                          
  1003                          chkhelpinstructions:
  1004  8510 b90002                 lda inputbuf, y
  1005  8513 c941                   cmp #'A'
  1006  8515 d005                   bne +
  1007  8517 b90102                 lda inputbuf+1, y
  1008  851a c90d                   cmp #13
  1009                              ; no need to increment y if found, done parsing line
  1010  851c 60                 +   rts
  1011                          
  1012                          chkhelpregisters:
  1013  851d b90002                 lda inputbuf, y
  1014  8520 c92e                   cmp #'.'
  1015  8522 d005                   bne +
  1016  8524 b90102                 lda inputbuf+1, y
  1017  8527 c90d                   cmp #13
  1018  8529 60                 +   rts
  1019                          
  1020                          chkhelpmodes:
  1021  852a a917                   lda #<modes_keyword
  1022  852c a292                   ldx #>modes_keyword
  1023                              ; fall through to chkkeyword
  1024                          
  1025                          chkkeyword:
  1026  852e 84a3                   sty count
  1027  8530 8526                   sta ptr3
  1028  8532 8627                   stx ptr3+1
  1029  8534 a6a3                   ldx count
  1030  8536 a000                   ldy #0
  1031  8538 bd0002             -   lda inputbuf, x
  1032  853b d126                   cmp (ptr3),y
  1033  853d d008                   bne +
  1034  853f e8                     inx
  1035  8540 c8                     iny
  1036  8541 e4a4                   cpx len
  1037  8543 d0f3                   bne -
  1038  8545 b126                   lda (ptr3),y ; matched if end of string, will set Z
  1039  8547 08                 +   php ; save Z
  1040  8548 a4a3                   ldy count
  1041  854a 28                     plp ; restore Z
  1042  854b 60                     rts
  1043                          
  1044                          displayinstructions:
  1045  854c a038                   ldy #ninst
  1046  854e a200                   ldx #0
  1047  8550 8a                 -   txa
  1048  8551 48                     pha
  1049  8552 20aa81                 jsr dispinst
  1050  8555 a920                   lda #' '
  1051  8557 20d2ff                 jsr charout
  1052  855a 68                     pla
  1053  855b aa                     tax
  1054  855c e8                     inx
  1055  855d 88                     dey
  1056  855e d0f0                   bne -
  1057  8560 4cf98a                 jmp newline
  1058                          
  1059                          displaymodes:
  1060  8563 38                     sec
  1061  8564 a900                   lda #0
  1062  8566 48                 -   pha
  1063  8567 aa                     tax
  1064  8568 bda68c                 lda mode_sorted, x
  1065  856b 207885                 jsr dispmode
  1066  856e 68                     pla
  1067  856f 18                     clc
  1068  8570 6901                   adc #1
  1069  8572 c90d                   cmp #nmodes
  1070  8574 90f0                   bcc -
  1071  8576 18                     clc
  1072  8577 60                     rts
  1073                          
  1074                          dispmode:
  1075  8578 c90d                   cmp #nmodes
  1076  857a b008                   bcs +
  1077  857c 8524                   sta mode
  1078  857e 20c085                 jsr disp_modename_and_example
  1079  8581 4c8585                 jmp dispmodeinstructions
  1080  8584 60                 +   rts
  1081                          
  1082                          dispmodeinstructions:
  1083                          !ifdef C64SCREEN {
  1084                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1085  8585 a524                   lda mode
  1086  8587 c903                   cmp #3
  1087  8589 d005                   bne +
  1088  858b a920                   lda #' '
  1089  858d 4cd2ff                 jmp charout
  1090                          }
  1091                              ; display instructions with this mode
  1092  8590 a000               +   ldy #0
  1093  8592 8423               --  sty inidx
  1094  8594 a200                   ldx #0
  1095  8596 86ff               -   stx tmp
  1096  8598 a523                   lda inidx
  1097  859a dd3c8e                 cmp instidx, x
  1098  859d d014                   bne ++
  1099  859f bdd38e                 lda modeidx, x
  1100  85a2 c524                   cmp mode
  1101  85a4 d00d                   bne ++
  1102  85a6 a920                   lda #' '
  1103  85a8 20d2ff                 jsr charout
  1104  85ab bd3c8e                 lda instidx, x
  1105  85ae 20aa81                 jsr dispinst
  1106  85b1 a6ff                   ldx tmp
  1107  85b3 e8                 ++  inx
  1108  85b4 e097                   cpx #nopcodes
  1109  85b6 90de                   bcc -
  1110  85b8 c8                     iny
  1111  85b9 c038                   cpy #ninst
  1112  85bb d0d5                   bne --
  1113  85bd 4cf98a                 jmp newline
  1114                          
  1115                          disp_modename_and_example:
  1116  85c0 0a                     asl
  1117  85c1 aa                     tax
  1118  85c2 bd8b8d                 lda modes, x
  1119  85c5 48                     pha
  1120  85c6 bd8c8d                 lda modes+1, x
  1121  85c9 aa                     tax
  1122                          !ifdef C64SCREEN {
  1123  85ca a912                   lda #18
  1124  85cc 20d2ff                 jsr charout
  1125                          }    
  1126  85cf 68                     pla
  1127  85d0 209583                 jsr strout
  1128  85d3 a920                   lda #' '
  1129  85d5 20d2ff                 jsr charout
  1130  85d8 209983                 jsr strout2
  1131                          !ifdef C64SCREEN {    
  1132  85db a992                   lda #146
  1133  85dd 20d2ff                 jsr charout
  1134                          }   
  1135  85e0 60                     rts
  1136                          
  1137                          disp_modename_instruction_example:
  1138  85e1 0a                     asl
  1139  85e2 aa                     tax
  1140  85e3 bd8b8d                 lda modes, x
  1141  85e6 48                     pha
  1142  85e7 bd8c8d                 lda modes+1, x
  1143  85ea aa                     tax
  1144  85eb 68                     pla
  1145  85ec 209583                 jsr strout ; mode name
  1146  85ef a526                   lda ptr3
  1147  85f1 48                     pha
  1148  85f2 a527                   lda ptr3+1
  1149  85f4 48                     pha
  1150  85f5 a93a                   lda #':'
  1151  85f7 20d2ff                 jsr charout
  1152  85fa a920                   lda #' '
  1153  85fc 20d2ff                 jsr charout
  1154  85ff a523                   lda inidx
  1155  8601 20aa81                 jsr dispinst ; instruction
  1156  8604 a920                   lda #' '
  1157  8606 20d2ff                 jsr charout
  1158  8609 68                     pla
  1159  860a 8527                   sta ptr3+1
  1160  860c 68                     pla
  1161  860d 8526                   sta ptr3
  1162  860f 209983                 jsr strout2 ; example
  1163  8612 60                     rts
  1164                          
  1165                          
  1166                          executehelpinstruction:
  1167  8613 a000                   ldy #0
  1168  8615 8422               -   sty opidx
  1169  8617 b93c8e                 lda instidx, y
  1170  861a c523                   cmp inidx
  1171  861c d01a                   bne +
  1172  861e b9d38e                 lda modeidx, y
  1173  8621 8524                   sta mode
  1174  8623 a622                   ldx opidx
  1175  8625 bda58d                 lda opcodes, x
  1176  8628 201f83                 jsr disphexbyte
  1177  862b a920                   lda #' '
  1178  862d 20d2ff                 jsr charout
  1179  8630 a524                   lda mode
  1180  8632 20e185                 jsr disp_modename_instruction_example
  1181  8635 20f98a                 jsr newline
  1182  8638 a422               +   ldy opidx
  1183  863a c8                     iny
  1184  863b c097                   cpy #nopcodes
  1185  863d 90d6                   bcc -
  1186  863f 60                     rts
  1187                          
  1188                          continueassemble:
  1189                          !ifdef C64SCREEN {   
  1190  8640 209d80                 jsr continueassemblec64
  1191                          }
  1192                              ; continue...
  1193                          
  1194                          executeassemble:
  1195  8643 68                     pla ; remove low byte return address
  1196  8644 68                     pla ; return high byte return address
  1197                          !ifdef C64SCREEN {    
  1198  8645 a914                   lda #20
  1199  8647 20d2ff                 jsr charout
  1200  864a 20d2ff                 jsr charout
  1201                          } else {
  1202                              lda ptr1
  1203                              ldx ptr1+1
  1204                              jsr disphexword
  1205                              lda #' '
  1206                              jsr charout
  1207                          }
  1208                              ; save current pointer
  1209  864d a5fb               --  lda ptr1
  1210  864f a6fc                   ldx ptr1+1
  1211  8651 8526                   sta ptr3
  1212  8653 8627                   stx ptr3+1
  1213  8655 20b083                 jsr inputline
  1214  8658 c001                   cpy #1
  1215  865a f048                   beq ++
  1216  865c 88                     dey
  1217  865d 84a4                   sty len
  1218  865f a000                   ldy #0
  1219  8661 20528a                 jsr skipspaces
  1220  8664 c4a4                   cpy len
  1221  8666 f03c                   beq ++
  1222                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1223                              ;jsr skipspaces
  1224  8668 207a89                 jsr chkinstruction
  1225  866b f00b                   beq +
  1226  866d a526               -   lda ptr3
  1227  866f 85fb                   sta ptr1
  1228  8671 a527                   lda ptr3+1
  1229  8673 85fc                   sta ptr1+1
  1230  8675 4cf583                 jmp error
  1231  8678 20ce86             +   jsr chkaddressing
  1232  867b d0f0                   bne -
  1233  867d 20ab89                 jsr find_inst_and_mode
  1234  8680 d0eb                   bne -
  1235  8682 20a786                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1236  8685 18                     clc
  1237  8686 a525                   lda size
  1238  8688 6526                   adc ptr3
  1239  868a 85fb                   sta ptr1
  1240  868c a527                   lda ptr3+1
  1241  868e 6900                   adc #0
  1242  8690 85fc                   sta ptr1+1
  1243                          !ifdef C64SCREEN {    
  1244  8692 20f98a                 jsr newline
  1245                          }
  1246  8695 a5fb                   lda ptr1
  1247  8697 a6fc                   ldx ptr1+1
  1248  8699 201983                 jsr disphexword
  1249  869c a920                   lda #' '
  1250  869e 20d2ff                 jsr charout
  1251  86a1 4c4d86                 jmp --
  1252                          ++  
  1253                          !ifdef C64SCREEN {
  1254  86a4 4cf98a                 jmp newline
  1255                          } else {
  1256                              rts
  1257                          }
  1258                          
  1259                          store_assembly:
  1260  86a7 a622                   ldx opidx
  1261  86a9 bda58d                 lda opcodes, x
  1262  86ac a000                   ldy #0
  1263  86ae 9126                   sta (ptr3), y
  1264  86b0 c8                     iny
  1265  86b1 a625                   ldx size
  1266  86b3 e001                   cpx #1
  1267  86b5 f016                   beq ++
  1268  86b7 e002               +   cpx #2
  1269  86b9 d005                   bne +
  1270  86bb a5a6                   lda tmp2
  1271  86bd 9126                   sta (ptr3), y
  1272  86bf 60                     rts
  1273  86c0 e003               +   cpx #3
  1274  86c2 d009                   bne ++
  1275  86c4 a5fb                   lda ptr1
  1276  86c6 9126                   sta (ptr3), y
  1277  86c8 c8                     iny
  1278  86c9 a5fc                   lda ptr1+1
  1279  86cb 9126                   sta (ptr3), y
  1280  86cd 60                 ++  rts
  1281                          
  1282                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1283  86ce 20528a                 jsr skipspaces
  1284  86d1 a200                   ldx #0
  1285  86d3 8624                   stx mode
  1286  86d5 203087                 jsr chkaccumulator
  1287  86d8 f051                   beq +
  1288  86da e624                   inc mode
  1289  86dc c4a4                   cpy len ; chknone
  1290  86de f04b                   beq +
  1291  86e0 e624                   inc mode
  1292  86e2 205487                 jsr chkimmediate
  1293  86e5 f044                   beq +
  1294  86e7 e624                   inc mode
  1295  86e9 207887                 jsr chkindirectx
  1296  86ec f03d                   beq +
  1297  86ee e624                   inc mode
  1298  86f0 20bd87                 jsr chkindirecty
  1299  86f3 f036                   beq +
  1300  86f5 e624                   inc mode
  1301  86f7 200288                 jsr chkrelative
  1302  86fa f02f                   beq +
  1303  86fc e624                   inc mode
  1304  86fe 205d88                 jsr chkzeropage
  1305  8701 f028                   beq +
  1306  8703 e624                   inc mode
  1307  8705 207688                 jsr chkzeropagex
  1308  8708 f021                   beq +
  1309  870a e624                   inc mode
  1310  870c 20a588                 jsr chkzeropagey
  1311  870f f01a                   beq +
  1312  8711 e624                   inc mode
  1313  8713 20d488                 jsr chkabsolute
  1314  8716 f013                   beq +
  1315  8718 e624                   inc mode
  1316  871a 20ed88                 jsr chkabsolutex
  1317  871d f00c                   beq +
  1318  871f e624                   inc mode
  1319  8721 201c89                 jsr chkabsolutey
  1320  8724 f005                   beq +
  1321  8726 e624                   inc mode
  1322  8728 204b89                 jsr chkindirect
  1323  872b 08                 +   php ; save Z
  1324  872c a524                   lda mode
  1325  872e 28                     plp ; restore Z 
  1326  872f 60                     rts
  1327                          
  1328                          chkaccumulator:
  1329  8730 c4a4                   cpy len
  1330  8732 d013                   bne +
  1331  8734 a523                   lda inidx
  1332  8736 c902                   cmp #2 ; ASL
  1333  8738 f019                   beq ++
  1334  873a c920                   cmp #32 ; LSR
  1335  873c f015                   beq ++
  1336  873e c927                   cmp #39 ; ROL
  1337  8740 f011                   beq ++
  1338  8742 c928                   cmp #40 ; ROR
  1339  8744 4c5387                 jmp ++
  1340  8747 b90002             +   lda inputbuf, y
  1341  874a c941                   cmp #'A'
  1342  874c d005                   bne ++
  1343  874e b90102                 lda inputbuf+1,y
  1344  8751 c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1345  8753 60                 ++  rts
  1346                          
  1347                          chkimmediate:
  1348  8754 84a5                   sty savepos
  1349  8756 b90002                 lda inputbuf, y
  1350  8759 c923                   cmp #'#'
  1351  875b d016                   bne ++
  1352  875d c8                     iny
  1353  875e 20528a                 jsr skipspaces
  1354  8761 b90002                 lda inputbuf, y
  1355  8764 c924                   cmp #'$'
  1356  8766 d001                   bne +
  1357  8768 c8                     iny
  1358  8769 20a58a             +   jsr chkhexbyte
  1359  876c d005                   bne ++
  1360  876e c4a4               +   cpy len
  1361  8770 d001                   bne ++
  1362  8772 60                     rts
  1363  8773 a4a5               ++  ldy savepos
  1364  8775 a201                   ldx #1 ; Z false (NE)
  1365  8777 60                     rts
  1366                          
  1367                          chkindirectx:
  1368  8778 84a5                   sty savepos
  1369  877a b90002                 lda inputbuf, y
  1370  877d c928                   cmp #'('
  1371  877f d037                   bne ++
  1372  8781 c8                     iny
  1373  8782 20528a                 jsr skipspaces
  1374  8785 b90002                 lda inputbuf, y
  1375  8788 c924                   cmp #'$'
  1376  878a d001                   bne +
  1377  878c c8                     iny
  1378  878d 20a58a             +   jsr chkhexbyte
  1379  8790 d026                   bne ++
  1380  8792 20528a                 jsr skipspaces
  1381  8795 b90002                 lda inputbuf, y
  1382  8798 c92c                   cmp #','
  1383  879a d01c                   bne ++
  1384  879c c8                     iny
  1385  879d 20528a                 jsr skipspaces
  1386  87a0 b90002                 lda inputbuf, y
  1387  87a3 c958                   cmp #'X'
  1388  87a5 d011                   bne ++
  1389  87a7 c8                     iny
  1390  87a8 20528a                 jsr skipspaces
  1391  87ab b90002                 lda inputbuf, y
  1392  87ae c929                   cmp #')'
  1393  87b0 d006                   bne ++
  1394  87b2 c8                     iny
  1395  87b3 c4a4                   cpy len
  1396  87b5 d001                   bne ++
  1397  87b7 60                     rts
  1398  87b8 a4a5               ++  ldy savepos
  1399  87ba a201                   ldx #1 ; Z false (NE)
  1400  87bc 60                     rts
  1401                          
  1402                          chkindirecty:
  1403  87bd 84a5                   sty savepos
  1404  87bf b90002                 lda inputbuf, y
  1405  87c2 c928                   cmp #'('
  1406  87c4 d037                   bne ++
  1407  87c6 c8                     iny
  1408  87c7 20528a                 jsr skipspaces
  1409  87ca b90002                 lda inputbuf, y
  1410  87cd c924                   cmp #'$'
  1411  87cf d001                   bne +
  1412  87d1 c8                     iny
  1413  87d2 20a58a             +   jsr chkhexbyte
  1414  87d5 d026                   bne ++
  1415  87d7 20528a                 jsr skipspaces
  1416  87da b90002                 lda inputbuf, y
  1417  87dd c929                   cmp #')'
  1418  87df d01c                   bne ++
  1419  87e1 c8                     iny
  1420  87e2 20528a                 jsr skipspaces
  1421  87e5 b90002                 lda inputbuf, y
  1422  87e8 c92c                   cmp #','
  1423  87ea d011                   bne ++
  1424  87ec c8                     iny
  1425  87ed 20528a                 jsr skipspaces
  1426  87f0 b90002                 lda inputbuf, y
  1427  87f3 c959                   cmp #'Y'
  1428  87f5 d006                   bne ++
  1429  87f7 c8                     iny
  1430  87f8 c4a4                   cpy len
  1431  87fa d001                   bne ++
  1432  87fc 60                     rts
  1433  87fd a4a5               ++  ldy savepos
  1434  87ff a201                   ldx #1 ; Z false (NE)
  1435  8801 60                     rts
  1436                          
  1437                          chkrelative:
  1438  8802 84a5                   sty savepos
  1439  8804 a623                   ldx inidx
  1440  8806 e006                   cpx #6 ; BIT
  1441  8808 f01e                   beq ++
  1442  880a bde48b                 lda inst0, x
  1443  880d c942                   cmp #'B'
  1444  880f d017                   bne ++
  1445  8811 b90002                 lda inputbuf, y
  1446  8814 c924                   cmp #'$'
  1447  8816 d001                   bne +
  1448  8818 c8                     iny
  1449  8819 209c8a             +   jsr chkhexword
  1450  881c d00a                   bne ++
  1451  881e c4a4                   cpy len
  1452  8820 d006                   bne ++
  1453  8822 202d88                 jsr computeoffset
  1454  8825 d001                   bne ++
  1455  8827 60                     rts ; Z true (EQ)
  1456  8828 a4a5               ++  ldy savepos
  1457  882a a201                   ldx #1 ; Z false (NE)
  1458  882c 60                     rts
  1459                          
  1460                          computeoffset:
  1461                          ;   compute next address
  1462  882d a527                   lda ptr3+1
  1463  882f 85fe                   sta ptr2+1
  1464  8831 a526                   lda ptr3
  1465  8833 18                     clc
  1466  8834 6902                   adc #2
  1467  8836 85fd                   sta ptr2
  1468  8838 9002                   bcc +
  1469  883a e6fe                   inc ptr2+1
  1470                          +  ; subtract argument
  1471  883c 38                     sec
  1472  883d a5fb                   lda ptr1
  1473  883f e5fd                   sbc ptr2
  1474  8841 85a6                   sta tmp2
  1475  8843 a5fc                   lda ptr1+1
  1476  8845 e5fe                   sbc ptr2+1
  1477  8847 f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1478  8849 c9ff                   cmp #$FF
  1479  884b d00d                   bne failedoffset ; 0 and FF were only options so fail
  1480                              ; chkeck negative offset
  1481  884d a5a6                   lda tmp2
  1482  884f 3006                   bmi successoffset ; branch if signed byte is negative
  1483  8851 1007                   bpl failedoffset ; otherwise fail
  1484                          chkoffsetto127:
  1485  8853 a5a6                   lda tmp2
  1486  8855 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1487                          successoffset:    
  1488  8857 a900                   lda #0 ; Z true (EQ)
  1489  8859 60                     rts
  1490                          failedoffset:
  1491  885a a901                   lda #1 ; Z false (NE)
  1492  885c 60                     rts
  1493                          
  1494                          chkzeropage:
  1495  885d 84a5                   sty savepos
  1496  885f b90002                 lda inputbuf, y
  1497  8862 c924                   cmp #'$'
  1498  8864 d001                   bne +
  1499  8866 c8                     iny
  1500  8867 20a58a             +   jsr chkhexbyte
  1501  886a d005                   bne ++
  1502  886c c4a4                   cpy len
  1503  886e d001                   bne ++
  1504  8870 60                     rts ; Z true (EQ)
  1505  8871 a4a5               ++  ldy savepos
  1506  8873 a201                   ldx #1 ; Z false (NE)
  1507  8875 60                     rts
  1508                          
  1509                          chkzeropagex:
  1510  8876 84a5                   sty savepos
  1511  8878 b90002                 lda inputbuf, y
  1512  887b c924                   cmp #'$'
  1513  887d d001                   bne +
  1514  887f c8                     iny
  1515  8880 20a58a             +   jsr chkhexbyte
  1516  8883 d01b                   bne ++
  1517  8885 20528a                 jsr skipspaces
  1518  8888 b90002                 lda inputbuf, y
  1519  888b c92c                   cmp #','
  1520  888d d011                   bne ++
  1521  888f c8                     iny
  1522  8890 20528a                 jsr skipspaces
  1523  8893 b90002                 lda inputbuf, y
  1524  8896 c958                   cmp #'X'
  1525  8898 d006                   bne ++
  1526  889a c8                     iny
  1527  889b c4a4                   cpy len
  1528  889d d001                   bne ++
  1529  889f 60                     rts ; Z true (EQ)
  1530  88a0 a4a5               ++  ldy savepos
  1531  88a2 a201                   ldx #1 ; Z false (NE)
  1532  88a4 60                     rts
  1533                          
  1534                          chkzeropagey:
  1535  88a5 84a5                   sty savepos
  1536  88a7 b90002                 lda inputbuf, y
  1537  88aa c924                   cmp #'$'
  1538  88ac d001                   bne +
  1539  88ae c8                     iny
  1540  88af 20a58a             +   jsr chkhexbyte
  1541  88b2 d01b                   bne ++
  1542  88b4 20528a                 jsr skipspaces
  1543  88b7 b90002                 lda inputbuf, y
  1544  88ba c92c                   cmp #','
  1545  88bc d011                   bne ++
  1546  88be c8                     iny
  1547  88bf 20528a                 jsr skipspaces
  1548  88c2 b90002                 lda inputbuf, y
  1549  88c5 c959                   cmp #'Y'
  1550  88c7 d006                   bne ++
  1551  88c9 c8                     iny
  1552  88ca c4a4                   cpy len
  1553  88cc d001                   bne ++
  1554  88ce 60                     rts ; Z true (EQ)
  1555  88cf a4a5               ++  ldy savepos
  1556  88d1 a201                   ldx #1 ; Z false (NE)
  1557  88d3 60                     rts
  1558                          
  1559                          chkabsolute:
  1560  88d4 84a5                   sty savepos
  1561  88d6 b90002                 lda inputbuf, y
  1562  88d9 c924                   cmp #'$'
  1563  88db d001                   bne +
  1564  88dd c8                     iny
  1565  88de 209c8a             +   jsr chkhexword
  1566  88e1 d005                   bne ++
  1567  88e3 c4a4                   cpy len
  1568  88e5 d001                   bne ++
  1569  88e7 60                     rts ; Z true (EQ)
  1570  88e8 a4a5               ++  ldy savepos
  1571  88ea a201                   ldx #1 ; Z false (NE)
  1572  88ec 60                     rts
  1573                          
  1574                          chkabsolutex:
  1575  88ed 84a5                   sty savepos
  1576  88ef b90002                 lda inputbuf, y
  1577  88f2 c924                   cmp #'$'
  1578  88f4 d001                   bne +
  1579  88f6 c8                     iny
  1580  88f7 209c8a             +   jsr chkhexword
  1581  88fa d01b                   bne ++
  1582  88fc 20528a                 jsr skipspaces
  1583  88ff b90002                 lda inputbuf, y
  1584  8902 c92c                   cmp #','
  1585  8904 d011                   bne ++
  1586  8906 c8                     iny
  1587  8907 20528a                 jsr skipspaces
  1588  890a b90002                 lda inputbuf, y
  1589  890d c958                   cmp #'X'
  1590  890f d006                   bne ++
  1591  8911 c8                     iny
  1592  8912 c4a4                   cpy len
  1593  8914 d001                   bne ++
  1594  8916 60                     rts ; Z true (EQ)
  1595  8917 a4a5               ++  ldy savepos
  1596  8919 a201                   ldx #1 ; Z false (NE)
  1597  891b 60                     rts
  1598                          
  1599                          chkabsolutey:
  1600  891c 84a5                   sty savepos
  1601  891e b90002                 lda inputbuf, y
  1602  8921 c924                   cmp #'$'
  1603  8923 d001                   bne +
  1604  8925 c8                     iny
  1605  8926 209c8a             +   jsr chkhexword
  1606  8929 d01b                   bne ++
  1607  892b 20528a                 jsr skipspaces
  1608  892e b90002                 lda inputbuf, y
  1609  8931 c92c                   cmp #','
  1610  8933 d011                   bne ++
  1611  8935 c8                     iny
  1612  8936 20528a                 jsr skipspaces
  1613  8939 b90002                 lda inputbuf, y
  1614  893c c959                   cmp #'Y'
  1615  893e d006                   bne ++
  1616  8940 c8                     iny
  1617  8941 c4a4                   cpy len
  1618  8943 d001                   bne ++
  1619  8945 60                     rts ; Z true (EQ)
  1620  8946 a4a5               ++  ldy savepos
  1621  8948 a201                   ldx #1 ; Z false (NE)
  1622  894a 60                     rts
  1623                          
  1624                          chkindirect:
  1625  894b 84a5                   sty savepos
  1626  894d b90002                 lda inputbuf, y
  1627  8950 c928                   cmp #'('
  1628  8952 d021                   bne ++
  1629  8954 c8                     iny
  1630  8955 20528a                 jsr skipspaces
  1631  8958 b90002                 lda inputbuf, y
  1632  895b c924                   cmp #'$'
  1633  895d d001                   bne +
  1634  895f c8                     iny
  1635  8960 209c8a             +   jsr chkhexword
  1636  8963 d010                   bne ++
  1637  8965 20528a                 jsr skipspaces
  1638  8968 b90002                 lda inputbuf, y
  1639  896b c929                   cmp #')'
  1640  896d d006                   bne ++
  1641  896f c8                     iny
  1642  8970 c4a4                   cpy len
  1643  8972 d001                   bne ++
  1644  8974 60                     rts ; Z true (EQ)
  1645  8975 a4a5               ++  ldy savepos
  1646  8977 a201                   ldx #1 ; Z false (NE)
  1647  8979 60                     rts
  1648                          
  1649                          chkinstruction:
  1650  897a c4a4                   cpy len
  1651  897c f02a                   beq ++
  1652  897e 84ff                   sty tmp
  1653  8980 a237                   ldx #(ninst-1)
  1654  8982 b90002             -   lda inputbuf,y
  1655  8985 dde48b                 cmp inst0,x
  1656  8988 d019                   bne +
  1657  898a c8                     iny
  1658  898b b90002                 lda inputbuf,y
  1659  898e dd1c8c                 cmp inst1,x
  1660  8991 d010                   bne +
  1661  8993 c8                     iny
  1662  8994 b90002                 lda inputbuf,y
  1663  8997 dd548c                 cmp inst2,x
  1664  899a d007                   bne +
  1665  899c c8                     iny
  1666  899d 8a                     txa
  1667  899e 8523                   sta inidx
  1668  89a0 a200                   ldx #0
  1669  89a2 60                     rts
  1670  89a3 a4ff               +   ldy tmp
  1671  89a5 ca                     dex
  1672  89a6 10da                   bpl -
  1673  89a8 a201               ++  ldx #1 ; Z false (NE)
  1674  89aa 60                     rts
  1675                          
  1676                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1677                              ; and allows mode promotion
  1678  89ab 20cf89                 jsr find_inst_and_mode2
  1679  89ae f01e                   beq ++
  1680  89b0 a524                   lda mode
  1681  89b2 c906                   cmp #6
  1682  89b4 9018                   bcc ++
  1683  89b6 c90a                   cmp #10
  1684  89b8 b012                   bcs +
  1685  89ba 6903                   adc #3
  1686  89bc 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1687  89be 20cf89                 jsr find_inst_and_mode2 ; try again once
  1688  89c1 d00b                   bne ++
  1689  89c3 a5a6                   lda tmp2
  1690  89c5 85fb                   sta ptr1
  1691  89c7 a900                   lda #0
  1692  89c9 85fc                   sta ptr1+1
  1693  89cb 60                     rts ; Z true (EQ)
  1694  89cc a201               +   ldx #1 ; Z false (NE)
  1695  89ce 60                 ++  rts
  1696                          
  1697                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1698  89cf a296                   ldx #nopcodes-1
  1699  89d1 bd3c8e             -   lda instidx, x
  1700  89d4 bcd38e                 ldy modeidx, x
  1701  89d7 c523                   cmp inidx
  1702  89d9 d00c                   bne +
  1703  89db c424                   cpy mode
  1704  89dd d008                   bne +
  1705  89df 8622                   stx opidx
  1706  89e1 209381                 jsr getsize
  1707  89e4 a200                   ldx #0 ; Z true (EQ)
  1708  89e6 60                     rts
  1709  89e7 ca                 +   dex
  1710  89e8 e0ff                   cpx #$ff
  1711  89ea d0e5                   bne -
  1712  89ec a201                   ldx #1 ; Z false (NE)
  1713  89ee 60                     rts
  1714                          
  1715                          executerun:
  1716  89ef 68                     pla ; remove low byte return address
  1717  89f0 68                     pla ; return high byte return address
  1718  89f1 68                     pla ; again, we're really not returning
  1719  89f2 68                     pla ; again, we're really not returning
  1720  89f3 20f98a                 jsr newline
  1721  89f6 38                     sec
  1722  89f7 a5fb                   lda ptr1
  1723  89f9 e901                   sbc #1
  1724  89fb 85fb                   sta ptr1
  1725  89fd b002                   bcs +
  1726  89ff c6fc                   dec ptr1+1
  1727  8a01 a5fc               +   lda ptr1+1
  1728  8a03 48                     pha
  1729  8a04 a5fb                   lda ptr1
  1730  8a06 48                     pha
  1731  8a07 60                     rts
  1732                          
  1733                          chkcontinuedis:
  1734  8a08 b90002                 lda inputbuf,y
  1735  8a0b c944                   cmp #'D'
  1736  8a0d d00a                   bne +
  1737  8a0f b90102                 lda inputbuf+1,y
  1738  8a12 c90d                   cmp #13
  1739  8a14 d003                   bne +
  1740  8a16 c8                     iny
  1741  8a17 a200                   ldx #0 ; restore Z set
  1742  8a19 60                 +   rts
  1743                          
  1744                          chkcontinueasm:
  1745  8a1a b90002                 lda inputbuf,y
  1746  8a1d c941                   cmp #'A'
  1747  8a1f d00a                   bne +
  1748  8a21 b90102                 lda inputbuf+1,y
  1749  8a24 c90d                   cmp #13
  1750  8a26 d003                   bne +
  1751  8a28 c8                     iny
  1752  8a29 a200                   ldx #0 ; restore Z set
  1753  8a2b 60                 +   rts
  1754                          
  1755                          executedisassemble:
  1756  8a2c 68                     pla ; remove low byte return address
  1757  8a2d 68                     pla ; return high byte return address
  1758  8a2e 20f98a                 jsr newline
  1759  8a31 4c3b81                 jmp disassemble
  1760                          
  1761                          reportnotimplemented:
  1762  8a34 a927                   lda #<notimplemented
  1763  8a36 a290                   ldx #>notimplemented
  1764  8a38 4c9583                 jmp strout
  1765                          
  1766                          reporterr:
  1767  8a3b c000                   cpy #0
  1768  8a3d f008                   beq +
  1769  8a3f a920                   lda #' '
  1770  8a41 20d2ff             -   jsr charout
  1771  8a44 88                     dey
  1772  8a45 d0fa                   bne -
  1773  8a47 a93f               +   lda #'?'
  1774  8a49 20d2ff                 jsr charout
  1775  8a4c a90d                   lda #13
  1776  8a4e 20d2ff                 jsr charout
  1777  8a51 60                     rts
  1778                          
  1779                          skipspaces:
  1780  8a52 b90002             -   lda inputbuf, y
  1781                          !ifndef MINIMUM {
  1782                              ; skip SHIFT-SPACES too on Commodore
  1783  8a55 c9a0                   cmp #$A0
  1784  8a57 f004                   beq +
  1785                          }
  1786  8a59 c920                   cmp #$20
  1787  8a5b d003                   bne ++
  1788  8a5d c8                 +   iny
  1789  8a5e d0f2                   bne -
  1790  8a60 60                 ++  rts
  1791                          
  1792                          chkdot:
  1793  8a61 b90002                 lda inputbuf, y
  1794  8a64 c92e                   cmp #'.'
  1795  8a66 d003                   bne +
  1796  8a68 c8                     iny
  1797  8a69 a900                   lda #0 ; Z true (EQ)
  1798  8a6b 60                 +   rts
  1799                          
  1800                          chkhelp:
  1801  8a6c b90002                 lda inputbuf, y
  1802  8a6f c93f                   cmp #'?'
  1803  8a71 d003                   bne +
  1804  8a73 c8                     iny
  1805  8a74 a900                   lda #0 ; Z true (EQ)
  1806  8a76 60                 +   rts
  1807                          
  1808                          chkcolon:
  1809  8a77 b90002                 lda inputbuf, y
  1810  8a7a c93a                   cmp #':'
  1811  8a7c d003                   bne +
  1812  8a7e c8                     iny
  1813  8a7f a900                   lda #0 ; Z true (EQ)
  1814  8a81 60                 +   rts
  1815                          
  1816                          chkhexbyteofsequence:
  1817  8a82 205b83                 jsr inputhexbyte
  1818  8a85 209f8a                 jsr +
  1819  8a88 d011                   bne ++ ; Z false (NE) if failed checks
  1820  8a8a c4a4                   cpy len
  1821  8a8c f00d                   beq ++ ; Z true (EQ) if end of input
  1822  8a8e 85ff                   sta tmp
  1823  8a90 b90002                 lda inputbuf,y
  1824  8a93 c920                   cmp #$20
  1825  8a95 d004                   bne ++ ; Z false (NE) if not space
  1826  8a97 a5ff                   lda tmp
  1827  8a99 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1828  8a9b 60                 ++  rts
  1829                          
  1830                          chkhexword:
  1831                          chkhexaddr1:
  1832  8a9c 203583                 jsr inputhexword
  1833  8a9f a200               +   ldx #0 ; Z true (EQ)
  1834  8aa1 9001                   bcc +
  1835  8aa3 e8                     inx ; Z false (NE)
  1836  8aa4 60                 +   rts
  1837                          
  1838                          chkhexbyte:
  1839  8aa5 98                     tya
  1840  8aa6 48                     pha ; save y
  1841  8aa7 205b83                 jsr inputhexbyte
  1842  8aaa b00d                   bcs +
  1843  8aac 85a6                   sta tmp2
  1844  8aae 207783                 jsr inputhexnybble
  1845  8ab1 9006                   bcc +
  1846  8ab3 68                     pla ; throw away saved y
  1847  8ab4 a5a6                   lda tmp2
  1848  8ab6 a200                   ldx #0 ; Z true (EQ)
  1849  8ab8 60                     rts
  1850  8ab9 68                 +   pla
  1851  8aba a8                     tay ; won't be zero, so Z false (NE)
  1852  8abb 60                     rts    
  1853                          
  1854                          chkhexaddr2:
  1855  8abc a5fb                   lda ptr1
  1856  8abe 48                     pha
  1857  8abf a5fc                   lda ptr1+1
  1858  8ac1 48                     pha
  1859  8ac2 209c8a                 jsr chkhexaddr1
  1860  8ac5 f005                   beq +
  1861  8ac7 68                     pla
  1862  8ac8 68                     pla
  1863  8ac9 a901                   lda #1 ; Z false (NE)
  1864  8acb 60                     rts
  1865  8acc a5fb               +   lda ptr1
  1866  8ace 85fd                   sta ptr2
  1867  8ad0 a5fc                   lda ptr1+1
  1868  8ad2 85fe                   sta ptr2+1
  1869  8ad4 68                     pla
  1870  8ad5 85fc                   sta ptr1+1
  1871  8ad7 68                     pla
  1872  8ad8 85fb                   sta ptr1
  1873  8ada a900                   lda #0 ; Z true (EQ)
  1874  8adc 60                     rts    
  1875                          
  1876                          chkaddr1cmd:
  1877  8add b90002                 lda inputbuf, y
  1878  8ae0 c941               +   cmp #'A'
  1879  8ae2 d004                   bne +
  1880  8ae4 c8                     iny
  1881  8ae5 4c4386                 jmp executeassemble
  1882  8ae8 c944               +   cmp #'D'
  1883  8aea d004                   bne +
  1884  8aec c8                     iny
  1885  8aed 4c2c8a                 jmp executedisassemble
  1886  8af0 c952               +   cmp #'R'
  1887  8af2 d004                   bne +
  1888  8af4 c8                     iny
  1889  8af5 4cef89                 jmp executerun
  1890  8af8 60                 +   rts
  1891                          
  1892                          newline:
  1893  8af9 a90d                   lda #13
  1894  8afb 4cd2ff                 jmp charout
  1895                          
  1896                          space:
  1897  8afe a920                   lda #32
  1898  8b00 4cd2ff                 jmp charout
  1899                          
  1900                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1901                          ;     jsr $ffd2
  1902                          ;     pha
  1903                          ; -   lda $d011
  1904                          ;     bpl -
  1905                          ; -   lda $d011
  1906                          ;     bmi -
  1907                          ; -   lda $d011
  1908                          ;     bpl -
  1909                          ; -   lda $d011
  1910                          ;     bmi -
  1911                          ;     pla
  1912                          ;     rts
  1913                          
  1914                          save_regs_and_stack:
  1915                          
  1916                          ; save registers
  1917  8b03 8d3c92             sta registerA
  1918  8b06 8e3d92             stx registerX
  1919  8b09 8c3e92             sty registerY
  1920                          
  1921                          ; detect N/Z flags without affecting stack
  1922  8b0c 3010               bmi +
  1923  8b0e f007               beq p_pl_eq
  1924                          
  1925  8b10 a900               lda #$00 ;p_pl_ne
  1926  8b12 8d4092             sta registerSR
  1927  8b15 f015               beq ++
  1928                          
  1929                          p_pl_eq:
  1930  8b17 a902               lda #$02
  1931  8b19 8d4092             sta registerSR
  1932  8b1c 100e               bpl ++ 
  1933                          
  1934  8b1e f007               + beq p_mi_eq
  1935  8b20 a980               lda #$80 ;p_mi_ne
  1936  8b22 8d4092             sta registerSR
  1937  8b25 3005               bmi ++
  1938                          
  1939                          p_mi_eq:
  1940  8b27 a982               lda #$82
  1941  8b29 8d4092             sta registerSR
  1942                          
  1943                          ; save SP register, affects N/Z
  1944  8b2c ba                 ++tsx
  1945  8b2d 8e3f92             stx registerSP
  1946                          
  1947                          ; save stack, affects N/Z
  1948  8b30 a200               ldx #0
  1949  8b32 bd0001             -lda $100,x
  1950  8b35 9d4392             sta savestack,x
  1951  8b38 e8                 inx
  1952  8b39 d0f7               bne -
  1953                          
  1954                          ; save flags, combining unaffected ones with saved N/Z
  1955  8b3b 08                 php
  1956  8b3c 68                 pla
  1957  8b3d 297d               and #$7d
  1958  8b3f 0d4092             ora registerSR
  1959  8b42 8d4092             sta registerSR
  1960                          
  1961                          ; restore stack byte affected
  1962  8b45 aa                 tax
  1963  8b46 bd4392             lda savestack,x
  1964  8b49 9d0001             sta $100,x
  1965                          
  1966  8b4c 4c518b             jmp +
  1967                          
  1968                          execute_display_registers:
  1969  8b4f 68                 pla ; remove return address
  1970  8b50 68                 pla
  1971                          +
  1972                          
  1973                          ; need some normality
  1974  8b51 58                 cli
  1975  8b52 d8                 cld
  1976                          
  1977  8b53 20f98a             jsr newline
  1978  8b56 205c8b             jsr display_registers
  1979  8b59 4c2d80             jmp input_loop
  1980                          
  1981                          ; PC   NV-BDIZC .A .X .Y .S
  1982                          ; 1234 10111011 01 02 03 FF
  1983                          display_registers:
  1984  8b5c a91c                   lda #<reg_header
  1985  8b5e a292                   ldx #>reg_header
  1986  8b60 209583                 jsr strout
  1987  8b63 ad4192                 lda registerPC
  1988  8b66 ae4292                 ldx registerPC+1
  1989  8b69 201983                 jsr disphexword
  1990  8b6c 20fe8a                 jsr space
  1991  8b6f ad4092                 lda registerSR
  1992  8b72 200683                 jsr dispbinbyte
  1993  8b75 20fe8a                 jsr space
  1994  8b78 ad3c92                 lda registerA
  1995  8b7b 201f83                 jsr disphexbyte
  1996  8b7e 20fe8a                 jsr space
  1997  8b81 ad3d92                 lda registerX
  1998  8b84 201f83                 jsr disphexbyte
  1999  8b87 20fe8a                 jsr space
  2000  8b8a ad3e92                 lda registerY
  2001  8b8d 201f83                 jsr disphexbyte
  2002  8b90 20fe8a                 jsr space
  2003  8b93 ad3f92                 lda registerSP
  2004  8b96 201f83                 jsr disphexbyte
  2005  8b99 4cf98a                 jmp newline
  2006                          
  2007                          loadregs_go:
  2008  8b9c a000                   ldy #0
  2009  8b9e b94392             -   lda savestack,y
  2010  8ba1 990001                 sta $100,y
  2011  8ba4 c8                     iny
  2012  8ba5 d0f7                   bne -
  2013  8ba7 ae3f92                 ldx registerSP
  2014  8baa 9a                     txs
  2015  8bab ad4092                 lda registerSR
  2016  8bae 48                     pha
  2017  8baf ad3c92                 lda registerA
  2018  8bb2 ae3d92                 ldx registerX
  2019  8bb5 ac3e92                 ldy registerY
  2020  8bb8 28                     plp
  2021  8bb9 6c4192                 jmp (registerPC)
  2022                          
  2023                          !ifdef MINIMUM {
  2024                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2025                          ;; MC6850
  2026                          UART_DATA=$FFF8
  2027                          UART_STCR=$FFF9
  2028                          
  2029                          UART_INIT:
  2030                          	ldx #0b00000111 ; 11=reset device
  2031                          	stx UART_STCR
  2032                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  2033                          	sta UART_STCR
  2034                          	rts
  2035                          UART_OUT:
  2036                          	pha
  2037                          -	lda UART_STCR
  2038                          	and #2
  2039                          	beq - ; branch if TDRE=0, not finished transmitting
  2040                          	pla
  2041                          	pha
  2042                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  2043                          	sta UART_DATA
  2044                          	pla
  2045                          	rts
  2046                          UART_IN:
  2047                          -	lda UART_STCR
  2048                          	and #1
  2049                          	beq - ; branch if TDRF=0, not received
  2050                          	lda UART_DATA
  2051                          	; software "CAPS LOCK" because wozmon expects only uppercase
  2052                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  2053                          	beq BREAK
  2054                              ; force lowercase alphabet to uppercase
  2055                              cmp #'a'
  2056                          	bcc +
  2057                          	cmp #'z'+1
  2058                          	bcs +
  2059                          	eor #$20
  2060                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  2061                           	rts
  2062                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  2063                          	pha ; save A
  2064                          	lda UART_STCR
  2065                          	lsr ; put rightmost bit in carry
  2066                          	pla ; restore A affects flags
  2067                          	ror ; move carry to left bit, right bit to carry
  2068                          	php ; push processor to save N
  2069                          	rol ; restore A affects flags
  2070                          	plp ; pull processor to restore N
  2071                          	rts
  2072                          
  2073                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2074                          ; Processor start and interrupts
  2075                          
  2076                          NMI: ; unused on minimum (no source of interrupt)
  2077                              rti
  2078                          
  2079                          IRQ:
  2080                              pha
  2081                              php
  2082                              pla
  2083                              and #$10
  2084                              beq ++ ; not break
  2085                          ;BREAK HANDLER
  2086                              pla
  2087                              sta registerA
  2088                              pla
  2089                              sta registerSR
  2090                              pla
  2091                              cld
  2092                              sec
  2093                              sbc #2
  2094                              sta registerPC
  2095                              pla
  2096                              sbc #0
  2097                              sta registerPC+1
  2098                              lda #>save_regs_and_stack
  2099                              pha
  2100                              lda #<save_regs_and_stack
  2101                              pha
  2102                              lda registerSR
  2103                              pha
  2104                              lda registerA
  2105                              pha
  2106                          ++  pla
  2107                              rti
  2108                          
  2109                          BREAK:
  2110                              jmp RESET
  2111                          
  2112                          RESET:
  2113                              cld
  2114                              ldx #$FF
  2115                              txs
  2116                              jsr JUART_INIT
  2117                              cli
  2118                              jmp start
  2119                          ; !ifdef MINIMUM
  2120                          } else { ; not MINIMUM
  2121                          brk64:
  2122  8bbc 68                     pla
  2123  8bbd a8                     tay
  2124  8bbe 68                     pla
  2125  8bbf aa                     tax
  2126  8bc0 68                     pla
  2127  8bc1 8d3c92                 sta registerA
  2128  8bc4 68                     pla
  2129  8bc5 8d4092                 sta registerSR
  2130  8bc8 68                     pla
  2131  8bc9 d8                     cld
  2132  8bca 38                     sec
  2133  8bcb e902                   sbc #2
  2134  8bcd 8d4192                 sta registerPC
  2135  8bd0 68                     pla
  2136  8bd1 e900                   sbc #0
  2137  8bd3 8d4292                 sta registerPC+1
  2138  8bd6 a98b                   lda #>save_regs_and_stack
  2139  8bd8 48                     pha
  2140  8bd9 a903                   lda #<save_regs_and_stack
  2141  8bdb 48                     pha
  2142  8bdc ad4092                 lda registerSR
  2143  8bdf 48                     pha
  2144  8be0 ad3c92                 lda registerA
  2145  8be3 40                     rti
  2146                          }
  2147                          
  2148                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2149                          ; data
  2150                          
  2151                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  2152                          ninst = 56
  2153  8be4 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  2154  8c1c 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  2155  8c54 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  2156                          
  2157                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  2158                          mode_jmptable:
  2159  8c8c 1f82               !word dispModeAcc-1; 0 Accumulator 1
  2160  8c8e 2482               !word dispModeNone-1 ; 1 None 1
  2161  8c90 2582               !word dispModeImm-1 ; 2 Immediate 2
  2162  8c92 3682               !word dispModeIndX-1 ; 3 IndirectX 2
  2163  8c94 5682               !word dispModeIndY-1 ; 4 IndirectY 2
  2164  8c96 7682               !word dispModeRel-1 ; 5 Relative 2
  2165  8c98 2a82               !word dispModeZP-1 ; 6 ZeroPage 2
  2166  8c9a b282               !word dispModeZPX-1 ; 7 ZeroPageX 2
  2167  8c9c bf82               !word dispModeZPY-1 ; 8 ZeroPageY 2
  2168  8c9e cc82               !word dispModeAbs-1 ; 9 Absolute 3
  2169  8ca0 de82               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  2170  8ca2 eb82               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  2171  8ca4 f882               !word dispModeInd-1 ; 12 Indirect 3
  2172                          
  2173                          nmodes = 13
  2174                          
  2175                          mode_sorted:
  2176  8ca6 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  2177                          
  2178                          !ifdef MINIMUM {
  2179                          mode_0: !text "Accumulator", 0, "A", 0
  2180                          mode_1: !text "None", 0, 8, 0
  2181                          mode_2: !text "Immediate", 0, "#$12", 0
  2182                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  2183                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  2184                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  2185                          mode_6: !text "ZeroPage", 0, "$12", 0
  2186                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  2187                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  2188                          mode_9: !text "Absolute", 0, "$1234", 0
  2189                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  2190                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  2191                          mode_12: !text "Indirect", 0, "($1234)", 0
  2192                          } else {
  2193  8cb3 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2194  8cc1 4e4f4e45001400     mode_1: !text "NONE", 0, 20, 0
  2195  8cc8 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2196  8cd7 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2197  8ce9 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2198  8cfb 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2199  8d1a 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2200  8d27 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2201  8d37 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2202  8d47 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2203  8d56 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2204  8d68 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2205  8d7a 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2206                          }
  2207                          
  2208                          modes: ; table for easily displaying each mode_example
  2209  8d8b b38c               !word mode_0
  2210  8d8d c18c               !word mode_1
  2211  8d8f c88c               !word mode_2
  2212  8d91 d78c               !word mode_3
  2213  8d93 e98c               !word mode_4
  2214  8d95 fb8c               !word mode_5
  2215  8d97 1a8d               !word mode_6
  2216  8d99 278d               !word mode_7
  2217  8d9b 378d               !word mode_8
  2218  8d9d 478d               !word mode_9
  2219  8d9f 568d               !word mode_10
  2220  8da1 688d               !word mode_11
  2221  8da3 7a8d               !word mode_12
  2222                          
  2223                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2224                          nopcodes = 151
  2225  8da5 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2226  8e3c 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2227  8ed3 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2228                          
  2229                          copyright 
  2230                          ;                  1         2         3         4
  2231                          ;         1234567890123456789012345678901234567890
  2232  8f6a 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2233                          !ifdef C64TERMINAL {
  2234                              !text 13, "(TERMINAL VERSION)"
  2235                          }
  2236  8f8a 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2237  8fb0 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2238  8fc7 00                 !text 0
  2239                          
  2240                          firsthelp
  2241                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2242  8fc8 0d0d               !text 13, 13
  2243  8fca 54595045203f2046...!text "TYPE ? FOR HELP"
  2244  8fd9 0d00               !text 13, 0
  2245                          
  2246                          !ifndef MINIMUM {
  2247                          ; C64 only
  2248                          extra_help:
  2249  8fdb 5820202020202020...    !text "X           (EXIT MONITOR)", 13
  2250  8ff6 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S  (SAVE)", 13
  2251  9018 00                     !text 0
  2252                          
  2253                          !ifdef C64SCREEN {
  2254  9019 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  2255  9020 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  2256                          }
  2257                          
  2258                          }
  2259                          
  2260  9027 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2261                          
  2262                          generalhelp
  2263  9038 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2264  905e 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2265  9083 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2266  90a6 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2267  90ce 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2268  90ea 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2269  910a 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2270  912c 00                 !text 0
  2271                          generalhelp2
  2272  912d 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2273  9152 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2274  916e 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2275  918d 3f20412020202020...!text "? A         (LIST 6502 INSTRUCTIONS)", 13
  2276  91b2 3f20414443202020...!text "? ADC       (/ADC/ ADDRESSING MODES)", 13
  2277  91d7 3f204d4f44452020...!text "? MODE      (ADDRESSING MODES)", 13
  2278  91f6 3f2e202020202020...!text "?.          (DISPLAY REGISTERS)", 13
  2279  9216 00                 !text 0
  2280                          
  2281  9217 4d4f444500         modes_keyword !text "MODE", 0
  2282                          
  2283  921c 2050432020204e56...reg_header !text " PC   NV-BDIZC .A .X .Y .S", 13, '.', 0
  2284                          
  2285                          !ifdef MINIMUM {
  2286                          registerA = $def9
  2287                          registerX = $defa
  2288                          registerY = $defb
  2289                          registerSP = $defc
  2290                          registerSR = $defd
  2291                          registerPC = $defe;/f
  2292                          savestack = $df00
  2293                          } else {
  2294  9239 0000               savebrkvector !word 0
  2295  923b 00                 drive !byte 0
  2296  923c 00                 registerA !byte 0
  2297  923d 00                 registerX !byte 0
  2298  923e 00                 registerY !byte 0
  2299  923f 00                 registerSP !byte 0
  2300  9240 00                 registerSR !byte 0
  2301  9241 0000               registerPC !word 0
  2302                          savestack ; 256 bytes
  2303  9243 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2304  9253 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2305  9263 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2306  9273 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2307  9283 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2308  9293 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2309  92a3 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2310  92b3 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2311  92c3 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2312  92d3 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2313  92e3 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2314  92f3 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2315  9303 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2316  9313 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2317  9323 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2318  9333 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2319                          }
  2320                          
  2321                          !ifdef MINIMUM {
  2322                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2323                          ; JUMP table for some stability
  2324                          * = $FFEE
  2325                          JUART_INIT: JMP UART_INIT
  2326                          JUART_OUT: JMP UART_OUT
  2327                          JUART_IN: JMP UART_IN
  2328                          JUART_CHK: JMP UART_CHK
  2329                          
  2330                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2331                          ; 6502 vectors 
  2332                          * = $fffa
  2333                              !word NMI
  2334                              !word RESET
  2335                              !word IRQ
  2336                          } else { // C64
  2337                              !if * > $a000 {
  2338                                  !error "code/data overran $a000"
  2339                              }
  2340                          }
  2341                          
  2342                          finish = *
