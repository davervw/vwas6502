
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGETS:                              *        <<<
     7                          ;; >>>       ** (1)  C64 8000-9FFF screen editor                *        <<<
     8                          ;; >>>       ** (2)  C64 8000-9FFF terminal edition             *        <<<
     9                          ;; >>>       ** (3)  6502+MC6850 minimum system                 *        <<<
    10                          ;; >>>       *   56K(RAM),8K(ROM), 2 bytes IO for MC6850 UART   *        <<<
    11                          ;; >>>       ****************************************************        <<<
    12                          ;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          ;; MIT License
    15                          ;;
    16                          ;; Copyright (c) 2024 David R. Van Wagner
    17                          ;; davevw.com
    18                          ;;
    19                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    20                          ;; of this software and associated documentation files (the "Software"), to deal
    21                          ;; in the Software without restriction, including without limitation the rights
    22                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    23                          ;; copies of the Software, and to permit persons to whom the Software is
    24                          ;; furnished to do so, subject to the following conditions:
    25                          ;;
    26                          ;; The above copyright notice and this permission notice shall be included in all
    27                          ;; copies or substantial portions of the Software.
    28                          ;;
    29                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    30                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    31                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    32                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    33                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    34                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    35                          ;; SOFTWARE.
    36                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                          
    40                          ; Important! define exactly ONE target (set in build.sh)
    41                          ;C64SCREEN = 1
    42                          ;C64TERMINAL = 1
    43                          ;MINIMUM = 1
    44                          
    45                          ; options (set in build.sh)
    46                          ;NEEDECHO = 0
    47                          
    48                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                          
    50                          ;; _
    51                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    52                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    53                          ;; 1000 (display memory at $1000)
    54                          ;; 1000.2000 (display memory range $1000 to $2000)
    55                          ;; 1000. (display next screenful of memory starting at $1000)
    56                          ;; . (display next screenful of memory)
    57                          ;; 1000 r (JMP $1000)
    58                          ;; 1000: 01 02 03 (modify memory)
    59                          ;; (NEW SYNTAX)
    60                          ;; 1000 d (disassemble starting at address, for screenful)
    61                          ;; d (continue disassembling from last address)
    62                          ;; 1000 a (assemble starting at, interactive until empty line) 
    63                          ;; x (exit monitor -- C64 only)
    64                          ;; ? (commands help)
    65                          ;; ?a (list instructions available)
    66                          ;; ?adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    67                          ;; ?mode (show addressing modes example syntax for 6502)
    68                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    69                          ;; .? (display registers in format .1234 10110000 01 02 03 f6)
    70                          ;; .1234 10110000 01 02 03 f6 (set registers PC FLAGS A X Y S)
    71                          ;; .A:00 (change register, replace A with X, Y, S, P as appropriate, use space or colon as separator)
    72                          ;; (FUTURE SYNTAX, not implemented)
    73                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    74                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    75                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    76                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    77                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    78                          ;;
    79                          ;; (INTERACTIVE ASSEMBLER)
    80                          ;; 1000 _
    81                          ;;      ADC #$12
    82                          ;; 1000 69 12    ADC #$12
    83                          ;; 1002 _
    84                          ;;      JSR $1234
    85                          ;; 1002 20 34 12 JSR $1234
    86                          ;; 1005 _
    87                          ;;      RTS
    88                          ;; 1005 60       RTS
    89                          ;; 1006 _
    90                          ;;      XYZ
    91                          ;;      XYZ ?
    92                          ;; 1006 _
    93                          ;; _
    94                          ;;
    95                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    96                          ;; and can cursor up to revise, 
    97                          ;;
    98                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    99                          ;;
   100                          
   101                          ; global
   102                          inputbuf=$0200
   103                          
   104                          
   105                          ; kernal/system calls
   106                          
   107                          !ifdef MINIMUM {
   108                          charout=JUART_OUT
   109                          getkey=JUART_IN
   110                          }
   111                          
   112                          !ifdef C64SCREEN {
   113                          setlfs=$ffba
   114                          setnam=$ffbd
   115                          charin=$ffcf ; screen editor
   116                          charout=$ffd2
   117                          fsave =$ffd8
   118                          getkey=$ffe4
   119                          }
   120                          
   121                          !ifdef C64TERMINAL {
   122                          setlfs=$ffba
   123                          setnam=$ffbd
   124                          charout=$ffd2
   125                          getkey=$ffe4
   126                          fsave =$ffd8
   127                          }
   128                          
   129                          ; zeropage
   130                          !ifdef MINIMUM {
   131                          opidx=$f0
   132                          inidx=$f1
   133                          mode=$f2
   134                          size=$f3
   135                          ptr3=$f4 ; and $f5
   136                          count=$f6
   137                          len=$f7
   138                          savepos=$f8
   139                          tmp2=$f9
   140                          flag=$fa
   141                          ptr1=$fb ; and $fc
   142                          ptr2=$fd ; and $fe
   143                          tmp=$ff
   144                          } else {
   145                          opidx=$22
   146                          inidx=$23
   147                          mode=$24
   148                          size=$25
   149                          ptr3=$26 ; and $27
   150                          count=$a3
   151                          len=$a4
   152                          savepos=$a5
   153                          tmp2=$a6
   154                          flag=$a7
   155                          ptr1=$fb ; and $fc
   156                          ptr2=$fd ; and $fe
   157                          tmp=$ff
   158                          }
   159                          
   160                          !ifdef MINIMUM {
   161                          * = $e000
   162                          } else { // any C64
   163                          * = $8000
   164                              ; check if irq/brk vector installed
   165  8000 ad1603                 lda $316
   166  8003 ae1703                 ldx $317
   167  8006 e08c                   cpx #>brk64
   168  8008 f010                   beq +
   169  800a 8d9593                 sta savebrkvector
   170  800d 8e9693                 stx savebrkvector+1
   171  8010 a9c7                   lda #<brk64
   172  8012 a28c                   ldx #>brk64
   173  8014 8d1603                 sta $316
   174  8017 8e1703                 stx $317
   175  801a 203980             +   jsr install_nmi64   
   176                          }
   177                          
   178                          start:
   179  801d d8                     cld
   180  801e 58                     cli
   181  801f a975                   lda #<copyright
   182  8021 a290                   ldx #>copyright
   183  8023 20c383                 jsr strout
   184  8026 a9d3                   lda #<firsthelp
   185  8028 a290                   ldx #>firsthelp
   186  802a 20c383                 jsr strout
   187  802d 4c438c                 jmp save_registers
   188                          
   189                          input_loop:
   190  8030 20de83                 jsr inputline
   191  8033 20e183                 jsr parseline
   192  8036 4c3080                 jmp input_loop
   193                          
   194                          !ifndef MINIMUM {
   195                          ; C64 only
   196                          
   197                          install_nmi64:
   198                              ; check if nmi vector installed
   199  8039 ad1803                 lda $318
   200  803c ae1903                 ldx $319
   201  803f e08c                   cpx #>nmi64
   202  8041 f010                   beq +
   203  8043 8d9793                 sta savenmivector
   204  8046 8e9893                 stx savenmivector+1
   205  8049 a9a8                   lda #<nmi64
   206  804b a28c                   ldx #>nmi64
   207  804d 8d1803                 sta $318
   208  8050 8e1903                 stx $319
   209  8053 60                 +   rts
   210                          
   211                          uninstall_nmi64:
   212  8054 ad9793                 lda savenmivector
   213  8057 ae9893                 ldx savenmivector+1
   214  805a 8d1803                 sta $318
   215  805d 8e1903                 stx $319
   216  8060 60                     rts
   217                          
   218                          chkextrac64:
   219  8061 206d80                 jsr chkexit
   220  8064 d003                   bne +
   221  8066 4c8180                 jmp execute_exit
   222  8069 18                 +   clc ; no error
   223  806a a201                   ldx #1 ; Z false - not consumed
   224  806c 60                     rts
   225                          
   226                          chkexit:
   227  806d b90002                 lda inputbuf, y
   228  8070 c958                   cmp #'X'
   229  8072 d008                   bne +
   230  8074 c8                     iny
   231  8075 c4a4                   cpy len ; validate no extra characters
   232  8077 f003                   beq +
   233  8079 4c7d80                 jmp extra_error
   234  807c 60                 +   rts
   235                          
   236                          extra_error:
   237                              ; pop local return address
   238  807d 68                     pla
   239  807e 68                     pla
   240  807f 38                     sec ; error
   241  8080 60                     rts
   242                          
   243                          execute_exit:
   244  8081 ad9593                 lda savebrkvector
   245  8084 ae9693                 ldx savebrkvector+1
   246  8087 8d1603                 sta $316
   247  808a 8e1703                 stx $317
   248  808d 205480                 jsr uninstall_nmi64
   249                              ; pop monitor return addresses, so only original caller is left
   250  8090 68                     pla
   251  8091 68                     pla
   252  8092 68                     pla
   253  8093 68                     pla
   254  8094 68                     pla
   255  8095 68                     pla
   256  8096 60                     rts
   257                          
   258                          display_extra_help:
   259  8097 a9e6                   lda #<extra_help
   260  8099 a290                   ldx #>extra_help
   261  809b 4cc383                 jmp strout
   262                          
   263                          !ifdef C64SCREEN {
   264                          display_page_disassemble:
   265  809e a5fb                   lda ptr1
   266  80a0 a6fc                   ldx ptr1+1
   267  80a2 204783                 jsr disphexword
   268  80a5 a924                   lda #<page_disassemble
   269  80a7 a291                   ldx #>page_disassemble
   270  80a9 4cc383                 jmp strout
   271                          
   272                          display_page_displaymemory:
   273  80ac 20398c                 jsr newline
   274  80af a5fb                   lda ptr1
   275  80b1 a6fc                   ldx ptr1+1
   276  80b3 204783                 jsr disphexword
   277  80b6 a92b                   lda #<page_displaymemory
   278  80b8 a291                   ldx #>page_displaymemory
   279  80ba 4cc383                 jmp strout
   280                          
   281                          inputlinec64:
   282  80bd a000                   ldy #0
   283  80bf 20cfff             -   jsr charin
   284  80c2 990002                 sta inputbuf,y
   285  80c5 c8                     iny
   286  80c6 c90d                   cmp #13
   287  80c8 d0f5                   bne -
   288  80ca 60                     rts
   289                          
   290                          continueassemblec64:
   291  80cb a914                   lda #20
   292  80cd 20d2ff                 jsr charout
   293  80d0 20d2ff                 jsr charout
   294  80d3 a5fb                   lda ptr1
   295  80d5 a6fc                   ldx ptr1+1
   296  80d7 204783                 jsr disphexword
   297  80da a920                   lda #' '
   298  80dc 20d2ff                 jsr charout
   299  80df 20d2ff                 jsr charout
   300  80e2 4cd2ff                 jmp charout
   301                          }
   302                          
   303                          chkfilename:
   304  80e5 205b8b                 jsr skipspaces
   305  80e8 84ff                   sty tmp
   306  80ea b90002                 lda inputbuf, y
   307  80ed c922                   cmp #34 ; double quote
   308  80ef d022                   bne ++
   309  80f1 c8                 -   iny
   310  80f2 b90002                 lda inputbuf, y
   311  80f5 c90d                   cmp #13
   312  80f7 d004                   bne +
   313  80f9 a4ff                   ldy tmp
   314  80fb d016                   bne ++
   315  80fd c922               +   cmp #34 ; double quote
   316  80ff d0f0                   bne -
   317  8101 98                     tya ; index of ending double quotes
   318  8102 48                     pha ; save
   319  8103 18                     clc ; will subtract one more
   320  8104 e5ff                   sbc tmp ; subtract index of first quote, have filename length
   321  8106 a6ff                   ldx tmp
   322  8108 e8                     inx ; low address of filename
   323  8109 a002                   ldy #>inputbuf ; high address of filename
   324  810b 20bdff                 jsr setnam
   325  810e 68                     pla
   326  810f a8                     tay
   327  8110 c8                     iny ; advance past ending double quotes
   328  8111 a900                   lda #0 ; set Z true
   329  8113 60                 ++  rts
   330                          
   331                          check_execute_save:
   332  8114 20e580             +   jsr chkfilename
   333  8117 f006                   beq +
   334  8119 20328b                 jsr reporterr
   335  811c a201                   ldx #1 ; set Z false
   336  811e 60                     rts
   337  811f 202d81             +   jsr chkoptionaldrive
   338  8122 204381                 jsr chksave
   339  8125 d005                   bne +
   340  8127 204c81                 jsr executesave
   341  812a a200                   ldx #0 ; set Z true
   342  812c 60                 +   rts
   343                          
   344                          chkoptionaldrive:
   345  812d a908                   lda #8
   346  812f 8d9993                 sta drive
   347  8132 205b8b                 jsr skipspaces
   348  8135 20ae8b                 jsr chkhexbyte
   349  8138 d008                   bne +
   350  813a 8d9993                 sta drive
   351  813d 205b8b                 jsr skipspaces
   352  8140 a900                   lda #0 ; set Z true
   353  8142 60                 +   rts
   354                          
   355                          chksave:
   356  8143 205b8b                 jsr skipspaces
   357  8146 b90002                 lda inputbuf, y
   358  8149 c953                   cmp #'S'
   359  814b 60                     rts
   360                          
   361                          executesave:
   362  814c 20398c                 jsr newline
   363  814f a9c0                   lda #$c0 ; KERNAL control and error messages
   364  8151 859d                   sta $9d ; set messages to be displayed
   365  8153 a901                   lda #1
   366  8155 ae9993                 ldx drive
   367  8158 a00f                   ldy #15
   368  815a 20baff                 jsr setlfs
   369  815d a9fb                   lda #ptr1
   370  815f a6fd                   ldx ptr2
   371  8161 a4fe                   ldy ptr2+1
   372  8163 20d8ff                 jsr fsave
   373  8166 4c398c                 jmp newline
   374                          }
   375                          
   376                          ; test: ; all the addressing modes here for testing disassembly
   377                          ;     nop
   378                          ;     lda $1234
   379                          ;     lda $1234,x
   380                          ;     lda $1234,y
   381                          ;     asl
   382                          ;     lda #$12
   383                          ;     lda ($12,x)
   384                          ;     lda ($12),y
   385                          ;     jmp ($1234)
   386                          ; -   bne -
   387                          ;     lda $12
   388                          ;     lda $12,x
   389                          ;     ldx $12,y
   390                          ;     !byte $FF ; unknown
   391                          
   392                          disassemble:
   393  8169 a917                   lda #23
   394  816b 85a3                   sta count
   395  816d a000               -   ldy #0
   396  816f b1fb                   lda (ptr1),y
   397  8171 209881                 jsr find_opcode
   398  8174 20fb81                 jsr disp_current
   399  8177 a525                   lda size
   400  8179 1002                   bpl +
   401  817b a901                   lda #1
   402  817d 18                 +   clc
   403  817e 65fb                   adc ptr1
   404  8180 85fb                   sta ptr1
   405  8182 9002                   bcc +
   406  8184 e6fc                   inc ptr1+1
   407  8186 c6a3               +   dec count
   408  8188 d0e3                   bne -
   409                          !ifdef C64SCREEN {
   410  818a 4c9e80                 jmp display_page_disassemble
   411                          } else {    
   412                              rts
   413                          }
   414                          
   415                          compareptrs:
   416  818d a5fc                   lda ptr1+1
   417  818f c5fe                   cmp ptr2+1
   418  8191 d004                   bne +
   419  8193 a5fb                   lda ptr1
   420  8195 c5fd                   cmp ptr2
   421  8197 60                 +   rts
   422                          
   423                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   424                          ; and properties updated in ZP globals size,inidx,opidx,mode
   425  8198 a097                   ldy #nopcodes
   426  819a a296                   ldx #nopcodes-1
   427  819c ddb08e             -   cmp opcodes,x
   428  819f f00f                   beq +
   429  81a1 ca                     dex
   430  81a2 88                     dey
   431  81a3 d0f7                   bne -
   432  81a5 18                     clc
   433  81a6 a901                   lda #1
   434  81a8 8525                   sta size
   435  81aa a9ff                   lda #$FF
   436  81ac aa                     tax
   437  81ad a8                     tay
   438  81ae 900a                   bcc ++
   439  81b0 bd478f             +   lda instidx, x
   440  81b3 bcde8f                 ldy modeidx, x
   441  81b6 20c181                 jsr getsize
   442  81b9 38                     sec
   443  81ba 8523               ++  sta inidx
   444  81bc 8622                   stx opidx
   445  81be 8424                   sty mode
   446  81c0 60                     rts
   447                          
   448                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   449                              ; result returned in size
   450  81c1 48                     pha
   451  81c2 a901                   lda #1
   452  81c4 8525                   sta size
   453  81c6 68                     pla
   454  81c7 c002                   cpy #2 // Immediate
   455  81c9 9008                   bcc +
   456  81cb e625                   inc size
   457  81cd c009                   cpy #9 // Absolute
   458  81cf 9002                   bcc +
   459  81d1 e625                   inc size
   460  81d3 60                 +   rts
   461                          
   462                          disp_opcode: ; .A opcode byte
   463  81d4 209881                 jsr find_opcode
   464  81d7 8a                     txa
   465                              ; fall through to display instruction
   466                          
   467                          dispinst: ; .A instruction index 0..55, note modifies A and X
   468  81d8 aa                     tax
   469  81d9 e038                   cpx #ninst
   470  81db b012                   bcs +
   471  81dd bdef8c                 lda inst0, x
   472  81e0 20d2ff                 jsr charout
   473  81e3 bd278d                 lda inst1, x
   474  81e6 20d2ff                 jsr charout
   475  81e9 bd5f8d                 lda inst2, x
   476  81ec 4cd2ff                 jmp charout
   477  81ef a93f               +   lda #'?'
   478  81f1 20d2ff                 jsr charout
   479  81f4 20d2ff                 jsr charout
   480  81f7 20d2ff                 jsr charout
   481  81fa 60                     rts
   482                          
   483                          disp_current:
   484  81fb a5fb                   lda ptr1
   485  81fd a6fc                   ldx ptr1+1
   486  81ff 204783                 jsr disphexword
   487  8202 a920                   lda #$20
   488  8204 20d2ff                 jsr charout
   489  8207 a000                   ldy #0
   490  8209 a625                   ldx size
   491  820b b1fb               -   lda (ptr1),y
   492  820d 204d83                 jsr disphexbyte
   493  8210 a920                   lda #$20
   494  8212 20d2ff                 jsr charout
   495  8215 c8                     iny
   496  8216 ca                     dex
   497  8217 d0f2                   bne -
   498  8219 c003               -   cpy #3
   499  821b f00e                   beq +
   500  821d a920                   lda #$20
   501  821f 20d2ff                 jsr charout
   502  8222 20d2ff                 jsr charout
   503  8225 20d2ff                 jsr charout
   504  8228 c8                     iny
   505  8229 d0ee                   bne -
   506  822b a523               +   lda inidx
   507  822d 20d881                 jsr dispinst
   508  8230 a920                   lda #$20
   509  8232 20d2ff                 jsr charout
   510  8235 203d82                 jsr disp_mode
   511  8238 a90d                   lda #13
   512  823a 4cd2ff                 jmp charout
   513                          
   514                          disp_mode
   515  823d a524                   lda mode
   516  823f c90d                   cmp #13
   517  8241 b00a                   bcs +
   518  8243 0a                     asl
   519  8244 aa                     tax
   520  8245 bd988d                 lda mode_jmptable+1,x
   521  8248 48                     pha
   522  8249 bd978d                 lda mode_jmptable,x
   523  824c 48                     pha
   524  824d 60                 +   rts
   525                          
   526                          dispModeAcc:
   527  824e a941                   lda #'A'
   528  8250 4cd2ff                 jmp charout
   529                          
   530                          dispModeNone:
   531  8253 60                     rts
   532                          
   533                          dispModeImm:
   534  8254 a923                   lda #'#'
   535  8256 20d2ff                 jsr charout
   536                          dispModeZP:
   537  8259 a924                   lda #'$'
   538  825b 20d2ff                 jsr charout
   539  825e a001                   ldy #1
   540  8260 b1fb                   lda (ptr1),y
   541  8262 4c4d83                 jmp disphexbyte
   542                          
   543                          dispModeIndX:
   544  8265 a928                   lda #'('
   545  8267 20d2ff                 jsr charout
   546  826a a924                   lda #'$'
   547  826c 20d2ff                 jsr charout
   548  826f a001                   ldy #1
   549  8271 b1fb                   lda (ptr1),y
   550  8273 204d83                 jsr disphexbyte
   551  8276 a92c                   lda #','
   552  8278 20d2ff                 jsr charout
   553  827b a958                   lda #'X'
   554  827d 20d2ff                 jsr charout
   555  8280 a929                   lda #')'
   556  8282 4cd2ff                 jmp charout
   557                          
   558                          dispModeIndY:
   559  8285 a928                   lda #'('
   560  8287 20d2ff                 jsr charout
   561  828a a924                   lda #'$'
   562  828c 20d2ff                 jsr charout
   563  828f a001                   ldy #1
   564  8291 b1fb                   lda (ptr1),y
   565  8293 204d83                 jsr disphexbyte
   566  8296 a929                   lda #')'
   567  8298 20d2ff                 jsr charout
   568  829b a92c                   lda #','
   569  829d 20d2ff                 jsr charout
   570  82a0 a959                   lda #'Y'
   571  82a2 4cd2ff                 jmp charout
   572                          
   573                          dispModeRel:
   574  82a5 a924                   lda #'$'
   575  82a7 20d2ff                 jsr charout
   576  82aa 18                     clc
   577  82ab a5fb                   lda ptr1
   578  82ad 6902                   adc #2
   579  82af 8526                   sta ptr3
   580  82b1 a5fc                   lda ptr1+1
   581  82b3 6900                   adc #0
   582  82b5 8527                   sta ptr3+1
   583  82b7 a001                   ldy #1
   584  82b9 b1fb                   lda (ptr1),y
   585  82bb 1014                   bpl +
   586                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   587  82bd 49ff                   eor #$FF ; inverse
   588  82bf 18                     clc
   589  82c0 6901                   adc #1 ; complete getting absolute value from two's complement
   590  82c2 85ff                   sta tmp
   591  82c4 38                     sec
   592  82c5 a526                   lda ptr3
   593  82c7 e5ff                   sbc tmp
   594  82c9 8526                   sta ptr3
   595  82cb b00d                   bcs ++
   596  82cd c627                   dec ptr3+1
   597  82cf 9009                   bcc ++
   598  82d1 18                 +   clc ; simple case of adding
   599  82d2 6526                   adc ptr3
   600  82d4 8526                   sta ptr3
   601  82d6 9002                   bcc ++
   602  82d8 e627                   inc ptr3+1
   603  82da a526               ++  lda ptr3
   604  82dc a627                   ldx ptr3+1
   605  82de 4c4783                 jmp disphexword
   606                          
   607                          dispModeZPX:
   608  82e1 205982                 jsr dispModeZP
   609  82e4 a92c                   lda #','
   610  82e6 20d2ff                 jsr charout
   611  82e9 a958                   lda #'X'
   612  82eb 4cd2ff                 jmp charout
   613                          
   614                          dispModeZPY:
   615  82ee 205982                 jsr dispModeZP
   616  82f1 a92c                   lda #','
   617  82f3 20d2ff                 jsr charout
   618  82f6 a959                   lda #'Y'
   619  82f8 4cd2ff                 jmp charout
   620                          
   621                          dispModeAbs:
   622  82fb a924                   lda #'$'
   623  82fd 20d2ff                 jsr charout
   624  8300 a001                   ldy #1
   625  8302 b1fb                   lda (ptr1),y
   626  8304 48                     pha
   627  8305 c8                     iny
   628  8306 b1fb                   lda (ptr1),y
   629  8308 aa                     tax
   630  8309 68                     pla
   631  830a 4c4783                 jmp disphexword
   632                          
   633                          dispModeAbsX:
   634  830d 20fb82                 jsr dispModeAbs
   635  8310 a92c                   lda #','
   636  8312 20d2ff                 jsr charout
   637  8315 a958                   lda #'X'
   638  8317 4cd2ff                 jmp charout
   639                          
   640                          dispModeAbsY:
   641  831a 20fb82                 jsr dispModeAbs
   642  831d a92c                   lda #','
   643  831f 20d2ff                 jsr charout
   644  8322 a959                   lda #'Y'
   645  8324 4cd2ff                 jmp charout
   646                          
   647                          dispModeInd:
   648  8327 a928                   lda #'('
   649  8329 20d2ff                 jsr charout
   650  832c 20fb82                 jsr dispModeAbs
   651  832f a929                   lda #')'
   652  8331 4cd2ff                 jmp charout
   653                          
   654                          dispbinbyte: ; .A 00..FF
   655  8334 a208                   ldx #8
   656  8336 85ff                   sta tmp
   657  8338 a930               -   lda #'0'
   658  833a 26ff                   rol tmp
   659  833c 9002                   bcc +
   660  833e a931                   lda #'1'
   661  8340 20d2ff             +   jsr charout
   662  8343 ca                     dex
   663  8344 d0f2                   bne -
   664  8346 60                     rts
   665                          
   666                          disphexword: ; .A low, .X high, 0000..FFFF
   667  8347 48                     pha
   668  8348 8a                     txa
   669  8349 204d83                 jsr disphexbyte
   670  834c 68                     pla
   671                              ;fall through to call again
   672                          
   673                          disphexbyte: ; .A 00..FF
   674  834d 48                     pha
   675  834e 4a                     lsr
   676  834f 4a                     lsr
   677  8350 4a                     lsr
   678  8351 4a                     lsr
   679  8352 205683                 jsr disphexnybble
   680  8355 68                     pla
   681                              ;fall through to call again
   682                          
   683                          disphexnybble: ; .A 0..F
   684  8356 290f                   and #$0F
   685  8358 0930                   ora #$30
   686  835a c93a                   cmp #$3A
   687  835c 9002                   bcc +
   688  835e 6906                   adc #$06
   689  8360 4cd2ff             +   jmp charout
   690                          
   691                          inputhexword: ; C set if fails
   692  8363 a900                   lda #0
   693  8365 85fb                   sta ptr1
   694  8367 85fc                   sta ptr1+1
   695                          
   696  8369 a904                   lda #4 ; word is at most 4 nybbles
   697  836b 85a3                   sta count
   698  836d 20a583             --  jsr inputhexnybble
   699  8370 b012                   bcs +
   700                          
   701                              ; shift nibble up
   702  8372 0a                     asl
   703  8373 0a                     asl
   704  8374 0a                     asl
   705  8375 0a                     asl
   706                          
   707  8376 a204                   ldx #4 ; 4 bits rotated into word
   708  8378 2a                 -   rol
   709  8379 26fb                   rol ptr1
   710  837b 26fc                   rol ptr1+1
   711  837d ca                     dex
   712  837e d0f8                   bne - ; repeat bits
   713                          
   714  8380 c6a3                   dec count
   715  8382 d0e9                   bne -- ; repeat nybbles
   716                          
   717  8384 a5a3               +   lda count
   718  8386 c904                   cmp #4 ; set C if 4, otherwise clear
   719  8388 60                     rts
   720                          
   721                          inputhexbyte:
   722  8389 20a583                 jsr inputhexnybble
   723  838c b016                   bcs ++
   724  838e 85ff                   sta tmp
   725  8390 20a583                 jsr inputhexnybble
   726  8393 9005                   bcc +
   727  8395 18                     clc ; allow single digit as byte
   728  8396 a5ff                   lda tmp
   729  8398 900a                   bcc ++
   730  839a 06ff               +   asl tmp
   731  839c 06ff                   asl tmp
   732  839e 06ff                   asl tmp
   733  83a0 06ff                   asl tmp
   734  83a2 05ff                   ora tmp ; necessary to assemble the two nybbles
   735  83a4 60                 ++  rts
   736                          
   737                          inputhexnybble:
   738  83a5 b90002                 lda $0200,y
   739  83a8 297f                   and #$7F
   740  83aa 38                     sec
   741  83ab e930                   sbc #$30
   742  83ad 9012                   bcc ++
   743  83af c90a                   cmp #10
   744  83b1 900c                   bcc +
   745  83b3 e907                   sbc #7
   746  83b5 900a                   bcc ++
   747  83b7 c90a                   cmp #10
   748  83b9 9006                   bcc ++
   749  83bb c910                   cmp #16
   750  83bd b002                   bcs ++
   751  83bf c8                 +   iny
   752  83c0 60                     rts
   753  83c1 38                 ++  sec
   754  83c2 60                     rts
   755                          
   756                          strout:
   757  83c3 8526                   sta ptr3
   758  83c5 8627                   stx ptr3+1
   759                          strout2:    
   760  83c7 a000                   ldy #0
   761  83c9 b126               -   lda (ptr3),y
   762  83cb f006                   beq +
   763  83cd 20d2ff                 jsr charout
   764  83d0 c8                     iny
   765  83d1 d0f6                   bne -
   766  83d3 98                 +   tya
   767  83d4 38                     sec
   768  83d5 6526                   adc ptr3
   769  83d7 8526                   sta ptr3
   770  83d9 9002                   bcc +
   771  83db e627                   inc ptr3+1
   772  83dd 60                 +   rts
   773                          
   774                          inputline:
   775                          !ifdef C64SCREEN {
   776  83de 4cbd80                 jmp inputlinec64
   777                          } else {
   778                              ldy #0
   779                          --  sty count
   780                          -   jsr getkey
   781                              beq -
   782                              ldy count
   783                          !ifdef MINIMUM {
   784                              cmp #8 ; backspace
   785                          } else {
   786                              cmp #20
   787                          }
   788                              bne +
   789                              cpy #0
   790                              beq -
   791                              dey
   792                          !if NEEDECHO = 1 {    
   793                              jsr charout
   794                          }
   795                              jmp --
   796                          +   cmp #13
   797                              beq +
   798                              cmp #' '
   799                              bcc -
   800                              cmp #128
   801                              bcs -
   802                          +
   803                          !if NEEDECHO = 1 {    
   804                              jsr charout
   805                          }
   806                              sta inputbuf,y
   807                              iny
   808                              cmp #13
   809                              bne --
   810                              rts
   811                          }
   812                          
   813                          parseline:
   814  83e1 c001                   cpy #1
   815  83e3 d003                   bne +
   816                          -
   817                          !ifdef C64SCREEN {   
   818  83e5 4c398c                 jmp newline
   819                          } else {
   820                              rts
   821                          }
   822  83e8 88                 +   dey
   823  83e9 84a4                   sty len
   824                              ; skip whitespace
   825                              ; check for address, put in ptr1
   826                              ; or check for dot, then require address put in ptr2
   827                              ; or check for ?, and optional parameter, execute help
   828                              ; check for whitespace
   829                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   830                              ; check for string, store at start of inputbuf
   831                              ; check for drive number
   832                              ; check for whitespace
   833                              ; check command ":rda?mls", execute command
   834  83eb a000                   ldy #0
   835  83ed 205b8b                 jsr skipspaces
   836  83f0 c4a4                   cpy len
   837  83f2 f0f1                   beq -
   838  83f4 20ff8a                 jsr chkcontinuedis
   839  83f7 d003                   bne +
   840  83f9 20238b                 jsr executedisassemble ; note won't return
   841  83fc 20118b             +   jsr chkcontinueasm
   842  83ff d003                   bne +
   843  8401 203187                 jsr continueassemble ; note won't return
   844  8404 206a8b             +   jsr chkdot
   845  8407 d003                   bne +
   846  8409 4cf084                 jmp executedot
   847  840c 20758b             +   jsr chkhelp
   848  840f d003                   bne +
   849  8411 4cb685                 jmp executehelp
   850                          +
   851                          !ifndef MINIMUM {
   852  8414 206180                 jsr chkextrac64 ; check syntax only available on C64
   853  8417 b014                   bcs + ; error if C set
   854  8419 f005                   beq ++ ; consumed if Z set, skip next test(s)
   855                          }    
   856  841b 20a58b                 jsr chkhexaddr1
   857  841e d003                   bne error
   858  8420 4c2684             ++  jmp executeaddr1
   859                          error:
   860  8423 4c328b                 jmp reporterr
   861                          
   862                          executeaddr1:
   863  8426 c4a4                   cpy len
   864  8428 d003                   bne +
   865  842a 4c7f84                 jmp executedisplay1
   866  842d 206a8b             +   jsr chkdot
   867  8430 d00f                   bne +
   868  8432 c4a4                   cpy len
   869  8434 f021                   beq executepagedisplay
   870  8436 20c58b                 jsr chkhexaddr2
   871  8439 d0e8                   bne error
   872  843b 18                     clc
   873  843c 66a7                   ror flag
   874  843e 4c6f84                 jmp executeaddr12
   875  8441 205b8b             +   jsr skipspaces
   876  8444 20808b                 jsr chkcolon
   877  8447 d003                   bne +
   878  8449 4cce84                 jmp executemodify
   879  844c 20088c             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   880                          !ifdef MINIMUM {
   881                              jmp reportnotimplemented
   882                          } else {
   883  844f 20e580                 jsr chkfilename
   884  8452 d0cf                   bne error
   885  8454 4cff84                 jmp executeloadfilename
   886                          }
   887                          
   888                          executepagedisplay:
   889  8457 a5fb                   lda ptr1
   890  8459 18                     clc
   891                          !ifdef MINIMUM {
   892                              adc #$5f
   893                          } else {
   894  845a 69b7                   adc #$b7
   895                          }
   896  845c 85fd                   sta ptr2
   897  845e a5fc                   lda ptr1+1
   898                          !ifdef MINIMUM {
   899                              adc #$01
   900                          } else {
   901  8460 6900                   adc #$00
   902                          }
   903  8462 85fe                   sta ptr2+1
   904  8464 9006                   bcc +
   905  8466 a9ff                   lda #$ff
   906  8468 85fd                   sta ptr2
   907  846a 85fe                   sta ptr2+1
   908  846c 38                 +   sec
   909  846d 66a7                   ror flag
   910                              ; fall through to executeaddr12
   911                          
   912                          executeaddr12:
   913  846f c4a4                   cpy len
   914  8471 d003                   bne +
   915  8473 4c8784                 jmp executedisplay12
   916                          !ifndef MINIMUM { // any C64
   917  8476 201481             +   jsr check_execute_save
   918  8479 f003                   beq ++
   919                          }
   920  847b 4c2b8b             +   jmp reportnotimplemented
   921  847e 60                 ++  rts
   922                          
   923                          executedisplay1:
   924  847f a5fb                   lda ptr1
   925  8481 85fd                   sta ptr2
   926  8483 a5fc                   lda ptr1+1
   927  8485 85fe                   sta ptr2+1
   928                              ; fall through executedisplay12
   929                          
   930                          executedisplay12:
   931  8487 a9ff                   lda #$ff
   932  8489 85a3                   sta count
   933  848b e6a3               -   inc count
   934  848d a5a3                   lda count
   935                          !ifdef MINIMUM {    
   936                              and #$0f
   937                          } else {
   938  848f 2907                   and #$07
   939                          }
   940  8491 d016                   bne +
   941  8493 a90d                   lda #13
   942  8495 20d2ff                 jsr charout
   943  8498 a5fb                   lda ptr1
   944  849a a6fc                   ldx ptr1+1
   945  849c 204783                 jsr disphexword
   946  849f a93a                   lda #':'
   947  84a1 20d2ff                 jsr charout
   948  84a4 a920                   lda #' '
   949  84a6 20d2ff                 jsr charout
   950  84a9 a000               +   ldy #0
   951  84ab b1fb                   lda (ptr1),y
   952  84ad 204d83                 jsr disphexbyte
   953  84b0 a920                   lda #' '
   954  84b2 20d2ff                 jsr charout
   955  84b5 e6fb                   inc ptr1
   956  84b7 d004                   bne +
   957  84b9 e6fc                   inc ptr1+1
   958  84bb f00e                   beq ++
   959  84bd 208d81             +   jsr compareptrs
   960  84c0 90c9                   bcc -
   961  84c2 f0c7                   beq -
   962  84c4 24a7                   bit flag
   963  84c6 1003                   bpl ++
   964                          !ifdef C64SCREEN {
   965  84c8 4cac80                 jmp display_page_displaymemory
   966                          }
   967  84cb 4c398c             ++  jmp newline
   968                          
   969                          executemodify:
   970  84ce 205b8b                 jsr skipspaces
   971  84d1 c4a4                   cpy len
   972  84d3 f018                   beq ++
   973  84d5 208b8b                 jsr chkhexbyteofsequence
   974  84d8 f003                   beq +
   975  84da 4c2384                 jmp error
   976  84dd 84ff               +   sty tmp
   977  84df a000                   ldy #0
   978  84e1 91fb                   sta (ptr1),y
   979  84e3 e6fb                   inc ptr1
   980  84e5 d002                   bne +
   981  84e7 e6fc                   inc ptr1+1
   982  84e9 a4ff               +   ldy tmp
   983  84eb d0e1                   bne executemodify
   984  84ed 4c398c             ++  jmp newline
   985                          
   986                          executedot:
   987  84f0 c4a4                   cpy len
   988  84f2 d003                   bne +
   989  84f4 4c5784                 jmp executepagedisplay
   990  84f7 200285             +   jsr chkloadregister
   991  84fa d000                   bne +
   992  84fc 205e85             +   jsr chkloadregisters
   993                          
   994                          executeloadfilename:
   995                          executeaddr1cmd:
   996  84ff 4c2b8b             +   jmp reportnotimplemented
   997                          
   998                          chkloadregister:
   999  8502 200c85                 jsr chkload_a_x_y_s_p
  1000  8505 205885                 jsr chkload_pc
  1001  8508 205b85                 jsr chkload_n_v_b_d_i_z_c
  1002  850b 60                     rts
  1003                          
  1004                          chkload_a_x_y_s_p:
  1005  850c 84ff                   sty tmp
  1006  850e b90002                 lda inputbuf, y
  1007  8511 a200                   ldx #0
  1008  8513 c941                   cmp #'A'
  1009  8515 f014                   beq +
  1010  8517 e8                     inx
  1011  8518 c958                   cmp #'X'
  1012  851a f00f                   beq +
  1013  851c e8                     inx
  1014  851d c959                   cmp #'Y'
  1015  851f f00a                   beq +
  1016  8521 e8                     inx
  1017  8522 c953                   cmp #'S'
  1018  8524 f005                   beq +
  1019  8526 e8                     inx
  1020  8527 c950                   cmp #'P'
  1021  8529 d02a                   bne ++
  1022  852b c8                 +   iny
  1023  852c b90002                 lda inputbuf, y    
  1024                          !ifndef MINIMUM {
  1025  852f c9a0                   cmp #$A0
  1026  8531 f008                   beq +
  1027                          }    
  1028  8533 c920                   cmp #' '
  1029  8535 f004                   beq +
  1030  8537 c93a                   cmp #':'
  1031  8539 d01a                   bne ++
  1032  853b c8                 +   iny
  1033  853c 205b8b                 jsr skipspaces
  1034  853f 8624                   stx mode
  1035  8541 20ae8b                 jsr chkhexbyte
  1036  8544 d00f                   bne ++
  1037  8546 a624                   ldx mode
  1038  8548 9d9a93                 sta registerA, x
  1039                          !ifndef MINIMUM {
  1040  854b 20398c                 jsr newline
  1041                          }    
  1042                              ; pop call stack so return to input_loop
  1043  854e 68                     pla
  1044  854f 68                     pla
  1045  8550 68                     pla
  1046  8551 68                     pla
  1047  8552 4c5785                 jmp +++
  1048  8555 a4ff               ++  ldy tmp ; not Z (NE)
  1049  8557 60                 +++ rts
  1050                          
  1051                          chkload_pc:
  1052  8558 a901                   lda #1 ; not Z (NE)
  1053  855a 60                     rts
  1054                          
  1055                          chkload_n_v_b_d_i_z_c:
  1056  855b a901                   lda #1 ; not Z (NE)
  1057  855d 60                     rts
  1058                          
  1059                          chkloadregisters:
  1060  855e 20a58b                 jsr chkhexword
  1061  8561 d052                   bne ++
  1062  8563 a5fb                   lda ptr1
  1063  8565 8d9f93                 sta registerPC
  1064  8568 a5fc                   lda ptr1+1
  1065  856a 8da093                 sta registerPC+1
  1066  856d 20498b                 jsr chkspace
  1067  8570 d03c                   bne +
  1068  8572 20e68b                 jsr chkbinbyte
  1069  8575 d037                   bne +
  1070  8577 8d9e93                 sta registerSR
  1071  857a 20498b                 jsr chkspace
  1072  857d d02f                   bne +
  1073  857f 20ae8b                 jsr chkhexbyte
  1074  8582 d02a                   bne +
  1075  8584 8d9a93                 sta registerA
  1076  8587 20498b                 jsr chkspace
  1077  858a d022                   bne +
  1078  858c 20ae8b                 jsr chkhexbyte
  1079  858f d01d                   bne +
  1080  8591 8d9b93                 sta registerX
  1081  8594 20498b                 jsr chkspace
  1082  8597 d015                   bne +
  1083  8599 20ae8b                 jsr chkhexbyte
  1084  859c d010                   bne +
  1085  859e 8d9c93                 sta registerY
  1086  85a1 20498b                 jsr chkspace
  1087  85a4 d008                   bne +
  1088  85a6 20ae8b                 jsr chkhexbyte
  1089  85a9 d003                   bne +
  1090  85ab 8d9d93                 sta registerSP
  1091                              ; don't return to executedot
  1092  85ae 68                 +   pla
  1093  85af 68                     pla
  1094                          !ifdef C64SCREEN {   
  1095  85b0 20398c                 jsr newline
  1096                          }   
  1097  85b3 a900                   lda #0 ; set Z
  1098  85b5 60                 ++  rts
  1099                          
  1100                          executehelp:
  1101                          !ifdef C64SCREEN {
  1102  85b6 20398c                 jsr newline
  1103                          }
  1104  85b9 c4a4                   cpy len
  1105  85bb d003                   bne +
  1106  85bd 4ce685                 jmp displayhelp
  1107  85c0 205b8b             +   jsr skipspaces
  1108  85c3 200186                 jsr chkhelpinstructions
  1109  85c6 d003                   bne +
  1110  85c8 4c3d86                 jmp displayinstructions
  1111  85cb 201b86             +   jsr chkhelpmodes
  1112  85ce d003                   bne +
  1113  85d0 4c5486                 jmp displaymodes
  1114  85d3 206b8a             +   jsr chkinstruction
  1115  85d6 d003                   bne +
  1116  85d8 4c0487                 jmp executehelpinstruction
  1117  85db 200e86             +   jsr chkhelpregisters
  1118  85de d003                   bne +
  1119  85e0 4c588c                 jmp execute_display_registers
  1120  85e3 4c2b8b             +   jmp reportnotimplemented
  1121                          
  1122                          displayhelp:
  1123  85e6 a943                   lda #<generalhelp
  1124  85e8 a291                   ldx #>generalhelp
  1125  85ea 20c383                 jsr strout
  1126  85ed a938                   lda #<generalhelp2
  1127  85ef a292                   ldx #>generalhelp2
  1128  85f1 20c383                 jsr strout
  1129  85f4 a902                   lda #<generalhelp3
  1130  85f6 a293                   ldx #>generalhelp3
  1131  85f8 20c383                 jsr strout
  1132                          !ifndef MINIMUM { // any C64
  1133  85fb 209780                 jsr display_extra_help
  1134                          }
  1135  85fe 4c398c                 jmp newline
  1136                          
  1137                          chkhelpinstructions:
  1138  8601 b90002                 lda inputbuf, y
  1139  8604 c941                   cmp #'A'
  1140  8606 d005                   bne +
  1141  8608 b90102                 lda inputbuf+1, y
  1142  860b c90d                   cmp #13
  1143                              ; no need to increment y if found, done parsing line
  1144  860d 60                 +   rts
  1145                          
  1146                          chkhelpregisters:
  1147  860e b90002                 lda inputbuf, y
  1148  8611 c92e                   cmp #'.'
  1149  8613 d005                   bne +
  1150  8615 b90102                 lda inputbuf+1, y
  1151  8618 c90d                   cmp #13
  1152  861a 60                 +   rts
  1153                          
  1154                          chkhelpmodes:
  1155  861b a973                   lda #<modes_keyword
  1156  861d a293                   ldx #>modes_keyword
  1157                              ; fall through to chkkeyword
  1158                          
  1159                          chkkeyword:
  1160  861f 84a3                   sty count
  1161  8621 8526                   sta ptr3
  1162  8623 8627                   stx ptr3+1
  1163  8625 a6a3                   ldx count
  1164  8627 a000                   ldy #0
  1165  8629 bd0002             -   lda inputbuf, x
  1166  862c d126                   cmp (ptr3),y
  1167  862e d008                   bne +
  1168  8630 e8                     inx
  1169  8631 c8                     iny
  1170  8632 e4a4                   cpx len
  1171  8634 d0f3                   bne -
  1172  8636 b126                   lda (ptr3),y ; matched if end of string, will set Z
  1173  8638 08                 +   php ; save Z
  1174  8639 a4a3                   ldy count
  1175  863b 28                     plp ; restore Z
  1176  863c 60                     rts
  1177                          
  1178                          displayinstructions:
  1179  863d a038                   ldy #ninst
  1180  863f a200                   ldx #0
  1181  8641 8a                 -   txa
  1182  8642 48                     pha
  1183  8643 20d881                 jsr dispinst
  1184  8646 a920                   lda #' '
  1185  8648 20d2ff                 jsr charout
  1186  864b 68                     pla
  1187  864c aa                     tax
  1188  864d e8                     inx
  1189  864e 88                     dey
  1190  864f d0f0                   bne -
  1191  8651 4c398c                 jmp newline
  1192                          
  1193                          displaymodes:
  1194  8654 38                     sec
  1195  8655 a900                   lda #0
  1196  8657 48                 -   pha
  1197  8658 aa                     tax
  1198  8659 bdb18d                 lda mode_sorted, x
  1199  865c 206986                 jsr dispmode
  1200  865f 68                     pla
  1201  8660 18                     clc
  1202  8661 6901                   adc #1
  1203  8663 c90d                   cmp #nmodes
  1204  8665 90f0                   bcc -
  1205  8667 18                     clc
  1206  8668 60                     rts
  1207                          
  1208                          dispmode:
  1209  8669 c90d                   cmp #nmodes
  1210  866b b008                   bcs +
  1211  866d 8524                   sta mode
  1212  866f 20b186                 jsr disp_modename_and_example
  1213  8672 4c7686                 jmp dispmodeinstructions
  1214  8675 60                 +   rts
  1215                          
  1216                          dispmodeinstructions:
  1217                          !ifdef C64SCREEN {
  1218                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1219  8676 a524                   lda mode
  1220  8678 c903                   cmp #3
  1221  867a d005                   bne +
  1222  867c a920                   lda #' '
  1223  867e 4cd2ff                 jmp charout
  1224                          }
  1225                              ; display instructions with this mode
  1226  8681 a000               +   ldy #0
  1227  8683 8423               --  sty inidx
  1228  8685 a200                   ldx #0
  1229  8687 86ff               -   stx tmp
  1230  8689 a523                   lda inidx
  1231  868b dd478f                 cmp instidx, x
  1232  868e d014                   bne ++
  1233  8690 bdde8f                 lda modeidx, x
  1234  8693 c524                   cmp mode
  1235  8695 d00d                   bne ++
  1236  8697 a920                   lda #' '
  1237  8699 20d2ff                 jsr charout
  1238  869c bd478f                 lda instidx, x
  1239  869f 20d881                 jsr dispinst
  1240  86a2 a6ff                   ldx tmp
  1241  86a4 e8                 ++  inx
  1242  86a5 e097                   cpx #nopcodes
  1243  86a7 90de                   bcc -
  1244  86a9 c8                     iny
  1245  86aa c038                   cpy #ninst
  1246  86ac d0d5                   bne --
  1247  86ae 4c398c                 jmp newline
  1248                          
  1249                          disp_modename_and_example:
  1250  86b1 0a                     asl
  1251  86b2 aa                     tax
  1252  86b3 bd968e                 lda modes, x
  1253  86b6 48                     pha
  1254  86b7 bd978e                 lda modes+1, x
  1255  86ba aa                     tax
  1256                          !ifdef C64SCREEN {
  1257  86bb a912                   lda #18
  1258  86bd 20d2ff                 jsr charout
  1259                          }    
  1260  86c0 68                     pla
  1261  86c1 20c383                 jsr strout
  1262  86c4 a920                   lda #' '
  1263  86c6 20d2ff                 jsr charout
  1264  86c9 20c783                 jsr strout2
  1265                          !ifdef C64SCREEN {    
  1266  86cc a992                   lda #146
  1267  86ce 20d2ff                 jsr charout
  1268                          }   
  1269  86d1 60                     rts
  1270                          
  1271                          disp_modename_instruction_example:
  1272  86d2 0a                     asl
  1273  86d3 aa                     tax
  1274  86d4 bd968e                 lda modes, x
  1275  86d7 48                     pha
  1276  86d8 bd978e                 lda modes+1, x
  1277  86db aa                     tax
  1278  86dc 68                     pla
  1279  86dd 20c383                 jsr strout ; mode name
  1280  86e0 a526                   lda ptr3
  1281  86e2 48                     pha
  1282  86e3 a527                   lda ptr3+1
  1283  86e5 48                     pha
  1284  86e6 a93a                   lda #':'
  1285  86e8 20d2ff                 jsr charout
  1286  86eb a920                   lda #' '
  1287  86ed 20d2ff                 jsr charout
  1288  86f0 a523                   lda inidx
  1289  86f2 20d881                 jsr dispinst ; instruction
  1290  86f5 a920                   lda #' '
  1291  86f7 20d2ff                 jsr charout
  1292  86fa 68                     pla
  1293  86fb 8527                   sta ptr3+1
  1294  86fd 68                     pla
  1295  86fe 8526                   sta ptr3
  1296  8700 20c783                 jsr strout2 ; example
  1297  8703 60                     rts
  1298                          
  1299                          
  1300                          executehelpinstruction:
  1301  8704 a000                   ldy #0
  1302  8706 8422               -   sty opidx
  1303  8708 b9478f                 lda instidx, y
  1304  870b c523                   cmp inidx
  1305  870d d01a                   bne +
  1306  870f b9de8f                 lda modeidx, y
  1307  8712 8524                   sta mode
  1308  8714 a622                   ldx opidx
  1309  8716 bdb08e                 lda opcodes, x
  1310  8719 204d83                 jsr disphexbyte
  1311  871c a920                   lda #' '
  1312  871e 20d2ff                 jsr charout
  1313  8721 a524                   lda mode
  1314  8723 20d286                 jsr disp_modename_instruction_example
  1315  8726 20398c                 jsr newline
  1316  8729 a422               +   ldy opidx
  1317  872b c8                     iny
  1318  872c c097                   cpy #nopcodes
  1319  872e 90d6                   bcc -
  1320  8730 60                     rts
  1321                          
  1322                          continueassemble:
  1323                          !ifdef C64SCREEN {   
  1324  8731 20cb80                 jsr continueassemblec64
  1325                          }
  1326                              ; continue...
  1327                          
  1328                          executeassemble:
  1329  8734 68                     pla ; remove low byte return address
  1330  8735 68                     pla ; return high byte return address
  1331                          !ifdef C64SCREEN {    
  1332  8736 a914                   lda #20
  1333  8738 20d2ff                 jsr charout
  1334  873b 20d2ff                 jsr charout
  1335                          } else {
  1336                              lda ptr1
  1337                              ldx ptr1+1
  1338                              jsr disphexword
  1339                              lda #' '
  1340                              jsr charout
  1341                          }
  1342                              ; save current pointer
  1343  873e a5fb               --  lda ptr1
  1344  8740 a6fc                   ldx ptr1+1
  1345  8742 8526                   sta ptr3
  1346  8744 8627                   stx ptr3+1
  1347  8746 20de83                 jsr inputline
  1348  8749 c001                   cpy #1
  1349  874b f048                   beq ++
  1350  874d 88                     dey
  1351  874e 84a4                   sty len
  1352  8750 a000                   ldy #0
  1353  8752 205b8b                 jsr skipspaces
  1354  8755 c4a4                   cpy len
  1355  8757 f03c                   beq ++
  1356                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1357                              ;jsr skipspaces
  1358  8759 206b8a                 jsr chkinstruction
  1359  875c f00b                   beq +
  1360  875e a526               -   lda ptr3
  1361  8760 85fb                   sta ptr1
  1362  8762 a527                   lda ptr3+1
  1363  8764 85fc                   sta ptr1+1
  1364  8766 4c2384                 jmp error
  1365  8769 20bf87             +   jsr chkaddressing
  1366  876c d0f0                   bne -
  1367  876e 209c8a                 jsr find_inst_and_mode
  1368  8771 d0eb                   bne -
  1369  8773 209887                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1370  8776 18                     clc
  1371  8777 a525                   lda size
  1372  8779 6526                   adc ptr3
  1373  877b 85fb                   sta ptr1
  1374  877d a527                   lda ptr3+1
  1375  877f 6900                   adc #0
  1376  8781 85fc                   sta ptr1+1
  1377                          !ifdef C64SCREEN {    
  1378  8783 20398c                 jsr newline
  1379                          }
  1380  8786 a5fb                   lda ptr1
  1381  8788 a6fc                   ldx ptr1+1
  1382  878a 204783                 jsr disphexword
  1383  878d a920                   lda #' '
  1384  878f 20d2ff                 jsr charout
  1385  8792 4c3e87                 jmp --
  1386                          ++  
  1387                          !ifdef C64SCREEN {
  1388  8795 4c398c                 jmp newline
  1389                          } else {
  1390                              rts
  1391                          }
  1392                          
  1393                          store_assembly:
  1394  8798 a622                   ldx opidx
  1395  879a bdb08e                 lda opcodes, x
  1396  879d a000                   ldy #0
  1397  879f 9126                   sta (ptr3), y
  1398  87a1 c8                     iny
  1399  87a2 a625                   ldx size
  1400  87a4 e001                   cpx #1
  1401  87a6 f016                   beq ++
  1402  87a8 e002               +   cpx #2
  1403  87aa d005                   bne +
  1404  87ac a5a6                   lda tmp2
  1405  87ae 9126                   sta (ptr3), y
  1406  87b0 60                     rts
  1407  87b1 e003               +   cpx #3
  1408  87b3 d009                   bne ++
  1409  87b5 a5fb                   lda ptr1
  1410  87b7 9126                   sta (ptr3), y
  1411  87b9 c8                     iny
  1412  87ba a5fc                   lda ptr1+1
  1413  87bc 9126                   sta (ptr3), y
  1414  87be 60                 ++  rts
  1415                          
  1416                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1417  87bf 205b8b                 jsr skipspaces
  1418  87c2 a200                   ldx #0
  1419  87c4 8624                   stx mode
  1420  87c6 202188                 jsr chkaccumulator
  1421  87c9 f051                   beq +
  1422  87cb e624                   inc mode
  1423  87cd c4a4                   cpy len ; chknone
  1424  87cf f04b                   beq +
  1425  87d1 e624                   inc mode
  1426  87d3 204588                 jsr chkimmediate
  1427  87d6 f044                   beq +
  1428  87d8 e624                   inc mode
  1429  87da 206988                 jsr chkindirectx
  1430  87dd f03d                   beq +
  1431  87df e624                   inc mode
  1432  87e1 20ae88                 jsr chkindirecty
  1433  87e4 f036                   beq +
  1434  87e6 e624                   inc mode
  1435  87e8 20f388                 jsr chkrelative
  1436  87eb f02f                   beq +
  1437  87ed e624                   inc mode
  1438  87ef 204e89                 jsr chkzeropage
  1439  87f2 f028                   beq +
  1440  87f4 e624                   inc mode
  1441  87f6 206789                 jsr chkzeropagex
  1442  87f9 f021                   beq +
  1443  87fb e624                   inc mode
  1444  87fd 209689                 jsr chkzeropagey
  1445  8800 f01a                   beq +
  1446  8802 e624                   inc mode
  1447  8804 20c589                 jsr chkabsolute
  1448  8807 f013                   beq +
  1449  8809 e624                   inc mode
  1450  880b 20de89                 jsr chkabsolutex
  1451  880e f00c                   beq +
  1452  8810 e624                   inc mode
  1453  8812 200d8a                 jsr chkabsolutey
  1454  8815 f005                   beq +
  1455  8817 e624                   inc mode
  1456  8819 203c8a                 jsr chkindirect
  1457  881c 08                 +   php ; save Z
  1458  881d a524                   lda mode
  1459  881f 28                     plp ; restore Z 
  1460  8820 60                     rts
  1461                          
  1462                          chkaccumulator:
  1463  8821 c4a4                   cpy len
  1464  8823 d013                   bne +
  1465  8825 a523                   lda inidx
  1466  8827 c902                   cmp #2 ; ASL
  1467  8829 f019                   beq ++
  1468  882b c920                   cmp #32 ; LSR
  1469  882d f015                   beq ++
  1470  882f c927                   cmp #39 ; ROL
  1471  8831 f011                   beq ++
  1472  8833 c928                   cmp #40 ; ROR
  1473  8835 4c4488                 jmp ++
  1474  8838 b90002             +   lda inputbuf, y
  1475  883b c941                   cmp #'A'
  1476  883d d005                   bne ++
  1477  883f b90102                 lda inputbuf+1,y
  1478  8842 c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1479  8844 60                 ++  rts
  1480                          
  1481                          chkimmediate:
  1482  8845 84a5                   sty savepos
  1483  8847 b90002                 lda inputbuf, y
  1484  884a c923                   cmp #'#'
  1485  884c d016                   bne ++
  1486  884e c8                     iny
  1487  884f 205b8b                 jsr skipspaces
  1488  8852 b90002                 lda inputbuf, y
  1489  8855 c924                   cmp #'$'
  1490  8857 d001                   bne +
  1491  8859 c8                     iny
  1492  885a 20ae8b             +   jsr chkhexbyte
  1493  885d d005                   bne ++
  1494  885f c4a4               +   cpy len
  1495  8861 d001                   bne ++
  1496  8863 60                     rts
  1497  8864 a4a5               ++  ldy savepos
  1498  8866 a201                   ldx #1 ; Z false (NE)
  1499  8868 60                     rts
  1500                          
  1501                          chkindirectx:
  1502  8869 84a5                   sty savepos
  1503  886b b90002                 lda inputbuf, y
  1504  886e c928                   cmp #'('
  1505  8870 d037                   bne ++
  1506  8872 c8                     iny
  1507  8873 205b8b                 jsr skipspaces
  1508  8876 b90002                 lda inputbuf, y
  1509  8879 c924                   cmp #'$'
  1510  887b d001                   bne +
  1511  887d c8                     iny
  1512  887e 20ae8b             +   jsr chkhexbyte
  1513  8881 d026                   bne ++
  1514  8883 205b8b                 jsr skipspaces
  1515  8886 b90002                 lda inputbuf, y
  1516  8889 c92c                   cmp #','
  1517  888b d01c                   bne ++
  1518  888d c8                     iny
  1519  888e 205b8b                 jsr skipspaces
  1520  8891 b90002                 lda inputbuf, y
  1521  8894 c958                   cmp #'X'
  1522  8896 d011                   bne ++
  1523  8898 c8                     iny
  1524  8899 205b8b                 jsr skipspaces
  1525  889c b90002                 lda inputbuf, y
  1526  889f c929                   cmp #')'
  1527  88a1 d006                   bne ++
  1528  88a3 c8                     iny
  1529  88a4 c4a4                   cpy len
  1530  88a6 d001                   bne ++
  1531  88a8 60                     rts
  1532  88a9 a4a5               ++  ldy savepos
  1533  88ab a201                   ldx #1 ; Z false (NE)
  1534  88ad 60                     rts
  1535                          
  1536                          chkindirecty:
  1537  88ae 84a5                   sty savepos
  1538  88b0 b90002                 lda inputbuf, y
  1539  88b3 c928                   cmp #'('
  1540  88b5 d037                   bne ++
  1541  88b7 c8                     iny
  1542  88b8 205b8b                 jsr skipspaces
  1543  88bb b90002                 lda inputbuf, y
  1544  88be c924                   cmp #'$'
  1545  88c0 d001                   bne +
  1546  88c2 c8                     iny
  1547  88c3 20ae8b             +   jsr chkhexbyte
  1548  88c6 d026                   bne ++
  1549  88c8 205b8b                 jsr skipspaces
  1550  88cb b90002                 lda inputbuf, y
  1551  88ce c929                   cmp #')'
  1552  88d0 d01c                   bne ++
  1553  88d2 c8                     iny
  1554  88d3 205b8b                 jsr skipspaces
  1555  88d6 b90002                 lda inputbuf, y
  1556  88d9 c92c                   cmp #','
  1557  88db d011                   bne ++
  1558  88dd c8                     iny
  1559  88de 205b8b                 jsr skipspaces
  1560  88e1 b90002                 lda inputbuf, y
  1561  88e4 c959                   cmp #'Y'
  1562  88e6 d006                   bne ++
  1563  88e8 c8                     iny
  1564  88e9 c4a4                   cpy len
  1565  88eb d001                   bne ++
  1566  88ed 60                     rts
  1567  88ee a4a5               ++  ldy savepos
  1568  88f0 a201                   ldx #1 ; Z false (NE)
  1569  88f2 60                     rts
  1570                          
  1571                          chkrelative:
  1572  88f3 84a5                   sty savepos
  1573  88f5 a623                   ldx inidx
  1574  88f7 e006                   cpx #6 ; BIT
  1575  88f9 f01e                   beq ++
  1576  88fb bdef8c                 lda inst0, x
  1577  88fe c942                   cmp #'B'
  1578  8900 d017                   bne ++
  1579  8902 b90002                 lda inputbuf, y
  1580  8905 c924                   cmp #'$'
  1581  8907 d001                   bne +
  1582  8909 c8                     iny
  1583  890a 20a58b             +   jsr chkhexword
  1584  890d d00a                   bne ++
  1585  890f c4a4                   cpy len
  1586  8911 d006                   bne ++
  1587  8913 201e89                 jsr computeoffset
  1588  8916 d001                   bne ++
  1589  8918 60                     rts ; Z true (EQ)
  1590  8919 a4a5               ++  ldy savepos
  1591  891b a201                   ldx #1 ; Z false (NE)
  1592  891d 60                     rts
  1593                          
  1594                          computeoffset:
  1595                          ;   compute next address
  1596  891e a527                   lda ptr3+1
  1597  8920 85fe                   sta ptr2+1
  1598  8922 a526                   lda ptr3
  1599  8924 18                     clc
  1600  8925 6902                   adc #2
  1601  8927 85fd                   sta ptr2
  1602  8929 9002                   bcc +
  1603  892b e6fe                   inc ptr2+1
  1604                          +  ; subtract argument
  1605  892d 38                     sec
  1606  892e a5fb                   lda ptr1
  1607  8930 e5fd                   sbc ptr2
  1608  8932 85a6                   sta tmp2
  1609  8934 a5fc                   lda ptr1+1
  1610  8936 e5fe                   sbc ptr2+1
  1611  8938 f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1612  893a c9ff                   cmp #$FF
  1613  893c d00d                   bne failedoffset ; 0 and FF were only options so fail
  1614                              ; chkeck negative offset
  1615  893e a5a6                   lda tmp2
  1616  8940 3006                   bmi successoffset ; branch if signed byte is negative
  1617  8942 1007                   bpl failedoffset ; otherwise fail
  1618                          chkoffsetto127:
  1619  8944 a5a6                   lda tmp2
  1620  8946 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1621                          successoffset:    
  1622  8948 a900                   lda #0 ; Z true (EQ)
  1623  894a 60                     rts
  1624                          failedoffset:
  1625  894b a901                   lda #1 ; Z false (NE)
  1626  894d 60                     rts
  1627                          
  1628                          chkzeropage:
  1629  894e 84a5                   sty savepos
  1630  8950 b90002                 lda inputbuf, y
  1631  8953 c924                   cmp #'$'
  1632  8955 d001                   bne +
  1633  8957 c8                     iny
  1634  8958 20ae8b             +   jsr chkhexbyte
  1635  895b d005                   bne ++
  1636  895d c4a4                   cpy len
  1637  895f d001                   bne ++
  1638  8961 60                     rts ; Z true (EQ)
  1639  8962 a4a5               ++  ldy savepos
  1640  8964 a201                   ldx #1 ; Z false (NE)
  1641  8966 60                     rts
  1642                          
  1643                          chkzeropagex:
  1644  8967 84a5                   sty savepos
  1645  8969 b90002                 lda inputbuf, y
  1646  896c c924                   cmp #'$'
  1647  896e d001                   bne +
  1648  8970 c8                     iny
  1649  8971 20ae8b             +   jsr chkhexbyte
  1650  8974 d01b                   bne ++
  1651  8976 205b8b                 jsr skipspaces
  1652  8979 b90002                 lda inputbuf, y
  1653  897c c92c                   cmp #','
  1654  897e d011                   bne ++
  1655  8980 c8                     iny
  1656  8981 205b8b                 jsr skipspaces
  1657  8984 b90002                 lda inputbuf, y
  1658  8987 c958                   cmp #'X'
  1659  8989 d006                   bne ++
  1660  898b c8                     iny
  1661  898c c4a4                   cpy len
  1662  898e d001                   bne ++
  1663  8990 60                     rts ; Z true (EQ)
  1664  8991 a4a5               ++  ldy savepos
  1665  8993 a201                   ldx #1 ; Z false (NE)
  1666  8995 60                     rts
  1667                          
  1668                          chkzeropagey:
  1669  8996 84a5                   sty savepos
  1670  8998 b90002                 lda inputbuf, y
  1671  899b c924                   cmp #'$'
  1672  899d d001                   bne +
  1673  899f c8                     iny
  1674  89a0 20ae8b             +   jsr chkhexbyte
  1675  89a3 d01b                   bne ++
  1676  89a5 205b8b                 jsr skipspaces
  1677  89a8 b90002                 lda inputbuf, y
  1678  89ab c92c                   cmp #','
  1679  89ad d011                   bne ++
  1680  89af c8                     iny
  1681  89b0 205b8b                 jsr skipspaces
  1682  89b3 b90002                 lda inputbuf, y
  1683  89b6 c959                   cmp #'Y'
  1684  89b8 d006                   bne ++
  1685  89ba c8                     iny
  1686  89bb c4a4                   cpy len
  1687  89bd d001                   bne ++
  1688  89bf 60                     rts ; Z true (EQ)
  1689  89c0 a4a5               ++  ldy savepos
  1690  89c2 a201                   ldx #1 ; Z false (NE)
  1691  89c4 60                     rts
  1692                          
  1693                          chkabsolute:
  1694  89c5 84a5                   sty savepos
  1695  89c7 b90002                 lda inputbuf, y
  1696  89ca c924                   cmp #'$'
  1697  89cc d001                   bne +
  1698  89ce c8                     iny
  1699  89cf 20a58b             +   jsr chkhexword
  1700  89d2 d005                   bne ++
  1701  89d4 c4a4                   cpy len
  1702  89d6 d001                   bne ++
  1703  89d8 60                     rts ; Z true (EQ)
  1704  89d9 a4a5               ++  ldy savepos
  1705  89db a201                   ldx #1 ; Z false (NE)
  1706  89dd 60                     rts
  1707                          
  1708                          chkabsolutex:
  1709  89de 84a5                   sty savepos
  1710  89e0 b90002                 lda inputbuf, y
  1711  89e3 c924                   cmp #'$'
  1712  89e5 d001                   bne +
  1713  89e7 c8                     iny
  1714  89e8 20a58b             +   jsr chkhexword
  1715  89eb d01b                   bne ++
  1716  89ed 205b8b                 jsr skipspaces
  1717  89f0 b90002                 lda inputbuf, y
  1718  89f3 c92c                   cmp #','
  1719  89f5 d011                   bne ++
  1720  89f7 c8                     iny
  1721  89f8 205b8b                 jsr skipspaces
  1722  89fb b90002                 lda inputbuf, y
  1723  89fe c958                   cmp #'X'
  1724  8a00 d006                   bne ++
  1725  8a02 c8                     iny
  1726  8a03 c4a4                   cpy len
  1727  8a05 d001                   bne ++
  1728  8a07 60                     rts ; Z true (EQ)
  1729  8a08 a4a5               ++  ldy savepos
  1730  8a0a a201                   ldx #1 ; Z false (NE)
  1731  8a0c 60                     rts
  1732                          
  1733                          chkabsolutey:
  1734  8a0d 84a5                   sty savepos
  1735  8a0f b90002                 lda inputbuf, y
  1736  8a12 c924                   cmp #'$'
  1737  8a14 d001                   bne +
  1738  8a16 c8                     iny
  1739  8a17 20a58b             +   jsr chkhexword
  1740  8a1a d01b                   bne ++
  1741  8a1c 205b8b                 jsr skipspaces
  1742  8a1f b90002                 lda inputbuf, y
  1743  8a22 c92c                   cmp #','
  1744  8a24 d011                   bne ++
  1745  8a26 c8                     iny
  1746  8a27 205b8b                 jsr skipspaces
  1747  8a2a b90002                 lda inputbuf, y
  1748  8a2d c959                   cmp #'Y'
  1749  8a2f d006                   bne ++
  1750  8a31 c8                     iny
  1751  8a32 c4a4                   cpy len
  1752  8a34 d001                   bne ++
  1753  8a36 60                     rts ; Z true (EQ)
  1754  8a37 a4a5               ++  ldy savepos
  1755  8a39 a201                   ldx #1 ; Z false (NE)
  1756  8a3b 60                     rts
  1757                          
  1758                          chkindirect:
  1759  8a3c 84a5                   sty savepos
  1760  8a3e b90002                 lda inputbuf, y
  1761  8a41 c928                   cmp #'('
  1762  8a43 d021                   bne ++
  1763  8a45 c8                     iny
  1764  8a46 205b8b                 jsr skipspaces
  1765  8a49 b90002                 lda inputbuf, y
  1766  8a4c c924                   cmp #'$'
  1767  8a4e d001                   bne +
  1768  8a50 c8                     iny
  1769  8a51 20a58b             +   jsr chkhexword
  1770  8a54 d010                   bne ++
  1771  8a56 205b8b                 jsr skipspaces
  1772  8a59 b90002                 lda inputbuf, y
  1773  8a5c c929                   cmp #')'
  1774  8a5e d006                   bne ++
  1775  8a60 c8                     iny
  1776  8a61 c4a4                   cpy len
  1777  8a63 d001                   bne ++
  1778  8a65 60                     rts ; Z true (EQ)
  1779  8a66 a4a5               ++  ldy savepos
  1780  8a68 a201                   ldx #1 ; Z false (NE)
  1781  8a6a 60                     rts
  1782                          
  1783                          chkinstruction:
  1784  8a6b c4a4                   cpy len
  1785  8a6d f02a                   beq ++
  1786  8a6f 84ff                   sty tmp
  1787  8a71 a237                   ldx #(ninst-1)
  1788  8a73 b90002             -   lda inputbuf,y
  1789  8a76 ddef8c                 cmp inst0,x
  1790  8a79 d019                   bne +
  1791  8a7b c8                     iny
  1792  8a7c b90002                 lda inputbuf,y
  1793  8a7f dd278d                 cmp inst1,x
  1794  8a82 d010                   bne +
  1795  8a84 c8                     iny
  1796  8a85 b90002                 lda inputbuf,y
  1797  8a88 dd5f8d                 cmp inst2,x
  1798  8a8b d007                   bne +
  1799  8a8d c8                     iny
  1800  8a8e 8a                     txa
  1801  8a8f 8523                   sta inidx
  1802  8a91 a200                   ldx #0
  1803  8a93 60                     rts
  1804  8a94 a4ff               +   ldy tmp
  1805  8a96 ca                     dex
  1806  8a97 10da                   bpl -
  1807  8a99 a201               ++  ldx #1 ; Z false (NE)
  1808  8a9b 60                     rts
  1809                          
  1810                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1811                              ; and allows mode promotion
  1812  8a9c 20c08a                 jsr find_inst_and_mode2
  1813  8a9f f01e                   beq ++
  1814  8aa1 a524                   lda mode
  1815  8aa3 c906                   cmp #6
  1816  8aa5 9018                   bcc ++
  1817  8aa7 c90a                   cmp #10
  1818  8aa9 b012                   bcs +
  1819  8aab 6903                   adc #3
  1820  8aad 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1821  8aaf 20c08a                 jsr find_inst_and_mode2 ; try again once
  1822  8ab2 d00b                   bne ++
  1823  8ab4 a5a6                   lda tmp2
  1824  8ab6 85fb                   sta ptr1
  1825  8ab8 a900                   lda #0
  1826  8aba 85fc                   sta ptr1+1
  1827  8abc 60                     rts ; Z true (EQ)
  1828  8abd a201               +   ldx #1 ; Z false (NE)
  1829  8abf 60                 ++  rts
  1830                          
  1831                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1832  8ac0 a296                   ldx #nopcodes-1
  1833  8ac2 bd478f             -   lda instidx, x
  1834  8ac5 bcde8f                 ldy modeidx, x
  1835  8ac8 c523                   cmp inidx
  1836  8aca d00c                   bne +
  1837  8acc c424                   cpy mode
  1838  8ace d008                   bne +
  1839  8ad0 8622                   stx opidx
  1840  8ad2 20c181                 jsr getsize
  1841  8ad5 a200                   ldx #0 ; Z true (EQ)
  1842  8ad7 60                     rts
  1843  8ad8 ca                 +   dex
  1844  8ad9 e0ff                   cpx #$ff
  1845  8adb d0e5                   bne -
  1846  8add a201                   ldx #1 ; Z false (NE)
  1847  8adf 60                     rts
  1848                          
  1849                          executerun:
  1850  8ae0 68                     pla ; remove low byte return address
  1851  8ae1 68                     pla ; return high byte return address
  1852  8ae2 68                     pla ; again, we're really not returning
  1853  8ae3 68                     pla ; again, we're really not returning
  1854  8ae4 20398c                 jsr newline
  1855                          !ifndef MINIMUM {
  1856                          ; any C64
  1857  8ae7 203980                 jsr install_nmi64
  1858                          }
  1859                          +   ; restore registers
  1860  8aea ae9d93                 ldx registerSP
  1861  8aed 9a                     txs
  1862  8aee ad9e93                 lda registerSR
  1863  8af1 48                     pha
  1864  8af2 ad9a93                 lda registerA
  1865  8af5 ae9b93                 ldx registerX
  1866  8af8 ac9c93                 ldy registerY
  1867  8afb 28                     plp
  1868  8afc 6cfb00                 jmp (ptr1)
  1869                          
  1870                          chkcontinuedis:
  1871  8aff b90002                 lda inputbuf,y
  1872  8b02 c944                   cmp #'D'
  1873  8b04 d00a                   bne +
  1874  8b06 b90102                 lda inputbuf+1,y
  1875  8b09 c90d                   cmp #13
  1876  8b0b d003                   bne +
  1877  8b0d c8                     iny
  1878  8b0e a200                   ldx #0 ; restore Z set
  1879  8b10 60                 +   rts
  1880                          
  1881                          chkcontinueasm:
  1882  8b11 b90002                 lda inputbuf,y
  1883  8b14 c941                   cmp #'A'
  1884  8b16 d00a                   bne +
  1885  8b18 b90102                 lda inputbuf+1,y
  1886  8b1b c90d                   cmp #13
  1887  8b1d d003                   bne +
  1888  8b1f c8                     iny
  1889  8b20 a200                   ldx #0 ; restore Z set
  1890  8b22 60                 +   rts
  1891                          
  1892                          executedisassemble:
  1893  8b23 68                     pla ; remove low byte return address
  1894  8b24 68                     pla ; return high byte return address
  1895  8b25 20398c                 jsr newline
  1896  8b28 4c6981                 jmp disassemble
  1897                          
  1898                          reportnotimplemented:
  1899  8b2b a932                   lda #<notimplemented
  1900  8b2d a291                   ldx #>notimplemented
  1901  8b2f 4cc383                 jmp strout
  1902                          
  1903                          reporterr:
  1904  8b32 c000                   cpy #0
  1905  8b34 f008                   beq +
  1906  8b36 a920                   lda #' '
  1907  8b38 20d2ff             -   jsr charout
  1908  8b3b 88                     dey
  1909  8b3c d0fa                   bne -
  1910  8b3e a93f               +   lda #'?'
  1911  8b40 20d2ff                 jsr charout
  1912  8b43 a90d                   lda #13
  1913  8b45 20d2ff                 jsr charout
  1914  8b48 60                     rts
  1915                          
  1916                          chkspace:
  1917  8b49 b90002                 lda inputbuf, y
  1918                          !ifndef MINIMUM {
  1919                              ; skip SHIFT-SPACES too on Commodore
  1920  8b4c c9a0                   cmp #$A0
  1921  8b4e f004                   beq +
  1922                          }
  1923  8b50 c920                   cmp #$20
  1924  8b52 d006                   bne ++
  1925  8b54 c8                 +   iny
  1926  8b55 205b8b                 jsr skipspaces
  1927  8b58 a900                   lda #0 ; set Z
  1928  8b5a 60                 ++  rts
  1929                          
  1930                          skipspaces:
  1931  8b5b b90002             -   lda inputbuf, y
  1932                          !ifndef MINIMUM {
  1933                              ; skip SHIFT-SPACES too on Commodore
  1934  8b5e c9a0                   cmp #$A0
  1935  8b60 f004                   beq +
  1936                          }
  1937  8b62 c920                   cmp #$20
  1938  8b64 d003                   bne ++
  1939  8b66 c8                 +   iny
  1940  8b67 d0f2                   bne -
  1941  8b69 60                 ++  rts
  1942                          
  1943                          chkdot:
  1944  8b6a b90002                 lda inputbuf, y
  1945  8b6d c92e                   cmp #'.'
  1946  8b6f d003                   bne +
  1947  8b71 c8                     iny
  1948  8b72 a900                   lda #0 ; Z true (EQ)
  1949  8b74 60                 +   rts
  1950                          
  1951                          chkhelp:
  1952  8b75 b90002                 lda inputbuf, y
  1953  8b78 c93f                   cmp #'?'
  1954  8b7a d003                   bne +
  1955  8b7c c8                     iny
  1956  8b7d a900                   lda #0 ; Z true (EQ)
  1957  8b7f 60                 +   rts
  1958                          
  1959                          chkcolon:
  1960  8b80 b90002                 lda inputbuf, y
  1961  8b83 c93a                   cmp #':'
  1962  8b85 d003                   bne +
  1963  8b87 c8                     iny
  1964  8b88 a900                   lda #0 ; Z true (EQ)
  1965  8b8a 60                 +   rts
  1966                          
  1967                          chkhexbyteofsequence:
  1968  8b8b 208983                 jsr inputhexbyte
  1969  8b8e 20a88b                 jsr +
  1970  8b91 d011                   bne ++ ; Z false (NE) if failed checks
  1971  8b93 c4a4                   cpy len
  1972  8b95 f00d                   beq ++ ; Z true (EQ) if end of input
  1973  8b97 85ff                   sta tmp
  1974  8b99 b90002                 lda inputbuf,y
  1975  8b9c c920                   cmp #$20
  1976  8b9e d004                   bne ++ ; Z false (NE) if not space
  1977  8ba0 a5ff                   lda tmp
  1978  8ba2 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1979  8ba4 60                 ++  rts
  1980                          
  1981                          chkhexword:
  1982                          chkhexaddr1:
  1983  8ba5 206383                 jsr inputhexword
  1984  8ba8 a200               +   ldx #0 ; Z true (EQ)
  1985  8baa 9001                   bcc +
  1986  8bac e8                     inx ; Z false (NE)
  1987  8bad 60                 +   rts
  1988                          
  1989                          chkhexbyte:
  1990  8bae 98                     tya
  1991  8baf 48                     pha ; save y
  1992  8bb0 208983                 jsr inputhexbyte
  1993  8bb3 b00d                   bcs +
  1994  8bb5 85a6                   sta tmp2
  1995  8bb7 20a583                 jsr inputhexnybble
  1996  8bba 9006                   bcc +
  1997  8bbc 68                     pla ; throw away saved y
  1998  8bbd a5a6                   lda tmp2
  1999  8bbf a200                   ldx #0 ; Z true (EQ)
  2000  8bc1 60                     rts
  2001  8bc2 68                 +   pla
  2002  8bc3 a8                     tay ; won't be zero, so Z false (NE)
  2003  8bc4 60                     rts    
  2004                          
  2005                          chkhexaddr2:
  2006  8bc5 a5fb                   lda ptr1
  2007  8bc7 48                     pha
  2008  8bc8 a5fc                   lda ptr1+1
  2009  8bca 48                     pha
  2010  8bcb 20a58b                 jsr chkhexaddr1
  2011  8bce f005                   beq +
  2012  8bd0 68                     pla
  2013  8bd1 68                     pla
  2014  8bd2 a901                   lda #1 ; Z false (NE)
  2015  8bd4 60                     rts
  2016  8bd5 a5fb               +   lda ptr1
  2017  8bd7 85fd                   sta ptr2
  2018  8bd9 a5fc                   lda ptr1+1
  2019  8bdb 85fe                   sta ptr2+1
  2020  8bdd 68                     pla
  2021  8bde 85fc                   sta ptr1+1
  2022  8be0 68                     pla
  2023  8be1 85fb                   sta ptr1
  2024  8be3 a900                   lda #0 ; Z true (EQ)
  2025  8be5 60                     rts    
  2026                          
  2027                          chkbinbyte:
  2028  8be6 a208                   ldx #8
  2029  8be8 20f58b             -   jsr chkbindigit
  2030  8beb d007                   bne +
  2031  8bed ca                     dex
  2032  8bee d0f8                   bne -
  2033  8bf0 08                     php ; save Z true
  2034  8bf1 a5a6                   lda tmp2
  2035  8bf3 28                     plp ; restore Z true
  2036  8bf4 60                 +   rts
  2037                          
  2038                          chkbindigit:
  2039  8bf5 b90002                 lda inputbuf, y
  2040  8bf8 38                     sec
  2041  8bf9 e930                   sbc #$30
  2042  8bfb 900a                   bcc +
  2043  8bfd c902                   cmp #$02
  2044  8bff b006                   bcs +
  2045  8c01 4a                     lsr ; rotate bit value into C
  2046  8c02 26a6                   rol tmp2 ; rotate bit value into tmp2
  2047  8c04 c8                     iny ; advance in buffer
  2048  8c05 a900                   lda #0 ; set Z
  2049  8c07 60                 +   rts
  2050                          
  2051                          chkaddr1cmd:
  2052  8c08 b90002                 lda inputbuf, y
  2053  8c0b c941               +   cmp #'A'
  2054  8c0d d00b                   bne +
  2055  8c0f be0102                 ldx inputbuf+1, y
  2056  8c12 e00d                   cpx #13
  2057  8c14 d004                   bne +
  2058  8c16 c8                     iny
  2059  8c17 4c3487                 jmp executeassemble
  2060  8c1a c944               +   cmp #'D'
  2061  8c1c d00b                   bne +
  2062  8c1e be0102                 ldx inputbuf+1, y
  2063  8c21 e00d                   cpx #13
  2064  8c23 d004                   bne +
  2065  8c25 c8                     iny
  2066  8c26 4c238b                 jmp executedisassemble
  2067  8c29 c952               +   cmp #'R'
  2068  8c2b d00b                   bne +
  2069  8c2d be0102                 ldx inputbuf+1, y
  2070  8c30 e00d                   cpx #13
  2071  8c32 d004                   bne +
  2072  8c34 c8                     iny
  2073  8c35 4ce08a                 jmp executerun
  2074  8c38 60                 +   rts
  2075                          
  2076                          newline:
  2077  8c39 a90d                   lda #13
  2078  8c3b 4cd2ff                 jmp charout
  2079                          
  2080                          space:
  2081  8c3e a920                   lda #32
  2082  8c40 4cd2ff                 jmp charout
  2083                          
  2084                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  2085                          ;     jsr $ffd2
  2086                          ;     pha
  2087                          ; -   lda $d011
  2088                          ;     bpl -
  2089                          ; -   lda $d011
  2090                          ;     bmi -
  2091                          ; -   lda $d011
  2092                          ;     bpl -
  2093                          ; -   lda $d011
  2094                          ;     bmi -
  2095                          ;     pla
  2096                          ;     rts
  2097                          
  2098                          save_registers:
  2099  8c43 08                     php
  2100  8c44 8d9a93                 sta registerA
  2101  8c47 8e9b93                 stx registerX
  2102  8c4a 8c9c93                 sty registerY
  2103  8c4d 68                     pla
  2104  8c4e 8d9e93                 sta registerSR
  2105  8c51 ba                     tsx
  2106  8c52 8e9d93                 stx registerSP
  2107  8c55 4c5a8c                 jmp +
  2108                          
  2109                          execute_display_registers:
  2110  8c58 68                     pla ; remove return address
  2111  8c59 68                     pla
  2112                          +
  2113                              ; need some normality
  2114  8c5a 58                     cli
  2115  8c5b d8                     cld
  2116                          
  2117  8c5c 20398c                 jsr newline
  2118  8c5f 20688c                 jsr display_registers
  2119                          !ifndef MINIMUM {
  2120                              ; any C64
  2121  8c62 205480                 jsr uninstall_nmi64
  2122                          }
  2123  8c65 4c3080                 jmp input_loop
  2124                          
  2125                          ; PC   NV-BDIZC .A .X .Y .S
  2126                          ; 1234 10111011 01 02 03 FF
  2127                          display_registers:
  2128  8c68 a978                   lda #<reg_header
  2129  8c6a a293                   ldx #>reg_header
  2130  8c6c 20c383                 jsr strout
  2131  8c6f ad9f93                 lda registerPC
  2132  8c72 aea093                 ldx registerPC+1
  2133  8c75 204783                 jsr disphexword
  2134  8c78 203e8c                 jsr space
  2135  8c7b ad9e93                 lda registerSR
  2136  8c7e 203483                 jsr dispbinbyte
  2137  8c81 203e8c                 jsr space
  2138  8c84 ad9a93                 lda registerA
  2139  8c87 204d83                 jsr disphexbyte
  2140  8c8a 203e8c                 jsr space
  2141  8c8d ad9b93                 lda registerX
  2142  8c90 204d83                 jsr disphexbyte
  2143  8c93 203e8c                 jsr space
  2144  8c96 ad9c93                 lda registerY
  2145  8c99 204d83                 jsr disphexbyte
  2146  8c9c 203e8c                 jsr space
  2147  8c9f ad9d93                 lda registerSP
  2148  8ca2 204d83                 jsr disphexbyte
  2149  8ca5 4c398c                 jmp newline
  2150                          
  2151                          !ifdef MINIMUM {
  2152                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2153                          ;; MC6850
  2154                          UART_DATA=$FFF8
  2155                          UART_STCR=$FFF9
  2156                          
  2157                          UART_INIT:
  2158                          	ldx #0b00000111 ; 11=reset device
  2159                          	stx UART_STCR
  2160                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  2161                          	sta UART_STCR
  2162                          	rts
  2163                          UART_OUT:
  2164                          	pha
  2165                          -	lda UART_STCR
  2166                          	and #2
  2167                          	beq - ; branch if TDRE=0, not finished transmitting
  2168                          	pla
  2169                          	pha
  2170                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  2171                          	sta UART_DATA
  2172                          	pla
  2173                          	rts
  2174                          UART_IN:
  2175                          -	lda UART_STCR
  2176                          	and #1
  2177                          	beq - ; branch if TDRF=0, not received
  2178                          	lda UART_DATA
  2179                          	; software "CAPS LOCK" because wozmon expects only uppercase
  2180                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  2181                          	beq BREAK
  2182                              ; force lowercase alphabet to uppercase
  2183                              cmp #'a'
  2184                          	bcc +
  2185                          	cmp #'z'+1
  2186                          	bcs +
  2187                          	eor #$20
  2188                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  2189                           	rts
  2190                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  2191                          	pha ; save A
  2192                          	lda UART_STCR
  2193                          	lsr ; put rightmost bit in carry
  2194                          	pla ; restore A affects flags
  2195                          	ror ; move carry to left bit, right bit to carry
  2196                          	php ; push processor to save N
  2197                          	rol ; restore A affects flags
  2198                          	plp ; pull processor to restore N
  2199                          	rts
  2200                          
  2201                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2202                          ; Processor start and interrupts
  2203                          
  2204                          NMI: ; unused on minimum (no source of interrupt)
  2205                              rti
  2206                          
  2207                          IRQ:
  2208                              pha
  2209                              php
  2210                              pla
  2211                              and #$10
  2212                              beq ++ ; not break
  2213                          ;BREAK HANDLER
  2214                              pla
  2215                              sta registerA
  2216                              pla
  2217                              sta registerSR
  2218                              pla
  2219                              cld
  2220                              sec
  2221                              sbc #2
  2222                              sta registerPC
  2223                              pla
  2224                              sbc #0
  2225                              sta registerPC+1
  2226                              lda #>save_registers
  2227                              pha
  2228                              lda #<save_registers
  2229                              pha
  2230                              lda registerSR
  2231                              pha
  2232                              lda registerA
  2233                              pha
  2234                          ++  pla
  2235                              rti
  2236                          
  2237                          BREAK:
  2238                              jmp RESET
  2239                          
  2240                          RESET:
  2241                              cld
  2242                              ldx #$FF
  2243                              txs
  2244                              jsr JUART_INIT
  2245                              cli
  2246                              jmp start
  2247                          ; !ifdef MINIMUM
  2248                          } else { ; not MINIMUM
  2249                          nmi64:
  2250  8ca8 78                     sei
  2251  8ca9 8d9a93                 sta registerA
  2252  8cac 68                     pla
  2253  8cad 8d9e93                 sta registerSR
  2254  8cb0 68                     pla
  2255  8cb1 d8                     cld
  2256  8cb2 8d9f93                 sta registerPC
  2257  8cb5 68                     pla
  2258  8cb6 8da093                 sta registerPC+1
  2259  8cb9 a98c                   lda #>save_registers
  2260  8cbb 48                     pha
  2261  8cbc a943                   lda #<save_registers
  2262  8cbe 48                     pha
  2263  8cbf ad9e93                 lda registerSR
  2264  8cc2 48                     pha
  2265  8cc3 ad9a93                 lda registerA
  2266  8cc6 40                     rti
  2267                          
  2268                          brk64:
  2269  8cc7 68                     pla
  2270  8cc8 a8                     tay
  2271  8cc9 68                     pla
  2272  8cca aa                     tax
  2273  8ccb 68                     pla
  2274  8ccc 8d9a93                 sta registerA
  2275  8ccf 68                     pla
  2276  8cd0 8d9e93                 sta registerSR
  2277  8cd3 68                     pla
  2278  8cd4 d8                     cld
  2279  8cd5 38                     sec
  2280  8cd6 e902                   sbc #2
  2281  8cd8 8d9f93                 sta registerPC
  2282  8cdb 68                     pla
  2283  8cdc e900                   sbc #0
  2284  8cde 8da093                 sta registerPC+1
  2285  8ce1 a98c                   lda #>save_registers
  2286  8ce3 48                     pha
  2287  8ce4 a943                   lda #<save_registers
  2288  8ce6 48                     pha
  2289  8ce7 ad9e93                 lda registerSR
  2290  8cea 48                     pha
  2291  8ceb ad9a93                 lda registerA
  2292  8cee 40                     rti
  2293                          }
  2294                          
  2295                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2296                          ; data
  2297                          
  2298                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  2299                          ninst = 56
  2300  8cef 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  2301  8d27 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  2302  8d5f 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  2303                          
  2304                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  2305                          mode_jmptable:
  2306  8d97 4d82               !word dispModeAcc-1; 0 Accumulator 1
  2307  8d99 5282               !word dispModeNone-1 ; 1 None 1
  2308  8d9b 5382               !word dispModeImm-1 ; 2 Immediate 2
  2309  8d9d 6482               !word dispModeIndX-1 ; 3 IndirectX 2
  2310  8d9f 8482               !word dispModeIndY-1 ; 4 IndirectY 2
  2311  8da1 a482               !word dispModeRel-1 ; 5 Relative 2
  2312  8da3 5882               !word dispModeZP-1 ; 6 ZeroPage 2
  2313  8da5 e082               !word dispModeZPX-1 ; 7 ZeroPageX 2
  2314  8da7 ed82               !word dispModeZPY-1 ; 8 ZeroPageY 2
  2315  8da9 fa82               !word dispModeAbs-1 ; 9 Absolute 3
  2316  8dab 0c83               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  2317  8dad 1983               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  2318  8daf 2683               !word dispModeInd-1 ; 12 Indirect 3
  2319                          
  2320                          nmodes = 13
  2321                          
  2322                          mode_sorted:
  2323  8db1 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  2324                          
  2325                          !ifdef MINIMUM {
  2326                          mode_0: !text "Accumulator", 0, "A", 0
  2327                          mode_1: !text "None", 0, 8, 0
  2328                          mode_2: !text "Immediate", 0, "#$12", 0
  2329                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  2330                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  2331                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  2332                          mode_6: !text "ZeroPage", 0, "$12", 0
  2333                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  2334                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  2335                          mode_9: !text "Absolute", 0, "$1234", 0
  2336                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  2337                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  2338                          mode_12: !text "Indirect", 0, "($1234)", 0
  2339                          } else {
  2340  8dbe 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2341  8dcc 4e4f4e45001400     mode_1: !text "NONE", 0, 20, 0
  2342  8dd3 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2343  8de2 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2344  8df4 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2345  8e06 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2346  8e25 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2347  8e32 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2348  8e42 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2349  8e52 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2350  8e61 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2351  8e73 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2352  8e85 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2353                          }
  2354                          
  2355                          modes: ; table for easily displaying each mode_example
  2356  8e96 be8d               !word mode_0
  2357  8e98 cc8d               !word mode_1
  2358  8e9a d38d               !word mode_2
  2359  8e9c e28d               !word mode_3
  2360  8e9e f48d               !word mode_4
  2361  8ea0 068e               !word mode_5
  2362  8ea2 258e               !word mode_6
  2363  8ea4 328e               !word mode_7
  2364  8ea6 428e               !word mode_8
  2365  8ea8 528e               !word mode_9
  2366  8eaa 618e               !word mode_10
  2367  8eac 738e               !word mode_11
  2368  8eae 858e               !word mode_12
  2369                          
  2370                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2371                          nopcodes = 151
  2372  8eb0 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2373  8f47 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2374  8fde 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2375                          
  2376                          copyright 
  2377                          ;                  1         2         3         4
  2378                          ;         1234567890123456789012345678901234567890
  2379  9075 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2380                          !ifdef C64TERMINAL {
  2381                              !text 13, "(TERMINAL VERSION)"
  2382                          }
  2383  9095 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2384  90bb 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2385  90d2 00                 !text 0
  2386                          
  2387                          firsthelp
  2388                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2389  90d3 0d0d               !text 13, 13
  2390  90d5 54595045203f2046...!text "TYPE ? FOR HELP"
  2391  90e4 0d00               !text 13, 0
  2392                          
  2393                          !ifndef MINIMUM {
  2394                          ; C64 only
  2395                          extra_help:
  2396  90e6 5820202020202020...    !text "X           (EXIT MONITOR)", 13
  2397  9101 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S  (SAVE)", 13
  2398  9123 00                     !text 0
  2399                          
  2400                          !ifdef C64SCREEN {
  2401  9124 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  2402  912b 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  2403                          }
  2404                          
  2405                          }
  2406                          
  2407  9132 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2408                          
  2409                          generalhelp
  2410  9143 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2411  9169 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2412  918e 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2413  91b1 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2414  91d9 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2415  91f5 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2416  9215 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2417  9237 00                 !text 0
  2418                          generalhelp2
  2419  9238 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2420  925d 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2421  9279 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2422  9298 3f41202020202020...!text "?A          (LIST 6502 INSTRUCTIONS)", 13
  2423  92bd 3f41444320202020...!text "?ADC        (/ADC/ ADDRESSING MODES)", 13
  2424  92e2 3f4d4f4445202020...!text "?MODE       (ADDRESSING MODES)", 13
  2425  9301 00                 !text 0
  2426                          generalhelp3
  2427  9302 3f2e202020202020...!text "?.          (DISPLAY REGISTERS)", 13
  2428  9322 2e31323334202020...!text ".1234       (MODIFY PC,FLAGS,REGISTERS)", 13
  2429  934a 2e413a3031202020...!text ".A:01       (MODIFY REGISTER A,X,Y,S,P)", 13
  2430  9372 00                 !text 0
  2431                          
  2432  9373 4d4f444500         modes_keyword !text "MODE", 0
  2433                          
  2434  9378 2050432020204e56...reg_header !text " PC   NV-BDIZC .A .X .Y .S", 13, '.', 0
  2435                          
  2436                          !ifdef MINIMUM {
  2437                          registerA = $dff9
  2438                          registerX = $dffa
  2439                          registerY = $dffb
  2440                          registerSP = $dffc
  2441                          registerSR = $dffd
  2442                          registerPC = $dffe;/f
  2443                          } else {
  2444  9395 0000               savebrkvector !word 0
  2445  9397 0000               savenmivector !word 0
  2446  9399 00                 drive !byte 0
  2447  939a 00                 registerA !byte 0
  2448  939b 00                 registerX !byte 0
  2449  939c 00                 registerY !byte 0
  2450  939d 00                 registerSP !byte 0
  2451  939e 00                 registerSR !byte 0
  2452  939f 0000               registerPC !word 0
  2453                          }
  2454                          
  2455                          !ifdef MINIMUM {
  2456                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2457                          ; JUMP table for some stability
  2458                          * = $FFEE
  2459                          JUART_INIT: JMP UART_INIT
  2460                          JUART_OUT: JMP UART_OUT
  2461                          JUART_IN: JMP UART_IN
  2462                          JUART_CHK: JMP UART_CHK
  2463                          
  2464                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2465                          ; 6502 vectors 
  2466                          * = $fffa
  2467                              !word NMI
  2468                              !word RESET
  2469                              !word IRQ
  2470                          } else { // C64
  2471                              !if * > $a000 {
  2472                                  !error "code/data overran $a000"
  2473                              }
  2474                          }
  2475                          
  2476                          finish = *
