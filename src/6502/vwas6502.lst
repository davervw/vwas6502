
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGET  C64 and...                    *        <<<
     7                          ;; >>>       ** INCLUDES VERSION FOR 6502+MC6850 minimum system *        <<<
     8                          ;; >>>       *   60K(RAM),4K(ROM), 2 bytes IO for MC6850 UART   *        <<<
     9                          ;; >>>       ****************************************************        <<<
    10                          ;;
    11                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    12                          ;; MIT License
    13                          ;;
    14                          ;; Copyright (c) 2024 David R. Van Wagner
    15                          ;; davevw.com
    16                          ;;
    17                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    18                          ;; of this software and associated documentation files (the "Software"), to deal
    19                          ;; in the Software without restriction, including without limitation the rights
    20                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    21                          ;; copies of the Software, and to permit persons to whom the Software is
    22                          ;; furnished to do so, subject to the following conditions:
    23                          ;;
    24                          ;; The above copyright notice and this permission notice shall be included in all
    25                          ;; copies or substantial portions of the Software.
    26                          ;;
    27                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    28                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    29                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    30                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    31                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    32                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    33                          ;; SOFTWARE.
    34                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    35                          
    36                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ; Important! define exactly ONE target (set in build.sh)
    39                          ;C64SCREEN = 1
    40                          ;C64TERMINAL = 1
    41                          ;MINIMUM = 1
    42                          
    43                          ; options (set in build.sh)
    44                          ;NEEDECHO = 0
    45                          
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;; _
    49                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    50                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    51                          ;; 1000 (display memory at $1000)
    52                          ;; 1000.2000 (display memory range $1000 to $2000)
    53                          ;; 1000. (display next screenful of memory starting at $1000)
    54                          ;; . (display next screenful of memory)
    55                          ;; 1000 r (JMP $1000)
    56                          ;; 1000: 01 02 03 (modify memory)
    57                          ;; (NEW SYNTAX)
    58                          ;; 1000 d (disassemble starting at address, for screenful)
    59                          ;; d (continue disassembling from last address)
    60                          ;; 1000 a (assemble starting at, interactive until empty line) 
    61                          ;; (FUTURE SYNTAX, not implemented)
    62                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    63                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    64                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    65                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    66                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    67                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    68                          ;; 1000.2000 "filename" 08 save (save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, can abbreviate to s)
    69                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    70                          ;; ? (commands help)
    71                          ;; ? a (list instructions available)
    72                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    73                          ;; ? mode (show addressing modes example syntax for 6502)
    74                          ;;
    75                          ;; (INTERACTIVE ASSEMBLER)
    76                          ;; 1000 _
    77                          ;;      ADC #$12
    78                          ;; 1000 69 12    ADC #$12
    79                          ;; 1002 _
    80                          ;;      JSR $1234
    81                          ;; 1002 20 34 12 JSR $1234
    82                          ;; 1005 _
    83                          ;;      RTS
    84                          ;; 1005 60       RTS
    85                          ;; 1006 _
    86                          ;;      XYZ
    87                          ;;      XYZ ?
    88                          ;; 1006 _
    89                          ;; _
    90                          ;;
    91                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    92                          ;; and can cursor up to revise, 
    93                          ;;
    94                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    95                          ;;
    96                          
    97                          ; global
    98                          inputbuf=$0200
    99                          
   100                          
   101                          ; kernal/system calls
   102                          
   103                          !ifdef MINIMUM {
   104                          charout=JUART_OUT
   105                          getkey=JUART_IN
   106                          }
   107                          
   108                          !ifdef C64SCREEN {
   109                          charin=$ffcf ; screen editor
   110                          charout=$ffd2
   111                          getkey=$ffe4
   112                          }
   113                          
   114                          !ifdef C64TERMINAL {
   115                          charout=$ffd2
   116                          getkey=$ffe4
   117                          }
   118                          
   119                          ; zeropage
   120                          !ifdef MINIMUM {
   121                          opidx=$f0
   122                          inidx=$f1
   123                          mode=$f2
   124                          size=$f3
   125                          ptr3=$f4 ; and $f5
   126                          count=$f6
   127                          len=$f7
   128                          savepos=$f8
   129                          tmp2=$f9
   130                          flag=$fa
   131                          ptr1=$fb ; and $fc
   132                          ptr2=$fd ; and $fe
   133                          tmp=$ff
   134                          } else {
   135                          ptr1=$fb ; and $fc
   136                          ptr2=$fd ; and $fe
   137                          tmp=$ff
   138                          opidx=$22
   139                          inidx=$23
   140                          mode=$24
   141                          size=$25
   142                          ptr3=$26 ; and $27
   143                          count=$a3
   144                          len=$a4
   145                          savepos=$a5
   146                          tmp2=$a6
   147                          flag=$a7
   148                          }
   149                          
   150                          !ifdef MINIMUM {
   151                          *=$f000
   152                          } else {
   153                          *=$c000
   154                          }
   155                          start:
   156  c000 a9cf                   lda #<copyright
   157  c002 a2cc                   ldx #>copyright
   158  c004 207dc2                 jsr strout
   159  c007 a92d                   lda #<firsthelp
   160  c009 a2cd                   ldx #>firsthelp
   161  c00b 207dc2                 jsr strout
   162  c00e 208ec2             -   jsr inputline
   163  c011 209cc2                 jsr parseline
   164  c014 4c0ec0                 jmp -
   165                          
   166                          test: ; all the addressing modes here for testing disassembly
   167  c017 ea                     nop
   168  c018 ad3412                 lda $1234
   169  c01b bd3412                 lda $1234,x
   170  c01e b93412                 lda $1234,y
   171  c021 0a                     asl
   172  c022 a912                   lda #$12
   173  c024 a112                   lda ($12,x)
   174  c026 b112                   lda ($12),y
   175  c028 6c3412                 jmp ($1234)
   176  c02b d0fe               -   bne -
   177  c02d a512                   lda $12
   178  c02f b512                   lda $12,x
   179  c031 b612                   ldx $12,y
   180  c033 ff                     !byte $FF ; unknown
   181                          
   182                          disassemble:
   183  c034 a917                   lda #23
   184  c036 85a3                   sta count
   185  c038 a000               -   ldy #0
   186  c03a b1fb                   lda (ptr1),y
   187  c03c 206ec0                 jsr find_opcode
   188  c03f 20d1c0                 jsr disp_current
   189  c042 a525                   lda size
   190  c044 1002                   bpl +
   191  c046 a901                   lda #1
   192  c048 18                 +   clc
   193  c049 65fb                   adc ptr1
   194  c04b 85fb                   sta ptr1
   195  c04d 9002                   bcc +
   196  c04f e6fc                   inc ptr1+1
   197  c051 c6a3               +   dec count
   198  c053 d0e3                   bne -
   199                          !ifdef C64SCREEN {
   200  c055 a5fb                   lda ptr1
   201  c057 a6fc                   ldx ptr1+1
   202  c059 200ac2                 jsr disphexword
   203  c05c a9ed                   lda #<page_disassemble
   204  c05e a2ce                   ldx #>page_disassemble
   205  c060 4c7dc2                 jmp strout
   206                          } else {    
   207                              rts
   208                          }
   209                          
   210                          compareptrs:
   211  c063 a5fc                   lda ptr1+1
   212  c065 c5fe                   cmp ptr2+1
   213  c067 d004                   bne +
   214  c069 a5fb                   lda ptr1
   215  c06b c5fd                   cmp ptr2
   216  c06d 60                 +   rts
   217                          
   218                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   219                          ; and properties updated in ZP globals size,inidx,opidx,mode
   220  c06e a097                   ldy #nopcodes
   221  c070 a296                   ldx #nopcodes-1
   222  c072 dd0acb             -   cmp opcodes,x
   223  c075 f00f                   beq +
   224  c077 ca                     dex
   225  c078 88                     dey
   226  c079 d0f7                   bne -
   227  c07b 18                     clc
   228  c07c a901                   lda #1
   229  c07e 8525                   sta size
   230  c080 a9ff                   lda #$FF
   231  c082 aa                     tax
   232  c083 a8                     tay
   233  c084 900a                   bcc ++
   234  c086 bda1cb             +   lda instidx, x
   235  c089 bc38cc                 ldy modeidx, x
   236  c08c 2097c0                 jsr getsize
   237  c08f 38                     sec
   238  c090 8523               ++  sta inidx
   239  c092 8622                   stx opidx
   240  c094 8424                   sty mode
   241  c096 60                     rts
   242                          
   243                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   244                              ; result returned in size
   245  c097 48                     pha
   246  c098 a901                   lda #1
   247  c09a 8525                   sta size
   248  c09c 68                     pla
   249  c09d c002                   cpy #2 // Immediate
   250  c09f 9008                   bcc +
   251  c0a1 e625                   inc size
   252  c0a3 c009                   cpy #9 // Absolute
   253  c0a5 9002                   bcc +
   254  c0a7 e625                   inc size
   255  c0a9 60                 +   rts
   256                          
   257                          disp_opcode: ; .A opcode byte
   258  c0aa 206ec0                 jsr find_opcode
   259  c0ad 8a                     txa
   260                              ; fall through to display instruction
   261                          
   262                          dispinst: ; .A instruction index 0..55, note modifies A and X
   263  c0ae aa                     tax
   264  c0af e038                   cpx #ninst
   265  c0b1 b012                   bcs +
   266  c0b3 bd4ac9                 lda inst0, x
   267  c0b6 20d2ff                 jsr charout
   268  c0b9 bd82c9                 lda inst1, x
   269  c0bc 20d2ff                 jsr charout
   270  c0bf bdbac9                 lda inst2, x
   271  c0c2 4cd2ff                 jmp charout
   272  c0c5 a93f               +   lda #'?'
   273  c0c7 20d2ff                 jsr charout
   274  c0ca 20d2ff                 jsr charout
   275  c0cd 20d2ff                 jsr charout
   276  c0d0 60                     rts
   277                          
   278                          disp_current:
   279  c0d1 a5fb                   lda ptr1
   280  c0d3 a6fc                   ldx ptr1+1
   281  c0d5 200ac2                 jsr disphexword
   282  c0d8 a920                   lda #$20
   283  c0da 20d2ff                 jsr charout
   284  c0dd a000                   ldy #0
   285  c0df a625                   ldx size
   286  c0e1 b1fb               -   lda (ptr1),y
   287  c0e3 2010c2                 jsr disphexbyte
   288  c0e6 a920                   lda #$20
   289  c0e8 20d2ff                 jsr charout
   290  c0eb c8                     iny
   291  c0ec ca                     dex
   292  c0ed d0f2                   bne -
   293  c0ef c003               -   cpy #3
   294  c0f1 f00e                   beq +
   295  c0f3 a920                   lda #$20
   296  c0f5 20d2ff                 jsr charout
   297  c0f8 20d2ff                 jsr charout
   298  c0fb 20d2ff                 jsr charout
   299  c0fe c8                     iny
   300  c0ff d0ee                   bne -
   301  c101 a523               +   lda inidx
   302  c103 20aec0                 jsr dispinst
   303  c106 a920                   lda #$20
   304  c108 20d2ff                 jsr charout
   305  c10b 2013c1                 jsr disp_mode
   306  c10e a90d                   lda #13
   307  c110 4cd2ff                 jmp charout
   308                          
   309                          disp_mode
   310  c113 a524                   lda mode
   311  c115 c90d                   cmp #13
   312  c117 b00a                   bcs +
   313  c119 0a                     asl
   314  c11a aa                     tax
   315  c11b bdf3c9                 lda mode_jmptable+1,x
   316  c11e 48                     pha
   317  c11f bdf2c9                 lda mode_jmptable,x
   318  c122 48                     pha
   319  c123 60                 +   rts
   320                          
   321                          dispModeAcc:
   322  c124 a941                   lda #'A'
   323  c126 4cd2ff                 jmp charout
   324                          
   325                          dispModeNone:
   326  c129 60                     rts
   327                          
   328                          dispModeImm:
   329  c12a a923                   lda #'#'
   330  c12c 20d2ff                 jsr charout
   331                          dispModeZP:
   332  c12f a924                   lda #'$'
   333  c131 20d2ff                 jsr charout
   334  c134 a001                   ldy #1
   335  c136 b1fb                   lda (ptr1),y
   336  c138 4c10c2                 jmp disphexbyte
   337                          
   338                          dispModeIndX:
   339  c13b a928                   lda #'('
   340  c13d 20d2ff                 jsr charout
   341  c140 a924                   lda #'$'
   342  c142 20d2ff                 jsr charout
   343  c145 a001                   ldy #1
   344  c147 b1fb                   lda (ptr1),y
   345  c149 2010c2                 jsr disphexbyte
   346  c14c a92c                   lda #','
   347  c14e 20d2ff                 jsr charout
   348  c151 a958                   lda #'X'
   349  c153 20d2ff                 jsr charout
   350  c156 a929                   lda #')'
   351  c158 4cd2ff                 jmp charout
   352                          
   353                          dispModeIndY:
   354  c15b a928                   lda #'('
   355  c15d 20d2ff                 jsr charout
   356  c160 a924                   lda #'$'
   357  c162 20d2ff                 jsr charout
   358  c165 a001                   ldy #1
   359  c167 b1fb                   lda (ptr1),y
   360  c169 2010c2                 jsr disphexbyte
   361  c16c a929                   lda #')'
   362  c16e 20d2ff                 jsr charout
   363  c171 a92c                   lda #','
   364  c173 20d2ff                 jsr charout
   365  c176 a959                   lda #'Y'
   366  c178 4cd2ff                 jmp charout
   367                          
   368                          dispModeRel:
   369  c17b a924                   lda #'$'
   370  c17d 20d2ff                 jsr charout
   371  c180 18                     clc
   372  c181 a5fb                   lda ptr1
   373  c183 6902                   adc #2
   374  c185 8526                   sta ptr3
   375  c187 a5fc                   lda ptr1+1
   376  c189 6900                   adc #0
   377  c18b 8527                   sta ptr3+1
   378  c18d a001                   ldy #1
   379  c18f b1fb                   lda (ptr1),y
   380  c191 1014                   bpl +
   381                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   382  c193 49ff                   eor #$FF ; inverse
   383  c195 18                     clc
   384  c196 6901                   adc #1 ; complete getting absolute value from two's complement
   385  c198 85ff                   sta tmp
   386  c19a 38                     sec
   387  c19b a526                   lda ptr3
   388  c19d e5ff                   sbc tmp
   389  c19f 8526                   sta ptr3
   390  c1a1 b00d                   bcs ++
   391  c1a3 c627                   dec ptr3+1
   392  c1a5 9009                   bcc ++
   393  c1a7 18                 +   clc ; simple case of adding
   394  c1a8 6526                   adc ptr3
   395  c1aa 8526                   sta ptr3
   396  c1ac 9002                   bcc ++
   397  c1ae e627                   inc ptr3+1
   398  c1b0 a526               ++  lda ptr3
   399  c1b2 a627                   ldx ptr3+1
   400  c1b4 4c0ac2                 jmp disphexword
   401                          
   402                          dispModeZPX:
   403  c1b7 202fc1                 jsr dispModeZP
   404  c1ba a92c                   lda #','
   405  c1bc 20d2ff                 jsr charout
   406  c1bf a958                   lda #'X'
   407  c1c1 4cd2ff                 jmp charout
   408                          
   409                          dispModeZPY:
   410  c1c4 202fc1                 jsr dispModeZP
   411  c1c7 a92c                   lda #','
   412  c1c9 20d2ff                 jsr charout
   413  c1cc a959                   lda #'Y'
   414  c1ce 4cd2ff                 jmp charout
   415                          
   416                          dispModeAbs:
   417  c1d1 a924                   lda #'$'
   418  c1d3 20d2ff                 jsr charout
   419  c1d6 a001                   ldy #1
   420  c1d8 b1fb                   lda (ptr1),y
   421  c1da 48                     pha
   422  c1db c8                     iny
   423  c1dc b1fb                   lda (ptr1),y
   424  c1de aa                     tax
   425  c1df 68                     pla
   426  c1e0 4c0ac2                 jmp disphexword
   427                          
   428                          dispModeAbsX:
   429  c1e3 20d1c1                 jsr dispModeAbs
   430  c1e6 a92c                   lda #','
   431  c1e8 20d2ff                 jsr charout
   432  c1eb a958                   lda #'X'
   433  c1ed 4cd2ff                 jmp charout
   434                          
   435                          dispModeAbsY:
   436  c1f0 20d1c1                 jsr dispModeAbs
   437  c1f3 a92c                   lda #','
   438  c1f5 20d2ff                 jsr charout
   439  c1f8 a959                   lda #'Y'
   440  c1fa 4cd2ff                 jmp charout
   441                          
   442                          dispModeInd:
   443  c1fd a928                   lda #'('
   444  c1ff 20d2ff                 jsr charout
   445  c202 20d1c1                 jsr dispModeAbs
   446  c205 a929                   lda #')'
   447  c207 4cd2ff                 jmp charout
   448                          
   449                          disphexword: ; .A low, .X high, 0000..FFFF
   450  c20a 48                     pha
   451  c20b 8a                     txa
   452  c20c 2010c2                 jsr disphexbyte
   453  c20f 68                     pla
   454                              ;fall through to call again
   455                          
   456                          disphexbyte: ; .A 00..FF
   457  c210 48                     pha
   458  c211 4a                     lsr
   459  c212 4a                     lsr
   460  c213 4a                     lsr
   461  c214 4a                     lsr
   462  c215 2019c2                 jsr disphexnybble
   463  c218 68                     pla
   464                              ;fall through to call again
   465                          
   466                          disphexnybble: ; .A 0..F
   467  c219 290f                   and #$0F
   468  c21b 0930                   ora #$30
   469  c21d c93a                   cmp #$3A
   470  c21f 9002                   bcc +
   471  c221 6906                   adc #$06
   472  c223 4cd2ff             +   jmp charout
   473                          
   474                          inputhexword: ; C set if fails
   475  c226 98                     tya
   476  c227 aa                     tax ; save buffer pointer in x
   477  c228 2043c2                 jsr inputhexbyte
   478  c22b b013                   bcs ++ ; failed
   479  c22d 85fb               +   sta ptr1 ; assume one byte
   480  c22f a900                   lda #0
   481  c231 85fc                   sta ptr1+1 ; extend to 16 bits
   482  c233 2043c2                 jsr inputhexbyte
   483  c236 b006                   bcs + ; failed
   484  c238 a6fb                   ldx ptr1 ; two bytes so shift the bytes
   485  c23a 86fc                   stx ptr1+1
   486  c23c 85fb                   sta ptr1
   487  c23e 18                 +   clc
   488  c23f 60                     rts
   489  c240 8a                 ++  txa
   490  c241 a8                     tay ; restore buffer pointer
   491  c242 60                     rts
   492                          
   493                          inputhexbyte:
   494  c243 205fc2                 jsr inputhexnybble
   495  c246 b016                   bcs ++
   496  c248 85ff                   sta tmp
   497  c24a 205fc2                 jsr inputhexnybble
   498  c24d 9005                   bcc +
   499  c24f 18                     clc ; allow single digit as byte
   500  c250 a5ff                   lda tmp
   501  c252 900a                   bcc ++
   502  c254 06ff               +   asl tmp
   503  c256 06ff                   asl tmp
   504  c258 06ff                   asl tmp
   505  c25a 06ff                   asl tmp
   506  c25c 05ff                   ora tmp
   507  c25e 60                 ++  rts
   508                          
   509                          inputhexnybble:
   510  c25f b90002                 lda $0200,y
   511  c262 297f                   and #$7F
   512  c264 38                     sec
   513  c265 e930                   sbc #$30
   514  c267 9012                   bcc ++
   515  c269 c90a                   cmp #10
   516  c26b 900c                   bcc +
   517  c26d e907                   sbc #7
   518  c26f 900a                   bcc ++
   519  c271 c90a                   cmp #10
   520  c273 9006                   bcc ++
   521  c275 c910                   cmp #16
   522  c277 b002                   bcs ++
   523  c279 c8                 +   iny
   524  c27a 60                     rts
   525  c27b 38                 ++  sec
   526  c27c 60                     rts
   527                          
   528                          strout:
   529  c27d 8526                   sta ptr3
   530  c27f 8627                   stx ptr3+1
   531  c281 a000                   ldy #0
   532  c283 b126               -   lda (ptr3),y
   533  c285 f006                   beq +
   534  c287 20d2ff                 jsr charout
   535  c28a c8                     iny
   536  c28b d0f6                   bne -
   537  c28d 60                 +   rts
   538                          
   539                          inputline:
   540                          !ifdef C64SCREEN {
   541  c28e a000                   ldy #0
   542  c290 20cfff             -   jsr charin
   543  c293 990002                 sta inputbuf,y
   544  c296 c8                     iny
   545  c297 c90d                   cmp #13
   546  c299 d0f5                   bne -
   547  c29b 60                     rts
   548                          } else {
   549                              ldy #0
   550                          --  sty count
   551                          -   jsr getkey
   552                              beq -
   553                              ldy count
   554                          !ifdef MINIMUM {
   555                              cmp #8 ; backspace
   556                          } else {
   557                              cmp #20
   558                          }
   559                              bne +
   560                              cpy #0
   561                              beq -
   562                              dey
   563                          !if NEEDECHO = 1 {    
   564                              jsr charout
   565                          }
   566                              jmp --
   567                          +   cmp #13
   568                              beq +
   569                              cmp #' '
   570                              bcc -
   571                              cmp #128
   572                              bcs -
   573                          +
   574                          !if NEEDECHO = 1 {    
   575                              jsr charout
   576                          }
   577                              sta inputbuf,y
   578                              iny
   579                              cmp #13
   580                              bne --
   581                              rts
   582                          }
   583                          
   584                          parseline:
   585  c29c c001                   cpy #1
   586  c29e d003                   bne +
   587                          -
   588                          !ifdef C64SCREEN {   
   589  c2a0 4c45c9                 jmp newline
   590                          } else {
   591                              rts
   592                          }
   593  c2a3 88                 +   dey
   594  c2a4 84a4                   sty len
   595                              ; skip whitespace
   596                              ; check for address, put in ptr1
   597                              ; or check for dot, then require address put in ptr2
   598                              ; or check for ?, and optional parameter, execute help
   599                              ; check for whitespace
   600                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   601                              ; check for string, store at start of inputbuf
   602                              ; check for drive number
   603                              ; check for whitespace
   604                              ; check command ":rda?mls", execute command
   605  c2a6 a000                   ldy #0
   606  c2a8 2088c8                 jsr skipspaces
   607  c2ab c4a4                   cpy len
   608  c2ad f0f1                   beq -
   609  c2af 2050c8                 jsr chkcontinuedis
   610  c2b2 d003                   bne +
   611  c2b4 2062c8                 jsr executedisassemble ; note won't return
   612  c2b7 2093c8             +   jsr chkdot
   613  c2ba d003                   bne +
   614  c2bc 4ca4c3                 jmp executedot
   615  c2bf 209ec8             +   jsr chkhelp
   616  c2c2 d003                   bne +
   617  c2c4 4caec3                 jmp executehelp
   618  c2c7 20e8c8             +   jsr chkhexaddr1
   619  c2ca d003                   bne error
   620  c2cc 4cd2c2                 jmp executeaddr1
   621                          error:
   622  c2cf 4c71c8                 jmp reporterr
   623                          
   624                          executeaddr1:
   625  c2d2 c4a4                   cpy len
   626  c2d4 d003                   bne +
   627  c2d6 4c25c3                 jmp executedisplay1
   628  c2d9 2093c8             +   jsr chkdot
   629  c2dc d00f                   bne +
   630  c2de c4a4                   cpy len
   631  c2e0 f021                   beq executepagedisplay
   632  c2e2 2008c9                 jsr chkhexaddr2
   633  c2e5 d0e8                   bne error
   634  c2e7 18                     clc
   635  c2e8 66a7                   ror flag
   636  c2ea 4c1bc3                 jmp executeaddr12
   637  c2ed 2088c8             +   jsr skipspaces
   638  c2f0 20a9c8                 jsr chkcolon
   639  c2f3 d003                   bne +
   640  c2f5 4c82c3                 jmp executemodify
   641  c2f8 2029c9             +   jsr chkaddr1cmd ; rda, will not return here if cmd
   642  c2fb 20b4c8                 jsr chkfilename
   643  c2fe d0cf                   bne error
   644  c300 4cabc3                 jmp executeloadfilename
   645                          
   646                          executepagedisplay:
   647  c303 a5fb                   lda ptr1
   648  c305 18                     clc
   649                          !ifdef MINIMUM {
   650                              adc #$5f
   651                          } else {
   652  c306 69b7                   adc #$b7
   653                          }
   654  c308 85fd                   sta ptr2
   655  c30a a5fc                   lda ptr1+1
   656                          !ifdef MINIMUM {
   657                              adc #$01
   658                          } else {
   659  c30c 6900                   adc #$00
   660                          }
   661  c30e 85fe                   sta ptr2+1
   662  c310 9006                   bcc +
   663  c312 a9ff                   lda #$ff
   664  c314 85fd                   sta ptr2
   665  c316 85fe                   sta ptr2+1
   666  c318 38                 +   sec
   667  c319 66a7                   ror flag
   668                              ; fall through to executeaddr12
   669                          
   670                          executeaddr12:
   671  c31b c4a4                   cpy len
   672  c31d d003                   bne +
   673  c31f 4c2dc3                 jmp executedisplay12
   674  c322 4c6ac8             +   jmp reportnotimplemented
   675                          
   676                          executedisplay1:
   677  c325 a5fb                   lda ptr1
   678  c327 85fd                   sta ptr2
   679  c329 a5fc                   lda ptr1+1
   680  c32b 85fe                   sta ptr2+1
   681                              ; fall through executedisplay12
   682                          
   683                          executedisplay12:
   684  c32d a9ff                   lda #$ff
   685  c32f 85a3                   sta count
   686  c331 e6a3               -   inc count
   687  c333 a5a3                   lda count
   688                          !ifdef MINIMUM {    
   689                              and #$0f
   690                          } else {
   691  c335 2907                   and #$07
   692                          }
   693  c337 d016                   bne +
   694  c339 a90d                   lda #13
   695  c33b 20d2ff                 jsr charout
   696  c33e a5fb                   lda ptr1
   697  c340 a6fc                   ldx ptr1+1
   698  c342 200ac2                 jsr disphexword
   699  c345 a93a                   lda #':'
   700  c347 20d2ff                 jsr charout
   701  c34a a920                   lda #' '
   702  c34c 20d2ff                 jsr charout
   703  c34f a000               +   ldy #0
   704  c351 b1fb                   lda (ptr1),y
   705  c353 2010c2                 jsr disphexbyte
   706  c356 a920                   lda #' '
   707  c358 20d2ff                 jsr charout
   708  c35b e6fb                   inc ptr1
   709  c35d d004                   bne +
   710  c35f e6fc                   inc ptr1+1
   711  c361 f01c                   beq ++
   712  c363 2063c0             +   jsr compareptrs
   713  c366 90c9                   bcc -
   714  c368 f0c7                   beq -
   715  c36a 24a7                   bit flag
   716  c36c 1011                   bpl ++
   717                          !ifdef C64SCREEN {
   718  c36e 2045c9                 jsr newline
   719  c371 a5fb                   lda ptr1
   720  c373 a6fc                   ldx ptr1+1
   721  c375 200ac2                 jsr disphexword
   722  c378 a9f4                   lda #<page_displaymemory
   723  c37a a2ce                   ldx #>page_displaymemory
   724  c37c 4c7dc2                 jmp strout
   725                          }
   726  c37f 4c45c9             ++  jmp newline
   727                          
   728                          executemodify:
   729  c382 2088c8                 jsr skipspaces
   730  c385 c4a4                   cpy len
   731  c387 f018                   beq ++
   732  c389 20cec8                 jsr chkhexbyteofsequence
   733  c38c f003                   beq +
   734  c38e 4ccfc2                 jmp error
   735  c391 84ff               +   sty tmp
   736  c393 a000                   ldy #0
   737  c395 91fb                   sta (ptr1),y
   738  c397 e6fb                   inc ptr1
   739  c399 d002                   bne +
   740  c39b e6fc                   inc ptr1+1
   741  c39d a4ff               +   ldy tmp
   742  c39f d0e1                   bne executemodify
   743  c3a1 4c45c9             ++  jmp newline
   744                          
   745                          executedot:
   746  c3a4 c4a4                   cpy len
   747  c3a6 d003                   bne +
   748  c3a8 4c03c3                 jmp executepagedisplay
   749                          
   750                          executeloadfilename:
   751                          executeaddr1cmd:
   752  c3ab 4c6ac8             +   jmp reportnotimplemented
   753                          
   754                          executehelp:
   755                          !ifdef C64SCREEN {
   756  c3ae 2045c9                 jsr newline
   757                          }
   758  c3b1 c4a4                   cpy len
   759  c3b3 d003                   bne +
   760  c3b5 4ccec3                 jmp displayhelp
   761  c3b8 2088c8             +   jsr skipspaces
   762  c3bb 20e3c3                 jsr chkhelpinstructions
   763  c3be d003                   bne +
   764  c3c0 4c12c4                 jmp displayinstructions
   765  c3c3 20f0c3             +   jsr chkhelpmodes
   766  c3c6 d003                   bne +
   767  c3c8 4c29c4                 jmp displaymodes
   768  c3cb 4c6ac8             +   jmp reportnotimplemented
   769                          
   770                          displayhelp:
   771  c3ce a9ae                   lda #<generalhelp
   772  c3d0 a2cd                   ldx #>generalhelp
   773  c3d2 207dc2                 jsr strout
   774  c3d5 a91d                   lda #<generalhelp2
   775  c3d7 a2ce                   ldx #>generalhelp2
   776  c3d9 207dc2                 jsr strout
   777  c3dc a92d                   lda #<firsthelp
   778  c3de a2cd                   ldx #>firsthelp
   779  c3e0 4c7dc2                 jmp strout
   780                          
   781                          chkhelpinstructions:
   782  c3e3 b90002                 lda inputbuf, y
   783  c3e6 c941                   cmp #'A'
   784  c3e8 d005                   bne +
   785  c3ea b90102                 lda inputbuf+1, y
   786  c3ed c90d                   cmp #13
   787                              ; no need to increment y if found, done parsing line
   788  c3ef 60                 +   rts
   789                          
   790                          chkhelpmodes:
   791  c3f0 a9e8                   lda #<modes_keyword
   792  c3f2 a2ce                   ldx #>modes_keyword
   793                              ; fall through to chkkeyword
   794                          
   795                          chkkeyword:
   796  c3f4 84a3                   sty count
   797  c3f6 8526                   sta ptr3
   798  c3f8 8627                   stx ptr3+1
   799  c3fa a6a3                   ldx count
   800  c3fc a000                   ldy #0
   801  c3fe bd0002             -   lda inputbuf, x
   802  c401 d126                   cmp (ptr3),y
   803  c403 d008                   bne +
   804  c405 e8                     inx
   805  c406 c8                     iny
   806  c407 e4a4                   cpx len
   807  c409 d0f3                   bne -
   808  c40b b126                   lda (ptr3),y ; matched if end of string, will set Z
   809  c40d 08                 +   php ; save Z
   810  c40e a4a3                   ldy count
   811  c410 28                     plp ; restore Z
   812  c411 60                     rts
   813                          
   814                          displayinstructions:
   815  c412 a038                   ldy #ninst
   816  c414 a200                   ldx #0
   817  c416 8a                 -   txa
   818  c417 48                     pha
   819  c418 20aec0                 jsr dispinst
   820  c41b a920                   lda #' '
   821  c41d 20d2ff                 jsr charout
   822  c420 68                     pla
   823  c421 aa                     tax
   824  c422 e8                     inx
   825  c423 88                     dey
   826  c424 d0f0                   bne -
   827  c426 4c45c9                 jmp newline
   828                          
   829                          displaymodes:
   830  c429 38                     sec
   831  c42a a900                   lda #0
   832  c42c 48                 -   pha
   833  c42d aa                     tax
   834  c42e bd0cca                 lda mode_sorted, x
   835  c431 203ec4                 jsr dispmode
   836  c434 68                     pla
   837  c435 18                     clc
   838  c436 6901                   adc #1
   839  c438 c90d                   cmp #nmodes
   840  c43a 90f0                   bcc -
   841  c43c 18                     clc
   842  c43d 60                     rts
   843                          
   844                          dispmode:
   845  c43e c90d                   cmp #nmodes
   846  c440 b008                   bcs +
   847  c442 8524                   sta mode
   848  c444 2086c4                 jsr dispmodename
   849  c447 4c4bc4                 jmp dispmodeinstructions
   850  c44a 60                 +   rts
   851                          
   852                          dispmodeinstructions:
   853                          !ifdef C64SCREEN {
   854                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
   855  c44b a524                   lda mode
   856  c44d c903                   cmp #3
   857  c44f d005                   bne +
   858  c451 a920                   lda #' '
   859  c453 4cd2ff                 jmp charout
   860                          }
   861                              ; display instructions with this mode
   862  c456 a000               +   ldy #0
   863  c458 8423               --  sty inidx
   864  c45a a200                   ldx #0
   865  c45c 86ff               -   stx tmp
   866  c45e a523                   lda inidx
   867  c460 dda1cb                 cmp instidx, x
   868  c463 d014                   bne ++
   869  c465 bd38cc                 lda modeidx, x
   870  c468 c524                   cmp mode
   871  c46a d00d                   bne ++
   872  c46c a920                   lda #' '
   873  c46e 20d2ff                 jsr charout
   874  c471 bda1cb                 lda instidx, x
   875  c474 20aec0                 jsr dispinst
   876  c477 a6ff                   ldx tmp
   877  c479 e8                 ++  inx
   878  c47a e097                   cpx #nopcodes
   879  c47c 90de                   bcc -
   880  c47e c8                     iny
   881  c47f c038                   cpy #ninst
   882  c481 d0d5                   bne --
   883  c483 4c45c9                 jmp newline
   884                          
   885                          dispmodename:
   886  c486 0a                     asl
   887  c487 aa                     tax
   888  c488 bdf0ca                 lda mode_examples, x
   889  c48b 48                     pha
   890  c48c bdf1ca                 lda mode_examples+1, x
   891  c48f aa                     tax
   892                          !ifdef C64SCREEN {
   893  c490 a912                   lda #18
   894  c492 20d2ff                 jsr charout
   895                          }    
   896  c495 68                     pla
   897                          !ifdef C64SCREEN {    
   898  c496 207dc2                 jsr strout
   899  c499 a992                   lda #146
   900  c49b 4cd2ff                 jmp charout
   901                          } else {
   902                              jmp strout
   903                          }
   904                          
   905                          executeassemble:
   906  c49e 68                     pla ; remove low byte return address
   907  c49f 68                     pla ; return high byte return address
   908                          !ifdef C64SCREEN {    
   909  c4a0 a914                   lda #20
   910  c4a2 20d2ff                 jsr charout
   911  c4a5 20d2ff                 jsr charout
   912                          } else {
   913                              lda ptr1
   914                              ldx ptr1+1
   915                              jsr disphexword
   916                              lda #' '
   917                              jsr charout
   918                          }
   919                              ; save current pointer
   920  c4a8 a5fb               --  lda ptr1
   921  c4aa a6fc                   ldx ptr1+1
   922  c4ac 8526                   sta ptr3
   923  c4ae 8627                   stx ptr3+1
   924  c4b0 208ec2                 jsr inputline
   925  c4b3 c001                   cpy #1
   926  c4b5 f040                   beq ++
   927  c4b7 88                     dey
   928  c4b8 84a4                   sty len
   929  c4ba a000                   ldy #0
   930  c4bc 2088c8                 jsr skipspaces
   931  c4bf c4a4                   cpy len
   932  c4c1 f034                   beq ++
   933                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
   934                              ;jsr skipspaces
   935  c4c3 20cdc7                 jsr chkinstruction
   936  c4c6 f003                   beq +
   937  c4c8 4ccfc2             -   jmp error    
   938  c4cb 2021c5             +   jsr chkaddressing
   939  c4ce d0f8                   bne -
   940  c4d0 20fec7                 jsr find_inst_and_mode
   941  c4d3 d0f3                   bne -
   942  c4d5 20fac4                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
   943  c4d8 18                     clc
   944  c4d9 a525                   lda size
   945  c4db 6526                   adc ptr3
   946  c4dd 85fb                   sta ptr1
   947  c4df a527                   lda ptr3+1
   948  c4e1 6900                   adc #0
   949  c4e3 85fc                   sta ptr1+1
   950                          !ifdef C64SCREEN {    
   951  c4e5 2045c9                 jsr newline
   952                          }
   953  c4e8 a5fb                   lda ptr1
   954  c4ea a6fc                   ldx ptr1+1
   955  c4ec 200ac2                 jsr disphexword
   956  c4ef a920                   lda #' '
   957  c4f1 20d2ff                 jsr charout
   958  c4f4 4ca8c4                 jmp --
   959                          ++  
   960                          !ifdef C64SCREEN {
   961  c4f7 4c45c9                 jmp newline
   962                          } else {
   963                              rts
   964                          }
   965                          
   966                          store_assembly:
   967  c4fa a622                   ldx opidx
   968  c4fc bd0acb                 lda opcodes, x
   969  c4ff a000                   ldy #0
   970  c501 9126                   sta (ptr3), y
   971  c503 c8                     iny
   972  c504 a625                   ldx size
   973  c506 e001                   cpx #1
   974  c508 f016                   beq ++
   975  c50a e002               +   cpx #2
   976  c50c d005                   bne +
   977  c50e a5a6                   lda tmp2
   978  c510 9126                   sta (ptr3), y
   979  c512 60                     rts
   980  c513 e003               +   cpx #3
   981  c515 d009                   bne ++
   982  c517 a5fb                   lda ptr1
   983  c519 9126                   sta (ptr3), y
   984  c51b c8                     iny
   985  c51c a5fc                   lda ptr1+1
   986  c51e 9126                   sta (ptr3), y
   987  c520 60                 ++  rts
   988                          
   989                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
   990  c521 2088c8                 jsr skipspaces
   991  c524 a200                   ldx #0
   992  c526 8624                   stx mode
   993  c528 2083c5                 jsr chkaccumulator
   994  c52b f051                   beq +
   995  c52d e624                   inc mode
   996  c52f c4a4                   cpy len ; chknone
   997  c531 f04b                   beq +
   998  c533 e624                   inc mode
   999  c535 20a7c5                 jsr chkimmediate
  1000  c538 f044                   beq +
  1001  c53a e624                   inc mode
  1002  c53c 20cbc5                 jsr chkindirectx
  1003  c53f f03d                   beq +
  1004  c541 e624                   inc mode
  1005  c543 2010c6                 jsr chkindirecty
  1006  c546 f036                   beq +
  1007  c548 e624                   inc mode
  1008  c54a 2055c6                 jsr chkrelative
  1009  c54d f02f                   beq +
  1010  c54f e624                   inc mode
  1011  c551 20b0c6                 jsr chkzeropage
  1012  c554 f028                   beq +
  1013  c556 e624                   inc mode
  1014  c558 20c9c6                 jsr chkzeropagex
  1015  c55b f021                   beq +
  1016  c55d e624                   inc mode
  1017  c55f 20f8c6                 jsr chkzeropagey
  1018  c562 f01a                   beq +
  1019  c564 e624                   inc mode
  1020  c566 2027c7                 jsr chkabsolute
  1021  c569 f013                   beq +
  1022  c56b e624                   inc mode
  1023  c56d 2040c7                 jsr chkabsolutex
  1024  c570 f00c                   beq +
  1025  c572 e624                   inc mode
  1026  c574 206fc7                 jsr chkabsolutey
  1027  c577 f005                   beq +
  1028  c579 e624                   inc mode
  1029  c57b 209ec7                 jsr chkindirect
  1030  c57e 08                 +   php ; save Z
  1031  c57f a524                   lda mode
  1032  c581 28                     plp ; restore Z 
  1033  c582 60                     rts
  1034                          
  1035                          chkaccumulator:
  1036  c583 c4a4                   cpy len
  1037  c585 d013                   bne +
  1038  c587 a523                   lda inidx
  1039  c589 c902                   cmp #2 ; ASL
  1040  c58b f019                   beq ++
  1041  c58d c920                   cmp #32 ; LSR
  1042  c58f f015                   beq ++
  1043  c591 c927                   cmp #39 ; ROL
  1044  c593 f011                   beq ++
  1045  c595 c928                   cmp #40 ; ROR
  1046  c597 4ca6c5                 jmp ++
  1047  c59a b90002             +   lda inputbuf, y
  1048  c59d c941                   cmp #'A'
  1049  c59f d005                   bne ++
  1050  c5a1 b90102                 lda inputbuf+1,y
  1051  c5a4 c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1052  c5a6 60                 ++  rts
  1053                          
  1054                          chkimmediate:
  1055  c5a7 84a5                   sty savepos
  1056  c5a9 b90002                 lda inputbuf, y
  1057  c5ac c923                   cmp #'#'
  1058  c5ae d016                   bne ++
  1059  c5b0 c8                     iny
  1060  c5b1 2088c8                 jsr skipspaces
  1061  c5b4 b90002                 lda inputbuf, y
  1062  c5b7 c924                   cmp #'$'
  1063  c5b9 d001                   bne +
  1064  c5bb c8                     iny
  1065  c5bc 20f1c8             +   jsr chkhexbyte
  1066  c5bf d005                   bne ++
  1067  c5c1 c4a4               +   cpy len
  1068  c5c3 d001                   bne ++
  1069  c5c5 60                     rts
  1070  c5c6 a4a5               ++  ldy savepos
  1071  c5c8 a201                   ldx #1 ; Z false (NE)
  1072  c5ca 60                     rts
  1073                          
  1074                          chkindirectx:
  1075  c5cb 84a5                   sty savepos
  1076  c5cd b90002                 lda inputbuf, y
  1077  c5d0 c928                   cmp #'('
  1078  c5d2 d037                   bne ++
  1079  c5d4 c8                     iny
  1080  c5d5 2088c8                 jsr skipspaces
  1081  c5d8 b90002                 lda inputbuf, y
  1082  c5db c924                   cmp #'$'
  1083  c5dd d001                   bne +
  1084  c5df c8                     iny
  1085  c5e0 20f1c8             +   jsr chkhexbyte
  1086  c5e3 d026                   bne ++
  1087  c5e5 2088c8                 jsr skipspaces
  1088  c5e8 b90002                 lda inputbuf, y
  1089  c5eb c92c                   cmp #','
  1090  c5ed d01c                   bne ++
  1091  c5ef c8                     iny
  1092  c5f0 2088c8                 jsr skipspaces
  1093  c5f3 b90002                 lda inputbuf, y
  1094  c5f6 c958                   cmp #'X'
  1095  c5f8 d011                   bne ++
  1096  c5fa c8                     iny
  1097  c5fb 2088c8                 jsr skipspaces
  1098  c5fe b90002                 lda inputbuf, y
  1099  c601 c929                   cmp #')'
  1100  c603 d006                   bne ++
  1101  c605 c8                     iny
  1102  c606 c4a4                   cpy len
  1103  c608 d001                   bne ++
  1104  c60a 60                     rts
  1105  c60b a4a5               ++  ldy savepos
  1106  c60d a201                   ldx #1 ; Z false (NE)
  1107  c60f 60                     rts
  1108                          
  1109                          chkindirecty:
  1110  c610 84a5                   sty savepos
  1111  c612 b90002                 lda inputbuf, y
  1112  c615 c928                   cmp #'('
  1113  c617 d037                   bne ++
  1114  c619 c8                     iny
  1115  c61a 2088c8                 jsr skipspaces
  1116  c61d b90002                 lda inputbuf, y
  1117  c620 c924                   cmp #'$'
  1118  c622 d001                   bne +
  1119  c624 c8                     iny
  1120  c625 20f1c8             +   jsr chkhexbyte
  1121  c628 d026                   bne ++
  1122  c62a 2088c8                 jsr skipspaces
  1123  c62d b90002                 lda inputbuf, y
  1124  c630 c929                   cmp #')'
  1125  c632 d01c                   bne ++
  1126  c634 c8                     iny
  1127  c635 2088c8                 jsr skipspaces
  1128  c638 b90002                 lda inputbuf, y
  1129  c63b c92c                   cmp #','
  1130  c63d d011                   bne ++
  1131  c63f c8                     iny
  1132  c640 2088c8                 jsr skipspaces
  1133  c643 b90002                 lda inputbuf, y
  1134  c646 c959                   cmp #'Y'
  1135  c648 d006                   bne ++
  1136  c64a c8                     iny
  1137  c64b c4a4                   cpy len
  1138  c64d d001                   bne ++
  1139  c64f 60                     rts
  1140  c650 a4a5               ++  ldy savepos
  1141  c652 a201                   ldx #1 ; Z false (NE)
  1142  c654 60                     rts
  1143                          
  1144                          chkrelative:
  1145  c655 84a5                   sty savepos
  1146  c657 a623                   ldx inidx
  1147  c659 e006                   cpx #6 ; BIT
  1148  c65b f01e                   beq ++
  1149  c65d bd4ac9                 lda inst0, x
  1150  c660 c942                   cmp #'B'
  1151  c662 d017                   bne ++
  1152  c664 b90002                 lda inputbuf, y
  1153  c667 c924                   cmp #'$'
  1154  c669 d001                   bne +
  1155  c66b c8                     iny
  1156  c66c 20e8c8             +   jsr chkhexword
  1157  c66f d00a                   bne ++
  1158  c671 c4a4                   cpy len
  1159  c673 d006                   bne ++
  1160  c675 2080c6                 jsr computeoffset
  1161  c678 d001                   bne ++
  1162  c67a 60                     rts ; Z true (EQ)
  1163  c67b a4a5               ++  ldy savepos
  1164  c67d a201                   ldx #1 ; Z false (NE)
  1165  c67f 60                     rts
  1166                          
  1167                          computeoffset:
  1168                          ;   compute next address
  1169  c680 a527                   lda ptr3+1
  1170  c682 85fe                   sta ptr2+1
  1171  c684 a526                   lda ptr3
  1172  c686 18                     clc
  1173  c687 6902                   adc #2
  1174  c689 85fd                   sta ptr2
  1175  c68b 9002                   bcc +
  1176  c68d e6fe                   inc ptr2+1
  1177                          +  ; subtract argument
  1178  c68f 38                     sec
  1179  c690 a5fb                   lda ptr1
  1180  c692 e5fd                   sbc ptr2
  1181  c694 85a6                   sta tmp2
  1182  c696 a5fc                   lda ptr1+1
  1183  c698 e5fe                   sbc ptr2+1
  1184  c69a f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1185  c69c c9ff                   cmp #$FF
  1186  c69e d00d                   bne failedoffset ; 0 and FF were only options so fail
  1187                              ; chkeck negative offset
  1188  c6a0 a5a6                   lda tmp2
  1189  c6a2 3006                   bmi successoffset ; branch if signed byte is negative
  1190  c6a4 1007                   bpl failedoffset ; otherwise fail
  1191                          chkoffsetto127:
  1192  c6a6 a5a6                   lda tmp2
  1193  c6a8 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1194                          successoffset:    
  1195  c6aa a900                   lda #0 ; Z true (EQ)
  1196  c6ac 60                     rts
  1197                          failedoffset:
  1198  c6ad a901                   lda #1 ; Z false (NE)
  1199  c6af 60                     rts
  1200                          
  1201                          chkzeropage:
  1202  c6b0 84a5                   sty savepos
  1203  c6b2 b90002                 lda inputbuf, y
  1204  c6b5 c924                   cmp #'$'
  1205  c6b7 d001                   bne +
  1206  c6b9 c8                     iny
  1207  c6ba 20f1c8             +   jsr chkhexbyte
  1208  c6bd d005                   bne ++
  1209  c6bf c4a4                   cpy len
  1210  c6c1 d001                   bne ++
  1211  c6c3 60                     rts ; Z true (EQ)
  1212  c6c4 a4a5               ++  ldy savepos
  1213  c6c6 a201                   ldx #1 ; Z false (NE)
  1214  c6c8 60                     rts
  1215                          
  1216                          chkzeropagex:
  1217  c6c9 84a5                   sty savepos
  1218  c6cb b90002                 lda inputbuf, y
  1219  c6ce c924                   cmp #'$'
  1220  c6d0 d001                   bne +
  1221  c6d2 c8                     iny
  1222  c6d3 20f1c8             +   jsr chkhexbyte
  1223  c6d6 d01b                   bne ++
  1224  c6d8 2088c8                 jsr skipspaces
  1225  c6db b90002                 lda inputbuf, y
  1226  c6de c92c                   cmp #','
  1227  c6e0 d011                   bne ++
  1228  c6e2 c8                     iny
  1229  c6e3 2088c8                 jsr skipspaces
  1230  c6e6 b90002                 lda inputbuf, y
  1231  c6e9 c958                   cmp #'X'
  1232  c6eb d006                   bne ++
  1233  c6ed c8                     iny
  1234  c6ee c4a4                   cpy len
  1235  c6f0 d001                   bne ++
  1236  c6f2 60                     rts ; Z true (EQ)
  1237  c6f3 a4a5               ++  ldy savepos
  1238  c6f5 a201                   ldx #1 ; Z false (NE)
  1239  c6f7 60                     rts
  1240                          
  1241                          chkzeropagey:
  1242  c6f8 84a5                   sty savepos
  1243  c6fa b90002                 lda inputbuf, y
  1244  c6fd c924                   cmp #'$'
  1245  c6ff d001                   bne +
  1246  c701 c8                     iny
  1247  c702 20f1c8             +   jsr chkhexbyte
  1248  c705 d01b                   bne ++
  1249  c707 2088c8                 jsr skipspaces
  1250  c70a b90002                 lda inputbuf, y
  1251  c70d c92c                   cmp #','
  1252  c70f d011                   bne ++
  1253  c711 c8                     iny
  1254  c712 2088c8                 jsr skipspaces
  1255  c715 b90002                 lda inputbuf, y
  1256  c718 c959                   cmp #'Y'
  1257  c71a d006                   bne ++
  1258  c71c c8                     iny
  1259  c71d c4a4                   cpy len
  1260  c71f d001                   bne ++
  1261  c721 60                     rts ; Z true (EQ)
  1262  c722 a4a5               ++  ldy savepos
  1263  c724 a201                   ldx #1 ; Z false (NE)
  1264  c726 60                     rts
  1265                          
  1266                          chkabsolute:
  1267  c727 84a5                   sty savepos
  1268  c729 b90002                 lda inputbuf, y
  1269  c72c c924                   cmp #'$'
  1270  c72e d001                   bne +
  1271  c730 c8                     iny
  1272  c731 20e8c8             +   jsr chkhexword
  1273  c734 d005                   bne ++
  1274  c736 c4a4                   cpy len
  1275  c738 d001                   bne ++
  1276  c73a 60                     rts ; Z true (EQ)
  1277  c73b a4a5               ++  ldy savepos
  1278  c73d a201                   ldx #1 ; Z false (NE)
  1279  c73f 60                     rts
  1280                          
  1281                          chkabsolutex:
  1282  c740 84a5                   sty savepos
  1283  c742 b90002                 lda inputbuf, y
  1284  c745 c924                   cmp #'$'
  1285  c747 d001                   bne +
  1286  c749 c8                     iny
  1287  c74a 20e8c8             +   jsr chkhexword
  1288  c74d d01b                   bne ++
  1289  c74f 2088c8                 jsr skipspaces
  1290  c752 b90002                 lda inputbuf, y
  1291  c755 c92c                   cmp #','
  1292  c757 d011                   bne ++
  1293  c759 c8                     iny
  1294  c75a 2088c8                 jsr skipspaces
  1295  c75d b90002                 lda inputbuf, y
  1296  c760 c958                   cmp #'X'
  1297  c762 d006                   bne ++
  1298  c764 c8                     iny
  1299  c765 c4a4                   cpy len
  1300  c767 d001                   bne ++
  1301  c769 60                     rts ; Z true (EQ)
  1302  c76a a4a5               ++  ldy savepos
  1303  c76c a201                   ldx #1 ; Z false (NE)
  1304  c76e 60                     rts
  1305                          
  1306                          chkabsolutey:
  1307  c76f 84a5                   sty savepos
  1308  c771 b90002                 lda inputbuf, y
  1309  c774 c924                   cmp #'$'
  1310  c776 d001                   bne +
  1311  c778 c8                     iny
  1312  c779 20e8c8             +   jsr chkhexword
  1313  c77c d01b                   bne ++
  1314  c77e 2088c8                 jsr skipspaces
  1315  c781 b90002                 lda inputbuf, y
  1316  c784 c92c                   cmp #','
  1317  c786 d011                   bne ++
  1318  c788 c8                     iny
  1319  c789 2088c8                 jsr skipspaces
  1320  c78c b90002                 lda inputbuf, y
  1321  c78f c959                   cmp #'Y'
  1322  c791 d006                   bne ++
  1323  c793 c8                     iny
  1324  c794 c4a4                   cpy len
  1325  c796 d001                   bne ++
  1326  c798 60                     rts ; Z true (EQ)
  1327  c799 a4a5               ++  ldy savepos
  1328  c79b a201                   ldx #1 ; Z false (NE)
  1329  c79d 60                     rts
  1330                          
  1331                          chkindirect:
  1332  c79e 84a5                   sty savepos
  1333  c7a0 b90002                 lda inputbuf, y
  1334  c7a3 c928                   cmp #'('
  1335  c7a5 d021                   bne ++
  1336  c7a7 c8                     iny
  1337  c7a8 2088c8                 jsr skipspaces
  1338  c7ab b90002                 lda inputbuf, y
  1339  c7ae c924                   cmp #'$'
  1340  c7b0 d001                   bne +
  1341  c7b2 c8                     iny
  1342  c7b3 20e8c8             +   jsr chkhexword
  1343  c7b6 d010                   bne ++
  1344  c7b8 2088c8                 jsr skipspaces
  1345  c7bb b90002                 lda inputbuf, y
  1346  c7be c929                   cmp #')'
  1347  c7c0 d006                   bne ++
  1348  c7c2 c8                     iny
  1349  c7c3 c4a4                   cpy len
  1350  c7c5 d001                   bne ++
  1351  c7c7 60                     rts ; Z true (EQ)
  1352  c7c8 a4a5               ++  ldy savepos
  1353  c7ca a201                   ldx #1 ; Z false (NE)
  1354  c7cc 60                     rts
  1355                          
  1356                          chkinstruction:
  1357  c7cd c4a4                   cpy len
  1358  c7cf f02a                   beq ++
  1359  c7d1 84ff                   sty tmp
  1360  c7d3 a237                   ldx #(ninst-1)
  1361  c7d5 b90002             -   lda inputbuf,y
  1362  c7d8 dd4ac9                 cmp inst0,x
  1363  c7db d019                   bne +
  1364  c7dd c8                     iny
  1365  c7de b90002                 lda inputbuf,y
  1366  c7e1 dd82c9                 cmp inst1,x
  1367  c7e4 d010                   bne +
  1368  c7e6 c8                     iny
  1369  c7e7 b90002                 lda inputbuf,y
  1370  c7ea ddbac9                 cmp inst2,x
  1371  c7ed d007                   bne +
  1372  c7ef c8                     iny
  1373  c7f0 8a                     txa
  1374  c7f1 8523                   sta inidx
  1375  c7f3 a200                   ldx #0
  1376  c7f5 60                     rts
  1377  c7f6 a4ff               +   ldy tmp
  1378  c7f8 ca                     dex
  1379  c7f9 10da                   bpl -
  1380  c7fb a201               ++  ldx #1 ; Z false (NE)
  1381  c7fd 60                     rts
  1382                          
  1383                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1384                              ; and allows mode promotion
  1385  c7fe 2017c8                 jsr find_inst_and_mode2
  1386  c801 f013                   beq ++
  1387  c803 a524                   lda mode
  1388  c805 c906                   cmp #6
  1389  c807 900d                   bcc ++
  1390  c809 c90a                   cmp #10
  1391  c80b b007                   bcs +
  1392  c80d 6903                   adc #3
  1393  c80f 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1394  c811 4c17c8                 jmp find_inst_and_mode2 ; try again once
  1395  c814 a201               +   ldx #1 ; Z false (NE)
  1396  c816 60                 ++  rts
  1397                          
  1398                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1399  c817 a296                   ldx #nopcodes-1
  1400  c819 bda1cb             -   lda instidx, x
  1401  c81c bc38cc                 ldy modeidx, x
  1402  c81f c523                   cmp inidx
  1403  c821 d00c                   bne +
  1404  c823 c424                   cpy mode
  1405  c825 d008                   bne +
  1406  c827 8622                   stx opidx
  1407  c829 2097c0                 jsr getsize
  1408  c82c a200                   ldx #0 ; Z true (EQ)
  1409  c82e 60                     rts
  1410  c82f ca                 +   dex
  1411  c830 e0ff                   cpx #$ff
  1412  c832 d0e5                   bne -
  1413  c834 a201                   ldx #1 ; Z false (NE)
  1414  c836 60                     rts
  1415                          
  1416                          executerun:
  1417  c837 68                     pla ; remove low byte return address
  1418  c838 68                     pla ; return high byte return address
  1419  c839 68                     pla ; again, we're really not returning
  1420  c83a 68                     pla ; again, we're really not returning
  1421  c83b 2045c9                 jsr newline
  1422  c83e 38                     sec
  1423  c83f a5fb                   lda ptr1
  1424  c841 e901                   sbc #1
  1425  c843 85fb                   sta ptr1
  1426  c845 b002                   bcs +
  1427  c847 c6fc                   dec ptr1+1
  1428  c849 a5fc               +   lda ptr1+1
  1429  c84b 48                     pha
  1430  c84c a5fb                   lda ptr1
  1431  c84e 48                     pha
  1432  c84f 60                     rts
  1433                          
  1434                          chkcontinuedis:
  1435  c850 b90002                 lda inputbuf,y
  1436  c853 c944                   cmp #'D'
  1437  c855 d00a                   bne +
  1438  c857 b90102                 lda inputbuf+1,y
  1439  c85a c90d                   cmp #13
  1440  c85c d003                   bne +
  1441  c85e c8                     iny
  1442  c85f a200                   ldx #0 ; restore Z set
  1443  c861 60                 +   rts
  1444                          
  1445                          executedisassemble:
  1446  c862 68                     pla ; remove low byte return address
  1447  c863 68                     pla ; return high byte return address
  1448  c864 2045c9                 jsr newline
  1449  c867 4c34c0                 jmp disassemble
  1450                          
  1451                          reportnotimplemented:
  1452  c86a a99d                   lda #<notimplemented
  1453  c86c a2cd                   ldx #>notimplemented
  1454  c86e 4c7dc2                 jmp strout
  1455                          
  1456                          reporterr:
  1457  c871 c000                   cpy #0
  1458  c873 f008                   beq +
  1459  c875 a920                   lda #' '
  1460  c877 20d2ff             -   jsr charout
  1461  c87a 88                     dey
  1462  c87b d0fa                   bne -
  1463  c87d a93f               +   lda #'?'
  1464  c87f 20d2ff                 jsr charout
  1465  c882 a90d                   lda #13
  1466  c884 20d2ff                 jsr charout
  1467  c887 60                     rts
  1468                          
  1469                          skipspaces:
  1470  c888 b90002             -   lda inputbuf, y
  1471  c88b c920                   cmp #$20
  1472  c88d d003                   bne +
  1473  c88f c8                     iny
  1474  c890 d0f6                   bne -
  1475  c892 60                 +   rts
  1476                          
  1477                          chkdot:
  1478  c893 b90002                 lda inputbuf, y
  1479  c896 c92e                   cmp #'.'
  1480  c898 d003                   bne +
  1481  c89a c8                     iny
  1482  c89b a900                   lda #0 ; Z true (EQ)
  1483  c89d 60                 +   rts
  1484                          
  1485                          chkhelp:
  1486  c89e b90002                 lda inputbuf, y
  1487  c8a1 c93f                   cmp #'?'
  1488  c8a3 d003                   bne +
  1489  c8a5 c8                     iny
  1490  c8a6 a900                   lda #0 ; Z true (EQ)
  1491  c8a8 60                 +   rts
  1492                          
  1493                          chkcolon:
  1494  c8a9 b90002                 lda inputbuf, y
  1495  c8ac c93a                   cmp #':'
  1496  c8ae d003                   bne +
  1497  c8b0 c8                     iny
  1498  c8b1 a900                   lda #0 ; Z true (EQ)
  1499  c8b3 60                 +   rts
  1500                          
  1501                          chkfilename:
  1502  c8b4 84ff                   sty tmp
  1503  c8b6 b90002                 lda inputbuf, y
  1504  c8b9 c922                   cmp #34
  1505  c8bb d010                   bne ++
  1506  c8bd c8                 -   iny
  1507  c8be b90002                 lda inputbuf, y
  1508  c8c1 c90d                   cmp #13
  1509  c8c3 d004                   bne +
  1510  c8c5 a4ff                   ldy tmp
  1511  c8c7 d004                   bne ++
  1512  c8c9 c922               +   cmp #34
  1513  c8cb d0f0                   bne -
  1514  c8cd 60                 ++  rts
  1515                          
  1516                          chkhexbyteofsequence:
  1517  c8ce 2043c2                 jsr inputhexbyte
  1518  c8d1 20ebc8                 jsr +
  1519  c8d4 d011                   bne ++ ; Z false (NE) if failed checks
  1520  c8d6 c4a4                   cpy len
  1521  c8d8 f00d                   beq ++ ; Z true (EQ) if end of input
  1522  c8da 85ff                   sta tmp
  1523  c8dc b90002                 lda inputbuf,y
  1524  c8df c920                   cmp #$20
  1525  c8e1 d004                   bne ++ ; Z false (NE) if not space
  1526  c8e3 a5ff                   lda tmp
  1527  c8e5 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1528  c8e7 60                 ++  rts
  1529                          
  1530                          chkhexword:
  1531                          chkhexaddr1:
  1532  c8e8 2026c2                 jsr inputhexword
  1533  c8eb a200               +   ldx #0 ; Z true (EQ)
  1534  c8ed 9001                   bcc +
  1535  c8ef e8                     inx ; Z false (NE)
  1536  c8f0 60                 +   rts
  1537                          
  1538                          chkhexbyte
  1539  c8f1 98                     tya
  1540  c8f2 48                     pha ; save y
  1541  c8f3 2043c2                 jsr inputhexbyte
  1542  c8f6 b00d                   bcs +
  1543  c8f8 85a6                   sta tmp2
  1544  c8fa 205fc2                 jsr inputhexnybble
  1545  c8fd 9006                   bcc +
  1546  c8ff 68                     pla ; throw away saved y
  1547  c900 a5a6                   lda tmp2
  1548  c902 a200                   ldx #0 ; Z true (EQ)
  1549  c904 60                     rts
  1550  c905 68                 +   pla
  1551  c906 a8                     tay ; won't be zero, so Z false (NE)
  1552  c907 60                     rts    
  1553                          
  1554                          chkhexaddr2:
  1555  c908 a5fb                   lda ptr1
  1556  c90a 48                     pha
  1557  c90b a5fc                   lda ptr1+1
  1558  c90d 48                     pha
  1559  c90e 20e8c8                 jsr chkhexaddr1
  1560  c911 f005                   beq +
  1561  c913 68                     pla
  1562  c914 68                     pla
  1563  c915 a901                   lda #1 ; Z false (NE)
  1564  c917 60                     rts
  1565  c918 a5fb               +   lda ptr1
  1566  c91a 85fd                   sta ptr2
  1567  c91c a5fc                   lda ptr1+1
  1568  c91e 85fe                   sta ptr2+1
  1569  c920 68                     pla
  1570  c921 85fc                   sta ptr1+1
  1571  c923 68                     pla
  1572  c924 85fb                   sta ptr1
  1573  c926 a900                   lda #0 ; Z true (EQ)
  1574  c928 60                     rts    
  1575                          
  1576                          chkaddr1cmd:
  1577  c929 b90002                 lda inputbuf, y
  1578  c92c c941               +   cmp #'A'
  1579  c92e d004                   bne +
  1580  c930 c8                     iny
  1581  c931 4c9ec4                 jmp executeassemble
  1582  c934 c944               +   cmp #'D'
  1583  c936 d004                   bne +
  1584  c938 c8                     iny
  1585  c939 4c62c8                 jmp executedisassemble
  1586  c93c c952               +   cmp #'R'
  1587  c93e d004                   bne +
  1588  c940 c8                     iny
  1589  c941 4c37c8                 jmp executerun
  1590  c944 60                 +   rts
  1591                          
  1592                          newline:
  1593  c945 a90d                   lda #13
  1594  c947 4cd2ff                 jmp charout
  1595                          
  1596                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1597                          ;     jsr $ffd2
  1598                          ;     pha
  1599                          ; -   lda $d011
  1600                          ;     bpl -
  1601                          ; -   lda $d011
  1602                          ;     bmi -
  1603                          ; -   lda $d011
  1604                          ;     bpl -
  1605                          ; -   lda $d011
  1606                          ;     bmi -
  1607                          ;     pla
  1608                          ;     rts
  1609                          
  1610                          !ifdef MINIMUM {
  1611                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1612                          ;; MC6850
  1613                          UART_DATA=$FFF8
  1614                          UART_STCR=$FFF9
  1615                          
  1616                          UART_INIT:
  1617                          	ldx #0b00000111 ; 11=reset device
  1618                          	stx UART_STCR
  1619                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  1620                          	sta UART_STCR
  1621                          	rts
  1622                          UART_OUT:
  1623                          	pha
  1624                          -	lda UART_STCR
  1625                          	and #2
  1626                          	beq - ; branch if TDRE=0, not finished transmitting
  1627                          	pla
  1628                          	pha
  1629                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  1630                          	sta UART_DATA
  1631                          	pla
  1632                          	rts
  1633                          UART_IN:
  1634                          -	lda UART_STCR
  1635                          	and #1
  1636                          	beq - ; branch if TDRF=0, not received
  1637                          	lda UART_DATA
  1638                          	; software "CAPS LOCK" because wozmon expects only uppercase
  1639                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  1640                          	beq BREAK
  1641                              ; force lowercase alphabet to uppercase
  1642                              cmp #'a'
  1643                          	bcc +
  1644                          	cmp #'z'+1
  1645                          	bcs +
  1646                          	eor #$20
  1647                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  1648                           	rts
  1649                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  1650                          	pha ; save A
  1651                          	lda UART_STCR
  1652                          	lsr ; put rightmost bit in carry
  1653                          	pla ; restore A affects flags
  1654                          	ror ; move carry to left bit, right bit to carry
  1655                          	php ; push processor to save N
  1656                          	rol ; restore A affects flags
  1657                          	plp ; pull processor to restore N
  1658                          	rts
  1659                          
  1660                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1661                          ; Processor start and interrupts
  1662                          
  1663                          NMI: ; unused on minimum (no source of interrupt)
  1664                              rti
  1665                          
  1666                          IRQ:
  1667                              rti ; TODO implement BRK HANDLING in monitor
  1668                          
  1669                          BREAK:
  1670                              jmp RESET
  1671                          
  1672                          RESET:
  1673                              cld
  1674                              ldx #$00
  1675                              txs
  1676                              jsr JUART_INIT
  1677                              cli
  1678                              jmp start
  1679                          } ; !ifdef MINIMUM
  1680                          
  1681                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1682                          ; data
  1683                          
  1684                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  1685                          ninst = 56
  1686  c94a 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  1687  c982 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  1688  c9ba 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  1689                          
  1690                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  1691                          mode_jmptable:
  1692  c9f2 23c1               !word dispModeAcc-1; 0 Accumulator 1
  1693  c9f4 28c1               !word dispModeNone-1 ; 1 None 1
  1694  c9f6 29c1               !word dispModeImm-1 ; 2 Immediate 2
  1695  c9f8 3ac1               !word dispModeIndX-1 ; 3 IndirectX 2
  1696  c9fa 5ac1               !word dispModeIndY-1 ; 4 IndirectY 2
  1697  c9fc 7ac1               !word dispModeRel-1 ; 5 Relative 2
  1698  c9fe 2ec1               !word dispModeZP-1 ; 6 ZeroPage 2
  1699  ca00 b6c1               !word dispModeZPX-1 ; 7 ZeroPageX 2
  1700  ca02 c3c1               !word dispModeZPY-1 ; 8 ZeroPageY 2
  1701  ca04 d0c1               !word dispModeAbs-1 ; 9 Absolute 3
  1702  ca06 e2c1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  1703  ca08 efc1               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  1704  ca0a fcc1               !word dispModeInd-1 ; 12 Indirect 3
  1705                          
  1706                          nmodes = 13
  1707                          
  1708                          mode_sorted:
  1709  ca0c 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  1710                          
  1711                          !ifdef MINIMUM {
  1712                          mode_example_0: !text "Accumulator A", 0
  1713                          mode_example_1: !text "None ", 0
  1714                          mode_example_2: !text "Immediate #$12", 0
  1715                          mode_example_3: !text "IndirectX ($12,X)", 0
  1716                          mode_example_4: !text "IndirectY ($12),Y", 0
  1717                          mode_example_5: !text "Relative $1234 {-128 to +127}", 0
  1718                          mode_example_6: !text "ZeroPage $12", 0
  1719                          mode_example_7: !text "ZeroPageX $12,X", 0
  1720                          mode_example_8: !text "ZeroPageY $12,Y", 0
  1721                          mode_example_9: !text "Absolute $1234", 0
  1722                          mode_example_10: !text "AbsoluteX $1234,X", 0
  1723                          mode_example_11: !text "AbsoluteY $1234,Y", 0
  1724                          mode_example_12: !text "Indirect ($1234)", 0
  1725                          } else {
  1726  ca19 414343554d554c41...mode_example_0: !text "ACCUMULATOR A", 0
  1727  ca27 4e4f4e452000       mode_example_1: !text "NONE ", 0
  1728  ca2d 494d4d4544494154...mode_example_2: !text "IMMEDIATE #$12", 0
  1729  ca3c 494e444952454354...mode_example_3: !text "INDIRECTX ($12,X)", 0
  1730  ca4e 494e444952454354...mode_example_4: !text "INDIRECTY ($12),Y", 0
  1731  ca60 52454c4154495645...mode_example_5: !text "RELATIVE $1234", 146, " [-128 TO +127]", 0
  1732  ca7f 5a45524f50414745...mode_example_6: !text "ZEROPAGE $12", 0
  1733  ca8c 5a45524f50414745...mode_example_7: !text "ZEROPAGEX $12,X", 0
  1734  ca9c 5a45524f50414745...mode_example_8: !text "ZEROPAGEY $12,Y", 0
  1735  caac 4142534f4c555445...mode_example_9: !text "ABSOLUTE $1234", 0
  1736  cabb 4142534f4c555445...mode_example_10: !text "ABSOLUTEX $1234,X", 0
  1737  cacd 4142534f4c555445...mode_example_11: !text "ABSOLUTEY $1234,Y", 0
  1738  cadf 494e444952454354...mode_example_12: !text "INDIRECT ($1234)", 0
  1739                          }
  1740                          
  1741                          mode_examples: ; table for easily displaying each mode_example
  1742  caf0 19ca               !word mode_example_0
  1743  caf2 27ca               !word mode_example_1
  1744  caf4 2dca               !word mode_example_2
  1745  caf6 3cca               !word mode_example_3
  1746  caf8 4eca               !word mode_example_4
  1747  cafa 60ca               !word mode_example_5
  1748  cafc 7fca               !word mode_example_6
  1749  cafe 8cca               !word mode_example_7
  1750  cb00 9cca               !word mode_example_8
  1751  cb02 acca               !word mode_example_9
  1752  cb04 bbca               !word mode_example_10
  1753  cb06 cdca               !word mode_example_11
  1754  cb08 dfca               !word mode_example_12
  1755                          
  1756                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  1757                          nopcodes = 151
  1758  cb0a 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  1759  cba1 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  1760  cc38 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  1761                          
  1762                          copyright 
  1763                          ;                  1         2         3         4
  1764                          ;         1234567890123456789012345678901234567890
  1765  cccf 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  1766                          !ifdef C64TERMINAL {
  1767                              !text 13, "(TERMINAL VERSION)"
  1768                          }
  1769  ccef 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  1770  cd15 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  1771  cd2c 00                 !text 0
  1772                          
  1773                          firsthelp
  1774  cd2d 0d3f202020202020...!text 13, "?       (SYNTAX)"
  1775  cd3e 0d3f204120202020...!text 13, "? A     (LIST 6502 INSTRUCTIONS)"
  1776  cd5f 0d3f204144432020...!text 13, "? ADC   (/ADC/ ADDRESSING MODES)"
  1777  cd80 0d3f204d4f444520...!text 13, "? MODE  (ADDRESSING MODES)"
  1778                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  1779  cd9b 0d00               !text 13, 0
  1780                          
  1781  cd9d 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  1782                          
  1783                          generalhelp
  1784  cdae 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  1785  cdd4 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  1786  cdf9 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  1787  ce1c 00                 !text 0
  1788                          generalhelp2
  1789  ce1d 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  1790  ce45 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  1791  ce61 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  1792  ce81 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  1793  cea3 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  1794  cec8 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  1795  cee7 00                 !text 0
  1796                          
  1797  cee8 4d4f444500         modes_keyword !text "MODE", 0
  1798                          
  1799                          !ifdef C64SCREEN {
  1800  ceed 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  1801  cef4 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  1802                          }
  1803                          
  1804                          !ifdef MINIMUM {
  1805                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1806                          ; JUMP table for some stability
  1807                          * = $FFEE
  1808                          JUART_INIT: JMP UART_INIT
  1809                          JUART_OUT: JMP UART_OUT
  1810                          JUART_IN: JMP UART_IN
  1811                          JUART_CHK: JMP UART_CHK
  1812                          
  1813                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1814                          ; 6502 vectors 
  1815                          * = $fffa
  1816                              !word NMI
  1817                              !word RESET
  1818                              !word IRQ
  1819                          }
  1820                          
  1821                          finish = *
