
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGET  C64 and...                    *        <<<
     7                          ;; >>>       ** INCLUDES VERSION FOR 6502+MC6850 minimum system *        <<<
     8                          ;; >>>       *   60K(RAM),4K(ROM), 2 bytes IO for MC6850 UART   *        <<<
     9                          ;; >>>       ****************************************************        <<<
    10                          ;;
    11                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    12                          ;; MIT License
    13                          ;;
    14                          ;; Copyright (c) 2024 David R. Van Wagner
    15                          ;; davevw.com
    16                          ;;
    17                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    18                          ;; of this software and associated documentation files (the "Software"), to deal
    19                          ;; in the Software without restriction, including without limitation the rights
    20                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    21                          ;; copies of the Software, and to permit persons to whom the Software is
    22                          ;; furnished to do so, subject to the following conditions:
    23                          ;;
    24                          ;; The above copyright notice and this permission notice shall be included in all
    25                          ;; copies or substantial portions of the Software.
    26                          ;;
    27                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    28                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    29                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    30                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    31                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    32                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    33                          ;; SOFTWARE.
    34                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    35                          
    36                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ; Important! define exactly ONE target (set in build.sh)
    39                          ;C64SCREEN = 1
    40                          ;C64TERMINAL = 1
    41                          ;MINIMUM = 1
    42                          
    43                          ; options (set in build.sh)
    44                          ;NEEDECHO = 0
    45                          
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;; _
    49                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    50                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    51                          ;; 1000 (display memory at $1000)
    52                          ;; 1000.2000 (display memory range $1000 to $2000)
    53                          ;; 1000. (display next screenful of memory starting at $1000)
    54                          ;; . (display next screenful of memory)
    55                          ;; 1000 r (JMP $1000)
    56                          ;; 1000: 01 02 03 (modify memory)
    57                          ;; (NEW SYNTAX)
    58                          ;; 1000 d (disassemble starting at address, for screenful)
    59                          ;; d (continue disassembling from last address)
    60                          ;; 1000 a (assemble starting at, interactive until empty line) 
    61                          ;; (FUTURE SYNTAX, not implemented)
    62                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    63                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    64                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    65                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    66                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    67                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    68                          ;; 1000.2000 "filename" 08 save (save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, can abbreviate to s)
    69                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    70                          ;; ? (commands help)
    71                          ;; ? a (list instructions available)
    72                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    73                          ;; ? mode (show addressing modes example syntax for 6502)
    74                          ;;
    75                          ;; (INTERACTIVE ASSEMBLER)
    76                          ;; 1000 _
    77                          ;;      ADC #$12
    78                          ;; 1000 69 12    ADC #$12
    79                          ;; 1002 _
    80                          ;;      JSR $1234
    81                          ;; 1002 20 34 12 JSR $1234
    82                          ;; 1005 _
    83                          ;;      RTS
    84                          ;; 1005 60       RTS
    85                          ;; 1006 _
    86                          ;;      XYZ
    87                          ;;      XYZ ?
    88                          ;; 1006 _
    89                          ;; _
    90                          ;;
    91                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    92                          ;; and can cursor up to revise, 
    93                          ;;
    94                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    95                          ;;
    96                          
    97                          ; global
    98                          inputbuf=$0200
    99                          
   100                          
   101                          ; kernal/system calls
   102                          
   103                          !ifdef MINIMUM {
   104                          charout=JUART_OUT
   105                          getkey=JUART_IN
   106                          }
   107                          
   108                          !ifdef C64SCREEN {
   109                          charin=$ffcf ; screen editor
   110                          charout=$ffd2
   111                          getkey=$ffe4
   112                          }
   113                          
   114                          !ifdef C64TERMINAL {
   115                          charout=$ffd2
   116                          getkey=$ffe4
   117                          }
   118                          
   119                          ; zeropage
   120                          !ifdef MINIMUM {
   121                          opidx=$f0
   122                          inidx=$f1
   123                          mode=$f2
   124                          size=$f3
   125                          ptr3=$f4 ; and $f5
   126                          count=$f6
   127                          len=$f7
   128                          savepos=$f8
   129                          tmp2=$f9
   130                          flag=$fa
   131                          ptr1=$fb ; and $fc
   132                          ptr2=$fd ; and $fe
   133                          tmp=$ff
   134                          } else {
   135                          ptr1=$fb ; and $fc
   136                          ptr2=$fd ; and $fe
   137                          tmp=$ff
   138                          opidx=$22
   139                          inidx=$23
   140                          mode=$24
   141                          size=$25
   142                          ptr3=$26 ; and $27
   143                          count=$a3
   144                          len=$a4
   145                          savepos=$a5
   146                          tmp2=$a6
   147                          flag=$a7
   148                          }
   149                          
   150                          !ifdef MINIMUM {
   151                          *=$f000
   152                          } else {
   153                          *=$c000
   154                          }
   155                          start:
   156  c000 a999                   lda #<copyright
   157  c002 a2cd                   ldx #>copyright
   158  c004 2086c2                 jsr strout
   159  c007 a9f7                   lda #<firsthelp
   160  c009 a2cd                   ldx #>firsthelp
   161  c00b 2086c2                 jsr strout
   162  c00e 20a1c2             -   jsr inputline
   163  c011 20afc2                 jsr parseline
   164  c014 4c0ec0                 jmp -
   165                          
   166                          test: ; all the addressing modes here for testing disassembly
   167  c017 ea                     nop
   168  c018 ad3412                 lda $1234
   169  c01b bd3412                 lda $1234,x
   170  c01e b93412                 lda $1234,y
   171  c021 0a                     asl
   172  c022 a912                   lda #$12
   173  c024 a112                   lda ($12,x)
   174  c026 b112                   lda ($12),y
   175  c028 6c3412                 jmp ($1234)
   176  c02b d0fe               -   bne -
   177  c02d a512                   lda $12
   178  c02f b512                   lda $12,x
   179  c031 b612                   ldx $12,y
   180  c033 ff                     !byte $FF ; unknown
   181                          
   182                          disassemble:
   183  c034 a917                   lda #23
   184  c036 85a3                   sta count
   185  c038 a000               -   ldy #0
   186  c03a b1fb                   lda (ptr1),y
   187  c03c 206ec0                 jsr find_opcode
   188  c03f 20d1c0                 jsr disp_current
   189  c042 a525                   lda size
   190  c044 1002                   bpl +
   191  c046 a901                   lda #1
   192  c048 18                 +   clc
   193  c049 65fb                   adc ptr1
   194  c04b 85fb                   sta ptr1
   195  c04d 9002                   bcc +
   196  c04f e6fc                   inc ptr1+1
   197  c051 c6a3               +   dec count
   198  c053 d0e3                   bne -
   199                          !ifdef C64SCREEN {
   200  c055 a5fb                   lda ptr1
   201  c057 a6fc                   ldx ptr1+1
   202  c059 200ac2                 jsr disphexword
   203  c05c a9b7                   lda #<page_disassemble
   204  c05e a2cf                   ldx #>page_disassemble
   205  c060 4c86c2                 jmp strout
   206                          } else {    
   207                              rts
   208                          }
   209                          
   210                          compareptrs:
   211  c063 a5fc                   lda ptr1+1
   212  c065 c5fe                   cmp ptr2+1
   213  c067 d004                   bne +
   214  c069 a5fb                   lda ptr1
   215  c06b c5fd                   cmp ptr2
   216  c06d 60                 +   rts
   217                          
   218                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   219                          ; and properties updated in ZP globals size,inidx,opidx,mode
   220  c06e a097                   ldy #nopcodes
   221  c070 a296                   ldx #nopcodes-1
   222  c072 ddd4cb             -   cmp opcodes,x
   223  c075 f00f                   beq +
   224  c077 ca                     dex
   225  c078 88                     dey
   226  c079 d0f7                   bne -
   227  c07b 18                     clc
   228  c07c a901                   lda #1
   229  c07e 8525                   sta size
   230  c080 a9ff                   lda #$FF
   231  c082 aa                     tax
   232  c083 a8                     tay
   233  c084 900a                   bcc ++
   234  c086 bd6bcc             +   lda instidx, x
   235  c089 bc02cd                 ldy modeidx, x
   236  c08c 2097c0                 jsr getsize
   237  c08f 38                     sec
   238  c090 8523               ++  sta inidx
   239  c092 8622                   stx opidx
   240  c094 8424                   sty mode
   241  c096 60                     rts
   242                          
   243                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   244                              ; result returned in size
   245  c097 48                     pha
   246  c098 a901                   lda #1
   247  c09a 8525                   sta size
   248  c09c 68                     pla
   249  c09d c002                   cpy #2 // Immediate
   250  c09f 9008                   bcc +
   251  c0a1 e625                   inc size
   252  c0a3 c009                   cpy #9 // Absolute
   253  c0a5 9002                   bcc +
   254  c0a7 e625                   inc size
   255  c0a9 60                 +   rts
   256                          
   257                          disp_opcode: ; .A opcode byte
   258  c0aa 206ec0                 jsr find_opcode
   259  c0ad 8a                     txa
   260                              ; fall through to display instruction
   261                          
   262                          dispinst: ; .A instruction index 0..55, note modifies A and X
   263  c0ae aa                     tax
   264  c0af e038                   cpx #ninst
   265  c0b1 b012                   bcs +
   266  c0b3 bd14ca                 lda inst0, x
   267  c0b6 20d2ff                 jsr charout
   268  c0b9 bd4cca                 lda inst1, x
   269  c0bc 20d2ff                 jsr charout
   270  c0bf bd84ca                 lda inst2, x
   271  c0c2 4cd2ff                 jmp charout
   272  c0c5 a93f               +   lda #'?'
   273  c0c7 20d2ff                 jsr charout
   274  c0ca 20d2ff                 jsr charout
   275  c0cd 20d2ff                 jsr charout
   276  c0d0 60                     rts
   277                          
   278                          disp_current:
   279  c0d1 a5fb                   lda ptr1
   280  c0d3 a6fc                   ldx ptr1+1
   281  c0d5 200ac2                 jsr disphexword
   282  c0d8 a920                   lda #$20
   283  c0da 20d2ff                 jsr charout
   284  c0dd a000                   ldy #0
   285  c0df a625                   ldx size
   286  c0e1 b1fb               -   lda (ptr1),y
   287  c0e3 2010c2                 jsr disphexbyte
   288  c0e6 a920                   lda #$20
   289  c0e8 20d2ff                 jsr charout
   290  c0eb c8                     iny
   291  c0ec ca                     dex
   292  c0ed d0f2                   bne -
   293  c0ef c003               -   cpy #3
   294  c0f1 f00e                   beq +
   295  c0f3 a920                   lda #$20
   296  c0f5 20d2ff                 jsr charout
   297  c0f8 20d2ff                 jsr charout
   298  c0fb 20d2ff                 jsr charout
   299  c0fe c8                     iny
   300  c0ff d0ee                   bne -
   301  c101 a523               +   lda inidx
   302  c103 20aec0                 jsr dispinst
   303  c106 a920                   lda #$20
   304  c108 20d2ff                 jsr charout
   305  c10b 2013c1                 jsr disp_mode
   306  c10e a90d                   lda #13
   307  c110 4cd2ff                 jmp charout
   308                          
   309                          disp_mode
   310  c113 a524                   lda mode
   311  c115 c90d                   cmp #13
   312  c117 b00a                   bcs +
   313  c119 0a                     asl
   314  c11a aa                     tax
   315  c11b bdbdca                 lda mode_jmptable+1,x
   316  c11e 48                     pha
   317  c11f bdbcca                 lda mode_jmptable,x
   318  c122 48                     pha
   319  c123 60                 +   rts
   320                          
   321                          dispModeAcc:
   322  c124 a941                   lda #'A'
   323  c126 4cd2ff                 jmp charout
   324                          
   325                          dispModeNone:
   326  c129 60                     rts
   327                          
   328                          dispModeImm:
   329  c12a a923                   lda #'#'
   330  c12c 20d2ff                 jsr charout
   331                          dispModeZP:
   332  c12f a924                   lda #'$'
   333  c131 20d2ff                 jsr charout
   334  c134 a001                   ldy #1
   335  c136 b1fb                   lda (ptr1),y
   336  c138 4c10c2                 jmp disphexbyte
   337                          
   338                          dispModeIndX:
   339  c13b a928                   lda #'('
   340  c13d 20d2ff                 jsr charout
   341  c140 a924                   lda #'$'
   342  c142 20d2ff                 jsr charout
   343  c145 a001                   ldy #1
   344  c147 b1fb                   lda (ptr1),y
   345  c149 2010c2                 jsr disphexbyte
   346  c14c a92c                   lda #','
   347  c14e 20d2ff                 jsr charout
   348  c151 a958                   lda #'X'
   349  c153 20d2ff                 jsr charout
   350  c156 a929                   lda #')'
   351  c158 4cd2ff                 jmp charout
   352                          
   353                          dispModeIndY:
   354  c15b a928                   lda #'('
   355  c15d 20d2ff                 jsr charout
   356  c160 a924                   lda #'$'
   357  c162 20d2ff                 jsr charout
   358  c165 a001                   ldy #1
   359  c167 b1fb                   lda (ptr1),y
   360  c169 2010c2                 jsr disphexbyte
   361  c16c a929                   lda #')'
   362  c16e 20d2ff                 jsr charout
   363  c171 a92c                   lda #','
   364  c173 20d2ff                 jsr charout
   365  c176 a959                   lda #'Y'
   366  c178 4cd2ff                 jmp charout
   367                          
   368                          dispModeRel:
   369  c17b a924                   lda #'$'
   370  c17d 20d2ff                 jsr charout
   371  c180 18                     clc
   372  c181 a5fb                   lda ptr1
   373  c183 6902                   adc #2
   374  c185 8526                   sta ptr3
   375  c187 a5fc                   lda ptr1+1
   376  c189 6900                   adc #0
   377  c18b 8527                   sta ptr3+1
   378  c18d a001                   ldy #1
   379  c18f b1fb                   lda (ptr1),y
   380  c191 1014                   bpl +
   381                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   382  c193 49ff                   eor #$FF ; inverse
   383  c195 18                     clc
   384  c196 6901                   adc #1 ; complete getting absolute value from two's complement
   385  c198 85ff                   sta tmp
   386  c19a 38                     sec
   387  c19b a526                   lda ptr3
   388  c19d e5ff                   sbc tmp
   389  c19f 8526                   sta ptr3
   390  c1a1 b00d                   bcs ++
   391  c1a3 c627                   dec ptr3+1
   392  c1a5 9009                   bcc ++
   393  c1a7 18                 +   clc ; simple case of adding
   394  c1a8 6526                   adc ptr3
   395  c1aa 8526                   sta ptr3
   396  c1ac 9002                   bcc ++
   397  c1ae e627                   inc ptr3+1
   398  c1b0 a526               ++  lda ptr3
   399  c1b2 a627                   ldx ptr3+1
   400  c1b4 4c0ac2                 jmp disphexword
   401                          
   402                          dispModeZPX:
   403  c1b7 202fc1                 jsr dispModeZP
   404  c1ba a92c                   lda #','
   405  c1bc 20d2ff                 jsr charout
   406  c1bf a958                   lda #'X'
   407  c1c1 4cd2ff                 jmp charout
   408                          
   409                          dispModeZPY:
   410  c1c4 202fc1                 jsr dispModeZP
   411  c1c7 a92c                   lda #','
   412  c1c9 20d2ff                 jsr charout
   413  c1cc a959                   lda #'Y'
   414  c1ce 4cd2ff                 jmp charout
   415                          
   416                          dispModeAbs:
   417  c1d1 a924                   lda #'$'
   418  c1d3 20d2ff                 jsr charout
   419  c1d6 a001                   ldy #1
   420  c1d8 b1fb                   lda (ptr1),y
   421  c1da 48                     pha
   422  c1db c8                     iny
   423  c1dc b1fb                   lda (ptr1),y
   424  c1de aa                     tax
   425  c1df 68                     pla
   426  c1e0 4c0ac2                 jmp disphexword
   427                          
   428                          dispModeAbsX:
   429  c1e3 20d1c1                 jsr dispModeAbs
   430  c1e6 a92c                   lda #','
   431  c1e8 20d2ff                 jsr charout
   432  c1eb a958                   lda #'X'
   433  c1ed 4cd2ff                 jmp charout
   434                          
   435                          dispModeAbsY:
   436  c1f0 20d1c1                 jsr dispModeAbs
   437  c1f3 a92c                   lda #','
   438  c1f5 20d2ff                 jsr charout
   439  c1f8 a959                   lda #'Y'
   440  c1fa 4cd2ff                 jmp charout
   441                          
   442                          dispModeInd:
   443  c1fd a928                   lda #'('
   444  c1ff 20d2ff                 jsr charout
   445  c202 20d1c1                 jsr dispModeAbs
   446  c205 a929                   lda #')'
   447  c207 4cd2ff                 jmp charout
   448                          
   449                          disphexword: ; .A low, .X high, 0000..FFFF
   450  c20a 48                     pha
   451  c20b 8a                     txa
   452  c20c 2010c2                 jsr disphexbyte
   453  c20f 68                     pla
   454                              ;fall through to call again
   455                          
   456                          disphexbyte: ; .A 00..FF
   457  c210 48                     pha
   458  c211 4a                     lsr
   459  c212 4a                     lsr
   460  c213 4a                     lsr
   461  c214 4a                     lsr
   462  c215 2019c2                 jsr disphexnybble
   463  c218 68                     pla
   464                              ;fall through to call again
   465                          
   466                          disphexnybble: ; .A 0..F
   467  c219 290f                   and #$0F
   468  c21b 0930                   ora #$30
   469  c21d c93a                   cmp #$3A
   470  c21f 9002                   bcc +
   471  c221 6906                   adc #$06
   472  c223 4cd2ff             +   jmp charout
   473                          
   474                          inputhexword: ; C set if fails
   475  c226 a900                   lda #0
   476  c228 85fb                   sta ptr1
   477  c22a 85fc                   sta ptr1+1
   478                          
   479  c22c a904                   lda #4 ; word is at most 4 nybbles
   480  c22e 85a3                   sta count
   481  c230 2068c2             --  jsr inputhexnybble
   482  c233 b012                   bcs +
   483                          
   484                              ; shift nibble up
   485  c235 0a                     asl
   486  c236 0a                     asl
   487  c237 0a                     asl
   488  c238 0a                     asl
   489                          
   490  c239 a204                   ldx #4 ; 4 bits rotated into word
   491  c23b 2a                 -   rol
   492  c23c 26fb                   rol ptr1
   493  c23e 26fc                   rol ptr1+1
   494  c240 ca                     dex
   495  c241 d0f8                   bne - ; repeat bits
   496                          
   497  c243 c6a3                   dec count
   498  c245 d0e9                   bne -- ; repeat nybbles
   499                          
   500  c247 a5a3               +   lda count
   501  c249 c904                   cmp #4 ; set C if 4, otherwise clear
   502  c24b 60                     rts
   503                          
   504                          inputhexbyte:
   505  c24c 2068c2                 jsr inputhexnybble
   506  c24f b016                   bcs ++
   507  c251 85ff                   sta tmp
   508  c253 2068c2                 jsr inputhexnybble
   509  c256 9005                   bcc +
   510  c258 18                     clc ; allow single digit as byte
   511  c259 a5ff                   lda tmp
   512  c25b 900a                   bcc ++
   513  c25d 06ff               +   asl tmp
   514  c25f 06ff                   asl tmp
   515  c261 06ff                   asl tmp
   516  c263 06ff                   asl tmp
   517  c265 05ff                   ora tmp ; necessary to assemble the two nybbles
   518  c267 60                 ++  rts
   519                          
   520                          inputhexnybble:
   521  c268 b90002                 lda $0200,y
   522  c26b 297f                   and #$7F
   523  c26d 38                     sec
   524  c26e e930                   sbc #$30
   525  c270 9012                   bcc ++
   526  c272 c90a                   cmp #10
   527  c274 900c                   bcc +
   528  c276 e907                   sbc #7
   529  c278 900a                   bcc ++
   530  c27a c90a                   cmp #10
   531  c27c 9006                   bcc ++
   532  c27e c910                   cmp #16
   533  c280 b002                   bcs ++
   534  c282 c8                 +   iny
   535  c283 60                     rts
   536  c284 38                 ++  sec
   537  c285 60                     rts
   538                          
   539                          strout:
   540  c286 8526                   sta ptr3
   541  c288 8627                   stx ptr3+1
   542                          strout2:    
   543  c28a a000                   ldy #0
   544  c28c b126               -   lda (ptr3),y
   545  c28e f006                   beq +
   546  c290 20d2ff                 jsr charout
   547  c293 c8                     iny
   548  c294 d0f6                   bne -
   549  c296 98                 +   tya
   550  c297 38                     sec
   551  c298 6526                   adc ptr3
   552  c29a 8526                   sta ptr3
   553  c29c 9002                   bcc +
   554  c29e e627                   inc ptr3+1
   555  c2a0 60                 +   rts
   556                          
   557                          inputline:
   558                          !ifdef C64SCREEN {
   559  c2a1 a000                   ldy #0
   560  c2a3 20cfff             -   jsr charin
   561  c2a6 990002                 sta inputbuf,y
   562  c2a9 c8                     iny
   563  c2aa c90d                   cmp #13
   564  c2ac d0f5                   bne -
   565  c2ae 60                     rts
   566                          } else {
   567                              ldy #0
   568                          --  sty count
   569                          -   jsr getkey
   570                              beq -
   571                              ldy count
   572                          !ifdef MINIMUM {
   573                              cmp #8 ; backspace
   574                          } else {
   575                              cmp #20
   576                          }
   577                              bne +
   578                              cpy #0
   579                              beq -
   580                              dey
   581                          !if NEEDECHO = 1 {    
   582                              jsr charout
   583                          }
   584                              jmp --
   585                          +   cmp #13
   586                              beq +
   587                              cmp #' '
   588                              bcc -
   589                              cmp #128
   590                              bcs -
   591                          +
   592                          !if NEEDECHO = 1 {    
   593                              jsr charout
   594                          }
   595                              sta inputbuf,y
   596                              iny
   597                              cmp #13
   598                              bne --
   599                              rts
   600                          }
   601                          
   602                          parseline:
   603  c2af c001                   cpy #1
   604  c2b1 d003                   bne +
   605                          -
   606                          !ifdef C64SCREEN {   
   607  c2b3 4c0fca                 jmp newline
   608                          } else {
   609                              rts
   610                          }
   611  c2b6 88                 +   dey
   612  c2b7 84a4                   sty len
   613                              ; skip whitespace
   614                              ; check for address, put in ptr1
   615                              ; or check for dot, then require address put in ptr2
   616                              ; or check for ?, and optional parameter, execute help
   617                              ; check for whitespace
   618                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   619                              ; check for string, store at start of inputbuf
   620                              ; check for drive number
   621                              ; check for whitespace
   622                              ; check command ":rda?mls", execute command
   623  c2b9 a000                   ldy #0
   624  c2bb 2052c9                 jsr skipspaces
   625  c2be c4a4                   cpy len
   626  c2c0 f0f1                   beq -
   627  c2c2 2008c9                 jsr chkcontinuedis
   628  c2c5 d003                   bne +
   629  c2c7 202cc9                 jsr executedisassemble ; note won't return
   630  c2ca 201ac9             +   jsr chkcontinueasm
   631  c2cd d003                   bne +
   632  c2cf 2029c5                 jsr continueassemble ; note won't return
   633  c2d2 205dc9             +   jsr chkdot
   634  c2d5 d003                   bne +
   635  c2d7 4cbfc3                 jmp executedot
   636  c2da 2068c9             +   jsr chkhelp
   637  c2dd d003                   bne +
   638  c2df 4cc9c3                 jmp executehelp
   639  c2e2 20b2c9             +   jsr chkhexaddr1
   640  c2e5 d003                   bne error
   641  c2e7 4cedc2                 jmp executeaddr1
   642                          error:
   643  c2ea 4c3bc9                 jmp reporterr
   644                          
   645                          executeaddr1:
   646  c2ed c4a4                   cpy len
   647  c2ef d003                   bne +
   648  c2f1 4c40c3                 jmp executedisplay1
   649  c2f4 205dc9             +   jsr chkdot
   650  c2f7 d00f                   bne +
   651  c2f9 c4a4                   cpy len
   652  c2fb f021                   beq executepagedisplay
   653  c2fd 20d2c9                 jsr chkhexaddr2
   654  c300 d0e8                   bne error
   655  c302 18                     clc
   656  c303 66a7                   ror flag
   657  c305 4c36c3                 jmp executeaddr12
   658  c308 2052c9             +   jsr skipspaces
   659  c30b 2073c9                 jsr chkcolon
   660  c30e d003                   bne +
   661  c310 4c9dc3                 jmp executemodify
   662  c313 20f3c9             +   jsr chkaddr1cmd ; rda, will not return here if cmd
   663  c316 207ec9                 jsr chkfilename
   664  c319 d0cf                   bne error
   665  c31b 4cc6c3                 jmp executeloadfilename
   666                          
   667                          executepagedisplay:
   668  c31e a5fb                   lda ptr1
   669  c320 18                     clc
   670                          !ifdef MINIMUM {
   671                              adc #$5f
   672                          } else {
   673  c321 69b7                   adc #$b7
   674                          }
   675  c323 85fd                   sta ptr2
   676  c325 a5fc                   lda ptr1+1
   677                          !ifdef MINIMUM {
   678                              adc #$01
   679                          } else {
   680  c327 6900                   adc #$00
   681                          }
   682  c329 85fe                   sta ptr2+1
   683  c32b 9006                   bcc +
   684  c32d a9ff                   lda #$ff
   685  c32f 85fd                   sta ptr2
   686  c331 85fe                   sta ptr2+1
   687  c333 38                 +   sec
   688  c334 66a7                   ror flag
   689                              ; fall through to executeaddr12
   690                          
   691                          executeaddr12:
   692  c336 c4a4                   cpy len
   693  c338 d003                   bne +
   694  c33a 4c48c3                 jmp executedisplay12
   695  c33d 4c34c9             +   jmp reportnotimplemented
   696                          
   697                          executedisplay1:
   698  c340 a5fb                   lda ptr1
   699  c342 85fd                   sta ptr2
   700  c344 a5fc                   lda ptr1+1
   701  c346 85fe                   sta ptr2+1
   702                              ; fall through executedisplay12
   703                          
   704                          executedisplay12:
   705  c348 a9ff                   lda #$ff
   706  c34a 85a3                   sta count
   707  c34c e6a3               -   inc count
   708  c34e a5a3                   lda count
   709                          !ifdef MINIMUM {    
   710                              and #$0f
   711                          } else {
   712  c350 2907                   and #$07
   713                          }
   714  c352 d016                   bne +
   715  c354 a90d                   lda #13
   716  c356 20d2ff                 jsr charout
   717  c359 a5fb                   lda ptr1
   718  c35b a6fc                   ldx ptr1+1
   719  c35d 200ac2                 jsr disphexword
   720  c360 a93a                   lda #':'
   721  c362 20d2ff                 jsr charout
   722  c365 a920                   lda #' '
   723  c367 20d2ff                 jsr charout
   724  c36a a000               +   ldy #0
   725  c36c b1fb                   lda (ptr1),y
   726  c36e 2010c2                 jsr disphexbyte
   727  c371 a920                   lda #' '
   728  c373 20d2ff                 jsr charout
   729  c376 e6fb                   inc ptr1
   730  c378 d004                   bne +
   731  c37a e6fc                   inc ptr1+1
   732  c37c f01c                   beq ++
   733  c37e 2063c0             +   jsr compareptrs
   734  c381 90c9                   bcc -
   735  c383 f0c7                   beq -
   736  c385 24a7                   bit flag
   737  c387 1011                   bpl ++
   738                          !ifdef C64SCREEN {
   739  c389 200fca                 jsr newline
   740  c38c a5fb                   lda ptr1
   741  c38e a6fc                   ldx ptr1+1
   742  c390 200ac2                 jsr disphexword
   743  c393 a9be                   lda #<page_displaymemory
   744  c395 a2cf                   ldx #>page_displaymemory
   745  c397 4c86c2                 jmp strout
   746                          }
   747  c39a 4c0fca             ++  jmp newline
   748                          
   749                          executemodify:
   750  c39d 2052c9                 jsr skipspaces
   751  c3a0 c4a4                   cpy len
   752  c3a2 f018                   beq ++
   753  c3a4 2098c9                 jsr chkhexbyteofsequence
   754  c3a7 f003                   beq +
   755  c3a9 4ceac2                 jmp error
   756  c3ac 84ff               +   sty tmp
   757  c3ae a000                   ldy #0
   758  c3b0 91fb                   sta (ptr1),y
   759  c3b2 e6fb                   inc ptr1
   760  c3b4 d002                   bne +
   761  c3b6 e6fc                   inc ptr1+1
   762  c3b8 a4ff               +   ldy tmp
   763  c3ba d0e1                   bne executemodify
   764  c3bc 4c0fca             ++  jmp newline
   765                          
   766                          executedot:
   767  c3bf c4a4                   cpy len
   768  c3c1 d003                   bne +
   769  c3c3 4c1ec3                 jmp executepagedisplay
   770                          
   771                          executeloadfilename:
   772                          executeaddr1cmd:
   773  c3c6 4c34c9             +   jmp reportnotimplemented
   774                          
   775                          executehelp:
   776                          !ifdef C64SCREEN {
   777  c3c9 200fca                 jsr newline
   778                          }
   779  c3cc c4a4                   cpy len
   780  c3ce d003                   bne +
   781  c3d0 4cf1c3                 jmp displayhelp
   782  c3d3 2052c9             +   jsr skipspaces
   783  c3d6 2006c4                 jsr chkhelpinstructions
   784  c3d9 d003                   bne +
   785  c3db 4c35c4                 jmp displayinstructions
   786  c3de 2013c4             +   jsr chkhelpmodes
   787  c3e1 d003                   bne +
   788  c3e3 4c4cc4                 jmp displaymodes
   789  c3e6 207ac8             +   jsr chkinstruction
   790  c3e9 d003                   bne +
   791  c3eb 4cfcc4                 jmp executehelpinstruction
   792  c3ee 4c34c9             +   jmp reportnotimplemented
   793                          
   794                          displayhelp:
   795  c3f1 a978                   lda #<generalhelp
   796  c3f3 a2ce                   ldx #>generalhelp
   797  c3f5 2086c2                 jsr strout
   798  c3f8 a9e7                   lda #<generalhelp2
   799  c3fa a2ce                   ldx #>generalhelp2
   800  c3fc 2086c2                 jsr strout
   801  c3ff a9f7                   lda #<firsthelp
   802  c401 a2cd                   ldx #>firsthelp
   803  c403 4c86c2                 jmp strout
   804                          
   805                          chkhelpinstructions:
   806  c406 b90002                 lda inputbuf, y
   807  c409 c941                   cmp #'A'
   808  c40b d005                   bne +
   809  c40d b90102                 lda inputbuf+1, y
   810  c410 c90d                   cmp #13
   811                              ; no need to increment y if found, done parsing line
   812  c412 60                 +   rts
   813                          
   814                          chkhelpmodes:
   815  c413 a9b2                   lda #<modes_keyword
   816  c415 a2cf                   ldx #>modes_keyword
   817                              ; fall through to chkkeyword
   818                          
   819                          chkkeyword:
   820  c417 84a3                   sty count
   821  c419 8526                   sta ptr3
   822  c41b 8627                   stx ptr3+1
   823  c41d a6a3                   ldx count
   824  c41f a000                   ldy #0
   825  c421 bd0002             -   lda inputbuf, x
   826  c424 d126                   cmp (ptr3),y
   827  c426 d008                   bne +
   828  c428 e8                     inx
   829  c429 c8                     iny
   830  c42a e4a4                   cpx len
   831  c42c d0f3                   bne -
   832  c42e b126                   lda (ptr3),y ; matched if end of string, will set Z
   833  c430 08                 +   php ; save Z
   834  c431 a4a3                   ldy count
   835  c433 28                     plp ; restore Z
   836  c434 60                     rts
   837                          
   838                          displayinstructions:
   839  c435 a038                   ldy #ninst
   840  c437 a200                   ldx #0
   841  c439 8a                 -   txa
   842  c43a 48                     pha
   843  c43b 20aec0                 jsr dispinst
   844  c43e a920                   lda #' '
   845  c440 20d2ff                 jsr charout
   846  c443 68                     pla
   847  c444 aa                     tax
   848  c445 e8                     inx
   849  c446 88                     dey
   850  c447 d0f0                   bne -
   851  c449 4c0fca                 jmp newline
   852                          
   853                          displaymodes:
   854  c44c 38                     sec
   855  c44d a900                   lda #0
   856  c44f 48                 -   pha
   857  c450 aa                     tax
   858  c451 bdd6ca                 lda mode_sorted, x
   859  c454 2061c4                 jsr dispmode
   860  c457 68                     pla
   861  c458 18                     clc
   862  c459 6901                   adc #1
   863  c45b c90d                   cmp #nmodes
   864  c45d 90f0                   bcc -
   865  c45f 18                     clc
   866  c460 60                     rts
   867                          
   868                          dispmode:
   869  c461 c90d                   cmp #nmodes
   870  c463 b008                   bcs +
   871  c465 8524                   sta mode
   872  c467 20a9c4                 jsr disp_modename_and_example
   873  c46a 4c6ec4                 jmp dispmodeinstructions
   874  c46d 60                 +   rts
   875                          
   876                          dispmodeinstructions:
   877                          !ifdef C64SCREEN {
   878                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
   879  c46e a524                   lda mode
   880  c470 c903                   cmp #3
   881  c472 d005                   bne +
   882  c474 a920                   lda #' '
   883  c476 4cd2ff                 jmp charout
   884                          }
   885                              ; display instructions with this mode
   886  c479 a000               +   ldy #0
   887  c47b 8423               --  sty inidx
   888  c47d a200                   ldx #0
   889  c47f 86ff               -   stx tmp
   890  c481 a523                   lda inidx
   891  c483 dd6bcc                 cmp instidx, x
   892  c486 d014                   bne ++
   893  c488 bd02cd                 lda modeidx, x
   894  c48b c524                   cmp mode
   895  c48d d00d                   bne ++
   896  c48f a920                   lda #' '
   897  c491 20d2ff                 jsr charout
   898  c494 bd6bcc                 lda instidx, x
   899  c497 20aec0                 jsr dispinst
   900  c49a a6ff                   ldx tmp
   901  c49c e8                 ++  inx
   902  c49d e097                   cpx #nopcodes
   903  c49f 90de                   bcc -
   904  c4a1 c8                     iny
   905  c4a2 c038                   cpy #ninst
   906  c4a4 d0d5                   bne --
   907  c4a6 4c0fca                 jmp newline
   908                          
   909                          disp_modename_and_example:
   910  c4a9 0a                     asl
   911  c4aa aa                     tax
   912  c4ab bdbacb                 lda modes, x
   913  c4ae 48                     pha
   914  c4af bdbbcb                 lda modes+1, x
   915  c4b2 aa                     tax
   916                          !ifdef C64SCREEN {
   917  c4b3 a912                   lda #18
   918  c4b5 20d2ff                 jsr charout
   919                          }    
   920  c4b8 68                     pla
   921  c4b9 2086c2                 jsr strout
   922  c4bc a920                   lda #' '
   923  c4be 20d2ff                 jsr charout
   924  c4c1 208ac2                 jsr strout2
   925                          !ifdef C64SCREEN {    
   926  c4c4 a992                   lda #146
   927  c4c6 20d2ff                 jsr charout
   928                          }   
   929  c4c9 60                     rts
   930                          
   931                          disp_modename_instruction_example:
   932  c4ca 0a                     asl
   933  c4cb aa                     tax
   934  c4cc bdbacb                 lda modes, x
   935  c4cf 48                     pha
   936  c4d0 bdbbcb                 lda modes+1, x
   937  c4d3 aa                     tax
   938  c4d4 68                     pla
   939  c4d5 2086c2                 jsr strout ; mode name
   940  c4d8 a526                   lda ptr3
   941  c4da 48                     pha
   942  c4db a527                   lda ptr3+1
   943  c4dd 48                     pha
   944  c4de a93a                   lda #':'
   945  c4e0 20d2ff                 jsr charout
   946  c4e3 a920                   lda #' '
   947  c4e5 20d2ff                 jsr charout
   948  c4e8 a523                   lda inidx
   949  c4ea 20aec0                 jsr dispinst ; instruction
   950  c4ed a920                   lda #' '
   951  c4ef 20d2ff                 jsr charout
   952  c4f2 68                     pla
   953  c4f3 8527                   sta ptr3+1
   954  c4f5 68                     pla
   955  c4f6 8526                   sta ptr3
   956  c4f8 208ac2                 jsr strout2 ; example
   957  c4fb 60                     rts
   958                          
   959                          
   960                          executehelpinstruction:
   961  c4fc a000                   ldy #0
   962  c4fe 8422               -   sty opidx
   963  c500 b96bcc                 lda instidx, y
   964  c503 c523                   cmp inidx
   965  c505 d01a                   bne +
   966  c507 b902cd                 lda modeidx, y
   967  c50a 8524                   sta mode
   968  c50c a622                   ldx opidx
   969  c50e bdd4cb                 lda opcodes, x
   970  c511 2010c2                 jsr disphexbyte
   971  c514 a920                   lda #' '
   972  c516 20d2ff                 jsr charout
   973  c519 a524                   lda mode
   974  c51b 20cac4                 jsr disp_modename_instruction_example
   975  c51e 200fca                 jsr newline
   976  c521 a422               +   ldy opidx
   977  c523 c8                     iny
   978  c524 c097                   cpy #nopcodes
   979  c526 90d6                   bcc -
   980  c528 60                     rts
   981                          
   982                          continueassemble:
   983                          !ifdef C64SCREEN {   
   984  c529 a914                   lda #20
   985  c52b 20d2ff                 jsr charout
   986  c52e 20d2ff                 jsr charout
   987  c531 a5fb                   lda ptr1
   988  c533 a6fc                   ldx ptr1+1
   989  c535 200ac2                 jsr disphexword
   990  c538 a920                   lda #' '
   991  c53a 20d2ff                 jsr charout
   992  c53d 20d2ff                 jsr charout
   993  c540 20d2ff                 jsr charout
   994                          }
   995                              ; continue...
   996                          
   997                          executeassemble:
   998  c543 68                     pla ; remove low byte return address
   999  c544 68                     pla ; return high byte return address
  1000                          !ifdef C64SCREEN {    
  1001  c545 a914                   lda #20
  1002  c547 20d2ff                 jsr charout
  1003  c54a 20d2ff                 jsr charout
  1004                          } else {
  1005                              lda ptr1
  1006                              ldx ptr1+1
  1007                              jsr disphexword
  1008                              lda #' '
  1009                              jsr charout
  1010                          }
  1011                              ; save current pointer
  1012  c54d a5fb               --  lda ptr1
  1013  c54f a6fc                   ldx ptr1+1
  1014  c551 8526                   sta ptr3
  1015  c553 8627                   stx ptr3+1
  1016  c555 20a1c2                 jsr inputline
  1017  c558 c001                   cpy #1
  1018  c55a f048                   beq ++
  1019  c55c 88                     dey
  1020  c55d 84a4                   sty len
  1021  c55f a000                   ldy #0
  1022  c561 2052c9                 jsr skipspaces
  1023  c564 c4a4                   cpy len
  1024  c566 f03c                   beq ++
  1025                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1026                              ;jsr skipspaces
  1027  c568 207ac8                 jsr chkinstruction
  1028  c56b f00b                   beq +
  1029  c56d a526               -   lda ptr3
  1030  c56f 85fb                   sta ptr1
  1031  c571 a527                   lda ptr3+1
  1032  c573 85fc                   sta ptr1+1
  1033  c575 4ceac2                 jmp error
  1034  c578 20cec5             +   jsr chkaddressing
  1035  c57b d0f0                   bne -
  1036  c57d 20abc8                 jsr find_inst_and_mode
  1037  c580 d0eb                   bne -
  1038  c582 20a7c5                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1039  c585 18                     clc
  1040  c586 a525                   lda size
  1041  c588 6526                   adc ptr3
  1042  c58a 85fb                   sta ptr1
  1043  c58c a527                   lda ptr3+1
  1044  c58e 6900                   adc #0
  1045  c590 85fc                   sta ptr1+1
  1046                          !ifdef C64SCREEN {    
  1047  c592 200fca                 jsr newline
  1048                          }
  1049  c595 a5fb                   lda ptr1
  1050  c597 a6fc                   ldx ptr1+1
  1051  c599 200ac2                 jsr disphexword
  1052  c59c a920                   lda #' '
  1053  c59e 20d2ff                 jsr charout
  1054  c5a1 4c4dc5                 jmp --
  1055                          ++  
  1056                          !ifdef C64SCREEN {
  1057  c5a4 4c0fca                 jmp newline
  1058                          } else {
  1059                              rts
  1060                          }
  1061                          
  1062                          store_assembly:
  1063  c5a7 a622                   ldx opidx
  1064  c5a9 bdd4cb                 lda opcodes, x
  1065  c5ac a000                   ldy #0
  1066  c5ae 9126                   sta (ptr3), y
  1067  c5b0 c8                     iny
  1068  c5b1 a625                   ldx size
  1069  c5b3 e001                   cpx #1
  1070  c5b5 f016                   beq ++
  1071  c5b7 e002               +   cpx #2
  1072  c5b9 d005                   bne +
  1073  c5bb a5a6                   lda tmp2
  1074  c5bd 9126                   sta (ptr3), y
  1075  c5bf 60                     rts
  1076  c5c0 e003               +   cpx #3
  1077  c5c2 d009                   bne ++
  1078  c5c4 a5fb                   lda ptr1
  1079  c5c6 9126                   sta (ptr3), y
  1080  c5c8 c8                     iny
  1081  c5c9 a5fc                   lda ptr1+1
  1082  c5cb 9126                   sta (ptr3), y
  1083  c5cd 60                 ++  rts
  1084                          
  1085                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1086  c5ce 2052c9                 jsr skipspaces
  1087  c5d1 a200                   ldx #0
  1088  c5d3 8624                   stx mode
  1089  c5d5 2030c6                 jsr chkaccumulator
  1090  c5d8 f051                   beq +
  1091  c5da e624                   inc mode
  1092  c5dc c4a4                   cpy len ; chknone
  1093  c5de f04b                   beq +
  1094  c5e0 e624                   inc mode
  1095  c5e2 2054c6                 jsr chkimmediate
  1096  c5e5 f044                   beq +
  1097  c5e7 e624                   inc mode
  1098  c5e9 2078c6                 jsr chkindirectx
  1099  c5ec f03d                   beq +
  1100  c5ee e624                   inc mode
  1101  c5f0 20bdc6                 jsr chkindirecty
  1102  c5f3 f036                   beq +
  1103  c5f5 e624                   inc mode
  1104  c5f7 2002c7                 jsr chkrelative
  1105  c5fa f02f                   beq +
  1106  c5fc e624                   inc mode
  1107  c5fe 205dc7                 jsr chkzeropage
  1108  c601 f028                   beq +
  1109  c603 e624                   inc mode
  1110  c605 2076c7                 jsr chkzeropagex
  1111  c608 f021                   beq +
  1112  c60a e624                   inc mode
  1113  c60c 20a5c7                 jsr chkzeropagey
  1114  c60f f01a                   beq +
  1115  c611 e624                   inc mode
  1116  c613 20d4c7                 jsr chkabsolute
  1117  c616 f013                   beq +
  1118  c618 e624                   inc mode
  1119  c61a 20edc7                 jsr chkabsolutex
  1120  c61d f00c                   beq +
  1121  c61f e624                   inc mode
  1122  c621 201cc8                 jsr chkabsolutey
  1123  c624 f005                   beq +
  1124  c626 e624                   inc mode
  1125  c628 204bc8                 jsr chkindirect
  1126  c62b 08                 +   php ; save Z
  1127  c62c a524                   lda mode
  1128  c62e 28                     plp ; restore Z 
  1129  c62f 60                     rts
  1130                          
  1131                          chkaccumulator:
  1132  c630 c4a4                   cpy len
  1133  c632 d013                   bne +
  1134  c634 a523                   lda inidx
  1135  c636 c902                   cmp #2 ; ASL
  1136  c638 f019                   beq ++
  1137  c63a c920                   cmp #32 ; LSR
  1138  c63c f015                   beq ++
  1139  c63e c927                   cmp #39 ; ROL
  1140  c640 f011                   beq ++
  1141  c642 c928                   cmp #40 ; ROR
  1142  c644 4c53c6                 jmp ++
  1143  c647 b90002             +   lda inputbuf, y
  1144  c64a c941                   cmp #'A'
  1145  c64c d005                   bne ++
  1146  c64e b90102                 lda inputbuf+1,y
  1147  c651 c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1148  c653 60                 ++  rts
  1149                          
  1150                          chkimmediate:
  1151  c654 84a5                   sty savepos
  1152  c656 b90002                 lda inputbuf, y
  1153  c659 c923                   cmp #'#'
  1154  c65b d016                   bne ++
  1155  c65d c8                     iny
  1156  c65e 2052c9                 jsr skipspaces
  1157  c661 b90002                 lda inputbuf, y
  1158  c664 c924                   cmp #'$'
  1159  c666 d001                   bne +
  1160  c668 c8                     iny
  1161  c669 20bbc9             +   jsr chkhexbyte
  1162  c66c d005                   bne ++
  1163  c66e c4a4               +   cpy len
  1164  c670 d001                   bne ++
  1165  c672 60                     rts
  1166  c673 a4a5               ++  ldy savepos
  1167  c675 a201                   ldx #1 ; Z false (NE)
  1168  c677 60                     rts
  1169                          
  1170                          chkindirectx:
  1171  c678 84a5                   sty savepos
  1172  c67a b90002                 lda inputbuf, y
  1173  c67d c928                   cmp #'('
  1174  c67f d037                   bne ++
  1175  c681 c8                     iny
  1176  c682 2052c9                 jsr skipspaces
  1177  c685 b90002                 lda inputbuf, y
  1178  c688 c924                   cmp #'$'
  1179  c68a d001                   bne +
  1180  c68c c8                     iny
  1181  c68d 20bbc9             +   jsr chkhexbyte
  1182  c690 d026                   bne ++
  1183  c692 2052c9                 jsr skipspaces
  1184  c695 b90002                 lda inputbuf, y
  1185  c698 c92c                   cmp #','
  1186  c69a d01c                   bne ++
  1187  c69c c8                     iny
  1188  c69d 2052c9                 jsr skipspaces
  1189  c6a0 b90002                 lda inputbuf, y
  1190  c6a3 c958                   cmp #'X'
  1191  c6a5 d011                   bne ++
  1192  c6a7 c8                     iny
  1193  c6a8 2052c9                 jsr skipspaces
  1194  c6ab b90002                 lda inputbuf, y
  1195  c6ae c929                   cmp #')'
  1196  c6b0 d006                   bne ++
  1197  c6b2 c8                     iny
  1198  c6b3 c4a4                   cpy len
  1199  c6b5 d001                   bne ++
  1200  c6b7 60                     rts
  1201  c6b8 a4a5               ++  ldy savepos
  1202  c6ba a201                   ldx #1 ; Z false (NE)
  1203  c6bc 60                     rts
  1204                          
  1205                          chkindirecty:
  1206  c6bd 84a5                   sty savepos
  1207  c6bf b90002                 lda inputbuf, y
  1208  c6c2 c928                   cmp #'('
  1209  c6c4 d037                   bne ++
  1210  c6c6 c8                     iny
  1211  c6c7 2052c9                 jsr skipspaces
  1212  c6ca b90002                 lda inputbuf, y
  1213  c6cd c924                   cmp #'$'
  1214  c6cf d001                   bne +
  1215  c6d1 c8                     iny
  1216  c6d2 20bbc9             +   jsr chkhexbyte
  1217  c6d5 d026                   bne ++
  1218  c6d7 2052c9                 jsr skipspaces
  1219  c6da b90002                 lda inputbuf, y
  1220  c6dd c929                   cmp #')'
  1221  c6df d01c                   bne ++
  1222  c6e1 c8                     iny
  1223  c6e2 2052c9                 jsr skipspaces
  1224  c6e5 b90002                 lda inputbuf, y
  1225  c6e8 c92c                   cmp #','
  1226  c6ea d011                   bne ++
  1227  c6ec c8                     iny
  1228  c6ed 2052c9                 jsr skipspaces
  1229  c6f0 b90002                 lda inputbuf, y
  1230  c6f3 c959                   cmp #'Y'
  1231  c6f5 d006                   bne ++
  1232  c6f7 c8                     iny
  1233  c6f8 c4a4                   cpy len
  1234  c6fa d001                   bne ++
  1235  c6fc 60                     rts
  1236  c6fd a4a5               ++  ldy savepos
  1237  c6ff a201                   ldx #1 ; Z false (NE)
  1238  c701 60                     rts
  1239                          
  1240                          chkrelative:
  1241  c702 84a5                   sty savepos
  1242  c704 a623                   ldx inidx
  1243  c706 e006                   cpx #6 ; BIT
  1244  c708 f01e                   beq ++
  1245  c70a bd14ca                 lda inst0, x
  1246  c70d c942                   cmp #'B'
  1247  c70f d017                   bne ++
  1248  c711 b90002                 lda inputbuf, y
  1249  c714 c924                   cmp #'$'
  1250  c716 d001                   bne +
  1251  c718 c8                     iny
  1252  c719 20b2c9             +   jsr chkhexword
  1253  c71c d00a                   bne ++
  1254  c71e c4a4                   cpy len
  1255  c720 d006                   bne ++
  1256  c722 202dc7                 jsr computeoffset
  1257  c725 d001                   bne ++
  1258  c727 60                     rts ; Z true (EQ)
  1259  c728 a4a5               ++  ldy savepos
  1260  c72a a201                   ldx #1 ; Z false (NE)
  1261  c72c 60                     rts
  1262                          
  1263                          computeoffset:
  1264                          ;   compute next address
  1265  c72d a527                   lda ptr3+1
  1266  c72f 85fe                   sta ptr2+1
  1267  c731 a526                   lda ptr3
  1268  c733 18                     clc
  1269  c734 6902                   adc #2
  1270  c736 85fd                   sta ptr2
  1271  c738 9002                   bcc +
  1272  c73a e6fe                   inc ptr2+1
  1273                          +  ; subtract argument
  1274  c73c 38                     sec
  1275  c73d a5fb                   lda ptr1
  1276  c73f e5fd                   sbc ptr2
  1277  c741 85a6                   sta tmp2
  1278  c743 a5fc                   lda ptr1+1
  1279  c745 e5fe                   sbc ptr2+1
  1280  c747 f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1281  c749 c9ff                   cmp #$FF
  1282  c74b d00d                   bne failedoffset ; 0 and FF were only options so fail
  1283                              ; chkeck negative offset
  1284  c74d a5a6                   lda tmp2
  1285  c74f 3006                   bmi successoffset ; branch if signed byte is negative
  1286  c751 1007                   bpl failedoffset ; otherwise fail
  1287                          chkoffsetto127:
  1288  c753 a5a6                   lda tmp2
  1289  c755 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1290                          successoffset:    
  1291  c757 a900                   lda #0 ; Z true (EQ)
  1292  c759 60                     rts
  1293                          failedoffset:
  1294  c75a a901                   lda #1 ; Z false (NE)
  1295  c75c 60                     rts
  1296                          
  1297                          chkzeropage:
  1298  c75d 84a5                   sty savepos
  1299  c75f b90002                 lda inputbuf, y
  1300  c762 c924                   cmp #'$'
  1301  c764 d001                   bne +
  1302  c766 c8                     iny
  1303  c767 20bbc9             +   jsr chkhexbyte
  1304  c76a d005                   bne ++
  1305  c76c c4a4                   cpy len
  1306  c76e d001                   bne ++
  1307  c770 60                     rts ; Z true (EQ)
  1308  c771 a4a5               ++  ldy savepos
  1309  c773 a201                   ldx #1 ; Z false (NE)
  1310  c775 60                     rts
  1311                          
  1312                          chkzeropagex:
  1313  c776 84a5                   sty savepos
  1314  c778 b90002                 lda inputbuf, y
  1315  c77b c924                   cmp #'$'
  1316  c77d d001                   bne +
  1317  c77f c8                     iny
  1318  c780 20bbc9             +   jsr chkhexbyte
  1319  c783 d01b                   bne ++
  1320  c785 2052c9                 jsr skipspaces
  1321  c788 b90002                 lda inputbuf, y
  1322  c78b c92c                   cmp #','
  1323  c78d d011                   bne ++
  1324  c78f c8                     iny
  1325  c790 2052c9                 jsr skipspaces
  1326  c793 b90002                 lda inputbuf, y
  1327  c796 c958                   cmp #'X'
  1328  c798 d006                   bne ++
  1329  c79a c8                     iny
  1330  c79b c4a4                   cpy len
  1331  c79d d001                   bne ++
  1332  c79f 60                     rts ; Z true (EQ)
  1333  c7a0 a4a5               ++  ldy savepos
  1334  c7a2 a201                   ldx #1 ; Z false (NE)
  1335  c7a4 60                     rts
  1336                          
  1337                          chkzeropagey:
  1338  c7a5 84a5                   sty savepos
  1339  c7a7 b90002                 lda inputbuf, y
  1340  c7aa c924                   cmp #'$'
  1341  c7ac d001                   bne +
  1342  c7ae c8                     iny
  1343  c7af 20bbc9             +   jsr chkhexbyte
  1344  c7b2 d01b                   bne ++
  1345  c7b4 2052c9                 jsr skipspaces
  1346  c7b7 b90002                 lda inputbuf, y
  1347  c7ba c92c                   cmp #','
  1348  c7bc d011                   bne ++
  1349  c7be c8                     iny
  1350  c7bf 2052c9                 jsr skipspaces
  1351  c7c2 b90002                 lda inputbuf, y
  1352  c7c5 c959                   cmp #'Y'
  1353  c7c7 d006                   bne ++
  1354  c7c9 c8                     iny
  1355  c7ca c4a4                   cpy len
  1356  c7cc d001                   bne ++
  1357  c7ce 60                     rts ; Z true (EQ)
  1358  c7cf a4a5               ++  ldy savepos
  1359  c7d1 a201                   ldx #1 ; Z false (NE)
  1360  c7d3 60                     rts
  1361                          
  1362                          chkabsolute:
  1363  c7d4 84a5                   sty savepos
  1364  c7d6 b90002                 lda inputbuf, y
  1365  c7d9 c924                   cmp #'$'
  1366  c7db d001                   bne +
  1367  c7dd c8                     iny
  1368  c7de 20b2c9             +   jsr chkhexword
  1369  c7e1 d005                   bne ++
  1370  c7e3 c4a4                   cpy len
  1371  c7e5 d001                   bne ++
  1372  c7e7 60                     rts ; Z true (EQ)
  1373  c7e8 a4a5               ++  ldy savepos
  1374  c7ea a201                   ldx #1 ; Z false (NE)
  1375  c7ec 60                     rts
  1376                          
  1377                          chkabsolutex:
  1378  c7ed 84a5                   sty savepos
  1379  c7ef b90002                 lda inputbuf, y
  1380  c7f2 c924                   cmp #'$'
  1381  c7f4 d001                   bne +
  1382  c7f6 c8                     iny
  1383  c7f7 20b2c9             +   jsr chkhexword
  1384  c7fa d01b                   bne ++
  1385  c7fc 2052c9                 jsr skipspaces
  1386  c7ff b90002                 lda inputbuf, y
  1387  c802 c92c                   cmp #','
  1388  c804 d011                   bne ++
  1389  c806 c8                     iny
  1390  c807 2052c9                 jsr skipspaces
  1391  c80a b90002                 lda inputbuf, y
  1392  c80d c958                   cmp #'X'
  1393  c80f d006                   bne ++
  1394  c811 c8                     iny
  1395  c812 c4a4                   cpy len
  1396  c814 d001                   bne ++
  1397  c816 60                     rts ; Z true (EQ)
  1398  c817 a4a5               ++  ldy savepos
  1399  c819 a201                   ldx #1 ; Z false (NE)
  1400  c81b 60                     rts
  1401                          
  1402                          chkabsolutey:
  1403  c81c 84a5                   sty savepos
  1404  c81e b90002                 lda inputbuf, y
  1405  c821 c924                   cmp #'$'
  1406  c823 d001                   bne +
  1407  c825 c8                     iny
  1408  c826 20b2c9             +   jsr chkhexword
  1409  c829 d01b                   bne ++
  1410  c82b 2052c9                 jsr skipspaces
  1411  c82e b90002                 lda inputbuf, y
  1412  c831 c92c                   cmp #','
  1413  c833 d011                   bne ++
  1414  c835 c8                     iny
  1415  c836 2052c9                 jsr skipspaces
  1416  c839 b90002                 lda inputbuf, y
  1417  c83c c959                   cmp #'Y'
  1418  c83e d006                   bne ++
  1419  c840 c8                     iny
  1420  c841 c4a4                   cpy len
  1421  c843 d001                   bne ++
  1422  c845 60                     rts ; Z true (EQ)
  1423  c846 a4a5               ++  ldy savepos
  1424  c848 a201                   ldx #1 ; Z false (NE)
  1425  c84a 60                     rts
  1426                          
  1427                          chkindirect:
  1428  c84b 84a5                   sty savepos
  1429  c84d b90002                 lda inputbuf, y
  1430  c850 c928                   cmp #'('
  1431  c852 d021                   bne ++
  1432  c854 c8                     iny
  1433  c855 2052c9                 jsr skipspaces
  1434  c858 b90002                 lda inputbuf, y
  1435  c85b c924                   cmp #'$'
  1436  c85d d001                   bne +
  1437  c85f c8                     iny
  1438  c860 20b2c9             +   jsr chkhexword
  1439  c863 d010                   bne ++
  1440  c865 2052c9                 jsr skipspaces
  1441  c868 b90002                 lda inputbuf, y
  1442  c86b c929                   cmp #')'
  1443  c86d d006                   bne ++
  1444  c86f c8                     iny
  1445  c870 c4a4                   cpy len
  1446  c872 d001                   bne ++
  1447  c874 60                     rts ; Z true (EQ)
  1448  c875 a4a5               ++  ldy savepos
  1449  c877 a201                   ldx #1 ; Z false (NE)
  1450  c879 60                     rts
  1451                          
  1452                          chkinstruction:
  1453  c87a c4a4                   cpy len
  1454  c87c f02a                   beq ++
  1455  c87e 84ff                   sty tmp
  1456  c880 a237                   ldx #(ninst-1)
  1457  c882 b90002             -   lda inputbuf,y
  1458  c885 dd14ca                 cmp inst0,x
  1459  c888 d019                   bne +
  1460  c88a c8                     iny
  1461  c88b b90002                 lda inputbuf,y
  1462  c88e dd4cca                 cmp inst1,x
  1463  c891 d010                   bne +
  1464  c893 c8                     iny
  1465  c894 b90002                 lda inputbuf,y
  1466  c897 dd84ca                 cmp inst2,x
  1467  c89a d007                   bne +
  1468  c89c c8                     iny
  1469  c89d 8a                     txa
  1470  c89e 8523                   sta inidx
  1471  c8a0 a200                   ldx #0
  1472  c8a2 60                     rts
  1473  c8a3 a4ff               +   ldy tmp
  1474  c8a5 ca                     dex
  1475  c8a6 10da                   bpl -
  1476  c8a8 a201               ++  ldx #1 ; Z false (NE)
  1477  c8aa 60                     rts
  1478                          
  1479                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1480                              ; and allows mode promotion
  1481  c8ab 20cfc8                 jsr find_inst_and_mode2
  1482  c8ae f01e                   beq ++
  1483  c8b0 a524                   lda mode
  1484  c8b2 c906                   cmp #6
  1485  c8b4 9018                   bcc ++
  1486  c8b6 c90a                   cmp #10
  1487  c8b8 b012                   bcs +
  1488  c8ba 6903                   adc #3
  1489  c8bc 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1490  c8be 20cfc8                 jsr find_inst_and_mode2 ; try again once
  1491  c8c1 d00b                   bne ++
  1492  c8c3 a5a6                   lda tmp2
  1493  c8c5 85fb                   sta ptr1
  1494  c8c7 a900                   lda #0
  1495  c8c9 85fc                   sta ptr1+1
  1496  c8cb 60                     rts ; Z true (EQ)
  1497  c8cc a201               +   ldx #1 ; Z false (NE)
  1498  c8ce 60                 ++  rts
  1499                          
  1500                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1501  c8cf a296                   ldx #nopcodes-1
  1502  c8d1 bd6bcc             -   lda instidx, x
  1503  c8d4 bc02cd                 ldy modeidx, x
  1504  c8d7 c523                   cmp inidx
  1505  c8d9 d00c                   bne +
  1506  c8db c424                   cpy mode
  1507  c8dd d008                   bne +
  1508  c8df 8622                   stx opidx
  1509  c8e1 2097c0                 jsr getsize
  1510  c8e4 a200                   ldx #0 ; Z true (EQ)
  1511  c8e6 60                     rts
  1512  c8e7 ca                 +   dex
  1513  c8e8 e0ff                   cpx #$ff
  1514  c8ea d0e5                   bne -
  1515  c8ec a201                   ldx #1 ; Z false (NE)
  1516  c8ee 60                     rts
  1517                          
  1518                          executerun:
  1519  c8ef 68                     pla ; remove low byte return address
  1520  c8f0 68                     pla ; return high byte return address
  1521  c8f1 68                     pla ; again, we're really not returning
  1522  c8f2 68                     pla ; again, we're really not returning
  1523  c8f3 200fca                 jsr newline
  1524  c8f6 38                     sec
  1525  c8f7 a5fb                   lda ptr1
  1526  c8f9 e901                   sbc #1
  1527  c8fb 85fb                   sta ptr1
  1528  c8fd b002                   bcs +
  1529  c8ff c6fc                   dec ptr1+1
  1530  c901 a5fc               +   lda ptr1+1
  1531  c903 48                     pha
  1532  c904 a5fb                   lda ptr1
  1533  c906 48                     pha
  1534  c907 60                     rts
  1535                          
  1536                          chkcontinuedis:
  1537  c908 b90002                 lda inputbuf,y
  1538  c90b c944                   cmp #'D'
  1539  c90d d00a                   bne +
  1540  c90f b90102                 lda inputbuf+1,y
  1541  c912 c90d                   cmp #13
  1542  c914 d003                   bne +
  1543  c916 c8                     iny
  1544  c917 a200                   ldx #0 ; restore Z set
  1545  c919 60                 +   rts
  1546                          
  1547                          chkcontinueasm:
  1548  c91a b90002                 lda inputbuf,y
  1549  c91d c941                   cmp #'A'
  1550  c91f d00a                   bne +
  1551  c921 b90102                 lda inputbuf+1,y
  1552  c924 c90d                   cmp #13
  1553  c926 d003                   bne +
  1554  c928 c8                     iny
  1555  c929 a200                   ldx #0 ; restore Z set
  1556  c92b 60                 +   rts
  1557                          
  1558                          executedisassemble:
  1559  c92c 68                     pla ; remove low byte return address
  1560  c92d 68                     pla ; return high byte return address
  1561  c92e 200fca                 jsr newline
  1562  c931 4c34c0                 jmp disassemble
  1563                          
  1564                          reportnotimplemented:
  1565  c934 a967                   lda #<notimplemented
  1566  c936 a2ce                   ldx #>notimplemented
  1567  c938 4c86c2                 jmp strout
  1568                          
  1569                          reporterr:
  1570  c93b c000                   cpy #0
  1571  c93d f008                   beq +
  1572  c93f a920                   lda #' '
  1573  c941 20d2ff             -   jsr charout
  1574  c944 88                     dey
  1575  c945 d0fa                   bne -
  1576  c947 a93f               +   lda #'?'
  1577  c949 20d2ff                 jsr charout
  1578  c94c a90d                   lda #13
  1579  c94e 20d2ff                 jsr charout
  1580  c951 60                     rts
  1581                          
  1582                          skipspaces:
  1583  c952 b90002             -   lda inputbuf, y
  1584  c955 c920                   cmp #$20
  1585  c957 d003                   bne +
  1586  c959 c8                     iny
  1587  c95a d0f6                   bne -
  1588  c95c 60                 +   rts
  1589                          
  1590                          chkdot:
  1591  c95d b90002                 lda inputbuf, y
  1592  c960 c92e                   cmp #'.'
  1593  c962 d003                   bne +
  1594  c964 c8                     iny
  1595  c965 a900                   lda #0 ; Z true (EQ)
  1596  c967 60                 +   rts
  1597                          
  1598                          chkhelp:
  1599  c968 b90002                 lda inputbuf, y
  1600  c96b c93f                   cmp #'?'
  1601  c96d d003                   bne +
  1602  c96f c8                     iny
  1603  c970 a900                   lda #0 ; Z true (EQ)
  1604  c972 60                 +   rts
  1605                          
  1606                          chkcolon:
  1607  c973 b90002                 lda inputbuf, y
  1608  c976 c93a                   cmp #':'
  1609  c978 d003                   bne +
  1610  c97a c8                     iny
  1611  c97b a900                   lda #0 ; Z true (EQ)
  1612  c97d 60                 +   rts
  1613                          
  1614                          chkfilename:
  1615  c97e 84ff                   sty tmp
  1616  c980 b90002                 lda inputbuf, y
  1617  c983 c922                   cmp #34
  1618  c985 d010                   bne ++
  1619  c987 c8                 -   iny
  1620  c988 b90002                 lda inputbuf, y
  1621  c98b c90d                   cmp #13
  1622  c98d d004                   bne +
  1623  c98f a4ff                   ldy tmp
  1624  c991 d004                   bne ++
  1625  c993 c922               +   cmp #34
  1626  c995 d0f0                   bne -
  1627  c997 60                 ++  rts
  1628                          
  1629                          chkhexbyteofsequence:
  1630  c998 204cc2                 jsr inputhexbyte
  1631  c99b 20b5c9                 jsr +
  1632  c99e d011                   bne ++ ; Z false (NE) if failed checks
  1633  c9a0 c4a4                   cpy len
  1634  c9a2 f00d                   beq ++ ; Z true (EQ) if end of input
  1635  c9a4 85ff                   sta tmp
  1636  c9a6 b90002                 lda inputbuf,y
  1637  c9a9 c920                   cmp #$20
  1638  c9ab d004                   bne ++ ; Z false (NE) if not space
  1639  c9ad a5ff                   lda tmp
  1640  c9af a200                   ldx #0 ; Z true (EQ) is space delimeter
  1641  c9b1 60                 ++  rts
  1642                          
  1643                          chkhexword:
  1644                          chkhexaddr1:
  1645  c9b2 2026c2                 jsr inputhexword
  1646  c9b5 a200               +   ldx #0 ; Z true (EQ)
  1647  c9b7 9001                   bcc +
  1648  c9b9 e8                     inx ; Z false (NE)
  1649  c9ba 60                 +   rts
  1650                          
  1651                          chkhexbyte:
  1652  c9bb 98                     tya
  1653  c9bc 48                     pha ; save y
  1654  c9bd 204cc2                 jsr inputhexbyte
  1655  c9c0 b00d                   bcs +
  1656  c9c2 85a6                   sta tmp2
  1657  c9c4 2068c2                 jsr inputhexnybble
  1658  c9c7 9006                   bcc +
  1659  c9c9 68                     pla ; throw away saved y
  1660  c9ca a5a6                   lda tmp2
  1661  c9cc a200                   ldx #0 ; Z true (EQ)
  1662  c9ce 60                     rts
  1663  c9cf 68                 +   pla
  1664  c9d0 a8                     tay ; won't be zero, so Z false (NE)
  1665  c9d1 60                     rts    
  1666                          
  1667                          chkhexaddr2:
  1668  c9d2 a5fb                   lda ptr1
  1669  c9d4 48                     pha
  1670  c9d5 a5fc                   lda ptr1+1
  1671  c9d7 48                     pha
  1672  c9d8 20b2c9                 jsr chkhexaddr1
  1673  c9db f005                   beq +
  1674  c9dd 68                     pla
  1675  c9de 68                     pla
  1676  c9df a901                   lda #1 ; Z false (NE)
  1677  c9e1 60                     rts
  1678  c9e2 a5fb               +   lda ptr1
  1679  c9e4 85fd                   sta ptr2
  1680  c9e6 a5fc                   lda ptr1+1
  1681  c9e8 85fe                   sta ptr2+1
  1682  c9ea 68                     pla
  1683  c9eb 85fc                   sta ptr1+1
  1684  c9ed 68                     pla
  1685  c9ee 85fb                   sta ptr1
  1686  c9f0 a900                   lda #0 ; Z true (EQ)
  1687  c9f2 60                     rts    
  1688                          
  1689                          chkaddr1cmd:
  1690  c9f3 b90002                 lda inputbuf, y
  1691  c9f6 c941               +   cmp #'A'
  1692  c9f8 d004                   bne +
  1693  c9fa c8                     iny
  1694  c9fb 4c43c5                 jmp executeassemble
  1695  c9fe c944               +   cmp #'D'
  1696  ca00 d004                   bne +
  1697  ca02 c8                     iny
  1698  ca03 4c2cc9                 jmp executedisassemble
  1699  ca06 c952               +   cmp #'R'
  1700  ca08 d004                   bne +
  1701  ca0a c8                     iny
  1702  ca0b 4cefc8                 jmp executerun
  1703  ca0e 60                 +   rts
  1704                          
  1705                          newline:
  1706  ca0f a90d                   lda #13
  1707  ca11 4cd2ff                 jmp charout
  1708                          
  1709                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1710                          ;     jsr $ffd2
  1711                          ;     pha
  1712                          ; -   lda $d011
  1713                          ;     bpl -
  1714                          ; -   lda $d011
  1715                          ;     bmi -
  1716                          ; -   lda $d011
  1717                          ;     bpl -
  1718                          ; -   lda $d011
  1719                          ;     bmi -
  1720                          ;     pla
  1721                          ;     rts
  1722                          
  1723                          !ifdef MINIMUM {
  1724                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1725                          ;; MC6850
  1726                          UART_DATA=$FFF8
  1727                          UART_STCR=$FFF9
  1728                          
  1729                          UART_INIT:
  1730                          	ldx #0b00000111 ; 11=reset device
  1731                          	stx UART_STCR
  1732                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  1733                          	sta UART_STCR
  1734                          	rts
  1735                          UART_OUT:
  1736                          	pha
  1737                          -	lda UART_STCR
  1738                          	and #2
  1739                          	beq - ; branch if TDRE=0, not finished transmitting
  1740                          	pla
  1741                          	pha
  1742                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  1743                          	sta UART_DATA
  1744                          	pla
  1745                          	rts
  1746                          UART_IN:
  1747                          -	lda UART_STCR
  1748                          	and #1
  1749                          	beq - ; branch if TDRF=0, not received
  1750                          	lda UART_DATA
  1751                          	; software "CAPS LOCK" because wozmon expects only uppercase
  1752                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  1753                          	beq BREAK
  1754                              ; force lowercase alphabet to uppercase
  1755                              cmp #'a'
  1756                          	bcc +
  1757                          	cmp #'z'+1
  1758                          	bcs +
  1759                          	eor #$20
  1760                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  1761                           	rts
  1762                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  1763                          	pha ; save A
  1764                          	lda UART_STCR
  1765                          	lsr ; put rightmost bit in carry
  1766                          	pla ; restore A affects flags
  1767                          	ror ; move carry to left bit, right bit to carry
  1768                          	php ; push processor to save N
  1769                          	rol ; restore A affects flags
  1770                          	plp ; pull processor to restore N
  1771                          	rts
  1772                          
  1773                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1774                          ; Processor start and interrupts
  1775                          
  1776                          NMI: ; unused on minimum (no source of interrupt)
  1777                              rti
  1778                          
  1779                          IRQ:
  1780                              rti ; TODO implement BRK HANDLING in monitor
  1781                          
  1782                          BREAK:
  1783                              jmp RESET
  1784                          
  1785                          RESET:
  1786                              cld
  1787                              ldx #$00
  1788                              txs
  1789                              jsr JUART_INIT
  1790                              cli
  1791                              jmp start
  1792                          } ; !ifdef MINIMUM
  1793                          
  1794                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1795                          ; data
  1796                          
  1797                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  1798                          ninst = 56
  1799  ca14 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  1800  ca4c 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  1801  ca84 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  1802                          
  1803                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  1804                          mode_jmptable:
  1805  cabc 23c1               !word dispModeAcc-1; 0 Accumulator 1
  1806  cabe 28c1               !word dispModeNone-1 ; 1 None 1
  1807  cac0 29c1               !word dispModeImm-1 ; 2 Immediate 2
  1808  cac2 3ac1               !word dispModeIndX-1 ; 3 IndirectX 2
  1809  cac4 5ac1               !word dispModeIndY-1 ; 4 IndirectY 2
  1810  cac6 7ac1               !word dispModeRel-1 ; 5 Relative 2
  1811  cac8 2ec1               !word dispModeZP-1 ; 6 ZeroPage 2
  1812  caca b6c1               !word dispModeZPX-1 ; 7 ZeroPageX 2
  1813  cacc c3c1               !word dispModeZPY-1 ; 8 ZeroPageY 2
  1814  cace d0c1               !word dispModeAbs-1 ; 9 Absolute 3
  1815  cad0 e2c1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  1816  cad2 efc1               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  1817  cad4 fcc1               !word dispModeInd-1 ; 12 Indirect 3
  1818                          
  1819                          nmodes = 13
  1820                          
  1821                          mode_sorted:
  1822  cad6 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  1823                          
  1824                          !ifdef MINIMUM {
  1825                          mode_0: !text "Accumulator", 0, "A", 0
  1826                          mode_1: !text "None", 0, "", 0
  1827                          mode_2: !text "Immediate", 0, "#$12", 0
  1828                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  1829                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  1830                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  1831                          mode_6: !text "ZeroPage", 0, "$12", 0
  1832                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  1833                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  1834                          mode_9: !text "Absolute", 0, "$1234", 0
  1835                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  1836                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  1837                          mode_12: !text "Indirect", 0, "($1234)", 0
  1838                          } else {
  1839  cae3 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  1840  caf1 4e4f4e450000       mode_1: !text "NONE", 0, "", 0
  1841  caf7 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  1842  cb06 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  1843  cb18 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  1844  cb2a 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  1845  cb49 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  1846  cb56 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  1847  cb66 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  1848  cb76 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  1849  cb85 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  1850  cb97 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  1851  cba9 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  1852                          }
  1853                          
  1854                          modes: ; table for easily displaying each mode_example
  1855  cbba e3ca               !word mode_0
  1856  cbbc f1ca               !word mode_1
  1857  cbbe f7ca               !word mode_2
  1858  cbc0 06cb               !word mode_3
  1859  cbc2 18cb               !word mode_4
  1860  cbc4 2acb               !word mode_5
  1861  cbc6 49cb               !word mode_6
  1862  cbc8 56cb               !word mode_7
  1863  cbca 66cb               !word mode_8
  1864  cbcc 76cb               !word mode_9
  1865  cbce 85cb               !word mode_10
  1866  cbd0 97cb               !word mode_11
  1867  cbd2 a9cb               !word mode_12
  1868                          
  1869                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  1870                          nopcodes = 151
  1871  cbd4 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  1872  cc6b 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  1873  cd02 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  1874                          
  1875                          copyright 
  1876                          ;                  1         2         3         4
  1877                          ;         1234567890123456789012345678901234567890
  1878  cd99 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  1879                          !ifdef C64TERMINAL {
  1880                              !text 13, "(TERMINAL VERSION)"
  1881                          }
  1882  cdb9 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  1883  cddf 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  1884  cdf6 00                 !text 0
  1885                          
  1886                          firsthelp
  1887  cdf7 0d3f202020202020...!text 13, "?       (SYNTAX)"
  1888  ce08 0d3f204120202020...!text 13, "? A     (LIST 6502 INSTRUCTIONS)"
  1889  ce29 0d3f204144432020...!text 13, "? ADC   (/ADC/ ADDRESSING MODES)"
  1890  ce4a 0d3f204d4f444520...!text 13, "? MODE  (ADDRESSING MODES)"
  1891                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  1892  ce65 0d00               !text 13, 0
  1893                          
  1894  ce67 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  1895                          
  1896                          generalhelp
  1897  ce78 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  1898  ce9e 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  1899  cec3 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  1900  cee6 00                 !text 0
  1901                          generalhelp2
  1902  cee7 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  1903  cf0f 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  1904  cf2b 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  1905  cf4b 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  1906  cf6d 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  1907  cf92 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  1908  cfb1 00                 !text 0
  1909                          
  1910  cfb2 4d4f444500         modes_keyword !text "MODE", 0
  1911                          
  1912                          !ifdef C64SCREEN {
  1913  cfb7 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  1914  cfbe 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  1915                          }
  1916                          
  1917                          !ifdef MINIMUM {
  1918                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1919                          ; JUMP table for some stability
  1920                          * = $FFEE
  1921                          JUART_INIT: JMP UART_INIT
  1922                          JUART_OUT: JMP UART_OUT
  1923                          JUART_IN: JMP UART_IN
  1924                          JUART_CHK: JMP UART_CHK
  1925                          
  1926                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1927                          ; 6502 vectors 
  1928                          * = $fffa
  1929                              !word NMI
  1930                              !word RESET
  1931                              !word IRQ
  1932                          }
  1933                          
  1934                          finish = *
