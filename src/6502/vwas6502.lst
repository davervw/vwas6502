
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGET  C64 and...                    *        <<<
     7                          ;; >>>       ** INCLUDES VERSION FOR 6502+MC6850 minimum system *        <<<
     8                          ;; >>>       *   60K(RAM),4K(ROM), 2 bytes IO for MC6850 UART   *        <<<
     9                          ;; >>>       ****************************************************        <<<
    10                          ;;
    11                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    12                          ;; MIT License
    13                          ;;
    14                          ;; Copyright (c) 2024 David R. Van Wagner
    15                          ;; davevw.com
    16                          ;;
    17                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    18                          ;; of this software and associated documentation files (the "Software"), to deal
    19                          ;; in the Software without restriction, including without limitation the rights
    20                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    21                          ;; copies of the Software, and to permit persons to whom the Software is
    22                          ;; furnished to do so, subject to the following conditions:
    23                          ;;
    24                          ;; The above copyright notice and this permission notice shall be included in all
    25                          ;; copies or substantial portions of the Software.
    26                          ;;
    27                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    28                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    29                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    30                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    31                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    32                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    33                          ;; SOFTWARE.
    34                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    35                          
    36                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ; Important! define exactly ONE target (set in build.sh)
    39                          ;C64SCREEN = 1
    40                          ;C64TERMINAL = 1
    41                          ;MINIMUM = 1
    42                          
    43                          ; options (set in build.sh)
    44                          ;NEEDECHO = 0
    45                          
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;; _
    49                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    50                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    51                          ;; 1000 (display memory at $1000)
    52                          ;; 1000.2000 (display memory range $1000 to $2000)
    53                          ;; 1000. (display next screenful of memory starting at $1000)
    54                          ;; . (display next screenful of memory)
    55                          ;; 1000 r (JMP $1000)
    56                          ;; 1000: 01 02 03 (modify memory)
    57                          ;; (NEW SYNTAX)
    58                          ;; 1000 d (disassemble starting at address, for screenful)
    59                          ;; d (continue disassembling from last address)
    60                          ;; 1000 a (assemble starting at, interactive until empty line) 
    61                          ;; (FUTURE SYNTAX, not implemented)
    62                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    63                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    64                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    65                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    66                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    67                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    68                          ;; 1000.2000 "filename" 08 save (save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, can abbreviate to s)
    69                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    70                          ;; ? (commands help)
    71                          ;; ? a (list instructions available)
    72                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    73                          ;; ? mode (show addressing modes example syntax for 6502)
    74                          ;;
    75                          ;; (INTERACTIVE ASSEMBLER)
    76                          ;; 1000 _
    77                          ;;      ADC #$12
    78                          ;; 1000 69 12    ADC #$12
    79                          ;; 1002 _
    80                          ;;      JSR $1234
    81                          ;; 1002 20 34 12 JSR $1234
    82                          ;; 1005 _
    83                          ;;      RTS
    84                          ;; 1005 60       RTS
    85                          ;; 1006 _
    86                          ;;      XYZ
    87                          ;;      XYZ ?
    88                          ;; 1006 _
    89                          ;; _
    90                          ;;
    91                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    92                          ;; and can cursor up to revise, 
    93                          ;;
    94                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    95                          ;;
    96                          
    97                          ; global
    98                          inputbuf=$0200
    99                          
   100                          
   101                          ; kernal/system calls
   102                          
   103                          !ifdef MINIMUM {
   104                          charout=JUART_OUT
   105                          getkey=JUART_IN
   106                          }
   107                          
   108                          !ifdef C64SCREEN {
   109                          charin=$ffcf ; screen editor
   110                          charout=$ffd2
   111                          getkey=$ffe4
   112                          }
   113                          
   114                          !ifdef C64TERMINAL {
   115                          charout=$ffd2
   116                          getkey=$ffe4
   117                          }
   118                          
   119                          ; zeropage
   120                          !ifdef MINIMUM {
   121                          opidx=$f0
   122                          inidx=$f1
   123                          mode=$f2
   124                          size=$f3
   125                          ptr3=$f4 ; and $f5
   126                          count=$f6
   127                          len=$f7
   128                          savepos=$f8
   129                          tmp2=$f9
   130                          flag=$fa
   131                          ptr1=$fb ; and $fc
   132                          ptr2=$fd ; and $fe
   133                          tmp=$ff
   134                          } else {
   135                          ptr1=$fb ; and $fc
   136                          ptr2=$fd ; and $fe
   137                          tmp=$ff
   138                          opidx=$22
   139                          inidx=$23
   140                          mode=$24
   141                          size=$25
   142                          ptr3=$26 ; and $27
   143                          count=$a3
   144                          len=$a4
   145                          savepos=$a5
   146                          tmp2=$a6
   147                          flag=$a7
   148                          }
   149                          
   150                          !ifdef MINIMUM {
   151                          *=$f000
   152                          } else {
   153                          *=$c000
   154                          }
   155                          start:
   156  c000 a949                   lda #<copyright
   157  c002 a2cd                   ldx #>copyright
   158  c004 207dc2                 jsr strout
   159  c007 a9a7                   lda #<firsthelp
   160  c009 a2cd                   ldx #>firsthelp
   161  c00b 207dc2                 jsr strout
   162  c00e 2098c2             -   jsr inputline
   163  c011 20a6c2                 jsr parseline
   164  c014 4c0ec0                 jmp -
   165                          
   166                          test: ; all the addressing modes here for testing disassembly
   167  c017 ea                     nop
   168  c018 ad3412                 lda $1234
   169  c01b bd3412                 lda $1234,x
   170  c01e b93412                 lda $1234,y
   171  c021 0a                     asl
   172  c022 a912                   lda #$12
   173  c024 a112                   lda ($12,x)
   174  c026 b112                   lda ($12),y
   175  c028 6c3412                 jmp ($1234)
   176  c02b d0fe               -   bne -
   177  c02d a512                   lda $12
   178  c02f b512                   lda $12,x
   179  c031 b612                   ldx $12,y
   180  c033 ff                     !byte $FF ; unknown
   181                          
   182                          disassemble:
   183  c034 a917                   lda #23
   184  c036 85a3                   sta count
   185  c038 a000               -   ldy #0
   186  c03a b1fb                   lda (ptr1),y
   187  c03c 206ec0                 jsr find_opcode
   188  c03f 20d1c0                 jsr disp_current
   189  c042 a525                   lda size
   190  c044 1002                   bpl +
   191  c046 a901                   lda #1
   192  c048 18                 +   clc
   193  c049 65fb                   adc ptr1
   194  c04b 85fb                   sta ptr1
   195  c04d 9002                   bcc +
   196  c04f e6fc                   inc ptr1+1
   197  c051 c6a3               +   dec count
   198  c053 d0e3                   bne -
   199                          !ifdef C64SCREEN {
   200  c055 a5fb                   lda ptr1
   201  c057 a6fc                   ldx ptr1+1
   202  c059 200ac2                 jsr disphexword
   203  c05c a967                   lda #<page_disassemble
   204  c05e a2cf                   ldx #>page_disassemble
   205  c060 4c7dc2                 jmp strout
   206                          } else {    
   207                              rts
   208                          }
   209                          
   210                          compareptrs:
   211  c063 a5fc                   lda ptr1+1
   212  c065 c5fe                   cmp ptr2+1
   213  c067 d004                   bne +
   214  c069 a5fb                   lda ptr1
   215  c06b c5fd                   cmp ptr2
   216  c06d 60                 +   rts
   217                          
   218                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   219                          ; and properties updated in ZP globals size,inidx,opidx,mode
   220  c06e a097                   ldy #nopcodes
   221  c070 a296                   ldx #nopcodes-1
   222  c072 dd84cb             -   cmp opcodes,x
   223  c075 f00f                   beq +
   224  c077 ca                     dex
   225  c078 88                     dey
   226  c079 d0f7                   bne -
   227  c07b 18                     clc
   228  c07c a901                   lda #1
   229  c07e 8525                   sta size
   230  c080 a9ff                   lda #$FF
   231  c082 aa                     tax
   232  c083 a8                     tay
   233  c084 900a                   bcc ++
   234  c086 bd1bcc             +   lda instidx, x
   235  c089 bcb2cc                 ldy modeidx, x
   236  c08c 2097c0                 jsr getsize
   237  c08f 38                     sec
   238  c090 8523               ++  sta inidx
   239  c092 8622                   stx opidx
   240  c094 8424                   sty mode
   241  c096 60                     rts
   242                          
   243                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   244                              ; result returned in size
   245  c097 48                     pha
   246  c098 a901                   lda #1
   247  c09a 8525                   sta size
   248  c09c 68                     pla
   249  c09d c002                   cpy #2 // Immediate
   250  c09f 9008                   bcc +
   251  c0a1 e625                   inc size
   252  c0a3 c009                   cpy #9 // Absolute
   253  c0a5 9002                   bcc +
   254  c0a7 e625                   inc size
   255  c0a9 60                 +   rts
   256                          
   257                          disp_opcode: ; .A opcode byte
   258  c0aa 206ec0                 jsr find_opcode
   259  c0ad 8a                     txa
   260                              ; fall through to display instruction
   261                          
   262                          dispinst: ; .A instruction index 0..55, note modifies A and X
   263  c0ae aa                     tax
   264  c0af e038                   cpx #ninst
   265  c0b1 b012                   bcs +
   266  c0b3 bdc4c9                 lda inst0, x
   267  c0b6 20d2ff                 jsr charout
   268  c0b9 bdfcc9                 lda inst1, x
   269  c0bc 20d2ff                 jsr charout
   270  c0bf bd34ca                 lda inst2, x
   271  c0c2 4cd2ff                 jmp charout
   272  c0c5 a93f               +   lda #'?'
   273  c0c7 20d2ff                 jsr charout
   274  c0ca 20d2ff                 jsr charout
   275  c0cd 20d2ff                 jsr charout
   276  c0d0 60                     rts
   277                          
   278                          disp_current:
   279  c0d1 a5fb                   lda ptr1
   280  c0d3 a6fc                   ldx ptr1+1
   281  c0d5 200ac2                 jsr disphexword
   282  c0d8 a920                   lda #$20
   283  c0da 20d2ff                 jsr charout
   284  c0dd a000                   ldy #0
   285  c0df a625                   ldx size
   286  c0e1 b1fb               -   lda (ptr1),y
   287  c0e3 2010c2                 jsr disphexbyte
   288  c0e6 a920                   lda #$20
   289  c0e8 20d2ff                 jsr charout
   290  c0eb c8                     iny
   291  c0ec ca                     dex
   292  c0ed d0f2                   bne -
   293  c0ef c003               -   cpy #3
   294  c0f1 f00e                   beq +
   295  c0f3 a920                   lda #$20
   296  c0f5 20d2ff                 jsr charout
   297  c0f8 20d2ff                 jsr charout
   298  c0fb 20d2ff                 jsr charout
   299  c0fe c8                     iny
   300  c0ff d0ee                   bne -
   301  c101 a523               +   lda inidx
   302  c103 20aec0                 jsr dispinst
   303  c106 a920                   lda #$20
   304  c108 20d2ff                 jsr charout
   305  c10b 2013c1                 jsr disp_mode
   306  c10e a90d                   lda #13
   307  c110 4cd2ff                 jmp charout
   308                          
   309                          disp_mode
   310  c113 a524                   lda mode
   311  c115 c90d                   cmp #13
   312  c117 b00a                   bcs +
   313  c119 0a                     asl
   314  c11a aa                     tax
   315  c11b bd6dca                 lda mode_jmptable+1,x
   316  c11e 48                     pha
   317  c11f bd6cca                 lda mode_jmptable,x
   318  c122 48                     pha
   319  c123 60                 +   rts
   320                          
   321                          dispModeAcc:
   322  c124 a941                   lda #'A'
   323  c126 4cd2ff                 jmp charout
   324                          
   325                          dispModeNone:
   326  c129 60                     rts
   327                          
   328                          dispModeImm:
   329  c12a a923                   lda #'#'
   330  c12c 20d2ff                 jsr charout
   331                          dispModeZP:
   332  c12f a924                   lda #'$'
   333  c131 20d2ff                 jsr charout
   334  c134 a001                   ldy #1
   335  c136 b1fb                   lda (ptr1),y
   336  c138 4c10c2                 jmp disphexbyte
   337                          
   338                          dispModeIndX:
   339  c13b a928                   lda #'('
   340  c13d 20d2ff                 jsr charout
   341  c140 a924                   lda #'$'
   342  c142 20d2ff                 jsr charout
   343  c145 a001                   ldy #1
   344  c147 b1fb                   lda (ptr1),y
   345  c149 2010c2                 jsr disphexbyte
   346  c14c a92c                   lda #','
   347  c14e 20d2ff                 jsr charout
   348  c151 a958                   lda #'X'
   349  c153 20d2ff                 jsr charout
   350  c156 a929                   lda #')'
   351  c158 4cd2ff                 jmp charout
   352                          
   353                          dispModeIndY:
   354  c15b a928                   lda #'('
   355  c15d 20d2ff                 jsr charout
   356  c160 a924                   lda #'$'
   357  c162 20d2ff                 jsr charout
   358  c165 a001                   ldy #1
   359  c167 b1fb                   lda (ptr1),y
   360  c169 2010c2                 jsr disphexbyte
   361  c16c a929                   lda #')'
   362  c16e 20d2ff                 jsr charout
   363  c171 a92c                   lda #','
   364  c173 20d2ff                 jsr charout
   365  c176 a959                   lda #'Y'
   366  c178 4cd2ff                 jmp charout
   367                          
   368                          dispModeRel:
   369  c17b a924                   lda #'$'
   370  c17d 20d2ff                 jsr charout
   371  c180 18                     clc
   372  c181 a5fb                   lda ptr1
   373  c183 6902                   adc #2
   374  c185 8526                   sta ptr3
   375  c187 a5fc                   lda ptr1+1
   376  c189 6900                   adc #0
   377  c18b 8527                   sta ptr3+1
   378  c18d a001                   ldy #1
   379  c18f b1fb                   lda (ptr1),y
   380  c191 1014                   bpl +
   381                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   382  c193 49ff                   eor #$FF ; inverse
   383  c195 18                     clc
   384  c196 6901                   adc #1 ; complete getting absolute value from two's complement
   385  c198 85ff                   sta tmp
   386  c19a 38                     sec
   387  c19b a526                   lda ptr3
   388  c19d e5ff                   sbc tmp
   389  c19f 8526                   sta ptr3
   390  c1a1 b00d                   bcs ++
   391  c1a3 c627                   dec ptr3+1
   392  c1a5 9009                   bcc ++
   393  c1a7 18                 +   clc ; simple case of adding
   394  c1a8 6526                   adc ptr3
   395  c1aa 8526                   sta ptr3
   396  c1ac 9002                   bcc ++
   397  c1ae e627                   inc ptr3+1
   398  c1b0 a526               ++  lda ptr3
   399  c1b2 a627                   ldx ptr3+1
   400  c1b4 4c0ac2                 jmp disphexword
   401                          
   402                          dispModeZPX:
   403  c1b7 202fc1                 jsr dispModeZP
   404  c1ba a92c                   lda #','
   405  c1bc 20d2ff                 jsr charout
   406  c1bf a958                   lda #'X'
   407  c1c1 4cd2ff                 jmp charout
   408                          
   409                          dispModeZPY:
   410  c1c4 202fc1                 jsr dispModeZP
   411  c1c7 a92c                   lda #','
   412  c1c9 20d2ff                 jsr charout
   413  c1cc a959                   lda #'Y'
   414  c1ce 4cd2ff                 jmp charout
   415                          
   416                          dispModeAbs:
   417  c1d1 a924                   lda #'$'
   418  c1d3 20d2ff                 jsr charout
   419  c1d6 a001                   ldy #1
   420  c1d8 b1fb                   lda (ptr1),y
   421  c1da 48                     pha
   422  c1db c8                     iny
   423  c1dc b1fb                   lda (ptr1),y
   424  c1de aa                     tax
   425  c1df 68                     pla
   426  c1e0 4c0ac2                 jmp disphexword
   427                          
   428                          dispModeAbsX:
   429  c1e3 20d1c1                 jsr dispModeAbs
   430  c1e6 a92c                   lda #','
   431  c1e8 20d2ff                 jsr charout
   432  c1eb a958                   lda #'X'
   433  c1ed 4cd2ff                 jmp charout
   434                          
   435                          dispModeAbsY:
   436  c1f0 20d1c1                 jsr dispModeAbs
   437  c1f3 a92c                   lda #','
   438  c1f5 20d2ff                 jsr charout
   439  c1f8 a959                   lda #'Y'
   440  c1fa 4cd2ff                 jmp charout
   441                          
   442                          dispModeInd:
   443  c1fd a928                   lda #'('
   444  c1ff 20d2ff                 jsr charout
   445  c202 20d1c1                 jsr dispModeAbs
   446  c205 a929                   lda #')'
   447  c207 4cd2ff                 jmp charout
   448                          
   449                          disphexword: ; .A low, .X high, 0000..FFFF
   450  c20a 48                     pha
   451  c20b 8a                     txa
   452  c20c 2010c2                 jsr disphexbyte
   453  c20f 68                     pla
   454                              ;fall through to call again
   455                          
   456                          disphexbyte: ; .A 00..FF
   457  c210 48                     pha
   458  c211 4a                     lsr
   459  c212 4a                     lsr
   460  c213 4a                     lsr
   461  c214 4a                     lsr
   462  c215 2019c2                 jsr disphexnybble
   463  c218 68                     pla
   464                              ;fall through to call again
   465                          
   466                          disphexnybble: ; .A 0..F
   467  c219 290f                   and #$0F
   468  c21b 0930                   ora #$30
   469  c21d c93a                   cmp #$3A
   470  c21f 9002                   bcc +
   471  c221 6906                   adc #$06
   472  c223 4cd2ff             +   jmp charout
   473                          
   474                          inputhexword: ; C set if fails
   475  c226 98                     tya
   476  c227 aa                     tax ; save buffer pointer in x
   477  c228 2043c2                 jsr inputhexbyte
   478  c22b b013                   bcs ++ ; failed
   479  c22d 85fb               +   sta ptr1 ; assume one byte
   480  c22f a900                   lda #0
   481  c231 85fc                   sta ptr1+1 ; extend to 16 bits
   482  c233 2043c2                 jsr inputhexbyte
   483  c236 b006                   bcs + ; failed
   484  c238 a6fb                   ldx ptr1 ; two bytes so shift the bytes
   485  c23a 86fc                   stx ptr1+1
   486  c23c 85fb                   sta ptr1
   487  c23e 18                 +   clc
   488  c23f 60                     rts
   489  c240 8a                 ++  txa
   490  c241 a8                     tay ; restore buffer pointer
   491  c242 60                     rts
   492                          
   493                          inputhexbyte:
   494  c243 205fc2                 jsr inputhexnybble
   495  c246 b016                   bcs ++
   496  c248 85ff                   sta tmp
   497  c24a 205fc2                 jsr inputhexnybble
   498  c24d 9005                   bcc +
   499  c24f 18                     clc ; allow single digit as byte
   500  c250 a5ff                   lda tmp
   501  c252 900a                   bcc ++
   502  c254 06ff               +   asl tmp
   503  c256 06ff                   asl tmp
   504  c258 06ff                   asl tmp
   505  c25a 06ff                   asl tmp
   506  c25c 05ff                   ora tmp
   507  c25e 60                 ++  rts
   508                          
   509                          inputhexnybble:
   510  c25f b90002                 lda $0200,y
   511  c262 297f                   and #$7F
   512  c264 38                     sec
   513  c265 e930                   sbc #$30
   514  c267 9012                   bcc ++
   515  c269 c90a                   cmp #10
   516  c26b 900c                   bcc +
   517  c26d e907                   sbc #7
   518  c26f 900a                   bcc ++
   519  c271 c90a                   cmp #10
   520  c273 9006                   bcc ++
   521  c275 c910                   cmp #16
   522  c277 b002                   bcs ++
   523  c279 c8                 +   iny
   524  c27a 60                     rts
   525  c27b 38                 ++  sec
   526  c27c 60                     rts
   527                          
   528                          strout:
   529  c27d 8526                   sta ptr3
   530  c27f 8627                   stx ptr3+1
   531                          strout2:    
   532  c281 a000                   ldy #0
   533  c283 b126               -   lda (ptr3),y
   534  c285 f006                   beq +
   535  c287 20d2ff                 jsr charout
   536  c28a c8                     iny
   537  c28b d0f6                   bne -
   538  c28d 98                 +   tya
   539  c28e 38                     sec
   540  c28f 6526                   adc ptr3
   541  c291 8526                   sta ptr3
   542  c293 9002                   bcc +
   543  c295 e627                   inc ptr3+1
   544  c297 60                 +   rts
   545                          
   546                          inputline:
   547                          !ifdef C64SCREEN {
   548  c298 a000                   ldy #0
   549  c29a 20cfff             -   jsr charin
   550  c29d 990002                 sta inputbuf,y
   551  c2a0 c8                     iny
   552  c2a1 c90d                   cmp #13
   553  c2a3 d0f5                   bne -
   554  c2a5 60                     rts
   555                          } else {
   556                              ldy #0
   557                          --  sty count
   558                          -   jsr getkey
   559                              beq -
   560                              ldy count
   561                          !ifdef MINIMUM {
   562                              cmp #8 ; backspace
   563                          } else {
   564                              cmp #20
   565                          }
   566                              bne +
   567                              cpy #0
   568                              beq -
   569                              dey
   570                          !if NEEDECHO = 1 {    
   571                              jsr charout
   572                          }
   573                              jmp --
   574                          +   cmp #13
   575                              beq +
   576                              cmp #' '
   577                              bcc -
   578                              cmp #128
   579                              bcs -
   580                          +
   581                          !if NEEDECHO = 1 {    
   582                              jsr charout
   583                          }
   584                              sta inputbuf,y
   585                              iny
   586                              cmp #13
   587                              bne --
   588                              rts
   589                          }
   590                          
   591                          parseline:
   592  c2a6 c001                   cpy #1
   593  c2a8 d003                   bne +
   594                          -
   595                          !ifdef C64SCREEN {   
   596  c2aa 4cbfc9                 jmp newline
   597                          } else {
   598                              rts
   599                          }
   600  c2ad 88                 +   dey
   601  c2ae 84a4                   sty len
   602                              ; skip whitespace
   603                              ; check for address, put in ptr1
   604                              ; or check for dot, then require address put in ptr2
   605                              ; or check for ?, and optional parameter, execute help
   606                              ; check for whitespace
   607                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   608                              ; check for string, store at start of inputbuf
   609                              ; check for drive number
   610                              ; check for whitespace
   611                              ; check command ":rda?mls", execute command
   612  c2b0 a000                   ldy #0
   613  c2b2 2002c9                 jsr skipspaces
   614  c2b5 c4a4                   cpy len
   615  c2b7 f0f1                   beq -
   616  c2b9 20cac8                 jsr chkcontinuedis
   617  c2bc d003                   bne +
   618  c2be 20dcc8                 jsr executedisassemble ; note won't return
   619  c2c1 200dc9             +   jsr chkdot
   620  c2c4 d003                   bne +
   621  c2c6 4caec3                 jmp executedot
   622  c2c9 2018c9             +   jsr chkhelp
   623  c2cc d003                   bne +
   624  c2ce 4cb8c3                 jmp executehelp
   625  c2d1 2062c9             +   jsr chkhexaddr1
   626  c2d4 d003                   bne error
   627  c2d6 4cdcc2                 jmp executeaddr1
   628                          error:
   629  c2d9 4cebc8                 jmp reporterr
   630                          
   631                          executeaddr1:
   632  c2dc c4a4                   cpy len
   633  c2de d003                   bne +
   634  c2e0 4c2fc3                 jmp executedisplay1
   635  c2e3 200dc9             +   jsr chkdot
   636  c2e6 d00f                   bne +
   637  c2e8 c4a4                   cpy len
   638  c2ea f021                   beq executepagedisplay
   639  c2ec 2082c9                 jsr chkhexaddr2
   640  c2ef d0e8                   bne error
   641  c2f1 18                     clc
   642  c2f2 66a7                   ror flag
   643  c2f4 4c25c3                 jmp executeaddr12
   644  c2f7 2002c9             +   jsr skipspaces
   645  c2fa 2023c9                 jsr chkcolon
   646  c2fd d003                   bne +
   647  c2ff 4c8cc3                 jmp executemodify
   648  c302 20a3c9             +   jsr chkaddr1cmd ; rda, will not return here if cmd
   649  c305 202ec9                 jsr chkfilename
   650  c308 d0cf                   bne error
   651  c30a 4cb5c3                 jmp executeloadfilename
   652                          
   653                          executepagedisplay:
   654  c30d a5fb                   lda ptr1
   655  c30f 18                     clc
   656                          !ifdef MINIMUM {
   657                              adc #$5f
   658                          } else {
   659  c310 69b7                   adc #$b7
   660                          }
   661  c312 85fd                   sta ptr2
   662  c314 a5fc                   lda ptr1+1
   663                          !ifdef MINIMUM {
   664                              adc #$01
   665                          } else {
   666  c316 6900                   adc #$00
   667                          }
   668  c318 85fe                   sta ptr2+1
   669  c31a 9006                   bcc +
   670  c31c a9ff                   lda #$ff
   671  c31e 85fd                   sta ptr2
   672  c320 85fe                   sta ptr2+1
   673  c322 38                 +   sec
   674  c323 66a7                   ror flag
   675                              ; fall through to executeaddr12
   676                          
   677                          executeaddr12:
   678  c325 c4a4                   cpy len
   679  c327 d003                   bne +
   680  c329 4c37c3                 jmp executedisplay12
   681  c32c 4ce4c8             +   jmp reportnotimplemented
   682                          
   683                          executedisplay1:
   684  c32f a5fb                   lda ptr1
   685  c331 85fd                   sta ptr2
   686  c333 a5fc                   lda ptr1+1
   687  c335 85fe                   sta ptr2+1
   688                              ; fall through executedisplay12
   689                          
   690                          executedisplay12:
   691  c337 a9ff                   lda #$ff
   692  c339 85a3                   sta count
   693  c33b e6a3               -   inc count
   694  c33d a5a3                   lda count
   695                          !ifdef MINIMUM {    
   696                              and #$0f
   697                          } else {
   698  c33f 2907                   and #$07
   699                          }
   700  c341 d016                   bne +
   701  c343 a90d                   lda #13
   702  c345 20d2ff                 jsr charout
   703  c348 a5fb                   lda ptr1
   704  c34a a6fc                   ldx ptr1+1
   705  c34c 200ac2                 jsr disphexword
   706  c34f a93a                   lda #':'
   707  c351 20d2ff                 jsr charout
   708  c354 a920                   lda #' '
   709  c356 20d2ff                 jsr charout
   710  c359 a000               +   ldy #0
   711  c35b b1fb                   lda (ptr1),y
   712  c35d 2010c2                 jsr disphexbyte
   713  c360 a920                   lda #' '
   714  c362 20d2ff                 jsr charout
   715  c365 e6fb                   inc ptr1
   716  c367 d004                   bne +
   717  c369 e6fc                   inc ptr1+1
   718  c36b f01c                   beq ++
   719  c36d 2063c0             +   jsr compareptrs
   720  c370 90c9                   bcc -
   721  c372 f0c7                   beq -
   722  c374 24a7                   bit flag
   723  c376 1011                   bpl ++
   724                          !ifdef C64SCREEN {
   725  c378 20bfc9                 jsr newline
   726  c37b a5fb                   lda ptr1
   727  c37d a6fc                   ldx ptr1+1
   728  c37f 200ac2                 jsr disphexword
   729  c382 a96e                   lda #<page_displaymemory
   730  c384 a2cf                   ldx #>page_displaymemory
   731  c386 4c7dc2                 jmp strout
   732                          }
   733  c389 4cbfc9             ++  jmp newline
   734                          
   735                          executemodify:
   736  c38c 2002c9                 jsr skipspaces
   737  c38f c4a4                   cpy len
   738  c391 f018                   beq ++
   739  c393 2048c9                 jsr chkhexbyteofsequence
   740  c396 f003                   beq +
   741  c398 4cd9c2                 jmp error
   742  c39b 84ff               +   sty tmp
   743  c39d a000                   ldy #0
   744  c39f 91fb                   sta (ptr1),y
   745  c3a1 e6fb                   inc ptr1
   746  c3a3 d002                   bne +
   747  c3a5 e6fc                   inc ptr1+1
   748  c3a7 a4ff               +   ldy tmp
   749  c3a9 d0e1                   bne executemodify
   750  c3ab 4cbfc9             ++  jmp newline
   751                          
   752                          executedot:
   753  c3ae c4a4                   cpy len
   754  c3b0 d003                   bne +
   755  c3b2 4c0dc3                 jmp executepagedisplay
   756                          
   757                          executeloadfilename:
   758                          executeaddr1cmd:
   759  c3b5 4ce4c8             +   jmp reportnotimplemented
   760                          
   761                          executehelp:
   762                          !ifdef C64SCREEN {
   763  c3b8 20bfc9                 jsr newline
   764                          }
   765  c3bb c4a4                   cpy len
   766  c3bd d003                   bne +
   767  c3bf 4ce0c3                 jmp displayhelp
   768  c3c2 2002c9             +   jsr skipspaces
   769  c3c5 20f5c3                 jsr chkhelpinstructions
   770  c3c8 d003                   bne +
   771  c3ca 4c24c4                 jmp displayinstructions
   772  c3cd 2002c4             +   jsr chkhelpmodes
   773  c3d0 d003                   bne +
   774  c3d2 4c3bc4                 jmp displaymodes
   775  c3d5 2047c8             +   jsr chkinstruction
   776  c3d8 d003                   bne +
   777  c3da 4cebc4                 jmp executehelpinstruction
   778  c3dd 4ce4c8             +   jmp reportnotimplemented
   779                          
   780                          displayhelp:
   781  c3e0 a928                   lda #<generalhelp
   782  c3e2 a2ce                   ldx #>generalhelp
   783  c3e4 207dc2                 jsr strout
   784  c3e7 a997                   lda #<generalhelp2
   785  c3e9 a2ce                   ldx #>generalhelp2
   786  c3eb 207dc2                 jsr strout
   787  c3ee a9a7                   lda #<firsthelp
   788  c3f0 a2cd                   ldx #>firsthelp
   789  c3f2 4c7dc2                 jmp strout
   790                          
   791                          chkhelpinstructions:
   792  c3f5 b90002                 lda inputbuf, y
   793  c3f8 c941                   cmp #'A'
   794  c3fa d005                   bne +
   795  c3fc b90102                 lda inputbuf+1, y
   796  c3ff c90d                   cmp #13
   797                              ; no need to increment y if found, done parsing line
   798  c401 60                 +   rts
   799                          
   800                          chkhelpmodes:
   801  c402 a962                   lda #<modes_keyword
   802  c404 a2cf                   ldx #>modes_keyword
   803                              ; fall through to chkkeyword
   804                          
   805                          chkkeyword:
   806  c406 84a3                   sty count
   807  c408 8526                   sta ptr3
   808  c40a 8627                   stx ptr3+1
   809  c40c a6a3                   ldx count
   810  c40e a000                   ldy #0
   811  c410 bd0002             -   lda inputbuf, x
   812  c413 d126                   cmp (ptr3),y
   813  c415 d008                   bne +
   814  c417 e8                     inx
   815  c418 c8                     iny
   816  c419 e4a4                   cpx len
   817  c41b d0f3                   bne -
   818  c41d b126                   lda (ptr3),y ; matched if end of string, will set Z
   819  c41f 08                 +   php ; save Z
   820  c420 a4a3                   ldy count
   821  c422 28                     plp ; restore Z
   822  c423 60                     rts
   823                          
   824                          displayinstructions:
   825  c424 a038                   ldy #ninst
   826  c426 a200                   ldx #0
   827  c428 8a                 -   txa
   828  c429 48                     pha
   829  c42a 20aec0                 jsr dispinst
   830  c42d a920                   lda #' '
   831  c42f 20d2ff                 jsr charout
   832  c432 68                     pla
   833  c433 aa                     tax
   834  c434 e8                     inx
   835  c435 88                     dey
   836  c436 d0f0                   bne -
   837  c438 4cbfc9                 jmp newline
   838                          
   839                          displaymodes:
   840  c43b 38                     sec
   841  c43c a900                   lda #0
   842  c43e 48                 -   pha
   843  c43f aa                     tax
   844  c440 bd86ca                 lda mode_sorted, x
   845  c443 2050c4                 jsr dispmode
   846  c446 68                     pla
   847  c447 18                     clc
   848  c448 6901                   adc #1
   849  c44a c90d                   cmp #nmodes
   850  c44c 90f0                   bcc -
   851  c44e 18                     clc
   852  c44f 60                     rts
   853                          
   854                          dispmode:
   855  c450 c90d                   cmp #nmodes
   856  c452 b008                   bcs +
   857  c454 8524                   sta mode
   858  c456 2098c4                 jsr disp_modename_and_example
   859  c459 4c5dc4                 jmp dispmodeinstructions
   860  c45c 60                 +   rts
   861                          
   862                          dispmodeinstructions:
   863                          !ifdef C64SCREEN {
   864                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
   865  c45d a524                   lda mode
   866  c45f c903                   cmp #3
   867  c461 d005                   bne +
   868  c463 a920                   lda #' '
   869  c465 4cd2ff                 jmp charout
   870                          }
   871                              ; display instructions with this mode
   872  c468 a000               +   ldy #0
   873  c46a 8423               --  sty inidx
   874  c46c a200                   ldx #0
   875  c46e 86ff               -   stx tmp
   876  c470 a523                   lda inidx
   877  c472 dd1bcc                 cmp instidx, x
   878  c475 d014                   bne ++
   879  c477 bdb2cc                 lda modeidx, x
   880  c47a c524                   cmp mode
   881  c47c d00d                   bne ++
   882  c47e a920                   lda #' '
   883  c480 20d2ff                 jsr charout
   884  c483 bd1bcc                 lda instidx, x
   885  c486 20aec0                 jsr dispinst
   886  c489 a6ff                   ldx tmp
   887  c48b e8                 ++  inx
   888  c48c e097                   cpx #nopcodes
   889  c48e 90de                   bcc -
   890  c490 c8                     iny
   891  c491 c038                   cpy #ninst
   892  c493 d0d5                   bne --
   893  c495 4cbfc9                 jmp newline
   894                          
   895                          disp_modename_and_example:
   896  c498 0a                     asl
   897  c499 aa                     tax
   898  c49a bd6acb                 lda modes, x
   899  c49d 48                     pha
   900  c49e bd6bcb                 lda modes+1, x
   901  c4a1 aa                     tax
   902                          !ifdef C64SCREEN {
   903  c4a2 a912                   lda #18
   904  c4a4 20d2ff                 jsr charout
   905                          }    
   906  c4a7 68                     pla
   907  c4a8 207dc2                 jsr strout
   908  c4ab a920                   lda #' '
   909  c4ad 20d2ff                 jsr charout
   910  c4b0 2081c2                 jsr strout2
   911                          !ifdef C64SCREEN {    
   912  c4b3 a992                   lda #146
   913  c4b5 20d2ff                 jsr charout
   914                          }   
   915  c4b8 60                     rts
   916                          
   917                          disp_modename_instruction_example:
   918  c4b9 0a                     asl
   919  c4ba aa                     tax
   920  c4bb bd6acb                 lda modes, x
   921  c4be 48                     pha
   922  c4bf bd6bcb                 lda modes+1, x
   923  c4c2 aa                     tax
   924  c4c3 68                     pla
   925  c4c4 207dc2                 jsr strout ; mode name
   926  c4c7 a526                   lda ptr3
   927  c4c9 48                     pha
   928  c4ca a527                   lda ptr3+1
   929  c4cc 48                     pha
   930  c4cd a93a                   lda #':'
   931  c4cf 20d2ff                 jsr charout
   932  c4d2 a920                   lda #' '
   933  c4d4 20d2ff                 jsr charout
   934  c4d7 a523                   lda inidx
   935  c4d9 20aec0                 jsr dispinst ; instruction
   936  c4dc a920                   lda #' '
   937  c4de 20d2ff                 jsr charout
   938  c4e1 68                     pla
   939  c4e2 8527                   sta ptr3+1
   940  c4e4 68                     pla
   941  c4e5 8526                   sta ptr3
   942  c4e7 2081c2                 jsr strout2 ; example
   943  c4ea 60                     rts
   944                          
   945                          
   946                          executehelpinstruction:
   947  c4eb a000                   ldy #0
   948  c4ed 8422               -   sty opidx
   949  c4ef b91bcc                 lda instidx, y
   950  c4f2 c523                   cmp inidx
   951  c4f4 d01a                   bne +
   952  c4f6 b9b2cc                 lda modeidx, y
   953  c4f9 8524                   sta mode
   954  c4fb a622                   ldx opidx
   955  c4fd bd84cb                 lda opcodes, x
   956  c500 2010c2                 jsr disphexbyte
   957  c503 a920                   lda #' '
   958  c505 20d2ff                 jsr charout
   959  c508 a524                   lda mode
   960  c50a 20b9c4                 jsr disp_modename_instruction_example
   961  c50d 20bfc9                 jsr newline
   962  c510 a422               +   ldy opidx
   963  c512 c8                     iny
   964  c513 c097                   cpy #nopcodes
   965  c515 90d6                   bcc -
   966  c517 60                     rts
   967                          
   968                          executeassemble:
   969  c518 68                     pla ; remove low byte return address
   970  c519 68                     pla ; return high byte return address
   971                          !ifdef C64SCREEN {    
   972  c51a a914                   lda #20
   973  c51c 20d2ff                 jsr charout
   974  c51f 20d2ff                 jsr charout
   975                          } else {
   976                              lda ptr1
   977                              ldx ptr1+1
   978                              jsr disphexword
   979                              lda #' '
   980                              jsr charout
   981                          }
   982                              ; save current pointer
   983  c522 a5fb               --  lda ptr1
   984  c524 a6fc                   ldx ptr1+1
   985  c526 8526                   sta ptr3
   986  c528 8627                   stx ptr3+1
   987  c52a 2098c2                 jsr inputline
   988  c52d c001                   cpy #1
   989  c52f f040                   beq ++
   990  c531 88                     dey
   991  c532 84a4                   sty len
   992  c534 a000                   ldy #0
   993  c536 2002c9                 jsr skipspaces
   994  c539 c4a4                   cpy len
   995  c53b f034                   beq ++
   996                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
   997                              ;jsr skipspaces
   998  c53d 2047c8                 jsr chkinstruction
   999  c540 f003                   beq +
  1000  c542 4cd9c2             -   jmp error    
  1001  c545 209bc5             +   jsr chkaddressing
  1002  c548 d0f8                   bne -
  1003  c54a 2078c8                 jsr find_inst_and_mode
  1004  c54d d0f3                   bne -
  1005  c54f 2074c5                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1006  c552 18                     clc
  1007  c553 a525                   lda size
  1008  c555 6526                   adc ptr3
  1009  c557 85fb                   sta ptr1
  1010  c559 a527                   lda ptr3+1
  1011  c55b 6900                   adc #0
  1012  c55d 85fc                   sta ptr1+1
  1013                          !ifdef C64SCREEN {    
  1014  c55f 20bfc9                 jsr newline
  1015                          }
  1016  c562 a5fb                   lda ptr1
  1017  c564 a6fc                   ldx ptr1+1
  1018  c566 200ac2                 jsr disphexword
  1019  c569 a920                   lda #' '
  1020  c56b 20d2ff                 jsr charout
  1021  c56e 4c22c5                 jmp --
  1022                          ++  
  1023                          !ifdef C64SCREEN {
  1024  c571 4cbfc9                 jmp newline
  1025                          } else {
  1026                              rts
  1027                          }
  1028                          
  1029                          store_assembly:
  1030  c574 a622                   ldx opidx
  1031  c576 bd84cb                 lda opcodes, x
  1032  c579 a000                   ldy #0
  1033  c57b 9126                   sta (ptr3), y
  1034  c57d c8                     iny
  1035  c57e a625                   ldx size
  1036  c580 e001                   cpx #1
  1037  c582 f016                   beq ++
  1038  c584 e002               +   cpx #2
  1039  c586 d005                   bne +
  1040  c588 a5a6                   lda tmp2
  1041  c58a 9126                   sta (ptr3), y
  1042  c58c 60                     rts
  1043  c58d e003               +   cpx #3
  1044  c58f d009                   bne ++
  1045  c591 a5fb                   lda ptr1
  1046  c593 9126                   sta (ptr3), y
  1047  c595 c8                     iny
  1048  c596 a5fc                   lda ptr1+1
  1049  c598 9126                   sta (ptr3), y
  1050  c59a 60                 ++  rts
  1051                          
  1052                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1053  c59b 2002c9                 jsr skipspaces
  1054  c59e a200                   ldx #0
  1055  c5a0 8624                   stx mode
  1056  c5a2 20fdc5                 jsr chkaccumulator
  1057  c5a5 f051                   beq +
  1058  c5a7 e624                   inc mode
  1059  c5a9 c4a4                   cpy len ; chknone
  1060  c5ab f04b                   beq +
  1061  c5ad e624                   inc mode
  1062  c5af 2021c6                 jsr chkimmediate
  1063  c5b2 f044                   beq +
  1064  c5b4 e624                   inc mode
  1065  c5b6 2045c6                 jsr chkindirectx
  1066  c5b9 f03d                   beq +
  1067  c5bb e624                   inc mode
  1068  c5bd 208ac6                 jsr chkindirecty
  1069  c5c0 f036                   beq +
  1070  c5c2 e624                   inc mode
  1071  c5c4 20cfc6                 jsr chkrelative
  1072  c5c7 f02f                   beq +
  1073  c5c9 e624                   inc mode
  1074  c5cb 202ac7                 jsr chkzeropage
  1075  c5ce f028                   beq +
  1076  c5d0 e624                   inc mode
  1077  c5d2 2043c7                 jsr chkzeropagex
  1078  c5d5 f021                   beq +
  1079  c5d7 e624                   inc mode
  1080  c5d9 2072c7                 jsr chkzeropagey
  1081  c5dc f01a                   beq +
  1082  c5de e624                   inc mode
  1083  c5e0 20a1c7                 jsr chkabsolute
  1084  c5e3 f013                   beq +
  1085  c5e5 e624                   inc mode
  1086  c5e7 20bac7                 jsr chkabsolutex
  1087  c5ea f00c                   beq +
  1088  c5ec e624                   inc mode
  1089  c5ee 20e9c7                 jsr chkabsolutey
  1090  c5f1 f005                   beq +
  1091  c5f3 e624                   inc mode
  1092  c5f5 2018c8                 jsr chkindirect
  1093  c5f8 08                 +   php ; save Z
  1094  c5f9 a524                   lda mode
  1095  c5fb 28                     plp ; restore Z 
  1096  c5fc 60                     rts
  1097                          
  1098                          chkaccumulator:
  1099  c5fd c4a4                   cpy len
  1100  c5ff d013                   bne +
  1101  c601 a523                   lda inidx
  1102  c603 c902                   cmp #2 ; ASL
  1103  c605 f019                   beq ++
  1104  c607 c920                   cmp #32 ; LSR
  1105  c609 f015                   beq ++
  1106  c60b c927                   cmp #39 ; ROL
  1107  c60d f011                   beq ++
  1108  c60f c928                   cmp #40 ; ROR
  1109  c611 4c20c6                 jmp ++
  1110  c614 b90002             +   lda inputbuf, y
  1111  c617 c941                   cmp #'A'
  1112  c619 d005                   bne ++
  1113  c61b b90102                 lda inputbuf+1,y
  1114  c61e c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1115  c620 60                 ++  rts
  1116                          
  1117                          chkimmediate:
  1118  c621 84a5                   sty savepos
  1119  c623 b90002                 lda inputbuf, y
  1120  c626 c923                   cmp #'#'
  1121  c628 d016                   bne ++
  1122  c62a c8                     iny
  1123  c62b 2002c9                 jsr skipspaces
  1124  c62e b90002                 lda inputbuf, y
  1125  c631 c924                   cmp #'$'
  1126  c633 d001                   bne +
  1127  c635 c8                     iny
  1128  c636 206bc9             +   jsr chkhexbyte
  1129  c639 d005                   bne ++
  1130  c63b c4a4               +   cpy len
  1131  c63d d001                   bne ++
  1132  c63f 60                     rts
  1133  c640 a4a5               ++  ldy savepos
  1134  c642 a201                   ldx #1 ; Z false (NE)
  1135  c644 60                     rts
  1136                          
  1137                          chkindirectx:
  1138  c645 84a5                   sty savepos
  1139  c647 b90002                 lda inputbuf, y
  1140  c64a c928                   cmp #'('
  1141  c64c d037                   bne ++
  1142  c64e c8                     iny
  1143  c64f 2002c9                 jsr skipspaces
  1144  c652 b90002                 lda inputbuf, y
  1145  c655 c924                   cmp #'$'
  1146  c657 d001                   bne +
  1147  c659 c8                     iny
  1148  c65a 206bc9             +   jsr chkhexbyte
  1149  c65d d026                   bne ++
  1150  c65f 2002c9                 jsr skipspaces
  1151  c662 b90002                 lda inputbuf, y
  1152  c665 c92c                   cmp #','
  1153  c667 d01c                   bne ++
  1154  c669 c8                     iny
  1155  c66a 2002c9                 jsr skipspaces
  1156  c66d b90002                 lda inputbuf, y
  1157  c670 c958                   cmp #'X'
  1158  c672 d011                   bne ++
  1159  c674 c8                     iny
  1160  c675 2002c9                 jsr skipspaces
  1161  c678 b90002                 lda inputbuf, y
  1162  c67b c929                   cmp #')'
  1163  c67d d006                   bne ++
  1164  c67f c8                     iny
  1165  c680 c4a4                   cpy len
  1166  c682 d001                   bne ++
  1167  c684 60                     rts
  1168  c685 a4a5               ++  ldy savepos
  1169  c687 a201                   ldx #1 ; Z false (NE)
  1170  c689 60                     rts
  1171                          
  1172                          chkindirecty:
  1173  c68a 84a5                   sty savepos
  1174  c68c b90002                 lda inputbuf, y
  1175  c68f c928                   cmp #'('
  1176  c691 d037                   bne ++
  1177  c693 c8                     iny
  1178  c694 2002c9                 jsr skipspaces
  1179  c697 b90002                 lda inputbuf, y
  1180  c69a c924                   cmp #'$'
  1181  c69c d001                   bne +
  1182  c69e c8                     iny
  1183  c69f 206bc9             +   jsr chkhexbyte
  1184  c6a2 d026                   bne ++
  1185  c6a4 2002c9                 jsr skipspaces
  1186  c6a7 b90002                 lda inputbuf, y
  1187  c6aa c929                   cmp #')'
  1188  c6ac d01c                   bne ++
  1189  c6ae c8                     iny
  1190  c6af 2002c9                 jsr skipspaces
  1191  c6b2 b90002                 lda inputbuf, y
  1192  c6b5 c92c                   cmp #','
  1193  c6b7 d011                   bne ++
  1194  c6b9 c8                     iny
  1195  c6ba 2002c9                 jsr skipspaces
  1196  c6bd b90002                 lda inputbuf, y
  1197  c6c0 c959                   cmp #'Y'
  1198  c6c2 d006                   bne ++
  1199  c6c4 c8                     iny
  1200  c6c5 c4a4                   cpy len
  1201  c6c7 d001                   bne ++
  1202  c6c9 60                     rts
  1203  c6ca a4a5               ++  ldy savepos
  1204  c6cc a201                   ldx #1 ; Z false (NE)
  1205  c6ce 60                     rts
  1206                          
  1207                          chkrelative:
  1208  c6cf 84a5                   sty savepos
  1209  c6d1 a623                   ldx inidx
  1210  c6d3 e006                   cpx #6 ; BIT
  1211  c6d5 f01e                   beq ++
  1212  c6d7 bdc4c9                 lda inst0, x
  1213  c6da c942                   cmp #'B'
  1214  c6dc d017                   bne ++
  1215  c6de b90002                 lda inputbuf, y
  1216  c6e1 c924                   cmp #'$'
  1217  c6e3 d001                   bne +
  1218  c6e5 c8                     iny
  1219  c6e6 2062c9             +   jsr chkhexword
  1220  c6e9 d00a                   bne ++
  1221  c6eb c4a4                   cpy len
  1222  c6ed d006                   bne ++
  1223  c6ef 20fac6                 jsr computeoffset
  1224  c6f2 d001                   bne ++
  1225  c6f4 60                     rts ; Z true (EQ)
  1226  c6f5 a4a5               ++  ldy savepos
  1227  c6f7 a201                   ldx #1 ; Z false (NE)
  1228  c6f9 60                     rts
  1229                          
  1230                          computeoffset:
  1231                          ;   compute next address
  1232  c6fa a527                   lda ptr3+1
  1233  c6fc 85fe                   sta ptr2+1
  1234  c6fe a526                   lda ptr3
  1235  c700 18                     clc
  1236  c701 6902                   adc #2
  1237  c703 85fd                   sta ptr2
  1238  c705 9002                   bcc +
  1239  c707 e6fe                   inc ptr2+1
  1240                          +  ; subtract argument
  1241  c709 38                     sec
  1242  c70a a5fb                   lda ptr1
  1243  c70c e5fd                   sbc ptr2
  1244  c70e 85a6                   sta tmp2
  1245  c710 a5fc                   lda ptr1+1
  1246  c712 e5fe                   sbc ptr2+1
  1247  c714 f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1248  c716 c9ff                   cmp #$FF
  1249  c718 d00d                   bne failedoffset ; 0 and FF were only options so fail
  1250                              ; chkeck negative offset
  1251  c71a a5a6                   lda tmp2
  1252  c71c 3006                   bmi successoffset ; branch if signed byte is negative
  1253  c71e 1007                   bpl failedoffset ; otherwise fail
  1254                          chkoffsetto127:
  1255  c720 a5a6                   lda tmp2
  1256  c722 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1257                          successoffset:    
  1258  c724 a900                   lda #0 ; Z true (EQ)
  1259  c726 60                     rts
  1260                          failedoffset:
  1261  c727 a901                   lda #1 ; Z false (NE)
  1262  c729 60                     rts
  1263                          
  1264                          chkzeropage:
  1265  c72a 84a5                   sty savepos
  1266  c72c b90002                 lda inputbuf, y
  1267  c72f c924                   cmp #'$'
  1268  c731 d001                   bne +
  1269  c733 c8                     iny
  1270  c734 206bc9             +   jsr chkhexbyte
  1271  c737 d005                   bne ++
  1272  c739 c4a4                   cpy len
  1273  c73b d001                   bne ++
  1274  c73d 60                     rts ; Z true (EQ)
  1275  c73e a4a5               ++  ldy savepos
  1276  c740 a201                   ldx #1 ; Z false (NE)
  1277  c742 60                     rts
  1278                          
  1279                          chkzeropagex:
  1280  c743 84a5                   sty savepos
  1281  c745 b90002                 lda inputbuf, y
  1282  c748 c924                   cmp #'$'
  1283  c74a d001                   bne +
  1284  c74c c8                     iny
  1285  c74d 206bc9             +   jsr chkhexbyte
  1286  c750 d01b                   bne ++
  1287  c752 2002c9                 jsr skipspaces
  1288  c755 b90002                 lda inputbuf, y
  1289  c758 c92c                   cmp #','
  1290  c75a d011                   bne ++
  1291  c75c c8                     iny
  1292  c75d 2002c9                 jsr skipspaces
  1293  c760 b90002                 lda inputbuf, y
  1294  c763 c958                   cmp #'X'
  1295  c765 d006                   bne ++
  1296  c767 c8                     iny
  1297  c768 c4a4                   cpy len
  1298  c76a d001                   bne ++
  1299  c76c 60                     rts ; Z true (EQ)
  1300  c76d a4a5               ++  ldy savepos
  1301  c76f a201                   ldx #1 ; Z false (NE)
  1302  c771 60                     rts
  1303                          
  1304                          chkzeropagey:
  1305  c772 84a5                   sty savepos
  1306  c774 b90002                 lda inputbuf, y
  1307  c777 c924                   cmp #'$'
  1308  c779 d001                   bne +
  1309  c77b c8                     iny
  1310  c77c 206bc9             +   jsr chkhexbyte
  1311  c77f d01b                   bne ++
  1312  c781 2002c9                 jsr skipspaces
  1313  c784 b90002                 lda inputbuf, y
  1314  c787 c92c                   cmp #','
  1315  c789 d011                   bne ++
  1316  c78b c8                     iny
  1317  c78c 2002c9                 jsr skipspaces
  1318  c78f b90002                 lda inputbuf, y
  1319  c792 c959                   cmp #'Y'
  1320  c794 d006                   bne ++
  1321  c796 c8                     iny
  1322  c797 c4a4                   cpy len
  1323  c799 d001                   bne ++
  1324  c79b 60                     rts ; Z true (EQ)
  1325  c79c a4a5               ++  ldy savepos
  1326  c79e a201                   ldx #1 ; Z false (NE)
  1327  c7a0 60                     rts
  1328                          
  1329                          chkabsolute:
  1330  c7a1 84a5                   sty savepos
  1331  c7a3 b90002                 lda inputbuf, y
  1332  c7a6 c924                   cmp #'$'
  1333  c7a8 d001                   bne +
  1334  c7aa c8                     iny
  1335  c7ab 2062c9             +   jsr chkhexword
  1336  c7ae d005                   bne ++
  1337  c7b0 c4a4                   cpy len
  1338  c7b2 d001                   bne ++
  1339  c7b4 60                     rts ; Z true (EQ)
  1340  c7b5 a4a5               ++  ldy savepos
  1341  c7b7 a201                   ldx #1 ; Z false (NE)
  1342  c7b9 60                     rts
  1343                          
  1344                          chkabsolutex:
  1345  c7ba 84a5                   sty savepos
  1346  c7bc b90002                 lda inputbuf, y
  1347  c7bf c924                   cmp #'$'
  1348  c7c1 d001                   bne +
  1349  c7c3 c8                     iny
  1350  c7c4 2062c9             +   jsr chkhexword
  1351  c7c7 d01b                   bne ++
  1352  c7c9 2002c9                 jsr skipspaces
  1353  c7cc b90002                 lda inputbuf, y
  1354  c7cf c92c                   cmp #','
  1355  c7d1 d011                   bne ++
  1356  c7d3 c8                     iny
  1357  c7d4 2002c9                 jsr skipspaces
  1358  c7d7 b90002                 lda inputbuf, y
  1359  c7da c958                   cmp #'X'
  1360  c7dc d006                   bne ++
  1361  c7de c8                     iny
  1362  c7df c4a4                   cpy len
  1363  c7e1 d001                   bne ++
  1364  c7e3 60                     rts ; Z true (EQ)
  1365  c7e4 a4a5               ++  ldy savepos
  1366  c7e6 a201                   ldx #1 ; Z false (NE)
  1367  c7e8 60                     rts
  1368                          
  1369                          chkabsolutey:
  1370  c7e9 84a5                   sty savepos
  1371  c7eb b90002                 lda inputbuf, y
  1372  c7ee c924                   cmp #'$'
  1373  c7f0 d001                   bne +
  1374  c7f2 c8                     iny
  1375  c7f3 2062c9             +   jsr chkhexword
  1376  c7f6 d01b                   bne ++
  1377  c7f8 2002c9                 jsr skipspaces
  1378  c7fb b90002                 lda inputbuf, y
  1379  c7fe c92c                   cmp #','
  1380  c800 d011                   bne ++
  1381  c802 c8                     iny
  1382  c803 2002c9                 jsr skipspaces
  1383  c806 b90002                 lda inputbuf, y
  1384  c809 c959                   cmp #'Y'
  1385  c80b d006                   bne ++
  1386  c80d c8                     iny
  1387  c80e c4a4                   cpy len
  1388  c810 d001                   bne ++
  1389  c812 60                     rts ; Z true (EQ)
  1390  c813 a4a5               ++  ldy savepos
  1391  c815 a201                   ldx #1 ; Z false (NE)
  1392  c817 60                     rts
  1393                          
  1394                          chkindirect:
  1395  c818 84a5                   sty savepos
  1396  c81a b90002                 lda inputbuf, y
  1397  c81d c928                   cmp #'('
  1398  c81f d021                   bne ++
  1399  c821 c8                     iny
  1400  c822 2002c9                 jsr skipspaces
  1401  c825 b90002                 lda inputbuf, y
  1402  c828 c924                   cmp #'$'
  1403  c82a d001                   bne +
  1404  c82c c8                     iny
  1405  c82d 2062c9             +   jsr chkhexword
  1406  c830 d010                   bne ++
  1407  c832 2002c9                 jsr skipspaces
  1408  c835 b90002                 lda inputbuf, y
  1409  c838 c929                   cmp #')'
  1410  c83a d006                   bne ++
  1411  c83c c8                     iny
  1412  c83d c4a4                   cpy len
  1413  c83f d001                   bne ++
  1414  c841 60                     rts ; Z true (EQ)
  1415  c842 a4a5               ++  ldy savepos
  1416  c844 a201                   ldx #1 ; Z false (NE)
  1417  c846 60                     rts
  1418                          
  1419                          chkinstruction:
  1420  c847 c4a4                   cpy len
  1421  c849 f02a                   beq ++
  1422  c84b 84ff                   sty tmp
  1423  c84d a237                   ldx #(ninst-1)
  1424  c84f b90002             -   lda inputbuf,y
  1425  c852 ddc4c9                 cmp inst0,x
  1426  c855 d019                   bne +
  1427  c857 c8                     iny
  1428  c858 b90002                 lda inputbuf,y
  1429  c85b ddfcc9                 cmp inst1,x
  1430  c85e d010                   bne +
  1431  c860 c8                     iny
  1432  c861 b90002                 lda inputbuf,y
  1433  c864 dd34ca                 cmp inst2,x
  1434  c867 d007                   bne +
  1435  c869 c8                     iny
  1436  c86a 8a                     txa
  1437  c86b 8523                   sta inidx
  1438  c86d a200                   ldx #0
  1439  c86f 60                     rts
  1440  c870 a4ff               +   ldy tmp
  1441  c872 ca                     dex
  1442  c873 10da                   bpl -
  1443  c875 a201               ++  ldx #1 ; Z false (NE)
  1444  c877 60                     rts
  1445                          
  1446                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1447                              ; and allows mode promotion
  1448  c878 2091c8                 jsr find_inst_and_mode2
  1449  c87b f013                   beq ++
  1450  c87d a524                   lda mode
  1451  c87f c906                   cmp #6
  1452  c881 900d                   bcc ++
  1453  c883 c90a                   cmp #10
  1454  c885 b007                   bcs +
  1455  c887 6903                   adc #3
  1456  c889 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1457  c88b 4c91c8                 jmp find_inst_and_mode2 ; try again once
  1458  c88e a201               +   ldx #1 ; Z false (NE)
  1459  c890 60                 ++  rts
  1460                          
  1461                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1462  c891 a296                   ldx #nopcodes-1
  1463  c893 bd1bcc             -   lda instidx, x
  1464  c896 bcb2cc                 ldy modeidx, x
  1465  c899 c523                   cmp inidx
  1466  c89b d00c                   bne +
  1467  c89d c424                   cpy mode
  1468  c89f d008                   bne +
  1469  c8a1 8622                   stx opidx
  1470  c8a3 2097c0                 jsr getsize
  1471  c8a6 a200                   ldx #0 ; Z true (EQ)
  1472  c8a8 60                     rts
  1473  c8a9 ca                 +   dex
  1474  c8aa e0ff                   cpx #$ff
  1475  c8ac d0e5                   bne -
  1476  c8ae a201                   ldx #1 ; Z false (NE)
  1477  c8b0 60                     rts
  1478                          
  1479                          executerun:
  1480  c8b1 68                     pla ; remove low byte return address
  1481  c8b2 68                     pla ; return high byte return address
  1482  c8b3 68                     pla ; again, we're really not returning
  1483  c8b4 68                     pla ; again, we're really not returning
  1484  c8b5 20bfc9                 jsr newline
  1485  c8b8 38                     sec
  1486  c8b9 a5fb                   lda ptr1
  1487  c8bb e901                   sbc #1
  1488  c8bd 85fb                   sta ptr1
  1489  c8bf b002                   bcs +
  1490  c8c1 c6fc                   dec ptr1+1
  1491  c8c3 a5fc               +   lda ptr1+1
  1492  c8c5 48                     pha
  1493  c8c6 a5fb                   lda ptr1
  1494  c8c8 48                     pha
  1495  c8c9 60                     rts
  1496                          
  1497                          chkcontinuedis:
  1498  c8ca b90002                 lda inputbuf,y
  1499  c8cd c944                   cmp #'D'
  1500  c8cf d00a                   bne +
  1501  c8d1 b90102                 lda inputbuf+1,y
  1502  c8d4 c90d                   cmp #13
  1503  c8d6 d003                   bne +
  1504  c8d8 c8                     iny
  1505  c8d9 a200                   ldx #0 ; restore Z set
  1506  c8db 60                 +   rts
  1507                          
  1508                          executedisassemble:
  1509  c8dc 68                     pla ; remove low byte return address
  1510  c8dd 68                     pla ; return high byte return address
  1511  c8de 20bfc9                 jsr newline
  1512  c8e1 4c34c0                 jmp disassemble
  1513                          
  1514                          reportnotimplemented:
  1515  c8e4 a917                   lda #<notimplemented
  1516  c8e6 a2ce                   ldx #>notimplemented
  1517  c8e8 4c7dc2                 jmp strout
  1518                          
  1519                          reporterr:
  1520  c8eb c000                   cpy #0
  1521  c8ed f008                   beq +
  1522  c8ef a920                   lda #' '
  1523  c8f1 20d2ff             -   jsr charout
  1524  c8f4 88                     dey
  1525  c8f5 d0fa                   bne -
  1526  c8f7 a93f               +   lda #'?'
  1527  c8f9 20d2ff                 jsr charout
  1528  c8fc a90d                   lda #13
  1529  c8fe 20d2ff                 jsr charout
  1530  c901 60                     rts
  1531                          
  1532                          skipspaces:
  1533  c902 b90002             -   lda inputbuf, y
  1534  c905 c920                   cmp #$20
  1535  c907 d003                   bne +
  1536  c909 c8                     iny
  1537  c90a d0f6                   bne -
  1538  c90c 60                 +   rts
  1539                          
  1540                          chkdot:
  1541  c90d b90002                 lda inputbuf, y
  1542  c910 c92e                   cmp #'.'
  1543  c912 d003                   bne +
  1544  c914 c8                     iny
  1545  c915 a900                   lda #0 ; Z true (EQ)
  1546  c917 60                 +   rts
  1547                          
  1548                          chkhelp:
  1549  c918 b90002                 lda inputbuf, y
  1550  c91b c93f                   cmp #'?'
  1551  c91d d003                   bne +
  1552  c91f c8                     iny
  1553  c920 a900                   lda #0 ; Z true (EQ)
  1554  c922 60                 +   rts
  1555                          
  1556                          chkcolon:
  1557  c923 b90002                 lda inputbuf, y
  1558  c926 c93a                   cmp #':'
  1559  c928 d003                   bne +
  1560  c92a c8                     iny
  1561  c92b a900                   lda #0 ; Z true (EQ)
  1562  c92d 60                 +   rts
  1563                          
  1564                          chkfilename:
  1565  c92e 84ff                   sty tmp
  1566  c930 b90002                 lda inputbuf, y
  1567  c933 c922                   cmp #34
  1568  c935 d010                   bne ++
  1569  c937 c8                 -   iny
  1570  c938 b90002                 lda inputbuf, y
  1571  c93b c90d                   cmp #13
  1572  c93d d004                   bne +
  1573  c93f a4ff                   ldy tmp
  1574  c941 d004                   bne ++
  1575  c943 c922               +   cmp #34
  1576  c945 d0f0                   bne -
  1577  c947 60                 ++  rts
  1578                          
  1579                          chkhexbyteofsequence:
  1580  c948 2043c2                 jsr inputhexbyte
  1581  c94b 2065c9                 jsr +
  1582  c94e d011                   bne ++ ; Z false (NE) if failed checks
  1583  c950 c4a4                   cpy len
  1584  c952 f00d                   beq ++ ; Z true (EQ) if end of input
  1585  c954 85ff                   sta tmp
  1586  c956 b90002                 lda inputbuf,y
  1587  c959 c920                   cmp #$20
  1588  c95b d004                   bne ++ ; Z false (NE) if not space
  1589  c95d a5ff                   lda tmp
  1590  c95f a200                   ldx #0 ; Z true (EQ) is space delimeter
  1591  c961 60                 ++  rts
  1592                          
  1593                          chkhexword:
  1594                          chkhexaddr1:
  1595  c962 2026c2                 jsr inputhexword
  1596  c965 a200               +   ldx #0 ; Z true (EQ)
  1597  c967 9001                   bcc +
  1598  c969 e8                     inx ; Z false (NE)
  1599  c96a 60                 +   rts
  1600                          
  1601                          chkhexbyte
  1602  c96b 98                     tya
  1603  c96c 48                     pha ; save y
  1604  c96d 2043c2                 jsr inputhexbyte
  1605  c970 b00d                   bcs +
  1606  c972 85a6                   sta tmp2
  1607  c974 205fc2                 jsr inputhexnybble
  1608  c977 9006                   bcc +
  1609  c979 68                     pla ; throw away saved y
  1610  c97a a5a6                   lda tmp2
  1611  c97c a200                   ldx #0 ; Z true (EQ)
  1612  c97e 60                     rts
  1613  c97f 68                 +   pla
  1614  c980 a8                     tay ; won't be zero, so Z false (NE)
  1615  c981 60                     rts    
  1616                          
  1617                          chkhexaddr2:
  1618  c982 a5fb                   lda ptr1
  1619  c984 48                     pha
  1620  c985 a5fc                   lda ptr1+1
  1621  c987 48                     pha
  1622  c988 2062c9                 jsr chkhexaddr1
  1623  c98b f005                   beq +
  1624  c98d 68                     pla
  1625  c98e 68                     pla
  1626  c98f a901                   lda #1 ; Z false (NE)
  1627  c991 60                     rts
  1628  c992 a5fb               +   lda ptr1
  1629  c994 85fd                   sta ptr2
  1630  c996 a5fc                   lda ptr1+1
  1631  c998 85fe                   sta ptr2+1
  1632  c99a 68                     pla
  1633  c99b 85fc                   sta ptr1+1
  1634  c99d 68                     pla
  1635  c99e 85fb                   sta ptr1
  1636  c9a0 a900                   lda #0 ; Z true (EQ)
  1637  c9a2 60                     rts    
  1638                          
  1639                          chkaddr1cmd:
  1640  c9a3 b90002                 lda inputbuf, y
  1641  c9a6 c941               +   cmp #'A'
  1642  c9a8 d004                   bne +
  1643  c9aa c8                     iny
  1644  c9ab 4c18c5                 jmp executeassemble
  1645  c9ae c944               +   cmp #'D'
  1646  c9b0 d004                   bne +
  1647  c9b2 c8                     iny
  1648  c9b3 4cdcc8                 jmp executedisassemble
  1649  c9b6 c952               +   cmp #'R'
  1650  c9b8 d004                   bne +
  1651  c9ba c8                     iny
  1652  c9bb 4cb1c8                 jmp executerun
  1653  c9be 60                 +   rts
  1654                          
  1655                          newline:
  1656  c9bf a90d                   lda #13
  1657  c9c1 4cd2ff                 jmp charout
  1658                          
  1659                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1660                          ;     jsr $ffd2
  1661                          ;     pha
  1662                          ; -   lda $d011
  1663                          ;     bpl -
  1664                          ; -   lda $d011
  1665                          ;     bmi -
  1666                          ; -   lda $d011
  1667                          ;     bpl -
  1668                          ; -   lda $d011
  1669                          ;     bmi -
  1670                          ;     pla
  1671                          ;     rts
  1672                          
  1673                          !ifdef MINIMUM {
  1674                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1675                          ;; MC6850
  1676                          UART_DATA=$FFF8
  1677                          UART_STCR=$FFF9
  1678                          
  1679                          UART_INIT:
  1680                          	ldx #0b00000111 ; 11=reset device
  1681                          	stx UART_STCR
  1682                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  1683                          	sta UART_STCR
  1684                          	rts
  1685                          UART_OUT:
  1686                          	pha
  1687                          -	lda UART_STCR
  1688                          	and #2
  1689                          	beq - ; branch if TDRE=0, not finished transmitting
  1690                          	pla
  1691                          	pha
  1692                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  1693                          	sta UART_DATA
  1694                          	pla
  1695                          	rts
  1696                          UART_IN:
  1697                          -	lda UART_STCR
  1698                          	and #1
  1699                          	beq - ; branch if TDRF=0, not received
  1700                          	lda UART_DATA
  1701                          	; software "CAPS LOCK" because wozmon expects only uppercase
  1702                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  1703                          	beq BREAK
  1704                              ; force lowercase alphabet to uppercase
  1705                              cmp #'a'
  1706                          	bcc +
  1707                          	cmp #'z'+1
  1708                          	bcs +
  1709                          	eor #$20
  1710                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  1711                           	rts
  1712                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  1713                          	pha ; save A
  1714                          	lda UART_STCR
  1715                          	lsr ; put rightmost bit in carry
  1716                          	pla ; restore A affects flags
  1717                          	ror ; move carry to left bit, right bit to carry
  1718                          	php ; push processor to save N
  1719                          	rol ; restore A affects flags
  1720                          	plp ; pull processor to restore N
  1721                          	rts
  1722                          
  1723                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1724                          ; Processor start and interrupts
  1725                          
  1726                          NMI: ; unused on minimum (no source of interrupt)
  1727                              rti
  1728                          
  1729                          IRQ:
  1730                              rti ; TODO implement BRK HANDLING in monitor
  1731                          
  1732                          BREAK:
  1733                              jmp RESET
  1734                          
  1735                          RESET:
  1736                              cld
  1737                              ldx #$00
  1738                              txs
  1739                              jsr JUART_INIT
  1740                              cli
  1741                              jmp start
  1742                          } ; !ifdef MINIMUM
  1743                          
  1744                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1745                          ; data
  1746                          
  1747                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  1748                          ninst = 56
  1749  c9c4 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  1750  c9fc 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  1751  ca34 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  1752                          
  1753                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  1754                          mode_jmptable:
  1755  ca6c 23c1               !word dispModeAcc-1; 0 Accumulator 1
  1756  ca6e 28c1               !word dispModeNone-1 ; 1 None 1
  1757  ca70 29c1               !word dispModeImm-1 ; 2 Immediate 2
  1758  ca72 3ac1               !word dispModeIndX-1 ; 3 IndirectX 2
  1759  ca74 5ac1               !word dispModeIndY-1 ; 4 IndirectY 2
  1760  ca76 7ac1               !word dispModeRel-1 ; 5 Relative 2
  1761  ca78 2ec1               !word dispModeZP-1 ; 6 ZeroPage 2
  1762  ca7a b6c1               !word dispModeZPX-1 ; 7 ZeroPageX 2
  1763  ca7c c3c1               !word dispModeZPY-1 ; 8 ZeroPageY 2
  1764  ca7e d0c1               !word dispModeAbs-1 ; 9 Absolute 3
  1765  ca80 e2c1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  1766  ca82 efc1               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  1767  ca84 fcc1               !word dispModeInd-1 ; 12 Indirect 3
  1768                          
  1769                          nmodes = 13
  1770                          
  1771                          mode_sorted:
  1772  ca86 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  1773                          
  1774                          !ifdef MINIMUM {
  1775                          mode_0: !text "Accumulator", 0, "A", 0
  1776                          mode_1: !text "None", 0, "", 0
  1777                          mode_2: !text "Immediate", 0, "#$12", 0
  1778                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  1779                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  1780                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  1781                          mode_6: !text "ZeroPage", 0, "$12", 0
  1782                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  1783                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  1784                          mode_9: !text "Absolute", 0, "$1234", 0
  1785                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  1786                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  1787                          mode_12: !text "Indirect", 0, "($1234)", 0
  1788                          } else {
  1789  ca93 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  1790  caa1 4e4f4e450000       mode_1: !text "NONE", 0, "", 0
  1791  caa7 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  1792  cab6 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  1793  cac8 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  1794  cada 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  1795  caf9 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  1796  cb06 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  1797  cb16 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  1798  cb26 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  1799  cb35 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  1800  cb47 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  1801  cb59 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  1802                          }
  1803                          
  1804                          modes: ; table for easily displaying each mode_example
  1805  cb6a 93ca               !word mode_0
  1806  cb6c a1ca               !word mode_1
  1807  cb6e a7ca               !word mode_2
  1808  cb70 b6ca               !word mode_3
  1809  cb72 c8ca               !word mode_4
  1810  cb74 daca               !word mode_5
  1811  cb76 f9ca               !word mode_6
  1812  cb78 06cb               !word mode_7
  1813  cb7a 16cb               !word mode_8
  1814  cb7c 26cb               !word mode_9
  1815  cb7e 35cb               !word mode_10
  1816  cb80 47cb               !word mode_11
  1817  cb82 59cb               !word mode_12
  1818                          
  1819                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  1820                          nopcodes = 151
  1821  cb84 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  1822  cc1b 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  1823  ccb2 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  1824                          
  1825                          copyright 
  1826                          ;                  1         2         3         4
  1827                          ;         1234567890123456789012345678901234567890
  1828  cd49 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  1829                          !ifdef C64TERMINAL {
  1830                              !text 13, "(TERMINAL VERSION)"
  1831                          }
  1832  cd69 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  1833  cd8f 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  1834  cda6 00                 !text 0
  1835                          
  1836                          firsthelp
  1837  cda7 0d3f202020202020...!text 13, "?       (SYNTAX)"
  1838  cdb8 0d3f204120202020...!text 13, "? A     (LIST 6502 INSTRUCTIONS)"
  1839  cdd9 0d3f204144432020...!text 13, "? ADC   (/ADC/ ADDRESSING MODES)"
  1840  cdfa 0d3f204d4f444520...!text 13, "? MODE  (ADDRESSING MODES)"
  1841                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  1842  ce15 0d00               !text 13, 0
  1843                          
  1844  ce17 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  1845                          
  1846                          generalhelp
  1847  ce28 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  1848  ce4e 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  1849  ce73 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  1850  ce96 00                 !text 0
  1851                          generalhelp2
  1852  ce97 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  1853  cebf 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  1854  cedb 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  1855  cefb 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  1856  cf1d 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  1857  cf42 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  1858  cf61 00                 !text 0
  1859                          
  1860  cf62 4d4f444500         modes_keyword !text "MODE", 0
  1861                          
  1862                          !ifdef C64SCREEN {
  1863  cf67 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  1864  cf6e 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  1865                          }
  1866                          
  1867                          !ifdef MINIMUM {
  1868                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1869                          ; JUMP table for some stability
  1870                          * = $FFEE
  1871                          JUART_INIT: JMP UART_INIT
  1872                          JUART_OUT: JMP UART_OUT
  1873                          JUART_IN: JMP UART_IN
  1874                          JUART_CHK: JMP UART_CHK
  1875                          
  1876                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1877                          ; 6502 vectors 
  1878                          * = $fffa
  1879                              !word NMI
  1880                              !word RESET
  1881                              !word IRQ
  1882                          }
  1883                          
  1884                          finish = *
