
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<<
     5                          ;; >>>       ****************************************************        <<<
     6                          ;; >>>       **           TARGETS:                              *        <<<
     7                          ;; >>>       ** (1)  C64 8000-9FFF screen editor                *        <<<
     8                          ;; >>>       ** (2)  C64 8000-9FFF terminal edition             *        <<<
     9                          ;; >>>       ** (3)  6502+MC6850 minimum system                 *        <<<
    10                          ;; >>>       *   56K(RAM),8K(ROM), 2 bytes IO for MC6850 UART   *        <<<
    11                          ;; >>>       ****************************************************        <<<
    12                          ;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          ;; MIT License
    15                          ;;
    16                          ;; Copyright (c) 2024 David R. Van Wagner
    17                          ;; davevw.com
    18                          ;;
    19                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    20                          ;; of this software and associated documentation files (the "Software"), to deal
    21                          ;; in the Software without restriction, including without limitation the rights
    22                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    23                          ;; copies of the Software, and to permit persons to whom the Software is
    24                          ;; furnished to do so, subject to the following conditions:
    25                          ;;
    26                          ;; The above copyright notice and this permission notice shall be included in all
    27                          ;; copies or substantial portions of the Software.
    28                          ;;
    29                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    30                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    31                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    32                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    33                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    34                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    35                          ;; SOFTWARE.
    36                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                          
    40                          ; Important! define exactly ONE target (set in build.sh)
    41                          ;C64SCREEN = 1
    42                          ;C64TERMINAL = 1
    43                          ;MINIMUM = 1
    44                          
    45                          ; options (set in build.sh)
    46                          ;NEEDECHO = 0
    47                          
    48                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                          
    50                          ;; _
    51                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    52                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    53                          ;; 1000 (display memory at $1000)
    54                          ;; 1000.2000 (display memory range $1000 to $2000)
    55                          ;; 1000. (display next screenful of memory starting at $1000)
    56                          ;; . (display next screenful of memory)
    57                          ;; 1000 r (JMP $1000)
    58                          ;; 1000: 01 02 03 (modify memory)
    59                          ;; (NEW SYNTAX)
    60                          ;; 1000 d (disassemble starting at address, for screenful)
    61                          ;; d (continue disassembling from last address)
    62                          ;; 1000 a (assemble starting at, interactive until empty line)
    63                          ;; x (exit monitor -- C64 only)
    64                          ;; ? (commands help)
    65                          ;; ?a (list instructions available)
    66                          ;; ?adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    67                          ;; ?mode (show addressing modes example syntax for 6502)
    68                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    69                          ;; .? (display registers in format .1234 10110000 01 02 03 f6)
    70                          ;; .1234 10110000 01 02 03 f6 (set registers PC FLAGS A X Y S)
    71                          ;; .A:00 (change register, replace A with X, Y, S, P as appropriate, use space or colon as separator)
    72                          ;; (FUTURE SYNTAX, not implemented)
    73                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    74                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    75                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    76                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    77                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    78                          ;;
    79                          ;; (INTERACTIVE ASSEMBLER)
    80                          ;; 1000 _
    81                          ;;      ADC #$12
    82                          ;; 1000 69 12    ADC #$12
    83                          ;; 1002 _
    84                          ;;      JSR $1234
    85                          ;; 1002 20 34 12 JSR $1234
    86                          ;; 1005 _
    87                          ;;      RTS
    88                          ;; 1005 60       RTS
    89                          ;; 1006 _
    90                          ;;      XYZ
    91                          ;;      XYZ ?
    92                          ;; 1006 _
    93                          ;; _
    94                          ;;
    95                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    96                          ;; and can cursor up to revise,
    97                          ;;
    98                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    99                          ;;
   100                          
   101                          ; global
   102                          inputbuf=$0200
   103                          
   104                          
   105                          ; kernal/system calls
   106                          
   107                          !ifdef MINIMUM {
   108                          charout=JUART_OUT
   109                          getkey=JUART_IN
   110                          }
   111                          
   112                          !ifdef C64SCREEN {
   113                          setlfs=$ffba
   114                          setnam=$ffbd
   115                          charin=$ffcf ; screen editor
   116                          charout=$ffd2
   117                          fsave =$ffd8
   118                          getkey=$ffe4
   119                          }
   120                          
   121                          !ifdef C64TERMINAL {
   122                          setlfs=$ffba
   123                          setnam=$ffbd
   124                          charout=$ffd2
   125                          getkey=$ffe4
   126                          fsave =$ffd8
   127                          }
   128                          
   129                          ; zeropage
   130                          !ifdef MINIMUM {
   131                          opidx=$f0
   132                          inidx=$f1
   133                          mode=$f2
   134                          size=$f3
   135                          ptr3=$f4 ; and $f5
   136                          count=$f6
   137                          len=$f7
   138                          savepos=$f8
   139                          tmp2=$f9
   140                          flag=$fa
   141                          ptr1=$fb ; and $fc
   142                          ptr2=$fd ; and $fe
   143                          tmp=$ff
   144                          }
   145                          
   146                          !ifdef MINIMUM {
   147                          * = $e000
   148                              jmp start
   149                          } else { // any C64
   150                          * = $8000
   151  8000 4c2080                 jmp init64
   152                          }
   153                          
   154                          test: ; all the addressing modes here for testing disassembly
   155  8003 ea                     nop
   156  8004 ad3412                 lda $1234
   157  8007 bd3412                 lda $1234,x
   158  800a b93412                 lda $1234,y
   159  800d 0a                     asl
   160  800e a912                   lda #$12
   161  8010 a112                   lda ($12,x)
   162  8012 b112                   lda ($12),y
   163  8014 6c3412                 jmp ($1234)
   164  8017 d0fe               -   bne -
   165  8019 a512                   lda $12
   166  801b b512                   lda $12,x
   167  801d b612                   ldx $12,y
   168  801f ff                     !byte $FF ; unknown
   169                          
   170                          !ifndef MINIMUM {
   171                              ; any C64
   172                          init64:    
   173                              ; check if irq/brk vector installed
   174  8020 ad1603                 lda $316
   175  8023 ae1703                 ldx $317
   176  8026 e08e                   cpx #>brk64
   177  8028 f010                   beq +
   178  802a 8d0495                 sta savebrkvector
   179  802d 8e0595                 stx savebrkvector+1
   180  8030 a92a                   lda #<brk64
   181  8032 a28e                   ldx #>brk64
   182  8034 8d1603                 sta $316
   183  8037 8e1703                 stx $317
   184  803a 205980             +   jsr install_nmi64
   185                              ; fall through to start
   186                          }
   187                          
   188                          start:
   189  803d d8                     cld
   190  803e 58                     cli
   191  803f a9d8                   lda #<copyright
   192  8041 a291                   ldx #>copyright
   193  8043 204284                 jsr strout
   194  8046 a936                   lda #<firsthelp
   195  8048 a292                   ldx #>firsthelp
   196  804a 204284                 jsr strout
   197  804d 4c7e8d                 jmp save_registers
   198                          
   199                          input_loop:
   200  8050 206384                 jsr inputline
   201  8053 206684                 jsr parseline
   202  8056 4c5080                 jmp input_loop
   203                          
   204                          !ifndef MINIMUM {
   205                          ; C64 only
   206                          
   207                          install_nmi64:
   208                              ; check if nmi vector installed
   209  8059 ad1803                 lda $318
   210  805c ae1903                 ldx $319
   211  805f e08e                   cpx #>nmi64
   212  8061 f010                   beq +
   213  8063 8d0695                 sta savenmivector
   214  8066 8e0795                 stx savenmivector+1
   215  8069 a90b                   lda #<nmi64
   216  806b a28e                   ldx #>nmi64
   217  806d 8d1803                 sta $318
   218  8070 8e1903                 stx $319
   219  8073 60                 +   rts
   220                          
   221                          uninstall_nmi64:
   222  8074 ad0695                 lda savenmivector
   223  8077 ae0795                 ldx savenmivector+1
   224  807a 8d1803                 sta $318
   225  807d 8e1903                 stx $319
   226  8080 60                     rts
   227                          
   228                          chkextrac64:
   229  8081 208d80                 jsr chkexit
   230  8084 d003                   bne +
   231  8086 4ca280                 jmp execute_exit
   232  8089 18                 +   clc ; no error
   233  808a a201                   ldx #1 ; Z false - not consumed
   234  808c 60                     rts
   235                          
   236                          chkexit:
   237  808d b90002                 lda inputbuf, y
   238  8090 c958                   cmp #'X'
   239  8092 d009                   bne +
   240  8094 c8                     iny
   241  8095 ccfd94                 cpy len ; validate no extra characters
   242  8098 f003                   beq +
   243  809a 4c9e80                 jmp extra_error
   244  809d 60                 +   rts
   245                          
   246                          extra_error:
   247                              ; pop local return address
   248  809e 68                     pla
   249  809f 68                     pla
   250  80a0 38                     sec ; error
   251  80a1 60                     rts
   252                          
   253                          execute_exit:
   254  80a2 ad0495                 lda savebrkvector
   255  80a5 ae0595                 ldx savebrkvector+1
   256  80a8 8d1603                 sta $316
   257  80ab 8e1703                 stx $317
   258  80ae 207480                 jsr uninstall_nmi64
   259                              ; pop monitor return addresses, so only original caller is left
   260  80b1 68                     pla
   261  80b2 68                     pla
   262  80b3 68                     pla
   263  80b4 68                     pla
   264  80b5 68                     pla
   265  80b6 68                     pla
   266  80b7 60                     rts
   267                          
   268                          display_extra_help:
   269  80b8 a949                   lda #<extra_help
   270  80ba a292                   ldx #>extra_help
   271  80bc 4c4284                 jmp strout
   272                          
   273                          !ifdef C64SCREEN {
   274                          display_page_disassemble:
   275  80bf adf48d                 lda ptr1
   276  80c2 aef58d                 ldx ptr1+1
   277  80c5 20b883                 jsr disphexword
   278  80c8 a987                   lda #<page_disassemble
   279  80ca a292                   ldx #>page_disassemble
   280  80cc 4c4284                 jmp strout
   281                          
   282                          display_page_displaymemory:
   283  80cf 20748d                 jsr newline
   284  80d2 adf48d                 lda ptr1
   285  80d5 aef58d                 ldx ptr1+1
   286  80d8 20b883                 jsr disphexword
   287  80db a98e                   lda #<page_displaymemory
   288  80dd a292                   ldx #>page_displaymemory
   289  80df 4c4284                 jmp strout
   290                          
   291                          inputlinec64:
   292  80e2 a000                   ldy #0
   293  80e4 20cfff             -   jsr charin
   294  80e7 990002                 sta inputbuf,y
   295  80ea c8                     iny
   296  80eb c90d                   cmp #13
   297  80ed d0f5                   bne -
   298  80ef 60                     rts
   299                          
   300                          continueassemblec64:
   301  80f0 a914                   lda #20
   302  80f2 20d2ff                 jsr charout
   303  80f5 20d2ff                 jsr charout
   304  80f8 adf48d                 lda ptr1
   305  80fb aef58d                 ldx ptr1+1
   306  80fe 20b883                 jsr disphexword
   307  8101 a920                   lda #' '
   308  8103 20d2ff                 jsr charout
   309  8106 20d2ff                 jsr charout
   310  8109 4cd2ff                 jmp charout
   311                          }
   312                          
   313                          chkfilename:
   314  810c 20878c                 jsr skipspaces
   315  810f 8c0195                 sty tmp
   316  8112 b90002                 lda inputbuf, y
   317  8115 c922                   cmp #34 ; double quote
   318  8117 d025                   bne ++
   319  8119 c8                 -   iny
   320  811a b90002                 lda inputbuf, y
   321  811d c90d                   cmp #13
   322  811f d005                   bne +
   323  8121 ac0195                 ldy tmp
   324  8124 d018                   bne ++
   325  8126 c922               +   cmp #34 ; double quote
   326  8128 d0ef                   bne -
   327  812a 98                     tya ; index of ending double quotes
   328  812b 48                     pha ; save
   329  812c 18                     clc ; will subtract one more
   330  812d ed0195                 sbc tmp ; subtract index of first quote, have filename length
   331  8130 ae0195                 ldx tmp
   332  8133 e8                     inx ; low address of filename
   333  8134 a002                   ldy #>inputbuf ; high address of filename
   334  8136 20bdff                 jsr setnam
   335  8139 68                     pla
   336  813a a8                     tay
   337  813b c8                     iny ; advance past ending double quotes
   338  813c a900                   lda #0 ; set Z true
   339  813e 60                 ++  rts
   340                          
   341                          check_execute_save:
   342  813f 200c81             +   jsr chkfilename
   343  8142 f006                   beq +
   344  8144 205e8c                 jsr reporterr
   345  8147 a201                   ldx #1 ; set Z false
   346  8149 60                     rts
   347  814a 205881             +   jsr chkoptionaldrive
   348  814d 206e81                 jsr chksave
   349  8150 d005                   bne +
   350  8152 207781                 jsr executesave
   351  8155 a200                   ldx #0 ; set Z true
   352  8157 60                 +   rts
   353                          
   354                          chkoptionaldrive:
   355  8158 a908                   lda #8
   356  815a 8d0895                 sta drive
   357  815d 20878c                 jsr skipspaces
   358  8160 20dd8c                 jsr chkhexbyte
   359  8163 d008                   bne +
   360  8165 8d0895                 sta drive
   361  8168 20878c                 jsr skipspaces
   362  816b a900                   lda #0 ; set Z true
   363  816d 60                 +   rts
   364                          
   365                          chksave:
   366  816e 20878c                 jsr skipspaces
   367  8171 b90002                 lda inputbuf, y
   368  8174 c953                   cmp #'S'
   369  8176 60                     rts
   370                          
   371                          executesave:
   372  8177 20748d                 jsr newline
   373  817a a522                   lda $22
   374  817c 48                     pha
   375  817d a523                   lda $23
   376  817f 48                     pha
   377  8180 adf48d                 lda ptr1
   378  8183 8522                   sta $22
   379  8185 adf58d                 lda ptr1+1
   380  8188 8523                   sta $23
   381  818a a9c0                   lda #$c0 ; KERNAL control and error messages
   382  818c 859d                   sta $9d ; set messages to be displayed
   383  818e a901                   lda #1
   384  8190 ae0895                 ldx drive
   385  8193 a00f                   ldy #15
   386  8195 20baff                 jsr setlfs
   387  8198 a922                   lda #$22
   388  819a ae0295                 ldx ptr2
   389  819d ac0395                 ldy ptr2+1
   390  81a0 20d8ff                 jsr fsave
   391  81a3 68                     pla
   392  81a4 8523                   sta $23
   393  81a6 68                     pla
   394  81a7 8522                   sta $22
   395  81a9 4c748d                 jmp newline
   396                          }
   397                          
   398                          disassemble:
   399  81ac a917                   lda #23
   400  81ae 8dfc94                 sta count
   401  81b1 a000               -   ldy #0
   402  81b3 20e38d                 jsr lda_at_ptr1_y
   403  81b6 20e681                 jsr find_opcode
   404  81b9 205082                 jsr disp_current
   405  81bc adfb94                 lda size
   406  81bf 1002                   bpl +
   407  81c1 a901                   lda #1
   408  81c3 18                 +   clc
   409  81c4 6df48d                 adc ptr1
   410  81c7 8df48d                 sta ptr1
   411  81ca 9003                   bcc +
   412  81cc eef58d                 inc ptr1+1
   413  81cf cefc94             +   dec count
   414  81d2 d0dd                   bne -
   415                          !ifdef C64SCREEN {
   416  81d4 4cbf80                 jmp display_page_disassemble
   417                          } else {
   418                              rts
   419                          }
   420                          
   421                          compareptrs:
   422  81d7 adf58d                 lda ptr1+1
   423  81da cd0395                 cmp ptr2+1
   424  81dd d006                   bne +
   425  81df adf48d                 lda ptr1
   426  81e2 cd0295                 cmp ptr2
   427  81e5 60                 +   rts
   428                          
   429                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   430                          ; and properties updated in ZP globals size,inidx,opidx,mode
   431  81e6 a097                   ldy #nopcodes
   432  81e8 a296                   ldx #nopcodes-1
   433  81ea dd1390             -   cmp opcodes,x
   434  81ed f010                   beq +
   435  81ef ca                     dex
   436  81f0 88                     dey
   437  81f1 d0f7                   bne -
   438  81f3 18                     clc
   439  81f4 a901                   lda #1
   440  81f6 8dfb94                 sta size
   441  81f9 a9ff                   lda #$FF
   442  81fb aa                     tax
   443  81fc a8                     tay
   444  81fd 900a                   bcc ++
   445  81ff bdaa90             +   lda instidx, x
   446  8202 bc4191                 ldy modeidx, x
   447  8205 201382                 jsr getsize
   448  8208 38                     sec
   449  8209 8df994             ++  sta inidx
   450  820c 8ef894                 stx opidx
   451  820f 8cfa94                 sty mode
   452  8212 60                     rts
   453                          
   454                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   455                              ; result returned in size
   456  8213 48                     pha
   457  8214 a901                   lda #1
   458  8216 8dfb94                 sta size
   459  8219 68                     pla
   460  821a c002                   cpy #2 // Immediate
   461  821c 900a                   bcc +
   462  821e eefb94                 inc size
   463  8221 c009                   cpy #9 // Absolute
   464  8223 9003                   bcc +
   465  8225 eefb94                 inc size
   466  8228 60                 +   rts
   467                          
   468                          disp_opcode: ; .A opcode byte
   469  8229 20e681                 jsr find_opcode
   470  822c 8a                     txa
   471                              ; fall through to display instruction
   472                          
   473                          dispinst: ; .A instruction index 0..55, note modifies A and X
   474  822d aa                     tax
   475  822e e038                   cpx #ninst
   476  8230 b012                   bcs +
   477  8232 bd528e                 lda inst0, x
   478  8235 20d2ff                 jsr charout
   479  8238 bd8a8e                 lda inst1, x
   480  823b 20d2ff                 jsr charout
   481  823e bdc28e                 lda inst2, x
   482  8241 4cd2ff                 jmp charout
   483  8244 a93f               +   lda #'?'
   484  8246 20d2ff                 jsr charout
   485  8249 20d2ff                 jsr charout
   486  824c 20d2ff                 jsr charout
   487  824f 60                     rts
   488                          
   489                          disp_current:
   490  8250 adf48d                 lda ptr1
   491  8253 aef58d                 ldx ptr1+1
   492  8256 20b883                 jsr disphexword
   493  8259 a920                   lda #$20
   494  825b 20d2ff                 jsr charout
   495  825e a000                   ldy #0
   496  8260 aefb94                 ldx size
   497  8263 20e38d             -   jsr lda_at_ptr1_y
   498  8266 20be83                 jsr disphexbyte
   499  8269 a920                   lda #$20
   500  826b 20d2ff                 jsr charout
   501  826e c8                     iny
   502  826f ca                     dex
   503  8270 d0f1                   bne -
   504  8272 c003               -   cpy #3
   505  8274 f00e                   beq +
   506  8276 a920                   lda #$20
   507  8278 20d2ff                 jsr charout
   508  827b 20d2ff                 jsr charout
   509  827e 20d2ff                 jsr charout
   510  8281 c8                     iny
   511  8282 d0ee                   bne -
   512  8284 adf994             +   lda inidx
   513  8287 202d82                 jsr dispinst
   514  828a a920                   lda #$20
   515  828c 20d2ff                 jsr charout
   516  828f 209782                 jsr disp_mode
   517  8292 a90d                   lda #13
   518  8294 4cd2ff                 jmp charout
   519                          
   520                          disp_mode
   521  8297 adfa94                 lda mode
   522  829a c90d                   cmp #13
   523  829c b00a                   bcs +
   524  829e 0a                     asl
   525  829f aa                     tax
   526  82a0 bdfb8e                 lda mode_jmptable+1,x
   527  82a3 48                     pha
   528  82a4 bdfa8e                 lda mode_jmptable,x
   529  82a7 48                     pha
   530  82a8 60                 +   rts
   531                          
   532                          dispModeAcc:
   533  82a9 a941                   lda #'A'
   534  82ab 4cd2ff                 jmp charout
   535                          
   536                          dispModeNone:
   537  82ae 60                     rts
   538                          
   539                          dispModeImm:
   540  82af a923                   lda #'#'
   541  82b1 20d2ff                 jsr charout
   542                          dispModeZP:
   543  82b4 a924                   lda #'$'
   544  82b6 20d2ff                 jsr charout
   545  82b9 a001                   ldy #1
   546  82bb 20e38d                 jsr lda_at_ptr1_y
   547  82be 4cbe83                 jmp disphexbyte
   548                          
   549                          dispModeIndX:
   550  82c1 a928                   lda #'('
   551  82c3 20d2ff                 jsr charout
   552  82c6 a924                   lda #'$'
   553  82c8 20d2ff                 jsr charout
   554  82cb a001                   ldy #1
   555  82cd 20e38d                 jsr lda_at_ptr1_y
   556  82d0 20be83                 jsr disphexbyte
   557  82d3 a92c                   lda #','
   558  82d5 20d2ff                 jsr charout
   559  82d8 a958                   lda #'X'
   560  82da 20d2ff                 jsr charout
   561  82dd a929                   lda #')'
   562  82df 4cd2ff                 jmp charout
   563                          
   564                          dispModeIndY:
   565  82e2 a928                   lda #'('
   566  82e4 20d2ff                 jsr charout
   567  82e7 a924                   lda #'$'
   568  82e9 20d2ff                 jsr charout
   569  82ec a001                   ldy #1
   570  82ee 20e38d                 jsr lda_at_ptr1_y
   571  82f1 20be83                 jsr disphexbyte
   572  82f4 a929                   lda #')'
   573  82f6 20d2ff                 jsr charout
   574  82f9 a92c                   lda #','
   575  82fb 20d2ff                 jsr charout
   576  82fe a959                   lda #'Y'
   577  8300 4cd2ff                 jmp charout
   578                          
   579                          dispModeRel:
   580  8303 a924                   lda #'$'
   581  8305 20d2ff                 jsr charout
   582  8308 18                     clc
   583  8309 adf48d                 lda ptr1
   584  830c 6902                   adc #2
   585  830e 8d088e                 sta ptr3
   586  8311 adf58d                 lda ptr1+1
   587  8314 6900                   adc #0
   588  8316 8d098e                 sta ptr3+1
   589  8319 a001                   ldy #1
   590  831b 20e38d                 jsr lda_at_ptr1_y
   591  831e 1019                   bpl +
   592                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   593  8320 49ff                   eor #$FF ; inverse
   594  8322 18                     clc
   595  8323 6901                   adc #1 ; complete getting absolute value from two's complement
   596  8325 8d0195                 sta tmp
   597  8328 38                     sec
   598  8329 ad088e                 lda ptr3
   599  832c ed0195                 sbc tmp
   600  832f 8d088e                 sta ptr3
   601  8332 b011                   bcs ++
   602  8334 ce098e                 dec ptr3+1
   603  8337 900c                   bcc ++
   604  8339 18                 +   clc ; simple case of adding
   605  833a 6d088e                 adc ptr3
   606  833d 8d088e                 sta ptr3
   607  8340 9003                   bcc ++
   608  8342 ee098e                 inc ptr3+1
   609  8345 ad088e             ++  lda ptr3
   610  8348 ae098e                 ldx ptr3+1
   611  834b 4cb883                 jmp disphexword
   612                          
   613                          dispModeZPX:
   614  834e 20b482                 jsr dispModeZP
   615  8351 a92c                   lda #','
   616  8353 20d2ff                 jsr charout
   617  8356 a958                   lda #'X'
   618  8358 4cd2ff                 jmp charout
   619                          
   620                          dispModeZPY:
   621  835b 20b482                 jsr dispModeZP
   622  835e a92c                   lda #','
   623  8360 20d2ff                 jsr charout
   624  8363 a959                   lda #'Y'
   625  8365 4cd2ff                 jmp charout
   626                          
   627                          dispModeAbs:
   628  8368 a924                   lda #'$'
   629  836a 20d2ff                 jsr charout
   630  836d a001                   ldy #1
   631  836f 20e38d                 jsr lda_at_ptr1_y
   632  8372 48                     pha
   633  8373 c8                     iny
   634  8374 20e38d                 jsr lda_at_ptr1_y
   635  8377 aa                     tax
   636  8378 68                     pla
   637  8379 4cb883                 jmp disphexword
   638                          
   639                          dispModeAbsX:
   640  837c 206883                 jsr dispModeAbs
   641  837f a92c                   lda #','
   642  8381 20d2ff                 jsr charout
   643  8384 a958                   lda #'X'
   644  8386 4cd2ff                 jmp charout
   645                          
   646                          dispModeAbsY:
   647  8389 206883                 jsr dispModeAbs
   648  838c a92c                   lda #','
   649  838e 20d2ff                 jsr charout
   650  8391 a959                   lda #'Y'
   651  8393 4cd2ff                 jmp charout
   652                          
   653                          dispModeInd:
   654  8396 a928                   lda #'('
   655  8398 20d2ff                 jsr charout
   656  839b 206883                 jsr dispModeAbs
   657  839e a929                   lda #')'
   658  83a0 4cd2ff                 jmp charout
   659                          
   660                          dispbinbyte: ; .A 00..FF
   661  83a3 a208                   ldx #8
   662  83a5 8d0195                 sta tmp
   663  83a8 a930               -   lda #'0'
   664  83aa 2e0195                 rol tmp
   665  83ad 9002                   bcc +
   666  83af a931                   lda #'1'
   667  83b1 20d2ff             +   jsr charout
   668  83b4 ca                     dex
   669  83b5 d0f1                   bne -
   670  83b7 60                     rts
   671                          
   672                          disphexword: ; .A low, .X high, 0000..FFFF
   673  83b8 48                     pha
   674  83b9 8a                     txa
   675  83ba 20be83                 jsr disphexbyte
   676  83bd 68                     pla
   677                              ;fall through to call again
   678                          
   679                          disphexbyte: ; .A 00..FF
   680  83be 48                     pha
   681  83bf 4a                     lsr
   682  83c0 4a                     lsr
   683  83c1 4a                     lsr
   684  83c2 4a                     lsr
   685  83c3 20c783                 jsr disphexnybble
   686  83c6 68                     pla
   687                              ;fall through to call again
   688                          
   689                          disphexnybble: ; .A 0..F
   690  83c7 290f                   and #$0F
   691  83c9 0930                   ora #$30
   692  83cb c93a                   cmp #$3A
   693  83cd 9002                   bcc +
   694  83cf 6906                   adc #$06
   695  83d1 4cd2ff             +   jmp charout
   696                          
   697                          inputhexword: ; C set if fails
   698  83d4 a900                   lda #0
   699  83d6 8df48d                 sta ptr1
   700  83d9 8df58d                 sta ptr1+1
   701                          
   702  83dc a904                   lda #4 ; word is at most 4 nybbles
   703  83de 8dfc94                 sta count
   704  83e1 202484             --  jsr inputhexnybble
   705  83e4 b015                   bcs +
   706                          
   707                              ; shift nibble up
   708  83e6 0a                     asl
   709  83e7 0a                     asl
   710  83e8 0a                     asl
   711  83e9 0a                     asl
   712                          
   713  83ea a204                   ldx #4 ; 4 bits rotated into word
   714  83ec 2a                 -   rol
   715  83ed 2ef48d                 rol ptr1
   716  83f0 2ef58d                 rol ptr1+1
   717  83f3 ca                     dex
   718  83f4 d0f6                   bne - ; repeat bits
   719                          
   720  83f6 cefc94                 dec count
   721  83f9 d0e6                   bne -- ; repeat nybbles
   722                          
   723  83fb adfc94             +   lda count
   724  83fe c904                   cmp #4 ; set C if 4, otherwise clear
   725  8400 60                     rts
   726                          
   727                          inputhexbyte:
   728  8401 202484                 jsr inputhexnybble
   729  8404 b01d                   bcs ++
   730  8406 8d0195                 sta tmp
   731  8409 202484                 jsr inputhexnybble
   732  840c 9006                   bcc +
   733  840e 18                     clc ; allow single digit as byte
   734  840f ad0195                 lda tmp
   735  8412 900f                   bcc ++
   736  8414 0e0195             +   asl tmp
   737  8417 0e0195                 asl tmp
   738  841a 0e0195                 asl tmp
   739  841d 0e0195                 asl tmp
   740  8420 0d0195                 ora tmp ; necessary to assemble the two nybbles
   741  8423 60                 ++  rts
   742                          
   743                          inputhexnybble:
   744  8424 b90002                 lda $0200,y
   745  8427 297f                   and #$7F
   746  8429 38                     sec
   747  842a e930                   sbc #$30
   748  842c 9012                   bcc ++
   749  842e c90a                   cmp #10
   750  8430 900c                   bcc +
   751  8432 e907                   sbc #7
   752  8434 900a                   bcc ++
   753  8436 c90a                   cmp #10
   754  8438 9006                   bcc ++
   755  843a c910                   cmp #16
   756  843c b002                   bcs ++
   757  843e c8                 +   iny
   758  843f 60                     rts
   759  8440 38                 ++  sec
   760  8441 60                     rts
   761                          
   762                          strout:
   763  8442 8d088e                 sta ptr3
   764  8445 8e098e                 stx ptr3+1
   765                          strout2:
   766  8448 a000                   ldy #0
   767  844a 20f78d             -   jsr lda_at_ptr3_y
   768  844d f006                   beq +
   769  844f 20d2ff                 jsr charout
   770  8452 c8                     iny
   771  8453 d0f5                   bne -
   772  8455 98                 +   tya
   773  8456 38                     sec
   774  8457 6d088e                 adc ptr3
   775  845a 8d088e                 sta ptr3
   776  845d 9003                   bcc +
   777  845f ee098e                 inc ptr3+1
   778  8462 60                 +   rts
   779                          
   780                          inputline:
   781                          !ifdef C64SCREEN {
   782  8463 4ce280                 jmp inputlinec64
   783                          } else {
   784                              ldy #0
   785                          --  sty count
   786                          -   jsr getkey
   787                              beq -
   788                              ldy count
   789                          !ifdef MINIMUM {
   790                              cmp #8 ; backspace
   791                          } else {
   792                              cmp #20
   793                          }
   794                              bne +
   795                              cpy #0
   796                              beq -
   797                              dey
   798                          !if NEEDECHO = 1 {
   799                              jsr charout
   800                          }
   801                              jmp --
   802                          +   cmp #13
   803                              beq +
   804                              cmp #' '
   805                              bcc -
   806                              cmp #128
   807                              bcs -
   808                          +
   809                          !if NEEDECHO = 1 {
   810                              jsr charout
   811                          }
   812                              sta inputbuf,y
   813                              iny
   814                              cmp #13
   815                              bne --
   816                              rts
   817                          }
   818                          
   819                          parseline:
   820  8466 c001                   cpy #1
   821  8468 d003                   bne +
   822                          -
   823                          !ifdef C64SCREEN {
   824  846a 4c748d                 jmp newline
   825                          } else {
   826                              rts
   827                          }
   828  846d 88                 +   dey
   829  846e 8cfd94                 sty len
   830                              ; skip whitespace
   831                              ; check for address, put in ptr1
   832                              ; or check for dot, then require address put in ptr2
   833                              ; or check for ?, and optional parameter, execute help
   834                              ; check for whitespace
   835                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   836                              ; check for string, store at start of inputbuf
   837                              ; check for drive number
   838                              ; check for whitespace
   839                              ; check command ":rda?mls", execute command
   840  8471 a000                   ldy #0
   841  8473 20878c                 jsr skipspaces
   842  8476 ccfd94                 cpy len
   843  8479 f0ef                   beq -
   844  847b 202b8c                 jsr chkcontinuedis
   845  847e d003                   bne +
   846  8480 204f8c                 jsr executedisassemble ; note won't return
   847  8483 203d8c             +   jsr chkcontinueasm
   848  8486 d003                   bne +
   849  8488 20f887                 jsr continueassemble ; note won't return
   850  848b 20968c             +   jsr chkdot
   851  848e d003                   bne +
   852  8490 4c9585                 jmp executedot
   853  8493 20a18c             +   jsr chkhelp
   854  8496 d003                   bne +
   855  8498 4c6286                 jmp executehelp
   856                          +
   857                          !ifndef MINIMUM {
   858  849b 208180                 jsr chkextrac64 ; check syntax only available on C64
   859  849e b015                   bcs + ; error if C set
   860  84a0 f005                   beq ++ ; consumed if Z set, skip next test(s)
   861                          }
   862  84a2 20d48c                 jsr chkhexaddr1
   863  84a5 d003                   bne error
   864  84a7 4cad84             ++  jmp executeaddr1
   865                          error:
   866  84aa 4c5e8c                 jmp reporterr
   867                          
   868                          executeaddr1:
   869  84ad ccfd94                 cpy len
   870  84b0 d003                   bne +
   871  84b2 4c1185                 jmp executedisplay1
   872  84b5 20968c             +   jsr chkdot
   873  84b8 d011                   bne +
   874  84ba ccfd94                 cpy len
   875  84bd f022                   beq executepagedisplay
   876  84bf 20f68c                 jsr chkhexaddr2
   877  84c2 d0e6                   bne error
   878  84c4 18                     clc
   879  84c5 6e0095                 ror flag
   880  84c8 4c0085                 jmp executeaddr12
   881  84cb 20878c             +   jsr skipspaces
   882  84ce 20ac8c                 jsr chkcolon
   883  84d1 d003                   bne +
   884  84d3 4c6d85                 jmp executemodify
   885  84d6 20438d             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   886                          !ifdef MINIMUM {
   887                              jmp reportnotimplemented
   888                          } else {
   889  84d9 200c81                 jsr chkfilename
   890  84dc d0cc                   bne error
   891  84de 4ca585                 jmp executeloadfilename
   892                          }
   893                          
   894                          executepagedisplay:
   895  84e1 adf48d                 lda ptr1
   896  84e4 18                     clc
   897                          !ifdef MINIMUM {
   898                              adc #$5f
   899                          } else {
   900  84e5 69b7                   adc #$b7
   901                          }
   902  84e7 8d0295                 sta ptr2
   903  84ea adf58d                 lda ptr1+1
   904                          !ifdef MINIMUM {
   905                              adc #$01
   906                          } else {
   907  84ed 6900                   adc #$00
   908                          }
   909  84ef 8d0395                 sta ptr2+1
   910  84f2 9008                   bcc +
   911  84f4 a9ff                   lda #$ff
   912  84f6 8d0295                 sta ptr2
   913  84f9 8d0395                 sta ptr2+1
   914  84fc 38                 +   sec
   915  84fd 6e0095                 ror flag
   916                              ; fall through to executeaddr12
   917                          
   918                          executeaddr12:
   919  8500 ccfd94                 cpy len
   920  8503 d003                   bne +
   921  8505 4c1d85                 jmp executedisplay12
   922                          !ifndef MINIMUM { // any C64
   923  8508 203f81             +   jsr check_execute_save
   924  850b f003                   beq ++
   925                          }
   926  850d 4c578c             +   jmp reportnotimplemented
   927  8510 60                 ++  rts
   928                          
   929                          executedisplay1:
   930  8511 adf48d                 lda ptr1
   931  8514 8d0295                 sta ptr2
   932  8517 adf58d                 lda ptr1+1
   933  851a 8d0395                 sta ptr2+1
   934                              ; fall through executedisplay12
   935                          
   936                          executedisplay12:
   937  851d a9ff                   lda #$ff
   938  851f 8dfc94                 sta count
   939  8522 eefc94             -   inc count
   940  8525 adfc94                 lda count
   941                          !ifdef MINIMUM {
   942                              and #$0f
   943                          } else {
   944  8528 2907                   and #$07
   945                          }
   946  852a d018                   bne +
   947  852c a90d                   lda #13
   948  852e 20d2ff                 jsr charout
   949  8531 adf48d                 lda ptr1
   950  8534 aef58d                 ldx ptr1+1
   951  8537 20b883                 jsr disphexword
   952  853a a93a                   lda #':'
   953  853c 20d2ff                 jsr charout
   954  853f a920                   lda #' '
   955  8541 20d2ff                 jsr charout
   956  8544 a000               +   ldy #0
   957  8546 20e38d                 jsr lda_at_ptr1_y
   958  8549 20be83                 jsr disphexbyte
   959  854c a920                   lda #' '
   960  854e 20d2ff                 jsr charout
   961  8551 eef48d                 inc ptr1
   962  8554 d005                   bne +
   963  8556 eef58d                 inc ptr1+1
   964  8559 f00f                   beq ++
   965  855b 20d781             +   jsr compareptrs
   966  855e 90c2                   bcc -
   967  8560 f0c0                   beq -
   968  8562 2c0095                 bit flag
   969  8565 1003                   bpl ++
   970                          !ifdef C64SCREEN {
   971  8567 4ccf80                 jmp display_page_displaymemory
   972                          }
   973  856a 4c748d             ++  jmp newline
   974                          
   975                          executemodify:
   976  856d 20878c                 jsr skipspaces
   977  8570 ccfd94                 cpy len
   978  8573 f01d                   beq ++
   979  8575 20b78c                 jsr chkhexbyteofsequence
   980  8578 f003                   beq +
   981  857a 4caa84                 jmp error
   982  857d 8c0195             +   sty tmp
   983  8580 a000                   ldy #0
   984  8582 20f38d                 jsr sta_at_ptr1_y
   985  8585 eef48d                 inc ptr1
   986  8588 d003                   bne +
   987  858a eef58d                 inc ptr1+1
   988  858d ac0195             +   ldy tmp
   989  8590 d0db                   bne executemodify
   990  8592 4c748d             ++  jmp newline
   991                          
   992                          executedot:
   993  8595 ccfd94                 cpy len
   994  8598 d003                   bne +
   995  859a 4ce184                 jmp executepagedisplay
   996  859d 20a885             +   jsr chkloadregister
   997  85a0 d000                   bne +
   998  85a2 200886             +   jsr chkloadregisters
   999                          
  1000                          executeloadfilename:
  1001                          executeaddr1cmd:
  1002  85a5 4c578c             +   jmp reportnotimplemented
  1003                          
  1004                          chkloadregister:
  1005  85a8 20b285                 jsr chkload_a_x_y_s_p
  1006  85ab 200286                 jsr chkload_pc
  1007  85ae 200586                 jsr chkload_n_v_b_d_i_z_c
  1008  85b1 60                     rts
  1009                          
  1010                          chkload_a_x_y_s_p:
  1011  85b2 8c0195                 sty tmp
  1012  85b5 b90002                 lda inputbuf, y
  1013  85b8 a200                   ldx #0
  1014  85ba c941                   cmp #'A'
  1015  85bc f014                   beq +
  1016  85be e8                     inx
  1017  85bf c958                   cmp #'X'
  1018  85c1 f00f                   beq +
  1019  85c3 e8                     inx
  1020  85c4 c959                   cmp #'Y'
  1021  85c6 f00a                   beq +
  1022  85c8 e8                     inx
  1023  85c9 c953                   cmp #'S'
  1024  85cb f005                   beq +
  1025  85cd e8                     inx
  1026  85ce c950                   cmp #'P'
  1027  85d0 d02c                   bne ++
  1028  85d2 c8                 +   iny
  1029  85d3 b90002                 lda inputbuf, y
  1030                          !ifndef MINIMUM {
  1031  85d6 c9a0                   cmp #$A0
  1032  85d8 f008                   beq +
  1033                          }
  1034  85da c920                   cmp #' '
  1035  85dc f004                   beq +
  1036  85de c93a                   cmp #':'
  1037  85e0 d01c                   bne ++
  1038  85e2 c8                 +   iny
  1039  85e3 20878c                 jsr skipspaces
  1040  85e6 8efa94                 stx mode
  1041  85e9 20dd8c                 jsr chkhexbyte
  1042  85ec d010                   bne ++
  1043  85ee aefa94                 ldx mode
  1044  85f1 9d0995                 sta registerA, x
  1045                          !ifndef MINIMUM {
  1046  85f4 20748d                 jsr newline
  1047                          }
  1048                              ; pop call stack so return to input_loop
  1049  85f7 68                     pla
  1050  85f8 68                     pla
  1051  85f9 68                     pla
  1052  85fa 68                     pla
  1053  85fb 4c0186                 jmp +++
  1054  85fe ac0195             ++  ldy tmp ; not Z (NE)
  1055  8601 60                 +++ rts
  1056                          
  1057                          chkload_pc:
  1058  8602 a901                   lda #1 ; not Z (NE)
  1059  8604 60                     rts
  1060                          
  1061                          chkload_n_v_b_d_i_z_c:
  1062  8605 a901                   lda #1 ; not Z (NE)
  1063  8607 60                     rts
  1064                          
  1065                          chkloadregisters:
  1066  8608 20d48c                 jsr chkhexword
  1067  860b d054                   bne ++
  1068  860d adf48d                 lda ptr1
  1069  8610 8d0e95                 sta registerPC
  1070  8613 adf58d                 lda ptr1+1
  1071  8616 8d0f95                 sta registerPC+1
  1072  8619 20758c                 jsr chkspace
  1073  861c d03c                   bne +
  1074  861e 201f8d                 jsr chkbinbyte
  1075  8621 d037                   bne +
  1076  8623 8d0d95                 sta registerSR
  1077  8626 20758c                 jsr chkspace
  1078  8629 d02f                   bne +
  1079  862b 20dd8c                 jsr chkhexbyte
  1080  862e d02a                   bne +
  1081  8630 8d0995                 sta registerA
  1082  8633 20758c                 jsr chkspace
  1083  8636 d022                   bne +
  1084  8638 20dd8c                 jsr chkhexbyte
  1085  863b d01d                   bne +
  1086  863d 8d0a95                 sta registerX
  1087  8640 20758c                 jsr chkspace
  1088  8643 d015                   bne +
  1089  8645 20dd8c                 jsr chkhexbyte
  1090  8648 d010                   bne +
  1091  864a 8d0b95                 sta registerY
  1092  864d 20758c                 jsr chkspace
  1093  8650 d008                   bne +
  1094  8652 20dd8c                 jsr chkhexbyte
  1095  8655 d003                   bne +
  1096  8657 8d0c95                 sta registerSP
  1097                              ; don't return to executedot
  1098  865a 68                 +   pla
  1099  865b 68                     pla
  1100                          !ifdef C64SCREEN {
  1101  865c 20748d                 jsr newline
  1102                          }
  1103  865f a900                   lda #0 ; set Z
  1104  8661 60                 ++  rts
  1105                          
  1106                          executehelp:
  1107                          !ifdef C64SCREEN {
  1108  8662 20748d                 jsr newline
  1109                          }
  1110  8665 ccfd94                 cpy len
  1111  8668 d003                   bne +
  1112  866a 4c9386                 jmp displayhelp
  1113  866d 20878c             +   jsr skipspaces
  1114  8670 20ae86                 jsr chkhelpinstructions
  1115  8673 d003                   bne +
  1116  8675 4cf286                 jmp displayinstructions
  1117  8678 20c886             +   jsr chkhelpmodes
  1118  867b d003                   bne +
  1119  867d 4c0987                 jmp displaymodes
  1120  8680 208b8b             +   jsr chkinstruction
  1121  8683 d003                   bne +
  1122  8685 4cc587                 jmp executehelpinstruction
  1123  8688 20bb86             +   jsr chkhelpregisters
  1124  868b d003                   bne +
  1125  868d 4c938d                 jmp execute_display_registers
  1126  8690 4c578c             +   jmp reportnotimplemented
  1127                          
  1128                          displayhelp:
  1129  8693 a9a6                   lda #<generalhelp
  1130  8695 a292                   ldx #>generalhelp
  1131  8697 204284                 jsr strout
  1132  869a a99b                   lda #<generalhelp2
  1133  869c a293                   ldx #>generalhelp2
  1134  869e 204284                 jsr strout
  1135  86a1 a965                   lda #<generalhelp3
  1136  86a3 a294                   ldx #>generalhelp3
  1137  86a5 204284                 jsr strout
  1138                          !ifndef MINIMUM { // any C64
  1139  86a8 20b880                 jsr display_extra_help
  1140                          }
  1141  86ab 4c748d                 jmp newline
  1142                          
  1143                          chkhelpinstructions:
  1144  86ae b90002                 lda inputbuf, y
  1145  86b1 c941                   cmp #'A'
  1146  86b3 d005                   bne +
  1147  86b5 b90102                 lda inputbuf+1, y
  1148  86b8 c90d                   cmp #13
  1149                              ; no need to increment y if found, done parsing line
  1150  86ba 60                 +   rts
  1151                          
  1152                          chkhelpregisters:
  1153  86bb b90002                 lda inputbuf, y
  1154  86be c92e                   cmp #'.'
  1155  86c0 d005                   bne +
  1156  86c2 b90102                 lda inputbuf+1, y
  1157  86c5 c90d                   cmp #13
  1158  86c7 60                 +   rts
  1159                          
  1160                          chkhelpmodes:
  1161  86c8 a9d6                   lda #<modes_keyword
  1162  86ca a294                   ldx #>modes_keyword
  1163                              ; fall through to chkkeyword
  1164                          
  1165                          chkkeyword:
  1166  86cc 8cfc94                 sty count
  1167  86cf 8d088e                 sta ptr3
  1168  86d2 8e098e                 stx ptr3+1
  1169  86d5 aefc94                 ldx count
  1170  86d8 a000                   ldy #0
  1171  86da 20f78d             -   jsr lda_at_ptr3_y
  1172  86dd dd0002                 cmp inputbuf, x
  1173  86e0 d00a                   bne +
  1174  86e2 e8                     inx
  1175  86e3 c8                     iny
  1176  86e4 ecfd94                 cpx len
  1177  86e7 d0f1                   bne -
  1178  86e9 20f78d                 jsr lda_at_ptr3_y ; matched if end of string, will set Z
  1179  86ec 08                 +   php ; save Z
  1180  86ed acfc94                 ldy count
  1181  86f0 28                     plp ; restore Z
  1182  86f1 60                     rts
  1183                          
  1184                          displayinstructions:
  1185  86f2 a038                   ldy #ninst
  1186  86f4 a200                   ldx #0
  1187  86f6 8a                 -   txa
  1188  86f7 48                     pha
  1189  86f8 202d82                 jsr dispinst
  1190  86fb a920                   lda #' '
  1191  86fd 20d2ff                 jsr charout
  1192  8700 68                     pla
  1193  8701 aa                     tax
  1194  8702 e8                     inx
  1195  8703 88                     dey
  1196  8704 d0f0                   bne -
  1197  8706 4c748d                 jmp newline
  1198                          
  1199                          displaymodes:
  1200  8709 38                     sec
  1201  870a a900                   lda #0
  1202  870c 48                 -   pha
  1203  870d aa                     tax
  1204  870e bd148f                 lda mode_sorted, x
  1205  8711 201e87                 jsr dispmode
  1206  8714 68                     pla
  1207  8715 18                     clc
  1208  8716 6901                   adc #1
  1209  8718 c90d                   cmp #nmodes
  1210  871a 90f0                   bcc -
  1211  871c 18                     clc
  1212  871d 60                     rts
  1213                          
  1214                          dispmode:
  1215  871e c90d                   cmp #nmodes
  1216  8720 b009                   bcs +
  1217  8722 8dfa94                 sta mode
  1218  8725 206d87                 jsr disp_modename_and_example
  1219  8728 4c2c87                 jmp dispmodeinstructions
  1220  872b 60                 +   rts
  1221                          
  1222                          dispmodeinstructions:
  1223                          !ifdef C64SCREEN {
  1224                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1225  872c adfa94                 lda mode
  1226  872f c903                   cmp #3
  1227  8731 d005                   bne +
  1228  8733 a920                   lda #' '
  1229  8735 4cd2ff                 jmp charout
  1230                          }
  1231                              ; display instructions with this mode
  1232  8738 a000               +   ldy #0
  1233  873a 8cf994             --  sty inidx
  1234  873d a200                   ldx #0
  1235  873f 8e0195             -   stx tmp
  1236  8742 adf994                 lda inidx
  1237  8745 ddaa90                 cmp instidx, x
  1238  8748 d016                   bne ++
  1239  874a bd4191                 lda modeidx, x
  1240  874d cdfa94                 cmp mode
  1241  8750 d00e                   bne ++
  1242  8752 a920                   lda #' '
  1243  8754 20d2ff                 jsr charout
  1244  8757 bdaa90                 lda instidx, x
  1245  875a 202d82                 jsr dispinst
  1246  875d ae0195                 ldx tmp
  1247  8760 e8                 ++  inx
  1248  8761 e097                   cpx #nopcodes
  1249  8763 90da                   bcc -
  1250  8765 c8                     iny
  1251  8766 c038                   cpy #ninst
  1252  8768 d0d0                   bne --
  1253  876a 4c748d                 jmp newline
  1254                          
  1255                          disp_modename_and_example:
  1256  876d 0a                     asl
  1257  876e aa                     tax
  1258  876f bdf98f                 lda modes, x
  1259  8772 48                     pha
  1260  8773 bdfa8f                 lda modes+1, x
  1261  8776 aa                     tax
  1262                          !ifdef C64SCREEN {
  1263  8777 a912                   lda #18
  1264  8779 20d2ff                 jsr charout
  1265                          }
  1266  877c 68                     pla
  1267  877d 204284                 jsr strout
  1268  8780 a920                   lda #' '
  1269  8782 20d2ff                 jsr charout
  1270  8785 204884                 jsr strout2
  1271                          !ifdef C64SCREEN {
  1272  8788 a992                   lda #146
  1273  878a 20d2ff                 jsr charout
  1274                          }
  1275  878d 60                     rts
  1276                          
  1277                          disp_modename_instruction_example:
  1278  878e 0a                     asl
  1279  878f aa                     tax
  1280  8790 bdf98f                 lda modes, x
  1281  8793 48                     pha
  1282  8794 bdfa8f                 lda modes+1, x
  1283  8797 aa                     tax
  1284  8798 68                     pla
  1285  8799 204284                 jsr strout ; mode name
  1286  879c ad088e                 lda ptr3
  1287  879f 48                     pha
  1288  87a0 ad098e                 lda ptr3+1
  1289  87a3 48                     pha
  1290  87a4 a93a                   lda #':'
  1291  87a6 20d2ff                 jsr charout
  1292  87a9 a920                   lda #' '
  1293  87ab 20d2ff                 jsr charout
  1294  87ae adf994                 lda inidx
  1295  87b1 202d82                 jsr dispinst ; instruction
  1296  87b4 a920                   lda #' '
  1297  87b6 20d2ff                 jsr charout
  1298  87b9 68                     pla
  1299  87ba 8d098e                 sta ptr3+1
  1300  87bd 68                     pla
  1301  87be 8d088e                 sta ptr3
  1302  87c1 204884                 jsr strout2 ; example
  1303  87c4 60                     rts
  1304                          
  1305                          
  1306                          executehelpinstruction:
  1307  87c5 a000                   ldy #0
  1308  87c7 8cf894             -   sty opidx
  1309  87ca b9aa90                 lda instidx, y
  1310  87cd cdf994                 cmp inidx
  1311  87d0 d01d                   bne +
  1312  87d2 b94191                 lda modeidx, y
  1313  87d5 8dfa94                 sta mode
  1314  87d8 aef894                 ldx opidx
  1315  87db bd1390                 lda opcodes, x
  1316  87de 20be83                 jsr disphexbyte
  1317  87e1 a920                   lda #' '
  1318  87e3 20d2ff                 jsr charout
  1319  87e6 adfa94                 lda mode
  1320  87e9 208e87                 jsr disp_modename_instruction_example
  1321  87ec 20748d                 jsr newline
  1322  87ef acf894             +   ldy opidx
  1323  87f2 c8                     iny
  1324  87f3 c097                   cpy #nopcodes
  1325  87f5 90d0                   bcc -
  1326  87f7 60                     rts
  1327                          
  1328                          continueassemble:
  1329                          !ifdef C64SCREEN {
  1330  87f8 20f080                 jsr continueassemblec64
  1331                          }
  1332                              ; continue...
  1333                          
  1334                          executeassemble:
  1335  87fb 68                     pla ; remove low byte return address
  1336  87fc 68                     pla ; return high byte return address
  1337                          !ifdef C64SCREEN {
  1338  87fd a914                   lda #20
  1339  87ff 20d2ff                 jsr charout
  1340  8802 20d2ff                 jsr charout
  1341                          } else {
  1342                              lda ptr1
  1343                              ldx ptr1+1
  1344                              jsr disphexword
  1345                              lda #' '
  1346                              jsr charout
  1347                          }
  1348                              ; save current pointer
  1349  8805 adf48d             --  lda ptr1
  1350  8808 aef58d                 ldx ptr1+1
  1351  880b 8d088e                 sta ptr3
  1352  880e 8e098e                 stx ptr3+1
  1353  8811 206384                 jsr inputline
  1354  8814 c001                   cpy #1
  1355  8816 f055                   beq ++
  1356  8818 88                     dey
  1357  8819 8cfd94                 sty len
  1358  881c a000                   ldy #0
  1359  881e 20878c                 jsr skipspaces
  1360  8821 ccfd94                 cpy len
  1361  8824 f047                   beq ++
  1362                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1363                              ;jsr skipspaces
  1364  8826 208b8b                 jsr chkinstruction
  1365  8829 f00f                   beq +
  1366  882b ad088e             -   lda ptr3
  1367  882e 8df48d                 sta ptr1
  1368  8831 ad098e                 lda ptr3+1
  1369  8834 8df58d                 sta ptr1+1
  1370  8837 4caa84                 jmp error
  1371  883a 20a088             +   jsr chkaddressing
  1372  883d d0ec                   bne -
  1373  883f 20c08b                 jsr find_inst_and_mode
  1374  8842 d0e7                   bne -
  1375  8844 207088                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1376  8847 18                     clc
  1377  8848 adfb94                 lda size
  1378  884b 6d088e                 adc ptr3
  1379  884e 8df48d                 sta ptr1
  1380  8851 ad098e                 lda ptr3+1
  1381  8854 6900                   adc #0
  1382  8856 8df58d                 sta ptr1+1
  1383                          !ifdef C64SCREEN {
  1384  8859 20748d                 jsr newline
  1385                          }
  1386  885c adf48d                 lda ptr1
  1387  885f aef58d                 ldx ptr1+1
  1388  8862 20b883                 jsr disphexword
  1389  8865 a920                   lda #' '
  1390  8867 20d2ff                 jsr charout
  1391  886a 4c0588                 jmp --
  1392                          ++
  1393                          !ifdef C64SCREEN {
  1394  886d 4c748d                 jmp newline
  1395                          } else {
  1396                              rts
  1397                          }
  1398                          
  1399                          store_assembly:
  1400  8870 aef894                 ldx opidx
  1401  8873 bd1390                 lda opcodes, x
  1402  8876 a000                   ldy #0
  1403  8878 20078e                 jsr sta_at_ptr3_y
  1404  887b c8                     iny
  1405  887c aefb94                 ldx size
  1406  887f e001                   cpx #1
  1407  8881 f01c                   beq ++
  1408  8883 e002               +   cpx #2
  1409  8885 d007                   bne +
  1410  8887 adff94                 lda tmp2
  1411  888a 20078e                 jsr sta_at_ptr3_y
  1412  888d 60                     rts
  1413  888e e003               +   cpx #3
  1414  8890 d00d                   bne ++
  1415  8892 adf48d                 lda ptr1
  1416  8895 20078e                 jsr sta_at_ptr3_y
  1417  8898 c8                     iny
  1418  8899 adf58d                 lda ptr1+1
  1419  889c 20078e                 jsr sta_at_ptr3_y
  1420  889f 60                 ++  rts
  1421                          
  1422                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1423  88a0 20878c                 jsr skipspaces
  1424  88a3 a200                   ldx #0
  1425  88a5 8efa94                 stx mode
  1426  88a8 201189                 jsr chkaccumulator
  1427  88ab f05e                   beq +
  1428  88ad eefa94                 inc mode
  1429  88b0 ccfd94                 cpy len ; chknone
  1430  88b3 f056                   beq +
  1431  88b5 eefa94                 inc mode
  1432  88b8 203789                 jsr chkimmediate
  1433  88bb f04e                   beq +
  1434  88bd eefa94                 inc mode
  1435  88c0 205e89                 jsr chkindirectx
  1436  88c3 f046                   beq +
  1437  88c5 eefa94                 inc mode
  1438  88c8 20a689                 jsr chkindirecty
  1439  88cb f03e                   beq +
  1440  88cd eefa94                 inc mode
  1441  88d0 20ee89                 jsr chkrelative
  1442  88d3 f036                   beq +
  1443  88d5 eefa94                 inc mode
  1444  88d8 20598a                 jsr chkzeropage
  1445  88db f02e                   beq +
  1446  88dd eefa94                 inc mode
  1447  88e0 20758a                 jsr chkzeropagex
  1448  88e3 f026                   beq +
  1449  88e5 eefa94                 inc mode
  1450  88e8 20a78a                 jsr chkzeropagey
  1451  88eb f01e                   beq +
  1452  88ed eefa94                 inc mode
  1453  88f0 20d98a                 jsr chkabsolute
  1454  88f3 f016                   beq +
  1455  88f5 eefa94                 inc mode
  1456  88f8 20f58a                 jsr chkabsolutex
  1457  88fb f00e                   beq +
  1458  88fd eefa94                 inc mode
  1459  8900 20278b                 jsr chkabsolutey
  1460  8903 f006                   beq +
  1461  8905 eefa94                 inc mode
  1462  8908 20598b                 jsr chkindirect
  1463  890b 08                 +   php ; save Z
  1464  890c adfa94                 lda mode
  1465  890f 28                     plp ; restore Z
  1466  8910 60                     rts
  1467                          
  1468                          chkaccumulator:
  1469  8911 ccfd94                 cpy len
  1470  8914 d014                   bne +
  1471  8916 adf994                 lda inidx
  1472  8919 c902                   cmp #2 ; ASL
  1473  891b f019                   beq ++
  1474  891d c920                   cmp #32 ; LSR
  1475  891f f015                   beq ++
  1476  8921 c927                   cmp #39 ; ROL
  1477  8923 f011                   beq ++
  1478  8925 c928                   cmp #40 ; ROR
  1479  8927 4c3689                 jmp ++
  1480  892a b90002             +   lda inputbuf, y
  1481  892d c941                   cmp #'A'
  1482  892f d005                   bne ++
  1483  8931 b90102                 lda inputbuf+1,y
  1484  8934 c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1485  8936 60                 ++  rts
  1486                          
  1487                          chkimmediate:
  1488  8937 8cfe94                 sty savepos
  1489  893a b90002                 lda inputbuf, y
  1490  893d c923                   cmp #'#'
  1491  893f d017                   bne ++
  1492  8941 c8                     iny
  1493  8942 20878c                 jsr skipspaces
  1494  8945 b90002                 lda inputbuf, y
  1495  8948 c924                   cmp #'$'
  1496  894a d001                   bne +
  1497  894c c8                     iny
  1498  894d 20dd8c             +   jsr chkhexbyte
  1499  8950 d006                   bne ++
  1500  8952 ccfd94             +   cpy len
  1501  8955 d001                   bne ++
  1502  8957 60                     rts
  1503  8958 acfe94             ++  ldy savepos
  1504  895b a201                   ldx #1 ; Z false (NE)
  1505  895d 60                     rts
  1506                          
  1507                          chkindirectx:
  1508  895e 8cfe94                 sty savepos
  1509  8961 b90002                 lda inputbuf, y
  1510  8964 c928                   cmp #'('
  1511  8966 d038                   bne ++
  1512  8968 c8                     iny
  1513  8969 20878c                 jsr skipspaces
  1514  896c b90002                 lda inputbuf, y
  1515  896f c924                   cmp #'$'
  1516  8971 d001                   bne +
  1517  8973 c8                     iny
  1518  8974 20dd8c             +   jsr chkhexbyte
  1519  8977 d027                   bne ++
  1520  8979 20878c                 jsr skipspaces
  1521  897c b90002                 lda inputbuf, y
  1522  897f c92c                   cmp #','
  1523  8981 d01d                   bne ++
  1524  8983 c8                     iny
  1525  8984 20878c                 jsr skipspaces
  1526  8987 b90002                 lda inputbuf, y
  1527  898a c958                   cmp #'X'
  1528  898c d012                   bne ++
  1529  898e c8                     iny
  1530  898f 20878c                 jsr skipspaces
  1531  8992 b90002                 lda inputbuf, y
  1532  8995 c929                   cmp #')'
  1533  8997 d007                   bne ++
  1534  8999 c8                     iny
  1535  899a ccfd94                 cpy len
  1536  899d d001                   bne ++
  1537  899f 60                     rts
  1538  89a0 acfe94             ++  ldy savepos
  1539  89a3 a201                   ldx #1 ; Z false (NE)
  1540  89a5 60                     rts
  1541                          
  1542                          chkindirecty:
  1543  89a6 8cfe94                 sty savepos
  1544  89a9 b90002                 lda inputbuf, y
  1545  89ac c928                   cmp #'('
  1546  89ae d038                   bne ++
  1547  89b0 c8                     iny
  1548  89b1 20878c                 jsr skipspaces
  1549  89b4 b90002                 lda inputbuf, y
  1550  89b7 c924                   cmp #'$'
  1551  89b9 d001                   bne +
  1552  89bb c8                     iny
  1553  89bc 20dd8c             +   jsr chkhexbyte
  1554  89bf d027                   bne ++
  1555  89c1 20878c                 jsr skipspaces
  1556  89c4 b90002                 lda inputbuf, y
  1557  89c7 c929                   cmp #')'
  1558  89c9 d01d                   bne ++
  1559  89cb c8                     iny
  1560  89cc 20878c                 jsr skipspaces
  1561  89cf b90002                 lda inputbuf, y
  1562  89d2 c92c                   cmp #','
  1563  89d4 d012                   bne ++
  1564  89d6 c8                     iny
  1565  89d7 20878c                 jsr skipspaces
  1566  89da b90002                 lda inputbuf, y
  1567  89dd c959                   cmp #'Y'
  1568  89df d007                   bne ++
  1569  89e1 c8                     iny
  1570  89e2 ccfd94                 cpy len
  1571  89e5 d001                   bne ++
  1572  89e7 60                     rts
  1573  89e8 acfe94             ++  ldy savepos
  1574  89eb a201                   ldx #1 ; Z false (NE)
  1575  89ed 60                     rts
  1576                          
  1577                          chkrelative:
  1578  89ee 8cfe94                 sty savepos
  1579  89f1 aef994                 ldx inidx
  1580  89f4 e006                   cpx #6 ; BIT
  1581  89f6 f01f                   beq ++
  1582  89f8 bd528e                 lda inst0, x
  1583  89fb c942                   cmp #'B'
  1584  89fd d018                   bne ++
  1585  89ff b90002                 lda inputbuf, y
  1586  8a02 c924                   cmp #'$'
  1587  8a04 d001                   bne +
  1588  8a06 c8                     iny
  1589  8a07 20d48c             +   jsr chkhexword
  1590  8a0a d00b                   bne ++
  1591  8a0c ccfd94                 cpy len
  1592  8a0f d006                   bne ++
  1593  8a11 201d8a                 jsr computeoffset
  1594  8a14 d001                   bne ++
  1595  8a16 60                     rts ; Z true (EQ)
  1596  8a17 acfe94             ++  ldy savepos
  1597  8a1a a201                   ldx #1 ; Z false (NE)
  1598  8a1c 60                     rts
  1599                          
  1600                          computeoffset:
  1601                          ;   compute next address
  1602  8a1d ad098e                 lda ptr3+1
  1603  8a20 8d0395                 sta ptr2+1
  1604  8a23 ad088e                 lda ptr3
  1605  8a26 18                     clc
  1606  8a27 6902                   adc #2
  1607  8a29 8d0295                 sta ptr2
  1608  8a2c 9003                   bcc +
  1609  8a2e ee0395                 inc ptr2+1
  1610                          +  ; subtract argument
  1611  8a31 38                     sec
  1612  8a32 adf48d                 lda ptr1
  1613  8a35 ed0295                 sbc ptr2
  1614  8a38 8dff94                 sta tmp2
  1615  8a3b adf58d                 lda ptr1+1
  1616  8a3e ed0395                 sbc ptr2+1
  1617  8a41 f00b                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1618  8a43 c9ff                   cmp #$FF
  1619  8a45 d00f                   bne failedoffset ; 0 and FF were only options so fail
  1620                              ; chkeck negative offset
  1621  8a47 adff94                 lda tmp2
  1622  8a4a 3007                   bmi successoffset ; branch if signed byte is negative
  1623  8a4c 1008                   bpl failedoffset ; otherwise fail
  1624                          chkoffsetto127:
  1625  8a4e adff94                 lda tmp2
  1626  8a51 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1627                          successoffset:
  1628  8a53 a900                   lda #0 ; Z true (EQ)
  1629  8a55 60                     rts
  1630                          failedoffset:
  1631  8a56 a901                   lda #1 ; Z false (NE)
  1632  8a58 60                     rts
  1633                          
  1634                          chkzeropage:
  1635  8a59 8cfe94                 sty savepos
  1636  8a5c b90002                 lda inputbuf, y
  1637  8a5f c924                   cmp #'$'
  1638  8a61 d001                   bne +
  1639  8a63 c8                     iny
  1640  8a64 20dd8c             +   jsr chkhexbyte
  1641  8a67 d006                   bne ++
  1642  8a69 ccfd94                 cpy len
  1643  8a6c d001                   bne ++
  1644  8a6e 60                     rts ; Z true (EQ)
  1645  8a6f acfe94             ++  ldy savepos
  1646  8a72 a201                   ldx #1 ; Z false (NE)
  1647  8a74 60                     rts
  1648                          
  1649                          chkzeropagex:
  1650  8a75 8cfe94                 sty savepos
  1651  8a78 b90002                 lda inputbuf, y
  1652  8a7b c924                   cmp #'$'
  1653  8a7d d001                   bne +
  1654  8a7f c8                     iny
  1655  8a80 20dd8c             +   jsr chkhexbyte
  1656  8a83 d01c                   bne ++
  1657  8a85 20878c                 jsr skipspaces
  1658  8a88 b90002                 lda inputbuf, y
  1659  8a8b c92c                   cmp #','
  1660  8a8d d012                   bne ++
  1661  8a8f c8                     iny
  1662  8a90 20878c                 jsr skipspaces
  1663  8a93 b90002                 lda inputbuf, y
  1664  8a96 c958                   cmp #'X'
  1665  8a98 d007                   bne ++
  1666  8a9a c8                     iny
  1667  8a9b ccfd94                 cpy len
  1668  8a9e d001                   bne ++
  1669  8aa0 60                     rts ; Z true (EQ)
  1670  8aa1 acfe94             ++  ldy savepos
  1671  8aa4 a201                   ldx #1 ; Z false (NE)
  1672  8aa6 60                     rts
  1673                          
  1674                          chkzeropagey:
  1675  8aa7 8cfe94                 sty savepos
  1676  8aaa b90002                 lda inputbuf, y
  1677  8aad c924                   cmp #'$'
  1678  8aaf d001                   bne +
  1679  8ab1 c8                     iny
  1680  8ab2 20dd8c             +   jsr chkhexbyte
  1681  8ab5 d01c                   bne ++
  1682  8ab7 20878c                 jsr skipspaces
  1683  8aba b90002                 lda inputbuf, y
  1684  8abd c92c                   cmp #','
  1685  8abf d012                   bne ++
  1686  8ac1 c8                     iny
  1687  8ac2 20878c                 jsr skipspaces
  1688  8ac5 b90002                 lda inputbuf, y
  1689  8ac8 c959                   cmp #'Y'
  1690  8aca d007                   bne ++
  1691  8acc c8                     iny
  1692  8acd ccfd94                 cpy len
  1693  8ad0 d001                   bne ++
  1694  8ad2 60                     rts ; Z true (EQ)
  1695  8ad3 acfe94             ++  ldy savepos
  1696  8ad6 a201                   ldx #1 ; Z false (NE)
  1697  8ad8 60                     rts
  1698                          
  1699                          chkabsolute:
  1700  8ad9 8cfe94                 sty savepos
  1701  8adc b90002                 lda inputbuf, y
  1702  8adf c924                   cmp #'$'
  1703  8ae1 d001                   bne +
  1704  8ae3 c8                     iny
  1705  8ae4 20d48c             +   jsr chkhexword
  1706  8ae7 d006                   bne ++
  1707  8ae9 ccfd94                 cpy len
  1708  8aec d001                   bne ++
  1709  8aee 60                     rts ; Z true (EQ)
  1710  8aef acfe94             ++  ldy savepos
  1711  8af2 a201                   ldx #1 ; Z false (NE)
  1712  8af4 60                     rts
  1713                          
  1714                          chkabsolutex:
  1715  8af5 8cfe94                 sty savepos
  1716  8af8 b90002                 lda inputbuf, y
  1717  8afb c924                   cmp #'$'
  1718  8afd d001                   bne +
  1719  8aff c8                     iny
  1720  8b00 20d48c             +   jsr chkhexword
  1721  8b03 d01c                   bne ++
  1722  8b05 20878c                 jsr skipspaces
  1723  8b08 b90002                 lda inputbuf, y
  1724  8b0b c92c                   cmp #','
  1725  8b0d d012                   bne ++
  1726  8b0f c8                     iny
  1727  8b10 20878c                 jsr skipspaces
  1728  8b13 b90002                 lda inputbuf, y
  1729  8b16 c958                   cmp #'X'
  1730  8b18 d007                   bne ++
  1731  8b1a c8                     iny
  1732  8b1b ccfd94                 cpy len
  1733  8b1e d001                   bne ++
  1734  8b20 60                     rts ; Z true (EQ)
  1735  8b21 acfe94             ++  ldy savepos
  1736  8b24 a201                   ldx #1 ; Z false (NE)
  1737  8b26 60                     rts
  1738                          
  1739                          chkabsolutey:
  1740  8b27 8cfe94                 sty savepos
  1741  8b2a b90002                 lda inputbuf, y
  1742  8b2d c924                   cmp #'$'
  1743  8b2f d001                   bne +
  1744  8b31 c8                     iny
  1745  8b32 20d48c             +   jsr chkhexword
  1746  8b35 d01c                   bne ++
  1747  8b37 20878c                 jsr skipspaces
  1748  8b3a b90002                 lda inputbuf, y
  1749  8b3d c92c                   cmp #','
  1750  8b3f d012                   bne ++
  1751  8b41 c8                     iny
  1752  8b42 20878c                 jsr skipspaces
  1753  8b45 b90002                 lda inputbuf, y
  1754  8b48 c959                   cmp #'Y'
  1755  8b4a d007                   bne ++
  1756  8b4c c8                     iny
  1757  8b4d ccfd94                 cpy len
  1758  8b50 d001                   bne ++
  1759  8b52 60                     rts ; Z true (EQ)
  1760  8b53 acfe94             ++  ldy savepos
  1761  8b56 a201                   ldx #1 ; Z false (NE)
  1762  8b58 60                     rts
  1763                          
  1764                          chkindirect:
  1765  8b59 8cfe94                 sty savepos
  1766  8b5c b90002                 lda inputbuf, y
  1767  8b5f c928                   cmp #'('
  1768  8b61 d022                   bne ++
  1769  8b63 c8                     iny
  1770  8b64 20878c                 jsr skipspaces
  1771  8b67 b90002                 lda inputbuf, y
  1772  8b6a c924                   cmp #'$'
  1773  8b6c d001                   bne +
  1774  8b6e c8                     iny
  1775  8b6f 20d48c             +   jsr chkhexword
  1776  8b72 d011                   bne ++
  1777  8b74 20878c                 jsr skipspaces
  1778  8b77 b90002                 lda inputbuf, y
  1779  8b7a c929                   cmp #')'
  1780  8b7c d007                   bne ++
  1781  8b7e c8                     iny
  1782  8b7f ccfd94                 cpy len
  1783  8b82 d001                   bne ++
  1784  8b84 60                     rts ; Z true (EQ)
  1785  8b85 acfe94             ++  ldy savepos
  1786  8b88 a201                   ldx #1 ; Z false (NE)
  1787  8b8a 60                     rts
  1788                          
  1789                          chkinstruction:
  1790  8b8b ccfd94                 cpy len
  1791  8b8e f02d                   beq ++
  1792  8b90 8c0195                 sty tmp
  1793  8b93 a237                   ldx #(ninst-1)
  1794  8b95 b90002             -   lda inputbuf,y
  1795  8b98 dd528e                 cmp inst0,x
  1796  8b9b d01a                   bne +
  1797  8b9d c8                     iny
  1798  8b9e b90002                 lda inputbuf,y
  1799  8ba1 dd8a8e                 cmp inst1,x
  1800  8ba4 d011                   bne +
  1801  8ba6 c8                     iny
  1802  8ba7 b90002                 lda inputbuf,y
  1803  8baa ddc28e                 cmp inst2,x
  1804  8bad d008                   bne +
  1805  8baf c8                     iny
  1806  8bb0 8a                     txa
  1807  8bb1 8df994                 sta inidx
  1808  8bb4 a200                   ldx #0
  1809  8bb6 60                     rts
  1810  8bb7 ac0195             +   ldy tmp
  1811  8bba ca                     dex
  1812  8bbb 10d8                   bpl -
  1813  8bbd a201               ++  ldx #1 ; Z false (NE)
  1814  8bbf 60                     rts
  1815                          
  1816                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1817                              ; and allows mode promotion
  1818  8bc0 20e98b                 jsr find_inst_and_mode2
  1819  8bc3 f023                   beq ++
  1820  8bc5 adfa94                 lda mode
  1821  8bc8 c906                   cmp #6
  1822  8bca 901c                   bcc ++
  1823  8bcc c90a                   cmp #10
  1824  8bce b016                   bcs +
  1825  8bd0 6903                   adc #3
  1826  8bd2 8dfa94                 sta mode ; promote ZeroPage modes to Absolute modes
  1827  8bd5 20e98b                 jsr find_inst_and_mode2 ; try again once
  1828  8bd8 d00e                   bne ++
  1829  8bda adff94                 lda tmp2
  1830  8bdd 8df48d                 sta ptr1
  1831  8be0 a900                   lda #0
  1832  8be2 8df58d                 sta ptr1+1
  1833  8be5 60                     rts ; Z true (EQ)
  1834  8be6 a201               +   ldx #1 ; Z false (NE)
  1835  8be8 60                 ++  rts
  1836                          
  1837                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1838  8be9 a296                   ldx #nopcodes-1
  1839  8beb bdaa90             -   lda instidx, x
  1840  8bee bc4191                 ldy modeidx, x
  1841  8bf1 cdf994                 cmp inidx
  1842  8bf4 d00e                   bne +
  1843  8bf6 ccfa94                 cpy mode
  1844  8bf9 d009                   bne +
  1845  8bfb 8ef894                 stx opidx
  1846  8bfe 201382                 jsr getsize
  1847  8c01 a200                   ldx #0 ; Z true (EQ)
  1848  8c03 60                     rts
  1849  8c04 ca                 +   dex
  1850  8c05 e0ff                   cpx #$ff
  1851  8c07 d0e2                   bne -
  1852  8c09 a201                   ldx #1 ; Z false (NE)
  1853  8c0b 60                     rts
  1854                          
  1855                          executerun:
  1856  8c0c 68                     pla ; remove low byte return address
  1857  8c0d 68                     pla ; return high byte return address
  1858  8c0e 68                     pla ; again, we're really not returning
  1859  8c0f 68                     pla ; again, we're really not returning
  1860  8c10 20748d                 jsr newline
  1861                          !ifndef MINIMUM {
  1862                          ; any C64
  1863  8c13 205980                 jsr install_nmi64
  1864                          }
  1865                          +   ; restore registers
  1866  8c16 ae0c95                 ldx registerSP
  1867  8c19 9a                     txs
  1868  8c1a ad0d95                 lda registerSR
  1869  8c1d 48                     pha
  1870  8c1e ad0995                 lda registerA
  1871  8c21 ae0a95                 ldx registerX
  1872  8c24 ac0b95                 ldy registerY
  1873  8c27 28                     plp
  1874  8c28 6cf48d                 jmp (ptr1)
  1875                          
  1876                          chkcontinuedis:
  1877  8c2b b90002                 lda inputbuf,y
  1878  8c2e c944                   cmp #'D'
  1879  8c30 d00a                   bne +
  1880  8c32 b90102                 lda inputbuf+1,y
  1881  8c35 c90d                   cmp #13
  1882  8c37 d003                   bne +
  1883  8c39 c8                     iny
  1884  8c3a a200                   ldx #0 ; restore Z set
  1885  8c3c 60                 +   rts
  1886                          
  1887                          chkcontinueasm:
  1888  8c3d b90002                 lda inputbuf,y
  1889  8c40 c941                   cmp #'A'
  1890  8c42 d00a                   bne +
  1891  8c44 b90102                 lda inputbuf+1,y
  1892  8c47 c90d                   cmp #13
  1893  8c49 d003                   bne +
  1894  8c4b c8                     iny
  1895  8c4c a200                   ldx #0 ; restore Z set
  1896  8c4e 60                 +   rts
  1897                          
  1898                          executedisassemble:
  1899  8c4f 68                     pla ; remove low byte return address
  1900  8c50 68                     pla ; return high byte return address
  1901  8c51 20748d                 jsr newline
  1902  8c54 4cac81                 jmp disassemble
  1903                          
  1904                          reportnotimplemented:
  1905  8c57 a995                   lda #<notimplemented
  1906  8c59 a292                   ldx #>notimplemented
  1907  8c5b 4c4284                 jmp strout
  1908                          
  1909                          reporterr:
  1910  8c5e c000                   cpy #0
  1911  8c60 f008                   beq +
  1912  8c62 a920                   lda #' '
  1913  8c64 20d2ff             -   jsr charout
  1914  8c67 88                     dey
  1915  8c68 d0fa                   bne -
  1916  8c6a a93f               +   lda #'?'
  1917  8c6c 20d2ff                 jsr charout
  1918  8c6f a90d                   lda #13
  1919  8c71 20d2ff                 jsr charout
  1920  8c74 60                     rts
  1921                          
  1922                          chkspace:
  1923  8c75 b90002                 lda inputbuf, y
  1924                          !ifndef MINIMUM {
  1925                              ; skip SHIFT-SPACES too on Commodore
  1926  8c78 c9a0                   cmp #$A0
  1927  8c7a f004                   beq +
  1928                          }
  1929  8c7c c920                   cmp #$20
  1930  8c7e d006                   bne ++
  1931  8c80 c8                 +   iny
  1932  8c81 20878c                 jsr skipspaces
  1933  8c84 a900                   lda #0 ; set Z
  1934  8c86 60                 ++  rts
  1935                          
  1936                          skipspaces:
  1937  8c87 b90002             -   lda inputbuf, y
  1938                          !ifndef MINIMUM {
  1939                              ; skip SHIFT-SPACES too on Commodore
  1940  8c8a c9a0                   cmp #$A0
  1941  8c8c f004                   beq +
  1942                          }
  1943  8c8e c920                   cmp #$20
  1944  8c90 d003                   bne ++
  1945  8c92 c8                 +   iny
  1946  8c93 d0f2                   bne -
  1947  8c95 60                 ++  rts
  1948                          
  1949                          chkdot:
  1950  8c96 b90002                 lda inputbuf, y
  1951  8c99 c92e                   cmp #'.'
  1952  8c9b d003                   bne +
  1953  8c9d c8                     iny
  1954  8c9e a900                   lda #0 ; Z true (EQ)
  1955  8ca0 60                 +   rts
  1956                          
  1957                          chkhelp:
  1958  8ca1 b90002                 lda inputbuf, y
  1959  8ca4 c93f                   cmp #'?'
  1960  8ca6 d003                   bne +
  1961  8ca8 c8                     iny
  1962  8ca9 a900                   lda #0 ; Z true (EQ)
  1963  8cab 60                 +   rts
  1964                          
  1965                          chkcolon:
  1966  8cac b90002                 lda inputbuf, y
  1967  8caf c93a                   cmp #':'
  1968  8cb1 d003                   bne +
  1969  8cb3 c8                     iny
  1970  8cb4 a900                   lda #0 ; Z true (EQ)
  1971  8cb6 60                 +   rts
  1972                          
  1973                          chkhexbyteofsequence:
  1974  8cb7 200184                 jsr inputhexbyte
  1975  8cba 20d78c                 jsr +
  1976  8cbd d014                   bne ++ ; Z false (NE) if failed checks
  1977  8cbf ccfd94                 cpy len
  1978  8cc2 f00f                   beq ++ ; Z true (EQ) if end of input
  1979  8cc4 8d0195                 sta tmp
  1980  8cc7 b90002                 lda inputbuf,y
  1981  8cca c920                   cmp #$20
  1982  8ccc d005                   bne ++ ; Z false (NE) if not space
  1983  8cce ad0195                 lda tmp
  1984  8cd1 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1985  8cd3 60                 ++  rts
  1986                          
  1987                          chkhexword:
  1988                          chkhexaddr1:
  1989  8cd4 20d483                 jsr inputhexword
  1990  8cd7 a200               +   ldx #0 ; Z true (EQ)
  1991  8cd9 9001                   bcc +
  1992  8cdb e8                     inx ; Z false (NE)
  1993  8cdc 60                 +   rts
  1994                          
  1995                          chkhexbyte:
  1996  8cdd 98                     tya
  1997  8cde 48                     pha ; save y
  1998  8cdf 200184                 jsr inputhexbyte
  1999  8ce2 b00f                   bcs +
  2000  8ce4 8dff94                 sta tmp2
  2001  8ce7 202484                 jsr inputhexnybble
  2002  8cea 9007                   bcc +
  2003  8cec 68                     pla ; throw away saved y
  2004  8ced adff94                 lda tmp2
  2005  8cf0 a200                   ldx #0 ; Z true (EQ)
  2006  8cf2 60                     rts
  2007  8cf3 68                 +   pla
  2008  8cf4 a8                     tay ; won't be zero, so Z false (NE)
  2009  8cf5 60                     rts
  2010                          
  2011                          chkhexaddr2:
  2012  8cf6 adf48d                 lda ptr1
  2013  8cf9 48                     pha
  2014  8cfa adf58d                 lda ptr1+1
  2015  8cfd 48                     pha
  2016  8cfe 20d48c                 jsr chkhexaddr1
  2017  8d01 f005                   beq +
  2018  8d03 68                     pla
  2019  8d04 68                     pla
  2020  8d05 a901                   lda #1 ; Z false (NE)
  2021  8d07 60                     rts
  2022  8d08 adf48d             +   lda ptr1
  2023  8d0b 8d0295                 sta ptr2
  2024  8d0e adf58d                 lda ptr1+1
  2025  8d11 8d0395                 sta ptr2+1
  2026  8d14 68                     pla
  2027  8d15 8df58d                 sta ptr1+1
  2028  8d18 68                     pla
  2029  8d19 8df48d                 sta ptr1
  2030  8d1c a900                   lda #0 ; Z true (EQ)
  2031  8d1e 60                     rts
  2032                          
  2033                          chkbinbyte:
  2034  8d1f a208                   ldx #8
  2035  8d21 202f8d             -   jsr chkbindigit
  2036  8d24 d008                   bne +
  2037  8d26 ca                     dex
  2038  8d27 d0f8                   bne -
  2039  8d29 08                     php ; save Z true
  2040  8d2a adff94                 lda tmp2
  2041  8d2d 28                     plp ; restore Z true
  2042  8d2e 60                 +   rts
  2043                          
  2044                          chkbindigit:
  2045  8d2f b90002                 lda inputbuf, y
  2046  8d32 38                     sec
  2047  8d33 e930                   sbc #$30
  2048  8d35 900b                   bcc +
  2049  8d37 c902                   cmp #$02
  2050  8d39 b007                   bcs +
  2051  8d3b 4a                     lsr ; rotate bit value into C
  2052  8d3c 2eff94                 rol tmp2 ; rotate bit value into tmp2
  2053  8d3f c8                     iny ; advance in buffer
  2054  8d40 a900                   lda #0 ; set Z
  2055  8d42 60                 +   rts
  2056                          
  2057                          chkaddr1cmd:
  2058  8d43 b90002                 lda inputbuf, y
  2059  8d46 c941               +   cmp #'A'
  2060  8d48 d00b                   bne +
  2061  8d4a be0102                 ldx inputbuf+1, y
  2062  8d4d e00d                   cpx #13
  2063  8d4f d004                   bne +
  2064  8d51 c8                     iny
  2065  8d52 4cfb87                 jmp executeassemble
  2066  8d55 c944               +   cmp #'D'
  2067  8d57 d00b                   bne +
  2068  8d59 be0102                 ldx inputbuf+1, y
  2069  8d5c e00d                   cpx #13
  2070  8d5e d004                   bne +
  2071  8d60 c8                     iny
  2072  8d61 4c4f8c                 jmp executedisassemble
  2073  8d64 c952               +   cmp #'R'
  2074  8d66 d00b                   bne +
  2075  8d68 be0102                 ldx inputbuf+1, y
  2076  8d6b e00d                   cpx #13
  2077  8d6d d004                   bne +
  2078  8d6f c8                     iny
  2079  8d70 4c0c8c                 jmp executerun
  2080  8d73 60                 +   rts
  2081                          
  2082                          newline:
  2083  8d74 a90d                   lda #13
  2084  8d76 4cd2ff                 jmp charout
  2085                          
  2086                          space:
  2087  8d79 a920                   lda #32
  2088  8d7b 4cd2ff                 jmp charout
  2089                          
  2090                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  2091                          ;     jsr $ffd2
  2092                          ;     pha
  2093                          ; -   lda $d011
  2094                          ;     bpl -
  2095                          ; -   lda $d011
  2096                          ;     bmi -
  2097                          ; -   lda $d011
  2098                          ;     bpl -
  2099                          ; -   lda $d011
  2100                          ;     bmi -
  2101                          ;     pla
  2102                          ;     rts
  2103                          
  2104                          save_registers:
  2105  8d7e 08                     php
  2106  8d7f 8d0995                 sta registerA
  2107  8d82 8e0a95                 stx registerX
  2108  8d85 8c0b95                 sty registerY
  2109  8d88 68                     pla
  2110  8d89 8d0d95                 sta registerSR
  2111  8d8c ba                     tsx
  2112  8d8d 8e0c95                 stx registerSP
  2113  8d90 4c958d                 jmp +
  2114                          
  2115                          execute_display_registers:
  2116  8d93 68                     pla ; remove return address
  2117  8d94 68                     pla
  2118                          +
  2119                              ; need some normality
  2120  8d95 58                     cli
  2121  8d96 d8                     cld
  2122                          
  2123  8d97 20748d                 jsr newline
  2124  8d9a 20a38d                 jsr display_registers
  2125                          !ifndef MINIMUM {
  2126                              ; any C64
  2127  8d9d 207480                 jsr uninstall_nmi64
  2128                          }
  2129  8da0 4c5080                 jmp input_loop
  2130                          
  2131                          ; PC   NV-BDIZC .A .X .Y .S
  2132                          ; 1234 10111011 01 02 03 FF
  2133                          display_registers:
  2134  8da3 a9db                   lda #<reg_header
  2135  8da5 a294                   ldx #>reg_header
  2136  8da7 204284                 jsr strout
  2137  8daa ad0e95                 lda registerPC
  2138  8dad ae0f95                 ldx registerPC+1
  2139  8db0 20b883                 jsr disphexword
  2140  8db3 20798d                 jsr space
  2141  8db6 ad0d95                 lda registerSR
  2142  8db9 20a383                 jsr dispbinbyte
  2143  8dbc 20798d                 jsr space
  2144  8dbf ad0995                 lda registerA
  2145  8dc2 20be83                 jsr disphexbyte
  2146  8dc5 20798d                 jsr space
  2147  8dc8 ad0a95                 lda registerX
  2148  8dcb 20be83                 jsr disphexbyte
  2149  8dce 20798d                 jsr space
  2150  8dd1 ad0b95                 lda registerY
  2151  8dd4 20be83                 jsr disphexbyte
  2152  8dd7 20798d                 jsr space
  2153  8dda ad0c95                 lda registerSP
  2154  8ddd 20be83                 jsr disphexbyte
  2155  8de0 4c748d                 jmp newline
  2156                          
  2157                          !ifdef MINIMUM {
  2158                          
  2159                          lda_at_ptr1_y:
  2160                              lda (ptr1),y
  2161                              rts
  2162                          
  2163                          sta_at_ptr1_y:
  2164                              sta (ptr1),y
  2165                              rts
  2166                          
  2167                          lda_at_ptr3_y:
  2168                              lda (ptr3),y
  2169                              rts
  2170                          
  2171                          sta_at_ptr3_y:
  2172                              sta (ptr3),y
  2173                              rts
  2174                          
  2175                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2176                          ;; MC6850
  2177                          UART_DATA=$FFF8
  2178                          UART_STCR=$FFF9
  2179                          
  2180                          UART_INIT:
  2181                          	ldx #0b00000111 ; 11=reset device
  2182                          	stx UART_STCR
  2183                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  2184                          	sta UART_STCR
  2185                          	rts
  2186                          UART_OUT:
  2187                          	pha
  2188                          -	lda UART_STCR
  2189                          	and #2
  2190                          	beq - ; branch if TDRE=0, not finished transmitting
  2191                          	pla
  2192                          	pha
  2193                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  2194                          	sta UART_DATA
  2195                          	pla
  2196                          	rts
  2197                          UART_IN:
  2198                          -	lda UART_STCR
  2199                          	and #1
  2200                          	beq - ; branch if TDRF=0, not received
  2201                          	lda UART_DATA
  2202                          	; software "CAPS LOCK" because wozmon expects only uppercase
  2203                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  2204                          	beq BREAK
  2205                              ; force lowercase alphabet to uppercase
  2206                              cmp #'a'
  2207                          	bcc +
  2208                          	cmp #'z'+1
  2209                          	bcs +
  2210                          	eor #$20
  2211                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  2212                           	rts
  2213                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  2214                          	pha ; save A
  2215                          	lda UART_STCR
  2216                          	lsr ; put rightmost bit in carry
  2217                          	pla ; restore A affects flags
  2218                          	ror ; move carry to left bit, right bit to carry
  2219                          	php ; push processor to save N
  2220                          	rol ; restore A affects flags
  2221                          	plp ; pull processor to restore N
  2222                          	rts
  2223                          
  2224                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2225                          ; Processor start and interrupts
  2226                          
  2227                          NMI: ; unused on minimum (no source of interrupt)
  2228                              rti
  2229                          
  2230                          IRQ:
  2231                              pha
  2232                              php
  2233                              pla
  2234                              and #$10
  2235                              beq ++ ; not break
  2236                          ;BREAK HANDLER
  2237                              pla
  2238                              sta registerA
  2239                              pla
  2240                              sta registerSR
  2241                              pla
  2242                              cld
  2243                              sec
  2244                              sbc #2
  2245                              sta registerPC
  2246                              pla
  2247                              sbc #0
  2248                              sta registerPC+1
  2249                              lda #>save_registers
  2250                              pha
  2251                              lda #<save_registers
  2252                              pha
  2253                              lda registerSR
  2254                              pha
  2255                              lda registerA
  2256                              pha
  2257                          ++  pla
  2258                              rti
  2259                          
  2260                          BREAK:
  2261                              jmp RESET
  2262                          
  2263                          RESET:
  2264                              cld
  2265                              ldx #$FF
  2266                              txs
  2267                              jsr JUART_INIT
  2268                              cli
  2269                              jmp start
  2270                          ; !ifdef MINIMUM
  2271                          } else { ; not MINIMUM
  2272                          
  2273                          ptr1 = sta_at_ptr1_y + 1 ; and + 2
  2274                          
  2275                          lda_at_ptr1_y:
  2276  8de3 adf48d                 lda ptr1
  2277  8de6 8df08d                 sta lda_ptr1_op+1
  2278  8de9 adf58d                 lda ptr1+1
  2279  8dec 8df18d                 sta lda_ptr1_op+2
  2280                          lda_ptr1_op:
  2281  8def b9ffff                 lda $ffff, y
  2282  8df2 60                     rts
  2283                          
  2284                          sta_at_ptr1_y:
  2285  8df3 99ffff                 sta $ffff, y
  2286  8df6 60                     rts
  2287                          
  2288                          ptr3 = sta_at_ptr3_y + 1 ; and + 2
  2289                          
  2290                          lda_at_ptr3_y:
  2291  8df7 ad088e                 lda ptr3
  2292  8dfa 8d048e                 sta lda_ptr3_op+1
  2293  8dfd ad098e                 lda ptr3+1
  2294  8e00 8d058e                 sta lda_ptr3_op+2
  2295                          lda_ptr3_op:
  2296  8e03 b9ffff                 lda $ffff, y
  2297  8e06 60                     rts
  2298                          
  2299                          sta_at_ptr3_y:
  2300  8e07 99ffff                 sta $ffff, y
  2301  8e0a 60                     rts
  2302                          
  2303                          nmi64:
  2304  8e0b 78                     sei
  2305  8e0c 8d0995                 sta registerA
  2306  8e0f 68                     pla
  2307  8e10 8d0d95                 sta registerSR
  2308  8e13 68                     pla
  2309  8e14 d8                     cld
  2310  8e15 8d0e95                 sta registerPC
  2311  8e18 68                     pla
  2312  8e19 8d0f95                 sta registerPC+1
  2313  8e1c a98d                   lda #>save_registers
  2314  8e1e 48                     pha
  2315  8e1f a97e                   lda #<save_registers
  2316  8e21 48                     pha
  2317  8e22 ad0d95                 lda registerSR
  2318  8e25 48                     pha
  2319  8e26 ad0995                 lda registerA
  2320  8e29 40                     rti
  2321                          
  2322                          brk64:
  2323  8e2a 68                     pla
  2324  8e2b a8                     tay
  2325  8e2c 68                     pla
  2326  8e2d aa                     tax
  2327  8e2e 68                     pla
  2328  8e2f 8d0995                 sta registerA
  2329  8e32 68                     pla
  2330  8e33 8d0d95                 sta registerSR
  2331  8e36 68                     pla
  2332  8e37 d8                     cld
  2333  8e38 38                     sec
  2334  8e39 e902                   sbc #2
  2335  8e3b 8d0e95                 sta registerPC
  2336  8e3e 68                     pla
  2337  8e3f e900                   sbc #0
  2338  8e41 8d0f95                 sta registerPC+1
  2339  8e44 a98d                   lda #>save_registers
  2340  8e46 48                     pha
  2341  8e47 a97e                   lda #<save_registers
  2342  8e49 48                     pha
  2343  8e4a ad0d95                 lda registerSR
  2344  8e4d 48                     pha
  2345  8e4e ad0995                 lda registerA
  2346  8e51 40                     rti
  2347                          }
  2348                          
  2349                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2350                          ; data
  2351                          
  2352                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  2353                          ninst = 56
  2354  8e52 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  2355  8e8a 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  2356  8ec2 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  2357                          
  2358                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  2359                          mode_jmptable:
  2360  8efa a882               !word dispModeAcc-1; 0 Accumulator 1
  2361  8efc ad82               !word dispModeNone-1 ; 1 None 1
  2362  8efe ae82               !word dispModeImm-1 ; 2 Immediate 2
  2363  8f00 c082               !word dispModeIndX-1 ; 3 IndirectX 2
  2364  8f02 e182               !word dispModeIndY-1 ; 4 IndirectY 2
  2365  8f04 0283               !word dispModeRel-1 ; 5 Relative 2
  2366  8f06 b382               !word dispModeZP-1 ; 6 ZeroPage 2
  2367  8f08 4d83               !word dispModeZPX-1 ; 7 ZeroPageX 2
  2368  8f0a 5a83               !word dispModeZPY-1 ; 8 ZeroPageY 2
  2369  8f0c 6783               !word dispModeAbs-1 ; 9 Absolute 3
  2370  8f0e 7b83               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  2371  8f10 8883               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  2372  8f12 9583               !word dispModeInd-1 ; 12 Indirect 3
  2373                          
  2374                          nmodes = 13
  2375                          
  2376                          mode_sorted:
  2377  8f14 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  2378                          
  2379                          !ifdef MINIMUM {
  2380                          mode_0: !text "Accumulator", 0, "A", 0
  2381                          mode_1: !text "None", 0, 8, 0
  2382                          mode_2: !text "Immediate", 0, "#$12", 0
  2383                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  2384                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  2385                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  2386                          mode_6: !text "ZeroPage", 0, "$12", 0
  2387                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  2388                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  2389                          mode_9: !text "Absolute", 0, "$1234", 0
  2390                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  2391                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  2392                          mode_12: !text "Indirect", 0, "($1234)", 0
  2393                          } else {
  2394  8f21 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2395  8f2f 4e4f4e45001400     mode_1: !text "NONE", 0, 20, 0
  2396  8f36 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2397  8f45 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2398  8f57 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2399  8f69 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2400  8f88 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2401  8f95 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2402  8fa5 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2403  8fb5 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2404  8fc4 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2405  8fd6 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2406  8fe8 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2407                          }
  2408                          
  2409                          modes: ; table for easily displaying each mode_example
  2410  8ff9 218f               !word mode_0
  2411  8ffb 2f8f               !word mode_1
  2412  8ffd 368f               !word mode_2
  2413  8fff 458f               !word mode_3
  2414  9001 578f               !word mode_4
  2415  9003 698f               !word mode_5
  2416  9005 888f               !word mode_6
  2417  9007 958f               !word mode_7
  2418  9009 a58f               !word mode_8
  2419  900b b58f               !word mode_9
  2420  900d c48f               !word mode_10
  2421  900f d68f               !word mode_11
  2422  9011 e88f               !word mode_12
  2423                          
  2424                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2425                          nopcodes = 151
  2426  9013 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2427  90aa 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2428  9141 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2429                          
  2430                          copyright
  2431                          ;                  1         2         3         4
  2432                          ;         1234567890123456789012345678901234567890
  2433  91d8 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2434                          !ifdef C64TERMINAL {
  2435                              !text 13, "(TERMINAL VERSION)"
  2436                          }
  2437  91f8 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2438  921e 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2439  9235 00                 !text 0
  2440                          
  2441                          firsthelp
  2442                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2443  9236 0d0d               !text 13, 13
  2444  9238 54595045203f2046...!text "TYPE ? FOR HELP"
  2445  9247 0d00               !text 13, 0
  2446                          
  2447                          !ifndef MINIMUM {
  2448                          ; C64 only
  2449                          extra_help:
  2450  9249 5820202020202020...    !text "X           (EXIT MONITOR)", 13
  2451  9264 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S  (SAVE)", 13
  2452  9286 00                     !text 0
  2453                          
  2454                          !ifdef C64SCREEN {
  2455  9287 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  2456  928e 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  2457                          }
  2458                          
  2459                          }
  2460                          
  2461  9295 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2462                          
  2463                          generalhelp
  2464  92a6 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2465  92cc 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2466  92f1 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2467  9314 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2468  933c 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2469  9358 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2470  9378 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2471  939a 00                 !text 0
  2472                          generalhelp2
  2473  939b 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2474  93c0 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2475  93dc 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2476  93fb 3f41202020202020...!text "?A          (LIST 6502 INSTRUCTIONS)", 13
  2477  9420 3f41444320202020...!text "?ADC        (/ADC/ ADDRESSING MODES)", 13
  2478  9445 3f4d4f4445202020...!text "?MODE       (ADDRESSING MODES)", 13
  2479  9464 00                 !text 0
  2480                          generalhelp3
  2481  9465 3f2e202020202020...!text "?.          (DISPLAY REGISTERS)", 13
  2482  9485 2e31323334202020...!text ".1234       (MODIFY PC,FLAGS,REGISTERS)", 13
  2483  94ad 2e413a3031202020...!text ".A:01       (MODIFY REGISTER A,X,Y,S,P)", 13
  2484  94d5 00                 !text 0
  2485                          
  2486  94d6 4d4f444500         modes_keyword !text "MODE", 0
  2487                          
  2488  94db 2050432020204e56...reg_header !text " PC   NV-BDIZC .A .X .Y .S", 13, '.', 0
  2489                          
  2490                          !ifdef MINIMUM {
  2491                          registerA = $dff9
  2492                          registerX = $dffa
  2493                          registerY = $dffb
  2494                          registerSP = $dffc
  2495                          registerSR = $dffd
  2496                          registerPC = $dffe;/f
  2497                          } else {
  2498  94f8 00                 opidx !byte 0
  2499  94f9 00                 inidx !byte 0
  2500  94fa 00                 mode !byte 0
  2501  94fb 00                 size !byte 0
  2502  94fc 00                 count !byte 0
  2503  94fd 00                 len !byte 0
  2504  94fe 00                 savepos !byte 0
  2505  94ff 00                 tmp2 !byte 0
  2506  9500 00                 flag !byte 0
  2507  9501 00                 tmp !byte 0
  2508  9502 0000               ptr2 !word 0
  2509  9504 0000               savebrkvector !word 0
  2510  9506 0000               savenmivector !word 0
  2511  9508 00                 drive !byte 0
  2512  9509 00                 registerA !byte 0
  2513  950a 00                 registerX !byte 0
  2514  950b 00                 registerY !byte 0
  2515  950c 00                 registerSP !byte 0
  2516  950d 00                 registerSR !byte 0
  2517  950e 0000               registerPC !word 0
  2518                          }
  2519                          
  2520                          !ifdef MINIMUM {
  2521                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2522                          ; JUMP table for some stability
  2523                          * = $FFEE
  2524                          JUART_INIT: JMP UART_INIT
  2525                          JUART_OUT: JMP UART_OUT
  2526                          JUART_IN: JMP UART_IN
  2527                          JUART_CHK: JMP UART_CHK
  2528                          
  2529                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2530                          ; 6502 vectors
  2531                          * = $fffa
  2532                              !word NMI
  2533                              !word RESET
  2534                              !word IRQ
  2535                          } else { // C64
  2536                              !if * > $a000 {
  2537                                  !error "code/data overran $a000"
  2538                              }
  2539                          }
  2540                          
  2541                          finish = *
