
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: work in progress, disassembles itself <<<
     4                          ;;
     5                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     6                          ;; MIT License
     7                          ;;
     8                          ;; Copyright (c) 2024 David R. Van Wagner
     9                          ;; davevw.com
    10                          ;;
    11                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    12                          ;; of this software and associated documentation files (the "Software"), to deal
    13                          ;; in the Software without restriction, including without limitation the rights
    14                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    15                          ;; copies of the Software, and to permit persons to whom the Software is
    16                          ;; furnished to do so, subject to the following conditions:
    17                          ;;
    18                          ;; The above copyright notice and this permission notice shall be included in all
    19                          ;; copies or substantial portions of the Software.
    20                          ;;
    21                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    22                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    23                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    24                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    25                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    26                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    27                          ;; SOFTWARE.
    28                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    29                          
    30                          ;; VWAS2024 (C) 2024 DAVID R. VAN WAGNER
    31                          ;; MIT LICENSE DAVEVW.COM
    32                          ;; _
    33                          ;; INTERACTIVE SYNTAX >>> PLANNED, work in progress <<<
    34                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    35                          ;; 1000 (display memory at $1000)
    36                          ;; 1000.2000 (display memory range $1000 to $2000)
    37                          ;; 1000 r (JMP $1000)
    38                          ;; 1000: 01 02 03 (modify memory)
    39                          ;; (NEW SYNTAX)
    40                          ;; 1000 d (disassemble starting at, interactive until q or ESC)
    41                          ;; 1000 a (assemble starting at, interactive until empty line) 
    42                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    43                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    44                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    45                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    46                          ;; . (display registers, VICE format or custom? screen editor changeable?)
    47                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    48                          ;; 1000.2000 "filename" 08 save (save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, can abbreviate to s)
    49                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    50                          ;; ? (commands help)
    51                          ;; ? a (list instructions available)
    52                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    53                          ;; ? mode (show addressing modes example syntax for 6502)
    54                          ;;
    55                          ;; (INTERACTIVE ASSEMBLER)
    56                          ;; 1000 _
    57                          ;;      ADC #$12
    58                          ;; 1000 69 12    ADC #$12
    59                          ;; 1002 _
    60                          ;;      JSR $1234
    61                          ;; 1002 20 34 12 JSR $1234
    62                          ;; 1005 _
    63                          ;;      RTS
    64                          ;; 1005 60       RTS
    65                          ;; 1006 _
    66                          ;;      XYZ
    67                          ;;      XYZ ?
    68                          ;; 1006 _
    69                          ;; _
    70                          ;;
    71                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    72                          ;; and can cursor up to revise, 
    73                          ;;
    74                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    75                          ;;
    76                          
    77                          ; global
    78                          inputbuf=$0200
    79                          
    80                          ; kernal/system calls
    81                          charout=$ffd2
    82                          charin=$ffcf ; screen editor
    83                          getkey=$ffe4
    84                          
    85                          ; zeropage
    86                          ptr1=$fb ; and $fc
    87                          ptr2=$fd ; and $fe
    88                          tmp=$ff
    89                          opidx=$22
    90                          inidx=$23
    91                          mode=$24
    92                          size=$25
    93                          ptr3=$26 ; and $27
    94                          count=$a3
    95                          len=$a4
    96                          savepos=$a5
    97                          tmp2=$a6
    98                          
    99                          *=$c000
   100                          start:
   101  c000 a90c                   lda #<copyright
   102  c002 a2cb                   ldx #>copyright
   103  c004 20cbc2                 jsr strout
   104  c007 20dcc2             -   jsr inputline
   105  c00a 20eac2                 jsr parseline
   106  c00d 4c07c0                 jmp -
   107                          
   108                          test: ; all the addressing modes here for testing disassembly
   109  c010 ea                     nop
   110  c011 ad3412                 lda $1234
   111  c014 bd3412                 lda $1234,x
   112  c017 b93412                 lda $1234,y
   113  c01a 0a                     asl
   114  c01b a912                   lda #$12
   115  c01d a112                   lda ($12,x)
   116  c01f b112                   lda ($12),y
   117  c021 6c3412                 jmp ($1234)
   118  c024 d0fe               -   bne -
   119  c026 a512                   lda $12
   120  c028 b512                   lda $12,x
   121  c02a b612                   ldx $12,y
   122  c02c ff                     !byte $FF ; unknown
   123                          
   124  c02d a90c               +   lda #<copyright
   125  c02f a2cb                   ldx #>copyright
   126  c031 20cbc2                 jsr strout   
   127  c034 a900                   lda #<start
   128  c036 a2c0                   ldx #>start
   129  c038 85fb                   sta ptr1
   130  c03a 86fc                   stx ptr1+1
   131  c03c a929                   lda #<end
   132  c03e a2c8                   ldx #>end
   133  c040 85fd                   sta ptr2
   134  c042 86fe                   stx ptr2+1
   135  c044 205ac0                 jsr disassemble
   136  c047 a5fd                   lda ptr2
   137  c049 a6fe                   ldx ptr2+1
   138  c04b 85fb                   sta ptr1
   139  c04d 86fc                   stx ptr1+1
   140  c04f a97e                   lda #<finish
   141  c051 a2cb                   ldx #>finish
   142  c053 85fd                   sta ptr2
   143  c055 86fe                   stx ptr2+1
   144  c057 4c40c2                 jmp display_memory
   145                          
   146                          disassemble:
   147  c05a a918               --  lda #24
   148  c05c 85a3                   sta count
   149  c05e a000               -   ldy #0
   150  c060 b1fb                   lda (ptr1),y
   151  c062 208cc0                 jsr find_opcode
   152  c065 20ebc0                 jsr disp_current
   153  c068 a525                   lda size
   154  c06a 1002                   bpl +
   155  c06c a901                   lda #1
   156  c06e 18                 +   clc
   157  c06f 65fb                   adc ptr1
   158  c071 85fb                   sta ptr1
   159  c073 9002                   bcc +
   160  c075 e6fc                   inc ptr1+1
   161  c077 c6a3               +   dec count
   162  c079 d0e3                   bne -
   163  c07b 2015c8                 jsr pagemore
   164  c07e d0da                   bne --
   165  c080 60                     rts
   166                          
   167                          compareptrs:
   168  c081 a5fc                   lda ptr1+1
   169  c083 c5fe                   cmp ptr2+1
   170  c085 d004                   bne +
   171  c087 a5fb                   lda ptr1
   172  c089 c5fd                   cmp ptr2
   173  c08b 60                 +   rts
   174                          
   175                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   176                          ; and properties updated in ZP globals size,inidx,opidx,mode
   177  c08c a097                   ldy #nopcodes
   178  c08e a296                   ldx #nopcodes-1
   179  c090 dd47c9             -   cmp opcodes,x
   180  c093 f00b                   beq +
   181  c095 ca                     dex
   182  c096 88                     dey
   183  c097 d0f7                   bne -
   184  c099 18                     clc
   185  c09a a9ff                   lda #$FF
   186  c09c aa                     tax
   187  c09d a8                     tay
   188  c09e 900a                   bcc ++
   189  c0a0 bddec9             +   lda instidx, x
   190  c0a3 bc75ca                 ldy modeidx, x
   191  c0a6 20b1c0                 jsr getsize
   192  c0a9 38                     sec
   193  c0aa 8523               ++  sta inidx
   194  c0ac 8622                   stx opidx
   195  c0ae 8424                   sty mode
   196  c0b0 60                     rts
   197                          
   198                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   199                              ; result returned in size
   200  c0b1 48                     pha
   201  c0b2 a901                   lda #1
   202  c0b4 8525                   sta size
   203  c0b6 68                     pla
   204  c0b7 c002                   cpy #2 // Immediate
   205  c0b9 9008                   bcc +
   206  c0bb e625                   inc size
   207  c0bd c009                   cpy #9 // Absolute
   208  c0bf 9002                   bcc +
   209  c0c1 e625                   inc size
   210  c0c3 60                 +   rts
   211                          
   212                          disp_opcode: ; .A opcode byte
   213  c0c4 208cc0                 jsr find_opcode
   214  c0c7 8a                     txa
   215                              ; fall through to display instruction
   216                          
   217                          dispinst: ; .A instruction index 0..55
   218  c0c8 aa                     tax
   219  c0c9 e038                   cpx #ninst
   220  c0cb b012                   bcs +
   221  c0cd bd2ac8                 lda inst0, x
   222  c0d0 20d2ff                 jsr charout
   223  c0d3 bd62c8                 lda inst1, x
   224  c0d6 20d2ff                 jsr charout
   225  c0d9 bd9ac8                 lda inst2, x
   226  c0dc 4cd2ff                 jmp charout
   227  c0df a93f               +   lda #'?'
   228  c0e1 20d2ff                 jsr charout
   229  c0e4 20d2ff                 jsr charout
   230  c0e7 20d2ff                 jsr charout
   231  c0ea 60                     rts
   232                          
   233                          disp_current:
   234  c0eb a5fb                   lda ptr1
   235  c0ed a6fc                   ldx ptr1+1
   236  c0ef 2024c2                 jsr disphexword
   237  c0f2 a920                   lda #$20
   238  c0f4 20d2ff                 jsr charout
   239  c0f7 a000                   ldy #0
   240  c0f9 a625                   ldx size
   241  c0fb b1fb               -   lda (ptr1),y
   242  c0fd 202ac2                 jsr disphexbyte
   243  c100 a920                   lda #$20
   244  c102 20d2ff                 jsr charout
   245  c105 c8                     iny
   246  c106 ca                     dex
   247  c107 d0f2                   bne -
   248  c109 c003               -   cpy #3
   249  c10b f00e                   beq +
   250  c10d a920                   lda #$20
   251  c10f 20d2ff                 jsr charout
   252  c112 20d2ff                 jsr charout
   253  c115 20d2ff                 jsr charout
   254  c118 c8                     iny
   255  c119 d0ee                   bne -
   256  c11b a523               +   lda inidx
   257  c11d 20c8c0                 jsr dispinst
   258  c120 a920                   lda #$20
   259  c122 20d2ff                 jsr charout
   260  c125 202dc1                 jsr disp_mode
   261  c128 a90d                   lda #13
   262  c12a 4cd2ff                 jmp charout
   263                          
   264                          disp_mode
   265  c12d a524                   lda mode
   266  c12f c90d                   cmp #13
   267  c131 b00a                   bcs +
   268  c133 0a                     asl
   269  c134 aa                     tax
   270  c135 bdd3c8                 lda mode_jmptable+1,x
   271  c138 48                     pha
   272  c139 bdd2c8                 lda mode_jmptable,x
   273  c13c 48                     pha
   274  c13d 60                 +   rts
   275                          
   276                          dispModeAcc:
   277  c13e a941                   lda #'A'
   278  c140 4cd2ff                 jmp charout
   279                          
   280                          dispModeNone:
   281  c143 60                     rts
   282                          
   283                          dispModeImm:
   284  c144 a923                   lda #'#'
   285  c146 20d2ff                 jsr charout
   286                          dispModeZP:
   287  c149 a924                   lda #'$'
   288  c14b 20d2ff                 jsr charout
   289  c14e a001                   ldy #1
   290  c150 b1fb                   lda (ptr1),y
   291  c152 4c2ac2                 jmp disphexbyte
   292                          
   293                          dispModeIndX:
   294  c155 a928                   lda #'('
   295  c157 20d2ff                 jsr charout
   296  c15a a924                   lda #'$'
   297  c15c 20d2ff                 jsr charout
   298  c15f a001                   ldy #1
   299  c161 b1fb                   lda (ptr1),y
   300  c163 202ac2                 jsr disphexbyte
   301  c166 a92c                   lda #','
   302  c168 20d2ff                 jsr charout
   303  c16b a958                   lda #'X'
   304  c16d 20d2ff                 jsr charout
   305  c170 a929                   lda #')'
   306  c172 4cd2ff                 jmp charout
   307                          
   308                          dispModeIndY:
   309  c175 a928                   lda #'('
   310  c177 20d2ff                 jsr charout
   311  c17a a924                   lda #'$'
   312  c17c 20d2ff                 jsr charout
   313  c17f a001                   ldy #1
   314  c181 b1fb                   lda (ptr1),y
   315  c183 202ac2                 jsr disphexbyte
   316  c186 a929                   lda #')'
   317  c188 20d2ff                 jsr charout
   318  c18b a92c                   lda #','
   319  c18d 20d2ff                 jsr charout
   320  c190 a959                   lda #'Y'
   321  c192 4cd2ff                 jmp charout
   322                          
   323                          dispModeRel:
   324  c195 a924                   lda #'$'
   325  c197 20d2ff                 jsr charout
   326  c19a 18                     clc
   327  c19b a5fb                   lda ptr1
   328  c19d 6902                   adc #2
   329  c19f 8526                   sta ptr3
   330  c1a1 a5fc                   lda ptr1+1
   331  c1a3 6900                   adc #0
   332  c1a5 8527                   sta ptr3+1
   333  c1a7 a001                   ldy #1
   334  c1a9 b1fb                   lda (ptr1),y
   335  c1ab 1014                   bpl +
   336                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   337  c1ad 49ff                   eor #$FF ; inverse
   338  c1af 18                     clc
   339  c1b0 6901                   adc #1 ; complete getting absolute value from two's complement
   340  c1b2 85ff                   sta tmp
   341  c1b4 38                     sec
   342  c1b5 a526                   lda ptr3
   343  c1b7 e5ff                   sbc tmp
   344  c1b9 8526                   sta ptr3
   345  c1bb b00d                   bcs ++
   346  c1bd c627                   dec ptr3+1
   347  c1bf 9009                   bcc ++
   348  c1c1 18                 +   clc ; simple case of adding
   349  c1c2 6526                   adc ptr3
   350  c1c4 8526                   sta ptr3
   351  c1c6 9002                   bcc ++
   352  c1c8 e627                   inc ptr3+1
   353  c1ca a526               ++  lda ptr3
   354  c1cc a627                   ldx ptr3+1
   355  c1ce 4c24c2                 jmp disphexword
   356                          
   357                          dispModeZPX:
   358  c1d1 2049c1                 jsr dispModeZP
   359  c1d4 a92c                   lda #','
   360  c1d6 20d2ff                 jsr charout
   361  c1d9 a958                   lda #'X'
   362  c1db 4cd2ff                 jmp charout
   363                          
   364                          dispModeZPY:
   365  c1de 2049c1                 jsr dispModeZP
   366  c1e1 a92c                   lda #','
   367  c1e3 20d2ff                 jsr charout
   368  c1e6 a959                   lda #'Y'
   369  c1e8 4cd2ff                 jmp charout
   370                          
   371                          dispModeAbs:
   372  c1eb a924                   lda #'$'
   373  c1ed 20d2ff                 jsr charout
   374  c1f0 a001                   ldy #1
   375  c1f2 b1fb                   lda (ptr1),y
   376  c1f4 48                     pha
   377  c1f5 c8                     iny
   378  c1f6 b1fb                   lda (ptr1),y
   379  c1f8 aa                     tax
   380  c1f9 68                     pla
   381  c1fa 4c24c2                 jmp disphexword
   382                          
   383                          dispModeAbsX:
   384  c1fd 20ebc1                 jsr dispModeAbs
   385  c200 a92c                   lda #','
   386  c202 20d2ff                 jsr charout
   387  c205 a958                   lda #'X'
   388  c207 4cd2ff                 jmp charout
   389                          
   390                          dispModeAbsY:
   391  c20a 20ebc1                 jsr dispModeAbs
   392  c20d a92c                   lda #','
   393  c20f 20d2ff                 jsr charout
   394  c212 a959                   lda #'Y'
   395  c214 4cd2ff                 jmp charout
   396                          
   397                          dispModeInd:
   398  c217 a928                   lda #'('
   399  c219 20d2ff                 jsr charout
   400  c21c 20ebc1                 jsr dispModeAbs
   401  c21f a929                   lda #')'
   402  c221 4cd2ff                 jmp charout
   403                          
   404                          disphexword: ; .A low, .X high, 0000..FFFF
   405  c224 48                     pha
   406  c225 8a                     txa
   407  c226 202ac2                 jsr disphexbyte
   408  c229 68                     pla
   409                              ;fall through to call again
   410                          
   411                          disphexbyte: ; .A 00..FF
   412  c22a 48                     pha
   413  c22b 4a                     lsr
   414  c22c 4a                     lsr
   415  c22d 4a                     lsr
   416  c22e 4a                     lsr
   417  c22f 2033c2                 jsr disphexnybble
   418  c232 68                     pla
   419                              ;fall through to call again
   420                          
   421                          disphexnybble: ; .A 0..F
   422  c233 290f                   and #$0F
   423  c235 0930                   ora #$30
   424  c237 c93a                   cmp #$3A
   425  c239 9002                   bcc +
   426  c23b 6906                   adc #$06
   427  c23d 4cd2ff             +   jmp charout
   428                          
   429                          display_memory:
   430  c240 a5fb               --  lda ptr1
   431  c242 a6fc                   ldx ptr1+1
   432  c244 2024c2                 jsr disphexword
   433  c247 a920                   lda #$20
   434  c249 20d2ff                 jsr charout
   435  c24c 2081c0             -   jsr compareptrs
   436  c24f b00c                   bcs +
   437  c251 a000                   ldy #0
   438  c253 b1fb                   lda (ptr1),y
   439  c255 202ac2                 jsr disphexbyte
   440  c258 a920                   lda #$20
   441  c25a 20d2ff                 jsr charout
   442  c25d e6fb               +   inc ptr1
   443  c25f d002                   bne +
   444  c261 e6fc                   inc ptr1+1
   445  c263 a5fb               +   lda ptr1
   446  c265 2907                   and #$07
   447  c267 d0e3                   bne -
   448  c269 a90d                   lda #13
   449  c26b 20d2ff                 jsr charout
   450  c26e 2081c0                 jsr compareptrs
   451  c271 90cd                   bcc --
   452  c273 60                     rts
   453                              
   454                          inputhexword: ; C set if fails
   455  c274 98                     tya
   456  c275 aa                     tax ; save buffer pointer in x
   457  c276 2091c2                 jsr inputhexbyte
   458  c279 b013                   bcs ++ ; failed
   459  c27b 85fb               +   sta ptr1 ; assume one byte
   460  c27d a900                   lda #0
   461  c27f 85fc                   sta ptr1+1 ; extend to 16 bits
   462  c281 2091c2                 jsr inputhexbyte
   463  c284 b006                   bcs + ; failed
   464  c286 a6fb                   ldx ptr1 ; two bytes so shift the bytes
   465  c288 86fc                   stx ptr1+1
   466  c28a 85fb                   sta ptr1
   467  c28c 18                 +   clc
   468  c28d 60                     rts
   469  c28e 8a                 ++  txa
   470  c28f a8                     tay ; restore buffer pointer
   471  c290 60                     rts
   472                          
   473                          inputhexbyte:
   474  c291 20adc2                 jsr inputhexnybble
   475  c294 b016                   bcs ++
   476  c296 85ff                   sta tmp
   477  c298 20adc2                 jsr inputhexnybble
   478  c29b 9005                   bcc +
   479  c29d 18                     clc ; allow single digit as byte
   480  c29e a5ff                   lda tmp
   481  c2a0 900a                   bcc ++
   482  c2a2 06ff               +   asl tmp
   483  c2a4 06ff                   asl tmp
   484  c2a6 06ff                   asl tmp
   485  c2a8 06ff                   asl tmp
   486  c2aa 05ff                   ora tmp
   487  c2ac 60                 ++  rts
   488                          
   489                          inputhexnybble:
   490  c2ad b90002                 lda $0200,y
   491  c2b0 297f                   and #$7F
   492  c2b2 38                     sec
   493  c2b3 e930                   sbc #$30
   494  c2b5 9012                   bcc ++
   495  c2b7 c90a                   cmp #10
   496  c2b9 900c                   bcc +
   497  c2bb e907                   sbc #7
   498  c2bd 900a                   bcc ++
   499  c2bf c90a                   cmp #10
   500  c2c1 9006                   bcc ++
   501  c2c3 c910                   cmp #16
   502  c2c5 b002                   bcs ++
   503  c2c7 c8                 +   iny
   504  c2c8 60                     rts
   505  c2c9 38                 ++  sec
   506  c2ca 60                     rts
   507                          
   508                          strout:
   509  c2cb 8526                   sta ptr3
   510  c2cd 8627                   stx ptr3+1
   511  c2cf a000                   ldy #0
   512  c2d1 b126               -   lda (ptr3),y
   513  c2d3 f006                   beq +
   514  c2d5 20d2ff                 jsr charout
   515  c2d8 c8                     iny
   516  c2d9 d0f6                   bne -
   517  c2db 60                 +   rts
   518                          
   519                          inputline:
   520  c2dc a000                   ldy #0
   521  c2de 20cfff             -   jsr charin
   522  c2e1 990002                 sta inputbuf,y
   523  c2e4 c8                     iny
   524  c2e5 c90d                   cmp #13
   525  c2e7 d0f5                   bne -
   526  c2e9 60                 +   rts
   527                          
   528                          parseline:
   529  c2ea c001                   cpy #1
   530  c2ec d003                   bne +
   531  c2ee 4c10c8             -   jmp newline
   532  c2f1 88                 +   dey
   533  c2f2 84a4                   sty len
   534                              ; skip whitespace
   535                              ; check for address, put in ptr1
   536                              ; or check for dot, then require address put in ptr2
   537                              ; or check for ?, and optional parameter, execute help
   538                              ; check for whitespace
   539                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   540                              ; check for string, store at start of inputbuf
   541                              ; check for drive number
   542                              ; check for whitespace
   543                              ; check command ":rda?mls", execute command
   544  c2f4 a000                   ldy #0
   545  c2f6 204dc7                 jsr skipspaces
   546  c2f9 c4a4                   cpy len
   547  c2fb f0f1                   beq -
   548  c2fd 2058c7                 jsr chkdot
   549  c300 d003                   bne +
   550  c302 4cb8c3                 jmp executedot
   551  c305 2063c7             +   jsr chkhelp
   552  c308 d003                   bne +
   553  c30a 4cb8c3                 jmp executehelp
   554  c30d 20b3c7             +   jsr chkhexaddr1
   555  c310 d003                   bne e
   556  c312 4c18c3                 jmp executeaddr1
   557  c315 4c36c7             e:  jmp reporterr
   558                          
   559                          executeaddr1:
   560  c318 c4a4                   cpy len
   561  c31a d003                   bne +
   562  c31c 4c4cc3                 jmp executedisplay1
   563  c31f 2058c7             +   jsr chkdot
   564  c322 d008                   bne +
   565  c324 20d3c7                 jsr chkhexaddr2
   566  c327 d0ec                   bne e
   567  c329 4c42c3                 jmp executeaddr12
   568  c32c 204dc7             +   jsr skipspaces
   569  c32f 206ec7                 jsr chkcolon
   570  c332 d003                   bne +
   571  c334 4c96c3                 jmp executemodify
   572  c337 20f4c7             +   jsr chkaddr1cmd ; rda, will not return here if cmd
   573  c33a 2079c7                 jsr chkfilename
   574  c33d d0d6                   bne e
   575  c33f f077                   beq executeloadfilename
   576  c341 00                     brk ; will never get here
   577                          
   578                          executeaddr12:
   579  c342 c4a4                   cpy len
   580  c344 d003                   bne +
   581  c346 4c54c3                 jmp executedisplay12
   582  c349 4c2fc7             +   jmp reportnotimplemented
   583                          
   584                          executedisplay1:
   585  c34c a5fb                   lda ptr1
   586  c34e 85fd                   sta ptr2
   587  c350 a5fc                   lda ptr1+1
   588  c352 85fe                   sta ptr2+1
   589                              ; fall through executedisplay12
   590                          
   591                          executedisplay12:
   592  c354 a9ff                   lda #$ff
   593  c356 85a3                   sta count
   594  c358 e6a3               -   inc count
   595  c35a a5a3                   lda count
   596  c35c 2907                   and #$07
   597  c35e d016                   bne +
   598  c360 a90d                   lda #13
   599  c362 20d2ff                 jsr charout
   600  c365 a5fb                   lda ptr1
   601  c367 a6fc                   ldx ptr1+1
   602  c369 2024c2                 jsr disphexword
   603  c36c a93a                   lda #':'
   604  c36e 20d2ff                 jsr charout
   605  c371 a920                   lda #' '
   606  c373 20d2ff                 jsr charout
   607  c376 a000               +   ldy #0
   608  c378 b1fb                   lda (ptr1),y
   609  c37a 202ac2                 jsr disphexbyte
   610  c37d a920                   lda #' '
   611  c37f 20d2ff                 jsr charout
   612  c382 e6fb                   inc ptr1
   613  c384 d004                   bne +
   614  c386 e6fc                   inc ptr1+1
   615  c388 f007                   beq ++
   616  c38a 2081c0             +   jsr compareptrs
   617  c38d 90c9                   bcc -
   618  c38f f0c7                   beq -
   619  c391 a90d               ++  lda #13
   620  c393 4cd2ff                 jmp charout
   621                          
   622                          executemodify:
   623  c396 204dc7                 jsr skipspaces
   624  c399 c4a4                   cpy len
   625  c39b f018                   beq ++
   626  c39d 2093c7                 jsr chkhexbyteofsequence
   627  c3a0 f003                   beq +
   628  c3a2 4c15c3                 jmp e
   629  c3a5 84ff               +   sty tmp
   630  c3a7 a000                   ldy #0
   631  c3a9 91fb                   sta (ptr1),y
   632  c3ab e6fb                   inc ptr1
   633  c3ad d002                   bne +
   634  c3af e6fc                   inc ptr1+1
   635  c3b1 a4ff               +   ldy tmp
   636  c3b3 d0e1                   bne executemodify
   637  c3b5 4c10c8             ++  jmp newline
   638                          
   639                          executeloadfilename:
   640                          executedot:
   641                          executeaddr1cmd:
   642                          executehelp:
   643  c3b8 4c2fc7                 jmp reportnotimplemented
   644                          
   645                          executeassemble:
   646  c3bb 68                     pla ; remove low byte return address
   647  c3bc 68                     pla ; return high byte return address
   648  c3bd a914                   lda #20
   649  c3bf 20d2ff                 jsr charout
   650  c3c2 20d2ff                 jsr charout
   651                              ; lda ptr1
   652                              ; ldx ptr1+1
   653                              ; jsr disphexword
   654                              ; lda #' '
   655                              ; jsr charout
   656  c3c5 20dcc2                 jsr inputline
   657  c3c8 c001                   cpy #1
   658  c3ca f05e                   beq ++
   659  c3cc 88                     dey
   660  c3cd 84a4                   sty len
   661  c3cf a000                   ldy #0
   662  c3d1 204dc7                 jsr skipspaces
   663  c3d4 c4a4                   cpy len
   664  c3d6 f052                   beq ++
   665                              ;jsr chkhexaddr1 *** NO interferes with ADC, BCC, DEC
   666                              ;jsr skipspaces
   667  c3d8 20a4c6                 jsr chkinstruction
   668  c3db f003                   beq +
   669  c3dd 4c15c3             -   jmp e    
   670  c3e0 202ac2             +   jsr disphexbyte
   671  c3e3 a920                   lda #' '
   672  c3e5 20d2ff                 jsr charout
   673  c3e8 202dc4                 jsr chkaddressing
   674  c3eb d0f0                   bne -
   675  c3ed 202ac2                 jsr disphexbyte
   676  c3f0 a920                   lda #' '
   677  c3f2 20d2ff                 jsr charout
   678  c3f5 20d5c6                 jsr find_inst_and_mode
   679  c3f8 d0e3                   bne -
   680  c3fa a622                   ldx opidx
   681  c3fc bd47c9                 lda opcodes, x
   682  c3ff 202ac2                 jsr disphexbyte
   683  c402 a920                   lda #' '
   684  c404 20d2ff                 jsr charout
   685  c407 a525                   lda size
   686  c409 202ac2                 jsr disphexbyte
   687  c40c a920                   lda #' '
   688  c40e 20d2ff                 jsr charout
   689  c411 a525                   lda size
   690  c413 c902                   cmp #2
   691  c415 d008                   bne +
   692  c417 a5a6                   lda tmp2
   693  c419 202ac2                 jsr disphexbyte
   694  c41c 4c2ac4                 jmp ++
   695  c41f c903               +   cmp #3
   696  c421 d007                   bne ++
   697  c423 a5fb                   lda ptr1
   698  c425 a6fc                   ldx ptr1+1
   699  c427 2024c2                 jsr disphexword
   700  c42a 4c10c8             ++  jmp newline
   701                          
   702                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
   703  c42d 204dc7                 jsr skipspaces
   704  c430 a200                   ldx #0
   705  c432 8624                   stx mode
   706  c434 208fc4                 jsr chkaccumulator
   707  c437 f051                   beq +
   708  c439 e624                   inc mode
   709  c43b c4a4                   cpy len ; chknone
   710  c43d f04b                   beq +
   711  c43f e624                   inc mode
   712  c441 20b3c4                 jsr chkimmediate
   713  c444 f044                   beq +
   714  c446 e624                   inc mode
   715  c448 20d7c4                 jsr chkindirectx
   716  c44b f03d                   beq +
   717  c44d e624                   inc mode
   718  c44f 201cc5                 jsr chkindirecty
   719  c452 f036                   beq +
   720  c454 e624                   inc mode
   721  c456 2061c5                 jsr chkrelative
   722  c459 f02f                   beq +
   723  c45b e624                   inc mode
   724  c45d 2087c5                 jsr chkzeropage
   725  c460 f028                   beq +
   726  c462 e624                   inc mode
   727  c464 20a0c5                 jsr chkzeropagex
   728  c467 f021                   beq +
   729  c469 e624                   inc mode
   730  c46b 20cfc5                 jsr chkzeropagey
   731  c46e f01a                   beq +
   732  c470 e624                   inc mode
   733  c472 20fec5                 jsr chkabsolute
   734  c475 f013                   beq +
   735  c477 e624                   inc mode
   736  c479 2017c6                 jsr chkabsolutex
   737  c47c f00c                   beq +
   738  c47e e624                   inc mode
   739  c480 2046c6                 jsr chkabsolutey
   740  c483 f005                   beq +
   741  c485 e624                   inc mode
   742  c487 2075c6                 jsr chkindirect
   743  c48a 08                 +   php ; save Z
   744  c48b a524                   lda mode
   745  c48d 28                     plp ; restore Z 
   746  c48e 60                     rts
   747                          
   748                          chkaccumulator:
   749  c48f c4a4                   cpy len
   750  c491 d013                   bne +
   751  c493 a523                   lda inidx
   752  c495 c902                   cmp #2 ; ASL
   753  c497 f019                   beq ++
   754  c499 c920                   cmp #32 ; LSR
   755  c49b f015                   beq ++
   756  c49d c927                   cmp #39 ; ROL
   757  c49f f011                   beq ++
   758  c4a1 c928                   cmp #40 ; ROR
   759  c4a3 4cb2c4                 jmp ++
   760  c4a6 b90002             +   lda inputbuf, y
   761  c4a9 c941                   cmp #'A'
   762  c4ab d005                   bne ++
   763  c4ad b90102                 lda inputbuf+1,y
   764  c4b0 c90d                   cmp #13 ; Z set true/false whether parsed exactly
   765  c4b2 60                 ++  rts
   766                          
   767                          chkimmediate:
   768  c4b3 84a5                   sty savepos
   769  c4b5 b90002                 lda inputbuf, y
   770  c4b8 c923                   cmp #'#'
   771  c4ba d016                   bne ++
   772  c4bc c8                     iny
   773  c4bd 204dc7                 jsr skipspaces
   774  c4c0 b90002                 lda inputbuf, y
   775  c4c3 c924                   cmp #'$'
   776  c4c5 d001                   bne +
   777  c4c7 c8                     iny
   778  c4c8 20bcc7             +   jsr chkhexbyte
   779  c4cb d005                   bne ++
   780  c4cd c4a4               +   cpy len
   781  c4cf d001                   bne ++
   782  c4d1 60                     rts
   783  c4d2 a4a5               ++  ldy savepos
   784  c4d4 a201                   ldx #1 ; Z false (NE)
   785  c4d6 60                     rts
   786                          
   787                          chkindirectx:
   788  c4d7 84a5                   sty savepos
   789  c4d9 b90002                 lda inputbuf, y
   790  c4dc c928                   cmp #'('
   791  c4de d037                   bne ++
   792  c4e0 c8                     iny
   793  c4e1 204dc7                 jsr skipspaces
   794  c4e4 b90002                 lda inputbuf, y
   795  c4e7 c924                   cmp #'$'
   796  c4e9 d001                   bne +
   797  c4eb c8                     iny
   798  c4ec 20bcc7             +   jsr chkhexbyte
   799  c4ef d026                   bne ++
   800  c4f1 204dc7                 jsr skipspaces
   801  c4f4 b90002                 lda inputbuf, y
   802  c4f7 c92c                   cmp #','
   803  c4f9 d01c                   bne ++
   804  c4fb c8                     iny
   805  c4fc 204dc7                 jsr skipspaces
   806  c4ff b90002                 lda inputbuf, y
   807  c502 c958                   cmp #'X'
   808  c504 d011                   bne ++
   809  c506 c8                     iny
   810  c507 204dc7                 jsr skipspaces
   811  c50a b90002                 lda inputbuf, y
   812  c50d c929                   cmp #')'
   813  c50f d006                   bne ++
   814  c511 c8                     iny
   815  c512 c4a4                   cpy len
   816  c514 d001                   bne ++
   817  c516 60                     rts
   818  c517 a4a5               ++  ldy savepos
   819  c519 a201                   ldx #1 ; Z false (NE)
   820  c51b 60                     rts
   821                          
   822                          chkindirecty:
   823  c51c 84a5                   sty savepos
   824  c51e b90002                 lda inputbuf, y
   825  c521 c928                   cmp #'('
   826  c523 d037                   bne ++
   827  c525 c8                     iny
   828  c526 204dc7                 jsr skipspaces
   829  c529 b90002                 lda inputbuf, y
   830  c52c c924                   cmp #'$'
   831  c52e d001                   bne +
   832  c530 c8                     iny
   833  c531 20bcc7             +   jsr chkhexbyte
   834  c534 d026                   bne ++
   835  c536 204dc7                 jsr skipspaces
   836  c539 b90002                 lda inputbuf, y
   837  c53c c929                   cmp #')'
   838  c53e d01c                   bne ++
   839  c540 c8                     iny
   840  c541 204dc7                 jsr skipspaces
   841  c544 b90002                 lda inputbuf, y
   842  c547 c92c                   cmp #','
   843  c549 d011                   bne ++
   844  c54b c8                     iny
   845  c54c 204dc7                 jsr skipspaces
   846  c54f b90002                 lda inputbuf, y
   847  c552 c959                   cmp #'Y'
   848  c554 d006                   bne ++
   849  c556 c8                     iny
   850  c557 c4a4                   cpy len
   851  c559 d001                   bne ++
   852  c55b 60                     rts
   853  c55c a4a5               ++  ldy savepos
   854  c55e a201                   ldx #1 ; Z false (NE)
   855  c560 60                     rts
   856                          
   857                          chkrelative:
   858  c561 84a5                   sty savepos
   859  c563 a623                   ldx inidx
   860  c565 e006                   cpx #6 ; BIT
   861  c567 f019                   beq ++
   862  c569 bd2ac8                 lda inst0, x
   863  c56c c942                   cmp #'B'
   864  c56e d012                   bne ++
   865  c570 b90002                 lda inputbuf, y
   866  c573 c924                   cmp #'$'
   867  c575 d001                   bne +
   868  c577 c8                     iny
   869  c578 20adc7             +   jsr chkhexword ; TODO compute offset, validate +128 -128
   870  c57b d005                   bne ++
   871  c57d c4a4                   cpy len
   872  c57f d001                   bne ++
   873  c581 60                     rts ; Z true (EQ)
   874  c582 a4a5               ++  ldy savepos
   875  c584 a201                   ldx #1 ; Z false (NE)
   876  c586 60                     rts
   877                          
   878                          chkzeropage:
   879  c587 84a5                   sty savepos
   880  c589 b90002                 lda inputbuf, y
   881  c58c c924                   cmp #'$'
   882  c58e d001                   bne +
   883  c590 c8                     iny
   884  c591 20bcc7             +   jsr chkhexbyte
   885  c594 d005                   bne ++
   886  c596 c4a4                   cpy len
   887  c598 d001                   bne ++
   888  c59a 60                     rts ; Z true (EQ)
   889  c59b a4a5               ++  ldy savepos
   890  c59d a201                   ldx #1 ; Z false (NE)
   891  c59f 60                     rts
   892                          
   893                          chkzeropagex:
   894  c5a0 84a5                   sty savepos
   895  c5a2 b90002                 lda inputbuf, y
   896  c5a5 c924                   cmp #'$'
   897  c5a7 d001                   bne +
   898  c5a9 c8                     iny
   899  c5aa 20bcc7             +   jsr chkhexbyte
   900  c5ad d01b                   bne ++
   901  c5af 204dc7                 jsr skipspaces
   902  c5b2 b90002                 lda inputbuf, y
   903  c5b5 c92c                   cmp #','
   904  c5b7 d011                   bne ++
   905  c5b9 c8                     iny
   906  c5ba 204dc7                 jsr skipspaces
   907  c5bd b90002                 lda inputbuf, y
   908  c5c0 c958                   cmp #'X'
   909  c5c2 d006                   bne ++
   910  c5c4 c8                     iny
   911  c5c5 c4a4                   cpy len
   912  c5c7 d001                   bne ++
   913  c5c9 60                     rts ; Z true (EQ)
   914  c5ca a4a5               ++  ldy savepos
   915  c5cc a201                   ldx #1 ; Z false (NE)
   916  c5ce 60                     rts
   917                          
   918                          chkzeropagey:
   919  c5cf 84a5                   sty savepos
   920  c5d1 b90002                 lda inputbuf, y
   921  c5d4 c924                   cmp #'$'
   922  c5d6 d001                   bne +
   923  c5d8 c8                     iny
   924  c5d9 20bcc7             +   jsr chkhexbyte
   925  c5dc d01b                   bne ++
   926  c5de 204dc7                 jsr skipspaces
   927  c5e1 b90002                 lda inputbuf, y
   928  c5e4 c92c                   cmp #','
   929  c5e6 d011                   bne ++
   930  c5e8 c8                     iny
   931  c5e9 204dc7                 jsr skipspaces
   932  c5ec b90002                 lda inputbuf, y
   933  c5ef c959                   cmp #'Y'
   934  c5f1 d006                   bne ++
   935  c5f3 c8                     iny
   936  c5f4 c4a4                   cpy len
   937  c5f6 d001                   bne ++
   938  c5f8 60                     rts ; Z true (EQ)
   939  c5f9 a4a5               ++  ldy savepos
   940  c5fb a201                   ldx #1 ; Z false (NE)
   941  c5fd 60                     rts
   942                          
   943                          chkabsolute:
   944  c5fe 84a5                   sty savepos
   945  c600 b90002                 lda inputbuf, y
   946  c603 c924                   cmp #'$'
   947  c605 d001                   bne +
   948  c607 c8                     iny
   949  c608 20adc7             +   jsr chkhexword
   950  c60b d005                   bne ++
   951  c60d c4a4                   cpy len
   952  c60f d001                   bne ++
   953  c611 60                     rts ; Z true (EQ)
   954  c612 a4a5               ++  ldy savepos
   955  c614 a201                   ldx #1 ; Z false (NE)
   956  c616 60                     rts
   957                          
   958                          chkabsolutex:
   959  c617 84a5                   sty savepos
   960  c619 b90002                 lda inputbuf, y
   961  c61c c924                   cmp #'$'
   962  c61e d001                   bne +
   963  c620 c8                     iny
   964  c621 20adc7             +   jsr chkhexword
   965  c624 d01b                   bne ++
   966  c626 204dc7                 jsr skipspaces
   967  c629 b90002                 lda inputbuf, y
   968  c62c c92c                   cmp #','
   969  c62e d011                   bne ++
   970  c630 c8                     iny
   971  c631 204dc7                 jsr skipspaces
   972  c634 b90002                 lda inputbuf, y
   973  c637 c958                   cmp #'X'
   974  c639 d006                   bne ++
   975  c63b c8                     iny
   976  c63c c4a4                   cpy len
   977  c63e d001                   bne ++
   978  c640 60                     rts ; Z true (EQ)
   979  c641 a4a5               ++  ldy savepos
   980  c643 a201                   ldx #1 ; Z false (NE)
   981  c645 60                     rts
   982                          
   983                          chkabsolutey:
   984  c646 84a5                   sty savepos
   985  c648 b90002                 lda inputbuf, y
   986  c64b c924                   cmp #'$'
   987  c64d d001                   bne +
   988  c64f c8                     iny
   989  c650 20adc7             +   jsr chkhexword
   990  c653 d01b                   bne ++
   991  c655 204dc7                 jsr skipspaces
   992  c658 b90002                 lda inputbuf, y
   993  c65b c92c                   cmp #','
   994  c65d d011                   bne ++
   995  c65f c8                     iny
   996  c660 204dc7                 jsr skipspaces
   997  c663 b90002                 lda inputbuf, y
   998  c666 c959                   cmp #'Y'
   999  c668 d006                   bne ++
  1000  c66a c8                     iny
  1001  c66b c4a4                   cpy len
  1002  c66d d001                   bne ++
  1003  c66f 60                     rts ; Z true (EQ)
  1004  c670 a4a5               ++  ldy savepos
  1005  c672 a201                   ldx #1 ; Z false (NE)
  1006  c674 60                     rts
  1007                          
  1008                          chkindirect:
  1009  c675 84a5                   sty savepos
  1010  c677 b90002                 lda inputbuf, y
  1011  c67a c928                   cmp #'('
  1012  c67c d021                   bne ++
  1013  c67e c8                     iny
  1014  c67f 204dc7                 jsr skipspaces
  1015  c682 b90002                 lda inputbuf, y
  1016  c685 c924                   cmp #'$'
  1017  c687 d001                   bne +
  1018  c689 c8                     iny
  1019  c68a 20adc7             +   jsr chkhexword
  1020  c68d d010                   bne ++
  1021  c68f 204dc7                 jsr skipspaces
  1022  c692 b90002                 lda inputbuf, y
  1023  c695 c929                   cmp #')'
  1024  c697 d006                   bne ++
  1025  c699 c8                     iny
  1026  c69a c4a4                   cpy len
  1027  c69c d001                   bne ++
  1028  c69e 60                     rts ; Z true (EQ)
  1029  c69f a4a5               ++  ldy savepos
  1030  c6a1 a201                   ldx #1 ; Z false (NE)
  1031  c6a3 60                     rts
  1032                          
  1033                          chkinstruction:
  1034  c6a4 c4a4                   cpy len
  1035  c6a6 f02a                   beq ++
  1036  c6a8 84ff                   sty tmp
  1037  c6aa a237                   ldx #(ninst-1)
  1038  c6ac b90002             -   lda inputbuf,y
  1039  c6af dd2ac8                 cmp inst0,x
  1040  c6b2 d019                   bne +
  1041  c6b4 c8                     iny
  1042  c6b5 b90002                 lda inputbuf,y
  1043  c6b8 dd62c8                 cmp inst1,x
  1044  c6bb d010                   bne +
  1045  c6bd c8                     iny
  1046  c6be b90002                 lda inputbuf,y
  1047  c6c1 dd9ac8                 cmp inst2,x
  1048  c6c4 d007                   bne +
  1049  c6c6 c8                     iny
  1050  c6c7 8a                     txa
  1051  c6c8 8523                   sta inidx
  1052  c6ca a200                   ldx #0
  1053  c6cc 60                     rts
  1054  c6cd a4ff               +   ldy tmp
  1055  c6cf ca                     dex
  1056  c6d0 10da                   bpl -
  1057  c6d2 a201               ++  ldx #1 ; Z false (NE)
  1058  c6d4 60                     rts
  1059                          
  1060                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1061                              ; and allows mode promotion
  1062  c6d5 20eec6                 jsr find_inst_and_mode2
  1063  c6d8 f013                   beq ++
  1064  c6da a524                   lda mode
  1065  c6dc c906                   cmp #6
  1066  c6de 900d                   bcc ++
  1067  c6e0 c90a                   cmp #10
  1068  c6e2 b007                   bcs +
  1069  c6e4 6903                   adc #3
  1070  c6e6 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1071  c6e8 4ceec6                 jmp find_inst_and_mode2 ; try again once
  1072  c6eb a201               +   ldx #1 ; Z false (NE)
  1073  c6ed 60                 ++  rts
  1074                          
  1075                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1076  c6ee a296                   ldx #nopcodes-1
  1077  c6f0 bddec9             -   lda instidx, x
  1078  c6f3 bc75ca                 ldy modeidx, x
  1079  c6f6 c523                   cmp inidx
  1080  c6f8 d00c                   bne +
  1081  c6fa c424                   cpy mode
  1082  c6fc d008                   bne +
  1083  c6fe 8622                   stx opidx
  1084  c700 20b1c0                 jsr getsize
  1085  c703 a200                   ldx #0 ; Z true (EQ)
  1086  c705 60                     rts
  1087  c706 ca                 +   dex
  1088  c707 e0ff                   cpx #$ff
  1089  c709 d0e5                   bne -
  1090  c70b a201                   ldx #1 ; Z false (NE)
  1091  c70d 60                     rts
  1092                          
  1093                          executerun:
  1094  c70e 68                     pla ; remove low byte return address
  1095  c70f 68                     pla ; return high byte return address
  1096  c710 68                     pla ; again, we're really not returning
  1097  c711 68                     pla ; again, we're really not returning
  1098  c712 2010c8                 jsr newline
  1099  c715 38                     sec
  1100  c716 a5fb                   lda ptr1
  1101  c718 e901                   sbc #1
  1102  c71a 85fb                   sta ptr1
  1103  c71c b002                   bcs +
  1104  c71e c6fc                   dec ptr1+1
  1105  c720 a5fc               +   lda ptr1+1
  1106  c722 48                     pha
  1107  c723 a5fb                   lda ptr1
  1108  c725 48                     pha
  1109  c726 60                     rts
  1110                          
  1111                          executedisassemble:
  1112  c727 68                     pla ; remove low byte return address
  1113  c728 68                     pla ; return high byte return address
  1114  c729 2010c8                 jsr newline
  1115  c72c 4c5ac0                 jmp disassemble
  1116                          
  1117                          reportnotimplemented:
  1118  c72f a94d                   lda #<notimplemented
  1119  c731 a2cb                   ldx #>notimplemented
  1120  c733 4ccbc2                 jmp strout
  1121                          
  1122                          reporterr:
  1123  c736 c000                   cpy #0
  1124  c738 f008                   beq +
  1125  c73a a920                   lda #' '
  1126  c73c 20d2ff             -   jsr charout
  1127  c73f 88                     dey
  1128  c740 d0fa                   bne -
  1129  c742 a93f               +   lda #'?'
  1130  c744 20d2ff                 jsr charout
  1131  c747 a90d                   lda #13
  1132  c749 20d2ff                 jsr charout
  1133  c74c 60                     rts
  1134                          
  1135                          skipspaces:
  1136  c74d b90002             -   lda inputbuf, y
  1137  c750 c920                   cmp #$20
  1138  c752 d003                   bne +
  1139  c754 c8                     iny
  1140  c755 d0f6                   bne -
  1141  c757 60                 +   rts
  1142                          
  1143                          chkdot:
  1144  c758 b90002                 lda inputbuf, y
  1145  c75b c92e                   cmp #'.'
  1146  c75d d003                   bne +
  1147  c75f c8                     iny
  1148  c760 a900                   lda #0 ; Z true (EQ)
  1149  c762 60                 +   rts
  1150                          
  1151                          chkhelp:
  1152  c763 b90002                 lda inputbuf, y
  1153  c766 c93f                   cmp #'?'
  1154  c768 d003                   bne +
  1155  c76a c8                     iny
  1156  c76b a900                   lda #0 ; Z true (EQ)
  1157  c76d 60                 +   rts
  1158                          
  1159                          chkcolon:
  1160  c76e b90002                 lda inputbuf, y
  1161  c771 c93a                   cmp #':'
  1162  c773 d003                   bne +
  1163  c775 c8                     iny
  1164  c776 a900                   lda #0 ; Z true (EQ)
  1165  c778 60                 +   rts
  1166                          
  1167                          chkfilename:
  1168  c779 84ff                   sty tmp
  1169  c77b b90002                 lda inputbuf, y
  1170  c77e c922                   cmp #34
  1171  c780 d010                   bne ++
  1172  c782 c8                 -   iny
  1173  c783 b90002                 lda inputbuf, y
  1174  c786 c90d                   cmp #13
  1175  c788 d004                   bne +
  1176  c78a a4ff                   ldy tmp
  1177  c78c d004                   bne ++
  1178  c78e c922               +   cmp #34
  1179  c790 d0f0                   bne -
  1180  c792 60                 ++  rts
  1181                          
  1182                          chkhexbyteofsequence:
  1183  c793 2091c2                 jsr inputhexbyte
  1184  c796 20b6c7                 jsr +
  1185  c799 d011                   bne ++ ; Z false (NE) if failed checks
  1186  c79b c4a4                   cpy len
  1187  c79d f00d                   beq ++ ; Z true (EQ) if end of input
  1188  c79f 85ff                   sta tmp
  1189  c7a1 b90002                 lda inputbuf,y
  1190  c7a4 c920                   cmp #$20
  1191  c7a6 d004                   bne ++ ; Z false (NE) if not space
  1192  c7a8 a5ff                   lda tmp
  1193  c7aa a200                   ldx #0 ; Z true (EQ) is space delimeter
  1194  c7ac 60                 ++  rts
  1195                          
  1196                          chkhexword:
  1197  c7ad 2074c2                 jsr inputhexword
  1198  c7b0 4cb6c7                 jmp +
  1199                          
  1200                          chkhexaddr1:
  1201  c7b3 2074c2                 jsr inputhexword
  1202  c7b6 a200               +   ldx #0 ; Z true (EQ)
  1203  c7b8 9001                   bcc +
  1204  c7ba e8                     inx ; Z false (NE)
  1205  c7bb 60                 +   rts
  1206                          
  1207                          chkhexbyte
  1208  c7bc 98                     tya
  1209  c7bd 48                     pha ; save y
  1210  c7be 2091c2                 jsr inputhexbyte
  1211  c7c1 b00d                   bcs +
  1212  c7c3 85a6                   sta tmp2
  1213  c7c5 20adc2                 jsr inputhexnybble
  1214  c7c8 9006                   bcc +
  1215  c7ca 68                     pla ; throw away saved y
  1216  c7cb a5a6                   lda tmp2
  1217  c7cd a200                   ldx #0 ; Z true (EQ)
  1218  c7cf 60                     rts
  1219  c7d0 68                 +   pla
  1220  c7d1 a8                     tay ; won't be zero, so Z false (NE)
  1221  c7d2 60                     rts    
  1222                          
  1223                          chkhexaddr2:
  1224  c7d3 a5fb                   lda ptr1
  1225  c7d5 48                     pha
  1226  c7d6 a5fc                   lda ptr1+1
  1227  c7d8 48                     pha
  1228  c7d9 20b3c7                 jsr chkhexaddr1
  1229  c7dc f005                   beq +
  1230  c7de 68                     pla
  1231  c7df 68                     pla
  1232  c7e0 a901                   lda #1 ; Z false (NE)
  1233  c7e2 60                     rts
  1234  c7e3 a5fb               +   lda ptr1
  1235  c7e5 85fd                   sta ptr2
  1236  c7e7 a5fc                   lda ptr1+1
  1237  c7e9 85fe                   sta ptr2+1
  1238  c7eb 68                     pla
  1239  c7ec 85fc                   sta ptr1+1
  1240  c7ee 68                     pla
  1241  c7ef 85fb                   sta ptr1
  1242  c7f1 a900                   lda #0 ; Z true (EQ)
  1243  c7f3 60                     rts    
  1244                          
  1245                          chkaddr1cmd:
  1246  c7f4 b90002                 lda inputbuf, y
  1247  c7f7 c941               +   cmp #'A'
  1248  c7f9 d004                   bne +
  1249  c7fb c8                     iny
  1250  c7fc 4cbbc3                 jmp executeassemble
  1251  c7ff c944               +   cmp #'D'
  1252  c801 d004                   bne +
  1253  c803 c8                     iny
  1254  c804 4c27c7                 jmp executedisassemble
  1255  c807 c952               +   cmp #'R'
  1256  c809 d004                   bne +
  1257  c80b c8                     iny
  1258  c80c 4c0ec7                 jmp executerun
  1259  c80f 60                 +   rts
  1260                          
  1261                          newline:
  1262  c810 a90d                   lda #13
  1263  c812 4cd2ff                 jmp charout
  1264                          
  1265                          pagemore:
  1266  c815 a95e                   lda #<pagemoremsg
  1267  c817 a2cb                   ldx #>pagemoremsg
  1268  c819 20cbc2                 jsr strout
  1269  c81c 20e4ff             -   jsr getkey
  1270  c81f f0fb                   beq -
  1271  c821 48                     pha
  1272  c822 2010c8                 jsr newline
  1273  c825 68                     pla
  1274  c826 c951                   cmp #'Q'
  1275  c828 60                     rts
  1276                          
  1277                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1278                          ;     jsr $ffd2
  1279                          ;     pha
  1280                          ; -   lda $d011
  1281                          ;     bpl -
  1282                          ; -   lda $d011
  1283                          ;     bmi -
  1284                          ; -   lda $d011
  1285                          ;     bpl -
  1286                          ; -   lda $d011
  1287                          ;     bmi -
  1288                          ;     pla
  1289                          ;     rts
  1290                          
  1291  c829 00                 end: brk
  1292                          
  1293                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  1294                          ninst = 56
  1295  c82a 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  1296  c862 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  1297  c89a 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  1298                          
  1299                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  1300                          mode_jmptable:
  1301  c8d2 3dc1               !word dispModeAcc-1; 0 Accumulator 1
  1302  c8d4 42c1               !word dispModeNone-1 ; 1 None 1
  1303  c8d6 43c1               !word dispModeImm-1 ; 2 Immediate 2
  1304  c8d8 54c1               !word dispModeIndX-1 ; 3 IndirectX 2
  1305  c8da 74c1               !word dispModeIndY-1 ; 4 IndirectY 2
  1306  c8dc 94c1               !word dispModeRel-1 ; 5 Relative 2
  1307  c8de 48c1               !word dispModeZP-1 ; 6 ZeroPage 2
  1308  c8e0 d0c1               !word dispModeZPX-1 ; 7 ZeroPageX 2
  1309  c8e2 ddc1               !word dispModeZPY-1 ; 8 ZeroPageY 2
  1310  c8e4 eac1               !word dispModeAbs-1 ; 9 Absolute 3
  1311  c8e6 fcc1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  1312  c8e8 09c2               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  1313  c8ea 16c2               !word dispModeInd-1 ; 12 Indirect 3
  1314                          
  1315                          mode_examples:
  1316  c8ec 4100               !text "A", 0 ; 0 Accumulator
  1317  c8ee 00                 !text "", 0 ; 1 None
  1318  c8ef 2324313200         !text "#$12", 0 ; 2 Immediate
  1319  c8f4 282431322c582900   !text "($12,X)", 0 ; 3 IndirectX
  1320  c8fc 28243132292c5900   !text "($12),Y", 0 ; 4 IndirectY
  1321  c904 243132333420282d...!text "$1234 (-128 to +127)", 0 ; 5 Relative
  1322  c919 24313200           !text "$12", 0 ; 6 ZeroPage
  1323  c91d 2431322c5800       !text "$12,X", 0 ; 7 ZeroPageX
  1324  c923 2431322c5900       !text "$12,Y", 0 ; 8 ZeroPageY
  1325  c929 243132333400       !text "$1234", 0 ; 9 Absolute
  1326  c92f 24313233342c5800   !text "$1234,X", 0 ; 10 AbsoluteX
  1327  c937 24313233342c5900   !text "$1234,Y", 0 ; 11 AbsoluteY
  1328  c93f 2824313233342900   !text "($1234)", 0 ; 12 Indirect
  1329                          
  1330                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  1331                          nopcodes = 151
  1332  c947 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  1333  c9de 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  1334  ca75 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  1335                          
  1336  cb0c 0d91565741533230...copyright !text 13,145,"VWAS2024 (C) 2024 DAVID R. VAN WAGNER", 13, "MIT LICENSE DAVEVW.COM", 157, 13, 0
  1337  cb4d 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  1338  cb5e 285b515d20544f20...pagemoremsg !text "([Q] TO QUIT, ELSE CONTINUE)...",0
  1339                          
  1340                          finish = *
