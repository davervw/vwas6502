
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGETS:                              *        <<<
     7                          ;; >>>       ** (1)  C64 8000-9FFF screen editor                *        <<<
     8                          ;; >>>       ** (2)  C64 8000-9FFF terminal edition             *        <<<
     9                          ;; >>>       ** (3)  6502+MC6850 minimum system                 *        <<<
    10                          ;; >>>       *   56K(RAM),8K(ROM), 2 bytes IO for MC6850 UART   *        <<<
    11                          ;; >>>       ****************************************************        <<<
    12                          ;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          ;; MIT License
    15                          ;;
    16                          ;; Copyright (c) 2024 David R. Van Wagner
    17                          ;; davevw.com
    18                          ;;
    19                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    20                          ;; of this software and associated documentation files (the "Software"), to deal
    21                          ;; in the Software without restriction, including without limitation the rights
    22                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    23                          ;; copies of the Software, and to permit persons to whom the Software is
    24                          ;; furnished to do so, subject to the following conditions:
    25                          ;;
    26                          ;; The above copyright notice and this permission notice shall be included in all
    27                          ;; copies or substantial portions of the Software.
    28                          ;;
    29                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    30                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    31                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    32                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    33                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    34                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    35                          ;; SOFTWARE.
    36                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                          
    40                          ; Important! define exactly ONE target (set in build.sh)
    41                          ;C64SCREEN = 1
    42                          ;C64TERMINAL = 1
    43                          ;MINIMUM = 1
    44                          
    45                          ; options (set in build.sh)
    46                          ;NEEDECHO = 0
    47                          
    48                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                          
    50                          ;; _
    51                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    52                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    53                          ;; 1000 (display memory at $1000)
    54                          ;; 1000.2000 (display memory range $1000 to $2000)
    55                          ;; 1000. (display next screenful of memory starting at $1000)
    56                          ;; . (display next screenful of memory)
    57                          ;; 1000 r (JMP $1000)
    58                          ;; 1000: 01 02 03 (modify memory)
    59                          ;; (NEW SYNTAX)
    60                          ;; 1000 d (disassemble starting at address, for screenful)
    61                          ;; d (continue disassembling from last address)
    62                          ;; 1000 a (assemble starting at, interactive until empty line) 
    63                          ;; x (exit monitor -- C64 only)
    64                          ;; ? (commands help)
    65                          ;; ? a (list instructions available)
    66                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    67                          ;; ? mode (show addressing modes example syntax for 6502)
    68                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    69                          ;; (FUTURE SYNTAX, not implemented)
    70                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    71                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    72                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    73                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    74                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    75                          ;; .A: 00 (change register, replace A with X, Y, SP, S, PC, SR, P, N, V, B, D, I, Z, C as appropriate, colon is optional)
    76                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    77                          ;;
    78                          ;; (INTERACTIVE ASSEMBLER)
    79                          ;; 1000 _
    80                          ;;      ADC #$12
    81                          ;; 1000 69 12    ADC #$12
    82                          ;; 1002 _
    83                          ;;      JSR $1234
    84                          ;; 1002 20 34 12 JSR $1234
    85                          ;; 1005 _
    86                          ;;      RTS
    87                          ;; 1005 60       RTS
    88                          ;; 1006 _
    89                          ;;      XYZ
    90                          ;;      XYZ ?
    91                          ;; 1006 _
    92                          ;; _
    93                          ;;
    94                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    95                          ;; and can cursor up to revise, 
    96                          ;;
    97                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    98                          ;;
    99                          
   100                          ; global
   101                          inputbuf=$0200
   102                          
   103                          
   104                          ; kernal/system calls
   105                          
   106                          !ifdef MINIMUM {
   107                          charout=JUART_OUT
   108                          getkey=JUART_IN
   109                          }
   110                          
   111                          !ifdef C64SCREEN {
   112                          setlfs=$ffba
   113                          setnam=$ffbd
   114                          charin=$ffcf ; screen editor
   115                          charout=$ffd2
   116                          fsave =$ffd8
   117                          getkey=$ffe4
   118                          }
   119                          
   120                          !ifdef C64TERMINAL {
   121                          setlfs=$ffba
   122                          setnam=$ffbd
   123                          charout=$ffd2
   124                          getkey=$ffe4
   125                          fsave =$ffd8
   126                          }
   127                          
   128                          ; zeropage
   129                          !ifdef MINIMUM {
   130                          opidx=$f0
   131                          inidx=$f1
   132                          mode=$f2
   133                          size=$f3
   134                          ptr3=$f4 ; and $f5
   135                          count=$f6
   136                          len=$f7
   137                          savepos=$f8
   138                          tmp2=$f9
   139                          flag=$fa
   140                          ptr1=$fb ; and $fc
   141                          ptr2=$fd ; and $fe
   142                          tmp=$ff
   143                          } else {
   144                          opidx=$22
   145                          inidx=$23
   146                          mode=$24
   147                          size=$25
   148                          ptr3=$26 ; and $27
   149                          count=$a3
   150                          len=$a4
   151                          savepos=$a5
   152                          tmp2=$a6
   153                          flag=$a7
   154                          ptr1=$fb ; and $fc
   155                          ptr2=$fd ; and $fe
   156                          tmp=$ff
   157                          }
   158                          
   159                          !ifdef MINIMUM {
   160                          * = $e000
   161                          } else { // any C64
   162                          * = $8000
   163                              ; check if irq/brk vector installed
   164  8000 ad1603                 lda $316
   165  8003 ae1703                 ldx $317
   166  8006 e08c                   cpx #>brk64
   167  8008 f010                   beq +
   168  800a 8d7e92                 sta savebrkvector
   169  800d 8e7f92                 stx savebrkvector+1
   170  8010 a901                   lda #<brk64
   171  8012 a28c                   ldx #>brk64
   172  8014 8d1603                 sta $316
   173  8017 8e1703                 stx $317
   174                          +   ; check if nmi vector installed
   175  801a ad1803                 lda $318
   176  801d ae1903                 ldx $319
   177  8020 e08b                   cpx #>nmi64
   178  8022 f010                   beq +
   179  8024 8d8092                 sta savenmivector
   180  8027 8e8192                 stx savenmivector+1
   181  802a a9e2                   lda #<nmi64
   182  802c a28b                   ldx #>nmi64
   183  802e 8d1803                 sta $318
   184  8031 8e1903                 stx $319
   185                              +
   186                          }
   187                          
   188                          start:
   189  8034 d8                     cld
   190  8035 58                     cli
   191  8036 a9af                   lda #<copyright
   192  8038 a28f                   ldx #>copyright
   193  803a 20bb83                 jsr strout
   194  803d a90d                   lda #<firsthelp
   195  803f a290                   ldx #>firsthelp
   196  8041 20bb83                 jsr strout
   197  8044 4c298b                 jmp save_regs_and_stack
   198                          
   199                          input_loop:
   200  8047 20d683                 jsr inputline
   201  804a 20d983                 jsr parseline
   202  804d 4c4780                 jmp input_loop
   203                          
   204                          !ifndef MINIMUM {
   205                          ; C64 only
   206                          chkextrac64:
   207  8050 205c80                 jsr chkexit
   208  8053 d003                   bne +
   209  8055 4c7080                 jmp execute_exit
   210  8058 18                 +   clc ; no error
   211  8059 a201                   ldx #1 ; Z false - not consumed
   212  805b 60                     rts
   213                          
   214                          chkexit:
   215  805c b90002                 lda inputbuf, y
   216  805f c958                   cmp #'X'
   217  8061 d008                   bne +
   218  8063 c8                     iny
   219  8064 c4a4                   cpy len ; validate no extra characters
   220  8066 f003                   beq +
   221  8068 4c6c80                 jmp extra_error
   222  806b 60                 +   rts
   223                          
   224                          extra_error:
   225                              ; pop local return address
   226  806c 68                     pla
   227  806d 68                     pla
   228  806e 38                     sec ; error
   229  806f 60                     rts
   230                          
   231                          execute_exit:
   232  8070 ad7e92                 lda savebrkvector
   233  8073 ae7f92                 ldx savebrkvector+1
   234  8076 8d1603                 sta $316
   235  8079 8e1703                 stx $317
   236  807c ad8092                 lda savenmivector
   237  807f ae8192                 ldx savenmivector+1
   238  8082 8d1803                 sta $318
   239  8085 8e1903                 stx $319
   240                              ; pop monitor return addresses, so only original caller is left
   241  8088 68                     pla
   242  8089 68                     pla
   243  808a 68                     pla
   244  808b 68                     pla
   245  808c 68                     pla
   246  808d 68                     pla
   247  808e 60                     rts
   248                          
   249                          display_extra_help:
   250  808f a920                   lda #<extra_help
   251  8091 a290                   ldx #>extra_help
   252  8093 4cbb83                 jmp strout
   253                          
   254                          !ifdef C64SCREEN {
   255                          display_page_disassemble:
   256  8096 a5fb                   lda ptr1
   257  8098 a6fc                   ldx ptr1+1
   258  809a 203f83                 jsr disphexword
   259  809d a95e                   lda #<page_disassemble
   260  809f a290                   ldx #>page_disassemble
   261  80a1 4cbb83                 jmp strout
   262                          
   263                          display_page_displaymemory:
   264  80a4 201f8b                 jsr newline
   265  80a7 a5fb                   lda ptr1
   266  80a9 a6fc                   ldx ptr1+1
   267  80ab 203f83                 jsr disphexword
   268  80ae a965                   lda #<page_displaymemory
   269  80b0 a290                   ldx #>page_displaymemory
   270  80b2 4cbb83                 jmp strout
   271                          
   272                          inputlinec64:
   273  80b5 a000                   ldy #0
   274  80b7 20cfff             -   jsr charin
   275  80ba 990002                 sta inputbuf,y
   276  80bd c8                     iny
   277  80be c90d                   cmp #13
   278  80c0 d0f5                   bne -
   279  80c2 60                     rts
   280                          
   281                          continueassemblec64:
   282  80c3 a914                   lda #20
   283  80c5 20d2ff                 jsr charout
   284  80c8 20d2ff                 jsr charout
   285  80cb a5fb                   lda ptr1
   286  80cd a6fc                   ldx ptr1+1
   287  80cf 203f83                 jsr disphexword
   288  80d2 a920                   lda #' '
   289  80d4 20d2ff                 jsr charout
   290  80d7 20d2ff                 jsr charout
   291  80da 4cd2ff                 jmp charout
   292                          }
   293                          
   294                          chkfilename:
   295  80dd 20788a                 jsr skipspaces
   296  80e0 84ff                   sty tmp
   297  80e2 b90002                 lda inputbuf, y
   298  80e5 c922                   cmp #34 ; double quote
   299  80e7 d022                   bne ++
   300  80e9 c8                 -   iny
   301  80ea b90002                 lda inputbuf, y
   302  80ed c90d                   cmp #13
   303  80ef d004                   bne +
   304  80f1 a4ff                   ldy tmp
   305  80f3 d016                   bne ++
   306  80f5 c922               +   cmp #34 ; double quote
   307  80f7 d0f0                   bne -
   308  80f9 98                     tya ; index of ending double quotes
   309  80fa 48                     pha ; save
   310  80fb 18                     clc ; will subtract one more
   311  80fc e5ff                   sbc tmp ; subtract index of first quote, have filename length
   312  80fe a6ff                   ldx tmp
   313  8100 e8                     inx ; low address of filename
   314  8101 a002                   ldy #>inputbuf ; high address of filename
   315  8103 20bdff                 jsr setnam
   316  8106 68                     pla
   317  8107 a8                     tay
   318  8108 c8                     iny ; advance past ending double quotes
   319  8109 a900                   lda #0 ; set Z true
   320  810b 60                 ++  rts
   321                          
   322                          check_execute_save:
   323  810c 20dd80             +   jsr chkfilename
   324  810f f006                   beq +
   325  8111 20618a                 jsr reporterr
   326  8114 a201                   ldx #1 ; set Z false
   327  8116 60                     rts
   328  8117 202581             +   jsr chkoptionaldrive
   329  811a 203b81                 jsr chksave
   330  811d d005                   bne +
   331  811f 204481                 jsr executesave
   332  8122 a200                   ldx #0 ; set Z true
   333  8124 60                 +   rts
   334                          
   335                          chkoptionaldrive:
   336  8125 a908                   lda #8
   337  8127 8d8292                 sta drive
   338  812a 20788a                 jsr skipspaces
   339  812d 20cb8a                 jsr chkhexbyte
   340  8130 d008                   bne +
   341  8132 8d8292                 sta drive
   342  8135 20788a                 jsr skipspaces
   343  8138 a900                   lda #0 ; set Z true
   344  813a 60                 +   rts
   345                          
   346                          chksave:
   347  813b 20788a                 jsr skipspaces
   348  813e b90002                 lda inputbuf, y
   349  8141 c953                   cmp #'S'
   350  8143 60                     rts
   351                          
   352                          executesave:
   353  8144 201f8b                 jsr newline
   354  8147 a9c0                   lda #$c0 ; KERNAL control and error messages
   355  8149 859d                   sta $9d ; set messages to be displayed
   356  814b a901                   lda #1
   357  814d ae8292                 ldx drive
   358  8150 a00f                   ldy #15
   359  8152 20baff                 jsr setlfs
   360  8155 a9fb                   lda #ptr1
   361  8157 a6fd                   ldx ptr2
   362  8159 a4fe                   ldy ptr2+1
   363  815b 20d8ff                 jsr fsave
   364  815e 4c1f8b                 jmp newline
   365                          }
   366                          
   367                          ; test: ; all the addressing modes here for testing disassembly
   368                          ;     nop
   369                          ;     lda $1234
   370                          ;     lda $1234,x
   371                          ;     lda $1234,y
   372                          ;     asl
   373                          ;     lda #$12
   374                          ;     lda ($12,x)
   375                          ;     lda ($12),y
   376                          ;     jmp ($1234)
   377                          ; -   bne -
   378                          ;     lda $12
   379                          ;     lda $12,x
   380                          ;     ldx $12,y
   381                          ;     !byte $FF ; unknown
   382                          
   383                          disassemble:
   384  8161 a917                   lda #23
   385  8163 85a3                   sta count
   386  8165 a000               -   ldy #0
   387  8167 b1fb                   lda (ptr1),y
   388  8169 209081                 jsr find_opcode
   389  816c 20f381                 jsr disp_current
   390  816f a525                   lda size
   391  8171 1002                   bpl +
   392  8173 a901                   lda #1
   393  8175 18                 +   clc
   394  8176 65fb                   adc ptr1
   395  8178 85fb                   sta ptr1
   396  817a 9002                   bcc +
   397  817c e6fc                   inc ptr1+1
   398  817e c6a3               +   dec count
   399  8180 d0e3                   bne -
   400                          !ifdef C64SCREEN {
   401  8182 4c9680                 jmp display_page_disassemble
   402                          } else {    
   403                              rts
   404                          }
   405                          
   406                          compareptrs:
   407  8185 a5fc                   lda ptr1+1
   408  8187 c5fe                   cmp ptr2+1
   409  8189 d004                   bne +
   410  818b a5fb                   lda ptr1
   411  818d c5fd                   cmp ptr2
   412  818f 60                 +   rts
   413                          
   414                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   415                          ; and properties updated in ZP globals size,inidx,opidx,mode
   416  8190 a097                   ldy #nopcodes
   417  8192 a296                   ldx #nopcodes-1
   418  8194 ddea8d             -   cmp opcodes,x
   419  8197 f00f                   beq +
   420  8199 ca                     dex
   421  819a 88                     dey
   422  819b d0f7                   bne -
   423  819d 18                     clc
   424  819e a901                   lda #1
   425  81a0 8525                   sta size
   426  81a2 a9ff                   lda #$FF
   427  81a4 aa                     tax
   428  81a5 a8                     tay
   429  81a6 900a                   bcc ++
   430  81a8 bd818e             +   lda instidx, x
   431  81ab bc188f                 ldy modeidx, x
   432  81ae 20b981                 jsr getsize
   433  81b1 38                     sec
   434  81b2 8523               ++  sta inidx
   435  81b4 8622                   stx opidx
   436  81b6 8424                   sty mode
   437  81b8 60                     rts
   438                          
   439                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   440                              ; result returned in size
   441  81b9 48                     pha
   442  81ba a901                   lda #1
   443  81bc 8525                   sta size
   444  81be 68                     pla
   445  81bf c002                   cpy #2 // Immediate
   446  81c1 9008                   bcc +
   447  81c3 e625                   inc size
   448  81c5 c009                   cpy #9 // Absolute
   449  81c7 9002                   bcc +
   450  81c9 e625                   inc size
   451  81cb 60                 +   rts
   452                          
   453                          disp_opcode: ; .A opcode byte
   454  81cc 209081                 jsr find_opcode
   455  81cf 8a                     txa
   456                              ; fall through to display instruction
   457                          
   458                          dispinst: ; .A instruction index 0..55, note modifies A and X
   459  81d0 aa                     tax
   460  81d1 e038                   cpx #ninst
   461  81d3 b012                   bcs +
   462  81d5 bd298c                 lda inst0, x
   463  81d8 20d2ff                 jsr charout
   464  81db bd618c                 lda inst1, x
   465  81de 20d2ff                 jsr charout
   466  81e1 bd998c                 lda inst2, x
   467  81e4 4cd2ff                 jmp charout
   468  81e7 a93f               +   lda #'?'
   469  81e9 20d2ff                 jsr charout
   470  81ec 20d2ff                 jsr charout
   471  81ef 20d2ff                 jsr charout
   472  81f2 60                     rts
   473                          
   474                          disp_current:
   475  81f3 a5fb                   lda ptr1
   476  81f5 a6fc                   ldx ptr1+1
   477  81f7 203f83                 jsr disphexword
   478  81fa a920                   lda #$20
   479  81fc 20d2ff                 jsr charout
   480  81ff a000                   ldy #0
   481  8201 a625                   ldx size
   482  8203 b1fb               -   lda (ptr1),y
   483  8205 204583                 jsr disphexbyte
   484  8208 a920                   lda #$20
   485  820a 20d2ff                 jsr charout
   486  820d c8                     iny
   487  820e ca                     dex
   488  820f d0f2                   bne -
   489  8211 c003               -   cpy #3
   490  8213 f00e                   beq +
   491  8215 a920                   lda #$20
   492  8217 20d2ff                 jsr charout
   493  821a 20d2ff                 jsr charout
   494  821d 20d2ff                 jsr charout
   495  8220 c8                     iny
   496  8221 d0ee                   bne -
   497  8223 a523               +   lda inidx
   498  8225 20d081                 jsr dispinst
   499  8228 a920                   lda #$20
   500  822a 20d2ff                 jsr charout
   501  822d 203582                 jsr disp_mode
   502  8230 a90d                   lda #13
   503  8232 4cd2ff                 jmp charout
   504                          
   505                          disp_mode
   506  8235 a524                   lda mode
   507  8237 c90d                   cmp #13
   508  8239 b00a                   bcs +
   509  823b 0a                     asl
   510  823c aa                     tax
   511  823d bdd28c                 lda mode_jmptable+1,x
   512  8240 48                     pha
   513  8241 bdd18c                 lda mode_jmptable,x
   514  8244 48                     pha
   515  8245 60                 +   rts
   516                          
   517                          dispModeAcc:
   518  8246 a941                   lda #'A'
   519  8248 4cd2ff                 jmp charout
   520                          
   521                          dispModeNone:
   522  824b 60                     rts
   523                          
   524                          dispModeImm:
   525  824c a923                   lda #'#'
   526  824e 20d2ff                 jsr charout
   527                          dispModeZP:
   528  8251 a924                   lda #'$'
   529  8253 20d2ff                 jsr charout
   530  8256 a001                   ldy #1
   531  8258 b1fb                   lda (ptr1),y
   532  825a 4c4583                 jmp disphexbyte
   533                          
   534                          dispModeIndX:
   535  825d a928                   lda #'('
   536  825f 20d2ff                 jsr charout
   537  8262 a924                   lda #'$'
   538  8264 20d2ff                 jsr charout
   539  8267 a001                   ldy #1
   540  8269 b1fb                   lda (ptr1),y
   541  826b 204583                 jsr disphexbyte
   542  826e a92c                   lda #','
   543  8270 20d2ff                 jsr charout
   544  8273 a958                   lda #'X'
   545  8275 20d2ff                 jsr charout
   546  8278 a929                   lda #')'
   547  827a 4cd2ff                 jmp charout
   548                          
   549                          dispModeIndY:
   550  827d a928                   lda #'('
   551  827f 20d2ff                 jsr charout
   552  8282 a924                   lda #'$'
   553  8284 20d2ff                 jsr charout
   554  8287 a001                   ldy #1
   555  8289 b1fb                   lda (ptr1),y
   556  828b 204583                 jsr disphexbyte
   557  828e a929                   lda #')'
   558  8290 20d2ff                 jsr charout
   559  8293 a92c                   lda #','
   560  8295 20d2ff                 jsr charout
   561  8298 a959                   lda #'Y'
   562  829a 4cd2ff                 jmp charout
   563                          
   564                          dispModeRel:
   565  829d a924                   lda #'$'
   566  829f 20d2ff                 jsr charout
   567  82a2 18                     clc
   568  82a3 a5fb                   lda ptr1
   569  82a5 6902                   adc #2
   570  82a7 8526                   sta ptr3
   571  82a9 a5fc                   lda ptr1+1
   572  82ab 6900                   adc #0
   573  82ad 8527                   sta ptr3+1
   574  82af a001                   ldy #1
   575  82b1 b1fb                   lda (ptr1),y
   576  82b3 1014                   bpl +
   577                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   578  82b5 49ff                   eor #$FF ; inverse
   579  82b7 18                     clc
   580  82b8 6901                   adc #1 ; complete getting absolute value from two's complement
   581  82ba 85ff                   sta tmp
   582  82bc 38                     sec
   583  82bd a526                   lda ptr3
   584  82bf e5ff                   sbc tmp
   585  82c1 8526                   sta ptr3
   586  82c3 b00d                   bcs ++
   587  82c5 c627                   dec ptr3+1
   588  82c7 9009                   bcc ++
   589  82c9 18                 +   clc ; simple case of adding
   590  82ca 6526                   adc ptr3
   591  82cc 8526                   sta ptr3
   592  82ce 9002                   bcc ++
   593  82d0 e627                   inc ptr3+1
   594  82d2 a526               ++  lda ptr3
   595  82d4 a627                   ldx ptr3+1
   596  82d6 4c3f83                 jmp disphexword
   597                          
   598                          dispModeZPX:
   599  82d9 205182                 jsr dispModeZP
   600  82dc a92c                   lda #','
   601  82de 20d2ff                 jsr charout
   602  82e1 a958                   lda #'X'
   603  82e3 4cd2ff                 jmp charout
   604                          
   605                          dispModeZPY:
   606  82e6 205182                 jsr dispModeZP
   607  82e9 a92c                   lda #','
   608  82eb 20d2ff                 jsr charout
   609  82ee a959                   lda #'Y'
   610  82f0 4cd2ff                 jmp charout
   611                          
   612                          dispModeAbs:
   613  82f3 a924                   lda #'$'
   614  82f5 20d2ff                 jsr charout
   615  82f8 a001                   ldy #1
   616  82fa b1fb                   lda (ptr1),y
   617  82fc 48                     pha
   618  82fd c8                     iny
   619  82fe b1fb                   lda (ptr1),y
   620  8300 aa                     tax
   621  8301 68                     pla
   622  8302 4c3f83                 jmp disphexword
   623                          
   624                          dispModeAbsX:
   625  8305 20f382                 jsr dispModeAbs
   626  8308 a92c                   lda #','
   627  830a 20d2ff                 jsr charout
   628  830d a958                   lda #'X'
   629  830f 4cd2ff                 jmp charout
   630                          
   631                          dispModeAbsY:
   632  8312 20f382                 jsr dispModeAbs
   633  8315 a92c                   lda #','
   634  8317 20d2ff                 jsr charout
   635  831a a959                   lda #'Y'
   636  831c 4cd2ff                 jmp charout
   637                          
   638                          dispModeInd:
   639  831f a928                   lda #'('
   640  8321 20d2ff                 jsr charout
   641  8324 20f382                 jsr dispModeAbs
   642  8327 a929                   lda #')'
   643  8329 4cd2ff                 jmp charout
   644                          
   645                          dispbinbyte: ; .A 00..FF
   646  832c a208                   ldx #8
   647  832e 85ff                   sta tmp
   648  8330 a930               -   lda #'0'
   649  8332 26ff                   rol tmp
   650  8334 9002                   bcc +
   651  8336 a931                   lda #'1'
   652  8338 20d2ff             +   jsr charout
   653  833b ca                     dex
   654  833c d0f2                   bne -
   655  833e 60                     rts
   656                          
   657                          disphexword: ; .A low, .X high, 0000..FFFF
   658  833f 48                     pha
   659  8340 8a                     txa
   660  8341 204583                 jsr disphexbyte
   661  8344 68                     pla
   662                              ;fall through to call again
   663                          
   664                          disphexbyte: ; .A 00..FF
   665  8345 48                     pha
   666  8346 4a                     lsr
   667  8347 4a                     lsr
   668  8348 4a                     lsr
   669  8349 4a                     lsr
   670  834a 204e83                 jsr disphexnybble
   671  834d 68                     pla
   672                              ;fall through to call again
   673                          
   674                          disphexnybble: ; .A 0..F
   675  834e 290f                   and #$0F
   676  8350 0930                   ora #$30
   677  8352 c93a                   cmp #$3A
   678  8354 9002                   bcc +
   679  8356 6906                   adc #$06
   680  8358 4cd2ff             +   jmp charout
   681                          
   682                          inputhexword: ; C set if fails
   683  835b a900                   lda #0
   684  835d 85fb                   sta ptr1
   685  835f 85fc                   sta ptr1+1
   686                          
   687  8361 a904                   lda #4 ; word is at most 4 nybbles
   688  8363 85a3                   sta count
   689  8365 209d83             --  jsr inputhexnybble
   690  8368 b012                   bcs +
   691                          
   692                              ; shift nibble up
   693  836a 0a                     asl
   694  836b 0a                     asl
   695  836c 0a                     asl
   696  836d 0a                     asl
   697                          
   698  836e a204                   ldx #4 ; 4 bits rotated into word
   699  8370 2a                 -   rol
   700  8371 26fb                   rol ptr1
   701  8373 26fc                   rol ptr1+1
   702  8375 ca                     dex
   703  8376 d0f8                   bne - ; repeat bits
   704                          
   705  8378 c6a3                   dec count
   706  837a d0e9                   bne -- ; repeat nybbles
   707                          
   708  837c a5a3               +   lda count
   709  837e c904                   cmp #4 ; set C if 4, otherwise clear
   710  8380 60                     rts
   711                          
   712                          inputhexbyte:
   713  8381 209d83                 jsr inputhexnybble
   714  8384 b016                   bcs ++
   715  8386 85ff                   sta tmp
   716  8388 209d83                 jsr inputhexnybble
   717  838b 9005                   bcc +
   718  838d 18                     clc ; allow single digit as byte
   719  838e a5ff                   lda tmp
   720  8390 900a                   bcc ++
   721  8392 06ff               +   asl tmp
   722  8394 06ff                   asl tmp
   723  8396 06ff                   asl tmp
   724  8398 06ff                   asl tmp
   725  839a 05ff                   ora tmp ; necessary to assemble the two nybbles
   726  839c 60                 ++  rts
   727                          
   728                          inputhexnybble:
   729  839d b90002                 lda $0200,y
   730  83a0 297f                   and #$7F
   731  83a2 38                     sec
   732  83a3 e930                   sbc #$30
   733  83a5 9012                   bcc ++
   734  83a7 c90a                   cmp #10
   735  83a9 900c                   bcc +
   736  83ab e907                   sbc #7
   737  83ad 900a                   bcc ++
   738  83af c90a                   cmp #10
   739  83b1 9006                   bcc ++
   740  83b3 c910                   cmp #16
   741  83b5 b002                   bcs ++
   742  83b7 c8                 +   iny
   743  83b8 60                     rts
   744  83b9 38                 ++  sec
   745  83ba 60                     rts
   746                          
   747                          strout:
   748  83bb 8526                   sta ptr3
   749  83bd 8627                   stx ptr3+1
   750                          strout2:    
   751  83bf a000                   ldy #0
   752  83c1 b126               -   lda (ptr3),y
   753  83c3 f006                   beq +
   754  83c5 20d2ff                 jsr charout
   755  83c8 c8                     iny
   756  83c9 d0f6                   bne -
   757  83cb 98                 +   tya
   758  83cc 38                     sec
   759  83cd 6526                   adc ptr3
   760  83cf 8526                   sta ptr3
   761  83d1 9002                   bcc +
   762  83d3 e627                   inc ptr3+1
   763  83d5 60                 +   rts
   764                          
   765                          inputline:
   766                          !ifdef C64SCREEN {
   767  83d6 4cb580                 jmp inputlinec64
   768                          } else {
   769                              ldy #0
   770                          --  sty count
   771                          -   jsr getkey
   772                              beq -
   773                              ldy count
   774                          !ifdef MINIMUM {
   775                              cmp #8 ; backspace
   776                          } else {
   777                              cmp #20
   778                          }
   779                              bne +
   780                              cpy #0
   781                              beq -
   782                              dey
   783                          !if NEEDECHO = 1 {    
   784                              jsr charout
   785                          }
   786                              jmp --
   787                          +   cmp #13
   788                              beq +
   789                              cmp #' '
   790                              bcc -
   791                              cmp #128
   792                              bcs -
   793                          +
   794                          !if NEEDECHO = 1 {    
   795                              jsr charout
   796                          }
   797                              sta inputbuf,y
   798                              iny
   799                              cmp #13
   800                              bne --
   801                              rts
   802                          }
   803                          
   804                          parseline:
   805  83d9 c001                   cpy #1
   806  83db d003                   bne +
   807                          -
   808                          !ifdef C64SCREEN {   
   809  83dd 4c1f8b                 jmp newline
   810                          } else {
   811                              rts
   812                          }
   813  83e0 88                 +   dey
   814  83e1 84a4                   sty len
   815                              ; skip whitespace
   816                              ; check for address, put in ptr1
   817                              ; or check for dot, then require address put in ptr2
   818                              ; or check for ?, and optional parameter, execute help
   819                              ; check for whitespace
   820                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   821                              ; check for string, store at start of inputbuf
   822                              ; check for drive number
   823                              ; check for whitespace
   824                              ; check command ":rda?mls", execute command
   825  83e3 a000                   ldy #0
   826  83e5 20788a                 jsr skipspaces
   827  83e8 c4a4                   cpy len
   828  83ea f0f1                   beq -
   829  83ec 202e8a                 jsr chkcontinuedis
   830  83ef d003                   bne +
   831  83f1 20528a                 jsr executedisassemble ; note won't return
   832  83f4 20408a             +   jsr chkcontinueasm
   833  83f7 d003                   bne +
   834  83f9 206686                 jsr continueassemble ; note won't return
   835  83fc 20878a             +   jsr chkdot
   836  83ff d003                   bne +
   837  8401 4ce884                 jmp executedot
   838  8404 20928a             +   jsr chkhelp
   839  8407 d003                   bne +
   840  8409 4cf284                 jmp executehelp
   841                          +
   842                          !ifndef MINIMUM {
   843  840c 205080                 jsr chkextrac64 ; check syntax only available on C64
   844  840f b014                   bcs + ; error if C set
   845  8411 f005                   beq ++ ; consumed if Z set, skip next test(s)
   846                          }    
   847  8413 20c28a                 jsr chkhexaddr1
   848  8416 d003                   bne error
   849  8418 4c1e84             ++  jmp executeaddr1
   850                          error:
   851  841b 4c618a                 jmp reporterr
   852                          
   853                          executeaddr1:
   854  841e c4a4                   cpy len
   855  8420 d003                   bne +
   856  8422 4c7784                 jmp executedisplay1
   857  8425 20878a             +   jsr chkdot
   858  8428 d00f                   bne +
   859  842a c4a4                   cpy len
   860  842c f021                   beq executepagedisplay
   861  842e 20e28a                 jsr chkhexaddr2
   862  8431 d0e8                   bne error
   863  8433 18                     clc
   864  8434 66a7                   ror flag
   865  8436 4c6784                 jmp executeaddr12
   866  8439 20788a             +   jsr skipspaces
   867  843c 209d8a                 jsr chkcolon
   868  843f d003                   bne +
   869  8441 4cc684                 jmp executemodify
   870  8444 20038b             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   871                          !ifdef MINIMUM {
   872                              jmp reportnotimplemented
   873                          } else {
   874  8447 20dd80                 jsr chkfilename
   875  844a d0cf                   bne error
   876  844c 4cef84                 jmp executeloadfilename
   877                          }
   878                          
   879                          executepagedisplay:
   880  844f a5fb                   lda ptr1
   881  8451 18                     clc
   882                          !ifdef MINIMUM {
   883                              adc #$5f
   884                          } else {
   885  8452 69b7                   adc #$b7
   886                          }
   887  8454 85fd                   sta ptr2
   888  8456 a5fc                   lda ptr1+1
   889                          !ifdef MINIMUM {
   890                              adc #$01
   891                          } else {
   892  8458 6900                   adc #$00
   893                          }
   894  845a 85fe                   sta ptr2+1
   895  845c 9006                   bcc +
   896  845e a9ff                   lda #$ff
   897  8460 85fd                   sta ptr2
   898  8462 85fe                   sta ptr2+1
   899  8464 38                 +   sec
   900  8465 66a7                   ror flag
   901                              ; fall through to executeaddr12
   902                          
   903                          executeaddr12:
   904  8467 c4a4                   cpy len
   905  8469 d003                   bne +
   906  846b 4c7f84                 jmp executedisplay12
   907                          !ifndef MINIMUM { // any C64
   908  846e 200c81             +   jsr check_execute_save
   909  8471 f003                   beq ++
   910                          }
   911  8473 4c5a8a             +   jmp reportnotimplemented
   912  8476 60                 ++  rts
   913                          
   914                          executedisplay1:
   915  8477 a5fb                   lda ptr1
   916  8479 85fd                   sta ptr2
   917  847b a5fc                   lda ptr1+1
   918  847d 85fe                   sta ptr2+1
   919                              ; fall through executedisplay12
   920                          
   921                          executedisplay12:
   922  847f a9ff                   lda #$ff
   923  8481 85a3                   sta count
   924  8483 e6a3               -   inc count
   925  8485 a5a3                   lda count
   926                          !ifdef MINIMUM {    
   927                              and #$0f
   928                          } else {
   929  8487 2907                   and #$07
   930                          }
   931  8489 d016                   bne +
   932  848b a90d                   lda #13
   933  848d 20d2ff                 jsr charout
   934  8490 a5fb                   lda ptr1
   935  8492 a6fc                   ldx ptr1+1
   936  8494 203f83                 jsr disphexword
   937  8497 a93a                   lda #':'
   938  8499 20d2ff                 jsr charout
   939  849c a920                   lda #' '
   940  849e 20d2ff                 jsr charout
   941  84a1 a000               +   ldy #0
   942  84a3 b1fb                   lda (ptr1),y
   943  84a5 204583                 jsr disphexbyte
   944  84a8 a920                   lda #' '
   945  84aa 20d2ff                 jsr charout
   946  84ad e6fb                   inc ptr1
   947  84af d004                   bne +
   948  84b1 e6fc                   inc ptr1+1
   949  84b3 f00e                   beq ++
   950  84b5 208581             +   jsr compareptrs
   951  84b8 90c9                   bcc -
   952  84ba f0c7                   beq -
   953  84bc 24a7                   bit flag
   954  84be 1003                   bpl ++
   955                          !ifdef C64SCREEN {
   956  84c0 4ca480                 jmp display_page_displaymemory
   957                          }
   958  84c3 4c1f8b             ++  jmp newline
   959                          
   960                          executemodify:
   961  84c6 20788a                 jsr skipspaces
   962  84c9 c4a4                   cpy len
   963  84cb f018                   beq ++
   964  84cd 20a88a                 jsr chkhexbyteofsequence
   965  84d0 f003                   beq +
   966  84d2 4c1b84                 jmp error
   967  84d5 84ff               +   sty tmp
   968  84d7 a000                   ldy #0
   969  84d9 91fb                   sta (ptr1),y
   970  84db e6fb                   inc ptr1
   971  84dd d002                   bne +
   972  84df e6fc                   inc ptr1+1
   973  84e1 a4ff               +   ldy tmp
   974  84e3 d0e1                   bne executemodify
   975  84e5 4c1f8b             ++  jmp newline
   976                          
   977                          executedot:
   978  84e8 c4a4                   cpy len
   979  84ea d003                   bne +
   980  84ec 4c4f84                 jmp executepagedisplay
   981                          
   982                          executeloadfilename:
   983                          executeaddr1cmd:
   984  84ef 4c5a8a             +   jmp reportnotimplemented
   985                          
   986                          executehelp:
   987                          !ifdef C64SCREEN {
   988  84f2 201f8b                 jsr newline
   989                          }
   990  84f5 c4a4                   cpy len
   991  84f7 d003                   bne +
   992  84f9 4c2285                 jmp displayhelp
   993  84fc 20788a             +   jsr skipspaces
   994  84ff 203685                 jsr chkhelpinstructions
   995  8502 d003                   bne +
   996  8504 4c7285                 jmp displayinstructions
   997  8507 205085             +   jsr chkhelpmodes
   998  850a d003                   bne +
   999  850c 4c8985                 jmp displaymodes
  1000  850f 20a089             +   jsr chkinstruction
  1001  8512 d003                   bne +
  1002  8514 4c3986                 jmp executehelpinstruction
  1003  8517 204385             +   jsr chkhelpregisters
  1004  851a d003                   bne +
  1005  851c 4c758b                 jmp execute_display_registers
  1006  851f 4c5a8a             +   jmp reportnotimplemented
  1007                          
  1008                          displayhelp:
  1009  8522 a97d                   lda #<generalhelp
  1010  8524 a290                   ldx #>generalhelp
  1011  8526 20bb83                 jsr strout
  1012  8529 a972                   lda #<generalhelp2
  1013  852b a291                   ldx #>generalhelp2
  1014  852d 20bb83                 jsr strout
  1015                          !ifndef MINIMUM { // any C64
  1016  8530 208f80                 jsr display_extra_help
  1017                          }
  1018  8533 4c1f8b                 jmp newline
  1019                          
  1020                          chkhelpinstructions:
  1021  8536 b90002                 lda inputbuf, y
  1022  8539 c941                   cmp #'A'
  1023  853b d005                   bne +
  1024  853d b90102                 lda inputbuf+1, y
  1025  8540 c90d                   cmp #13
  1026                              ; no need to increment y if found, done parsing line
  1027  8542 60                 +   rts
  1028                          
  1029                          chkhelpregisters:
  1030  8543 b90002                 lda inputbuf, y
  1031  8546 c92e                   cmp #'.'
  1032  8548 d005                   bne +
  1033  854a b90102                 lda inputbuf+1, y
  1034  854d c90d                   cmp #13
  1035  854f 60                 +   rts
  1036                          
  1037                          chkhelpmodes:
  1038  8550 a95c                   lda #<modes_keyword
  1039  8552 a292                   ldx #>modes_keyword
  1040                              ; fall through to chkkeyword
  1041                          
  1042                          chkkeyword:
  1043  8554 84a3                   sty count
  1044  8556 8526                   sta ptr3
  1045  8558 8627                   stx ptr3+1
  1046  855a a6a3                   ldx count
  1047  855c a000                   ldy #0
  1048  855e bd0002             -   lda inputbuf, x
  1049  8561 d126                   cmp (ptr3),y
  1050  8563 d008                   bne +
  1051  8565 e8                     inx
  1052  8566 c8                     iny
  1053  8567 e4a4                   cpx len
  1054  8569 d0f3                   bne -
  1055  856b b126                   lda (ptr3),y ; matched if end of string, will set Z
  1056  856d 08                 +   php ; save Z
  1057  856e a4a3                   ldy count
  1058  8570 28                     plp ; restore Z
  1059  8571 60                     rts
  1060                          
  1061                          displayinstructions:
  1062  8572 a038                   ldy #ninst
  1063  8574 a200                   ldx #0
  1064  8576 8a                 -   txa
  1065  8577 48                     pha
  1066  8578 20d081                 jsr dispinst
  1067  857b a920                   lda #' '
  1068  857d 20d2ff                 jsr charout
  1069  8580 68                     pla
  1070  8581 aa                     tax
  1071  8582 e8                     inx
  1072  8583 88                     dey
  1073  8584 d0f0                   bne -
  1074  8586 4c1f8b                 jmp newline
  1075                          
  1076                          displaymodes:
  1077  8589 38                     sec
  1078  858a a900                   lda #0
  1079  858c 48                 -   pha
  1080  858d aa                     tax
  1081  858e bdeb8c                 lda mode_sorted, x
  1082  8591 209e85                 jsr dispmode
  1083  8594 68                     pla
  1084  8595 18                     clc
  1085  8596 6901                   adc #1
  1086  8598 c90d                   cmp #nmodes
  1087  859a 90f0                   bcc -
  1088  859c 18                     clc
  1089  859d 60                     rts
  1090                          
  1091                          dispmode:
  1092  859e c90d                   cmp #nmodes
  1093  85a0 b008                   bcs +
  1094  85a2 8524                   sta mode
  1095  85a4 20e685                 jsr disp_modename_and_example
  1096  85a7 4cab85                 jmp dispmodeinstructions
  1097  85aa 60                 +   rts
  1098                          
  1099                          dispmodeinstructions:
  1100                          !ifdef C64SCREEN {
  1101                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1102  85ab a524                   lda mode
  1103  85ad c903                   cmp #3
  1104  85af d005                   bne +
  1105  85b1 a920                   lda #' '
  1106  85b3 4cd2ff                 jmp charout
  1107                          }
  1108                              ; display instructions with this mode
  1109  85b6 a000               +   ldy #0
  1110  85b8 8423               --  sty inidx
  1111  85ba a200                   ldx #0
  1112  85bc 86ff               -   stx tmp
  1113  85be a523                   lda inidx
  1114  85c0 dd818e                 cmp instidx, x
  1115  85c3 d014                   bne ++
  1116  85c5 bd188f                 lda modeidx, x
  1117  85c8 c524                   cmp mode
  1118  85ca d00d                   bne ++
  1119  85cc a920                   lda #' '
  1120  85ce 20d2ff                 jsr charout
  1121  85d1 bd818e                 lda instidx, x
  1122  85d4 20d081                 jsr dispinst
  1123  85d7 a6ff                   ldx tmp
  1124  85d9 e8                 ++  inx
  1125  85da e097                   cpx #nopcodes
  1126  85dc 90de                   bcc -
  1127  85de c8                     iny
  1128  85df c038                   cpy #ninst
  1129  85e1 d0d5                   bne --
  1130  85e3 4c1f8b                 jmp newline
  1131                          
  1132                          disp_modename_and_example:
  1133  85e6 0a                     asl
  1134  85e7 aa                     tax
  1135  85e8 bdd08d                 lda modes, x
  1136  85eb 48                     pha
  1137  85ec bdd18d                 lda modes+1, x
  1138  85ef aa                     tax
  1139                          !ifdef C64SCREEN {
  1140  85f0 a912                   lda #18
  1141  85f2 20d2ff                 jsr charout
  1142                          }    
  1143  85f5 68                     pla
  1144  85f6 20bb83                 jsr strout
  1145  85f9 a920                   lda #' '
  1146  85fb 20d2ff                 jsr charout
  1147  85fe 20bf83                 jsr strout2
  1148                          !ifdef C64SCREEN {    
  1149  8601 a992                   lda #146
  1150  8603 20d2ff                 jsr charout
  1151                          }   
  1152  8606 60                     rts
  1153                          
  1154                          disp_modename_instruction_example:
  1155  8607 0a                     asl
  1156  8608 aa                     tax
  1157  8609 bdd08d                 lda modes, x
  1158  860c 48                     pha
  1159  860d bdd18d                 lda modes+1, x
  1160  8610 aa                     tax
  1161  8611 68                     pla
  1162  8612 20bb83                 jsr strout ; mode name
  1163  8615 a526                   lda ptr3
  1164  8617 48                     pha
  1165  8618 a527                   lda ptr3+1
  1166  861a 48                     pha
  1167  861b a93a                   lda #':'
  1168  861d 20d2ff                 jsr charout
  1169  8620 a920                   lda #' '
  1170  8622 20d2ff                 jsr charout
  1171  8625 a523                   lda inidx
  1172  8627 20d081                 jsr dispinst ; instruction
  1173  862a a920                   lda #' '
  1174  862c 20d2ff                 jsr charout
  1175  862f 68                     pla
  1176  8630 8527                   sta ptr3+1
  1177  8632 68                     pla
  1178  8633 8526                   sta ptr3
  1179  8635 20bf83                 jsr strout2 ; example
  1180  8638 60                     rts
  1181                          
  1182                          
  1183                          executehelpinstruction:
  1184  8639 a000                   ldy #0
  1185  863b 8422               -   sty opidx
  1186  863d b9818e                 lda instidx, y
  1187  8640 c523                   cmp inidx
  1188  8642 d01a                   bne +
  1189  8644 b9188f                 lda modeidx, y
  1190  8647 8524                   sta mode
  1191  8649 a622                   ldx opidx
  1192  864b bdea8d                 lda opcodes, x
  1193  864e 204583                 jsr disphexbyte
  1194  8651 a920                   lda #' '
  1195  8653 20d2ff                 jsr charout
  1196  8656 a524                   lda mode
  1197  8658 200786                 jsr disp_modename_instruction_example
  1198  865b 201f8b                 jsr newline
  1199  865e a422               +   ldy opidx
  1200  8660 c8                     iny
  1201  8661 c097                   cpy #nopcodes
  1202  8663 90d6                   bcc -
  1203  8665 60                     rts
  1204                          
  1205                          continueassemble:
  1206                          !ifdef C64SCREEN {   
  1207  8666 20c380                 jsr continueassemblec64
  1208                          }
  1209                              ; continue...
  1210                          
  1211                          executeassemble:
  1212  8669 68                     pla ; remove low byte return address
  1213  866a 68                     pla ; return high byte return address
  1214                          !ifdef C64SCREEN {    
  1215  866b a914                   lda #20
  1216  866d 20d2ff                 jsr charout
  1217  8670 20d2ff                 jsr charout
  1218                          } else {
  1219                              lda ptr1
  1220                              ldx ptr1+1
  1221                              jsr disphexword
  1222                              lda #' '
  1223                              jsr charout
  1224                          }
  1225                              ; save current pointer
  1226  8673 a5fb               --  lda ptr1
  1227  8675 a6fc                   ldx ptr1+1
  1228  8677 8526                   sta ptr3
  1229  8679 8627                   stx ptr3+1
  1230  867b 20d683                 jsr inputline
  1231  867e c001                   cpy #1
  1232  8680 f048                   beq ++
  1233  8682 88                     dey
  1234  8683 84a4                   sty len
  1235  8685 a000                   ldy #0
  1236  8687 20788a                 jsr skipspaces
  1237  868a c4a4                   cpy len
  1238  868c f03c                   beq ++
  1239                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1240                              ;jsr skipspaces
  1241  868e 20a089                 jsr chkinstruction
  1242  8691 f00b                   beq +
  1243  8693 a526               -   lda ptr3
  1244  8695 85fb                   sta ptr1
  1245  8697 a527                   lda ptr3+1
  1246  8699 85fc                   sta ptr1+1
  1247  869b 4c1b84                 jmp error
  1248  869e 20f486             +   jsr chkaddressing
  1249  86a1 d0f0                   bne -
  1250  86a3 20d189                 jsr find_inst_and_mode
  1251  86a6 d0eb                   bne -
  1252  86a8 20cd86                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1253  86ab 18                     clc
  1254  86ac a525                   lda size
  1255  86ae 6526                   adc ptr3
  1256  86b0 85fb                   sta ptr1
  1257  86b2 a527                   lda ptr3+1
  1258  86b4 6900                   adc #0
  1259  86b6 85fc                   sta ptr1+1
  1260                          !ifdef C64SCREEN {    
  1261  86b8 201f8b                 jsr newline
  1262                          }
  1263  86bb a5fb                   lda ptr1
  1264  86bd a6fc                   ldx ptr1+1
  1265  86bf 203f83                 jsr disphexword
  1266  86c2 a920                   lda #' '
  1267  86c4 20d2ff                 jsr charout
  1268  86c7 4c7386                 jmp --
  1269                          ++  
  1270                          !ifdef C64SCREEN {
  1271  86ca 4c1f8b                 jmp newline
  1272                          } else {
  1273                              rts
  1274                          }
  1275                          
  1276                          store_assembly:
  1277  86cd a622                   ldx opidx
  1278  86cf bdea8d                 lda opcodes, x
  1279  86d2 a000                   ldy #0
  1280  86d4 9126                   sta (ptr3), y
  1281  86d6 c8                     iny
  1282  86d7 a625                   ldx size
  1283  86d9 e001                   cpx #1
  1284  86db f016                   beq ++
  1285  86dd e002               +   cpx #2
  1286  86df d005                   bne +
  1287  86e1 a5a6                   lda tmp2
  1288  86e3 9126                   sta (ptr3), y
  1289  86e5 60                     rts
  1290  86e6 e003               +   cpx #3
  1291  86e8 d009                   bne ++
  1292  86ea a5fb                   lda ptr1
  1293  86ec 9126                   sta (ptr3), y
  1294  86ee c8                     iny
  1295  86ef a5fc                   lda ptr1+1
  1296  86f1 9126                   sta (ptr3), y
  1297  86f3 60                 ++  rts
  1298                          
  1299                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1300  86f4 20788a                 jsr skipspaces
  1301  86f7 a200                   ldx #0
  1302  86f9 8624                   stx mode
  1303  86fb 205687                 jsr chkaccumulator
  1304  86fe f051                   beq +
  1305  8700 e624                   inc mode
  1306  8702 c4a4                   cpy len ; chknone
  1307  8704 f04b                   beq +
  1308  8706 e624                   inc mode
  1309  8708 207a87                 jsr chkimmediate
  1310  870b f044                   beq +
  1311  870d e624                   inc mode
  1312  870f 209e87                 jsr chkindirectx
  1313  8712 f03d                   beq +
  1314  8714 e624                   inc mode
  1315  8716 20e387                 jsr chkindirecty
  1316  8719 f036                   beq +
  1317  871b e624                   inc mode
  1318  871d 202888                 jsr chkrelative
  1319  8720 f02f                   beq +
  1320  8722 e624                   inc mode
  1321  8724 208388                 jsr chkzeropage
  1322  8727 f028                   beq +
  1323  8729 e624                   inc mode
  1324  872b 209c88                 jsr chkzeropagex
  1325  872e f021                   beq +
  1326  8730 e624                   inc mode
  1327  8732 20cb88                 jsr chkzeropagey
  1328  8735 f01a                   beq +
  1329  8737 e624                   inc mode
  1330  8739 20fa88                 jsr chkabsolute
  1331  873c f013                   beq +
  1332  873e e624                   inc mode
  1333  8740 201389                 jsr chkabsolutex
  1334  8743 f00c                   beq +
  1335  8745 e624                   inc mode
  1336  8747 204289                 jsr chkabsolutey
  1337  874a f005                   beq +
  1338  874c e624                   inc mode
  1339  874e 207189                 jsr chkindirect
  1340  8751 08                 +   php ; save Z
  1341  8752 a524                   lda mode
  1342  8754 28                     plp ; restore Z 
  1343  8755 60                     rts
  1344                          
  1345                          chkaccumulator:
  1346  8756 c4a4                   cpy len
  1347  8758 d013                   bne +
  1348  875a a523                   lda inidx
  1349  875c c902                   cmp #2 ; ASL
  1350  875e f019                   beq ++
  1351  8760 c920                   cmp #32 ; LSR
  1352  8762 f015                   beq ++
  1353  8764 c927                   cmp #39 ; ROL
  1354  8766 f011                   beq ++
  1355  8768 c928                   cmp #40 ; ROR
  1356  876a 4c7987                 jmp ++
  1357  876d b90002             +   lda inputbuf, y
  1358  8770 c941                   cmp #'A'
  1359  8772 d005                   bne ++
  1360  8774 b90102                 lda inputbuf+1,y
  1361  8777 c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1362  8779 60                 ++  rts
  1363                          
  1364                          chkimmediate:
  1365  877a 84a5                   sty savepos
  1366  877c b90002                 lda inputbuf, y
  1367  877f c923                   cmp #'#'
  1368  8781 d016                   bne ++
  1369  8783 c8                     iny
  1370  8784 20788a                 jsr skipspaces
  1371  8787 b90002                 lda inputbuf, y
  1372  878a c924                   cmp #'$'
  1373  878c d001                   bne +
  1374  878e c8                     iny
  1375  878f 20cb8a             +   jsr chkhexbyte
  1376  8792 d005                   bne ++
  1377  8794 c4a4               +   cpy len
  1378  8796 d001                   bne ++
  1379  8798 60                     rts
  1380  8799 a4a5               ++  ldy savepos
  1381  879b a201                   ldx #1 ; Z false (NE)
  1382  879d 60                     rts
  1383                          
  1384                          chkindirectx:
  1385  879e 84a5                   sty savepos
  1386  87a0 b90002                 lda inputbuf, y
  1387  87a3 c928                   cmp #'('
  1388  87a5 d037                   bne ++
  1389  87a7 c8                     iny
  1390  87a8 20788a                 jsr skipspaces
  1391  87ab b90002                 lda inputbuf, y
  1392  87ae c924                   cmp #'$'
  1393  87b0 d001                   bne +
  1394  87b2 c8                     iny
  1395  87b3 20cb8a             +   jsr chkhexbyte
  1396  87b6 d026                   bne ++
  1397  87b8 20788a                 jsr skipspaces
  1398  87bb b90002                 lda inputbuf, y
  1399  87be c92c                   cmp #','
  1400  87c0 d01c                   bne ++
  1401  87c2 c8                     iny
  1402  87c3 20788a                 jsr skipspaces
  1403  87c6 b90002                 lda inputbuf, y
  1404  87c9 c958                   cmp #'X'
  1405  87cb d011                   bne ++
  1406  87cd c8                     iny
  1407  87ce 20788a                 jsr skipspaces
  1408  87d1 b90002                 lda inputbuf, y
  1409  87d4 c929                   cmp #')'
  1410  87d6 d006                   bne ++
  1411  87d8 c8                     iny
  1412  87d9 c4a4                   cpy len
  1413  87db d001                   bne ++
  1414  87dd 60                     rts
  1415  87de a4a5               ++  ldy savepos
  1416  87e0 a201                   ldx #1 ; Z false (NE)
  1417  87e2 60                     rts
  1418                          
  1419                          chkindirecty:
  1420  87e3 84a5                   sty savepos
  1421  87e5 b90002                 lda inputbuf, y
  1422  87e8 c928                   cmp #'('
  1423  87ea d037                   bne ++
  1424  87ec c8                     iny
  1425  87ed 20788a                 jsr skipspaces
  1426  87f0 b90002                 lda inputbuf, y
  1427  87f3 c924                   cmp #'$'
  1428  87f5 d001                   bne +
  1429  87f7 c8                     iny
  1430  87f8 20cb8a             +   jsr chkhexbyte
  1431  87fb d026                   bne ++
  1432  87fd 20788a                 jsr skipspaces
  1433  8800 b90002                 lda inputbuf, y
  1434  8803 c929                   cmp #')'
  1435  8805 d01c                   bne ++
  1436  8807 c8                     iny
  1437  8808 20788a                 jsr skipspaces
  1438  880b b90002                 lda inputbuf, y
  1439  880e c92c                   cmp #','
  1440  8810 d011                   bne ++
  1441  8812 c8                     iny
  1442  8813 20788a                 jsr skipspaces
  1443  8816 b90002                 lda inputbuf, y
  1444  8819 c959                   cmp #'Y'
  1445  881b d006                   bne ++
  1446  881d c8                     iny
  1447  881e c4a4                   cpy len
  1448  8820 d001                   bne ++
  1449  8822 60                     rts
  1450  8823 a4a5               ++  ldy savepos
  1451  8825 a201                   ldx #1 ; Z false (NE)
  1452  8827 60                     rts
  1453                          
  1454                          chkrelative:
  1455  8828 84a5                   sty savepos
  1456  882a a623                   ldx inidx
  1457  882c e006                   cpx #6 ; BIT
  1458  882e f01e                   beq ++
  1459  8830 bd298c                 lda inst0, x
  1460  8833 c942                   cmp #'B'
  1461  8835 d017                   bne ++
  1462  8837 b90002                 lda inputbuf, y
  1463  883a c924                   cmp #'$'
  1464  883c d001                   bne +
  1465  883e c8                     iny
  1466  883f 20c28a             +   jsr chkhexword
  1467  8842 d00a                   bne ++
  1468  8844 c4a4                   cpy len
  1469  8846 d006                   bne ++
  1470  8848 205388                 jsr computeoffset
  1471  884b d001                   bne ++
  1472  884d 60                     rts ; Z true (EQ)
  1473  884e a4a5               ++  ldy savepos
  1474  8850 a201                   ldx #1 ; Z false (NE)
  1475  8852 60                     rts
  1476                          
  1477                          computeoffset:
  1478                          ;   compute next address
  1479  8853 a527                   lda ptr3+1
  1480  8855 85fe                   sta ptr2+1
  1481  8857 a526                   lda ptr3
  1482  8859 18                     clc
  1483  885a 6902                   adc #2
  1484  885c 85fd                   sta ptr2
  1485  885e 9002                   bcc +
  1486  8860 e6fe                   inc ptr2+1
  1487                          +  ; subtract argument
  1488  8862 38                     sec
  1489  8863 a5fb                   lda ptr1
  1490  8865 e5fd                   sbc ptr2
  1491  8867 85a6                   sta tmp2
  1492  8869 a5fc                   lda ptr1+1
  1493  886b e5fe                   sbc ptr2+1
  1494  886d f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1495  886f c9ff                   cmp #$FF
  1496  8871 d00d                   bne failedoffset ; 0 and FF were only options so fail
  1497                              ; chkeck negative offset
  1498  8873 a5a6                   lda tmp2
  1499  8875 3006                   bmi successoffset ; branch if signed byte is negative
  1500  8877 1007                   bpl failedoffset ; otherwise fail
  1501                          chkoffsetto127:
  1502  8879 a5a6                   lda tmp2
  1503  887b 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1504                          successoffset:    
  1505  887d a900                   lda #0 ; Z true (EQ)
  1506  887f 60                     rts
  1507                          failedoffset:
  1508  8880 a901                   lda #1 ; Z false (NE)
  1509  8882 60                     rts
  1510                          
  1511                          chkzeropage:
  1512  8883 84a5                   sty savepos
  1513  8885 b90002                 lda inputbuf, y
  1514  8888 c924                   cmp #'$'
  1515  888a d001                   bne +
  1516  888c c8                     iny
  1517  888d 20cb8a             +   jsr chkhexbyte
  1518  8890 d005                   bne ++
  1519  8892 c4a4                   cpy len
  1520  8894 d001                   bne ++
  1521  8896 60                     rts ; Z true (EQ)
  1522  8897 a4a5               ++  ldy savepos
  1523  8899 a201                   ldx #1 ; Z false (NE)
  1524  889b 60                     rts
  1525                          
  1526                          chkzeropagex:
  1527  889c 84a5                   sty savepos
  1528  889e b90002                 lda inputbuf, y
  1529  88a1 c924                   cmp #'$'
  1530  88a3 d001                   bne +
  1531  88a5 c8                     iny
  1532  88a6 20cb8a             +   jsr chkhexbyte
  1533  88a9 d01b                   bne ++
  1534  88ab 20788a                 jsr skipspaces
  1535  88ae b90002                 lda inputbuf, y
  1536  88b1 c92c                   cmp #','
  1537  88b3 d011                   bne ++
  1538  88b5 c8                     iny
  1539  88b6 20788a                 jsr skipspaces
  1540  88b9 b90002                 lda inputbuf, y
  1541  88bc c958                   cmp #'X'
  1542  88be d006                   bne ++
  1543  88c0 c8                     iny
  1544  88c1 c4a4                   cpy len
  1545  88c3 d001                   bne ++
  1546  88c5 60                     rts ; Z true (EQ)
  1547  88c6 a4a5               ++  ldy savepos
  1548  88c8 a201                   ldx #1 ; Z false (NE)
  1549  88ca 60                     rts
  1550                          
  1551                          chkzeropagey:
  1552  88cb 84a5                   sty savepos
  1553  88cd b90002                 lda inputbuf, y
  1554  88d0 c924                   cmp #'$'
  1555  88d2 d001                   bne +
  1556  88d4 c8                     iny
  1557  88d5 20cb8a             +   jsr chkhexbyte
  1558  88d8 d01b                   bne ++
  1559  88da 20788a                 jsr skipspaces
  1560  88dd b90002                 lda inputbuf, y
  1561  88e0 c92c                   cmp #','
  1562  88e2 d011                   bne ++
  1563  88e4 c8                     iny
  1564  88e5 20788a                 jsr skipspaces
  1565  88e8 b90002                 lda inputbuf, y
  1566  88eb c959                   cmp #'Y'
  1567  88ed d006                   bne ++
  1568  88ef c8                     iny
  1569  88f0 c4a4                   cpy len
  1570  88f2 d001                   bne ++
  1571  88f4 60                     rts ; Z true (EQ)
  1572  88f5 a4a5               ++  ldy savepos
  1573  88f7 a201                   ldx #1 ; Z false (NE)
  1574  88f9 60                     rts
  1575                          
  1576                          chkabsolute:
  1577  88fa 84a5                   sty savepos
  1578  88fc b90002                 lda inputbuf, y
  1579  88ff c924                   cmp #'$'
  1580  8901 d001                   bne +
  1581  8903 c8                     iny
  1582  8904 20c28a             +   jsr chkhexword
  1583  8907 d005                   bne ++
  1584  8909 c4a4                   cpy len
  1585  890b d001                   bne ++
  1586  890d 60                     rts ; Z true (EQ)
  1587  890e a4a5               ++  ldy savepos
  1588  8910 a201                   ldx #1 ; Z false (NE)
  1589  8912 60                     rts
  1590                          
  1591                          chkabsolutex:
  1592  8913 84a5                   sty savepos
  1593  8915 b90002                 lda inputbuf, y
  1594  8918 c924                   cmp #'$'
  1595  891a d001                   bne +
  1596  891c c8                     iny
  1597  891d 20c28a             +   jsr chkhexword
  1598  8920 d01b                   bne ++
  1599  8922 20788a                 jsr skipspaces
  1600  8925 b90002                 lda inputbuf, y
  1601  8928 c92c                   cmp #','
  1602  892a d011                   bne ++
  1603  892c c8                     iny
  1604  892d 20788a                 jsr skipspaces
  1605  8930 b90002                 lda inputbuf, y
  1606  8933 c958                   cmp #'X'
  1607  8935 d006                   bne ++
  1608  8937 c8                     iny
  1609  8938 c4a4                   cpy len
  1610  893a d001                   bne ++
  1611  893c 60                     rts ; Z true (EQ)
  1612  893d a4a5               ++  ldy savepos
  1613  893f a201                   ldx #1 ; Z false (NE)
  1614  8941 60                     rts
  1615                          
  1616                          chkabsolutey:
  1617  8942 84a5                   sty savepos
  1618  8944 b90002                 lda inputbuf, y
  1619  8947 c924                   cmp #'$'
  1620  8949 d001                   bne +
  1621  894b c8                     iny
  1622  894c 20c28a             +   jsr chkhexword
  1623  894f d01b                   bne ++
  1624  8951 20788a                 jsr skipspaces
  1625  8954 b90002                 lda inputbuf, y
  1626  8957 c92c                   cmp #','
  1627  8959 d011                   bne ++
  1628  895b c8                     iny
  1629  895c 20788a                 jsr skipspaces
  1630  895f b90002                 lda inputbuf, y
  1631  8962 c959                   cmp #'Y'
  1632  8964 d006                   bne ++
  1633  8966 c8                     iny
  1634  8967 c4a4                   cpy len
  1635  8969 d001                   bne ++
  1636  896b 60                     rts ; Z true (EQ)
  1637  896c a4a5               ++  ldy savepos
  1638  896e a201                   ldx #1 ; Z false (NE)
  1639  8970 60                     rts
  1640                          
  1641                          chkindirect:
  1642  8971 84a5                   sty savepos
  1643  8973 b90002                 lda inputbuf, y
  1644  8976 c928                   cmp #'('
  1645  8978 d021                   bne ++
  1646  897a c8                     iny
  1647  897b 20788a                 jsr skipspaces
  1648  897e b90002                 lda inputbuf, y
  1649  8981 c924                   cmp #'$'
  1650  8983 d001                   bne +
  1651  8985 c8                     iny
  1652  8986 20c28a             +   jsr chkhexword
  1653  8989 d010                   bne ++
  1654  898b 20788a                 jsr skipspaces
  1655  898e b90002                 lda inputbuf, y
  1656  8991 c929                   cmp #')'
  1657  8993 d006                   bne ++
  1658  8995 c8                     iny
  1659  8996 c4a4                   cpy len
  1660  8998 d001                   bne ++
  1661  899a 60                     rts ; Z true (EQ)
  1662  899b a4a5               ++  ldy savepos
  1663  899d a201                   ldx #1 ; Z false (NE)
  1664  899f 60                     rts
  1665                          
  1666                          chkinstruction:
  1667  89a0 c4a4                   cpy len
  1668  89a2 f02a                   beq ++
  1669  89a4 84ff                   sty tmp
  1670  89a6 a237                   ldx #(ninst-1)
  1671  89a8 b90002             -   lda inputbuf,y
  1672  89ab dd298c                 cmp inst0,x
  1673  89ae d019                   bne +
  1674  89b0 c8                     iny
  1675  89b1 b90002                 lda inputbuf,y
  1676  89b4 dd618c                 cmp inst1,x
  1677  89b7 d010                   bne +
  1678  89b9 c8                     iny
  1679  89ba b90002                 lda inputbuf,y
  1680  89bd dd998c                 cmp inst2,x
  1681  89c0 d007                   bne +
  1682  89c2 c8                     iny
  1683  89c3 8a                     txa
  1684  89c4 8523                   sta inidx
  1685  89c6 a200                   ldx #0
  1686  89c8 60                     rts
  1687  89c9 a4ff               +   ldy tmp
  1688  89cb ca                     dex
  1689  89cc 10da                   bpl -
  1690  89ce a201               ++  ldx #1 ; Z false (NE)
  1691  89d0 60                     rts
  1692                          
  1693                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1694                              ; and allows mode promotion
  1695  89d1 20f589                 jsr find_inst_and_mode2
  1696  89d4 f01e                   beq ++
  1697  89d6 a524                   lda mode
  1698  89d8 c906                   cmp #6
  1699  89da 9018                   bcc ++
  1700  89dc c90a                   cmp #10
  1701  89de b012                   bcs +
  1702  89e0 6903                   adc #3
  1703  89e2 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1704  89e4 20f589                 jsr find_inst_and_mode2 ; try again once
  1705  89e7 d00b                   bne ++
  1706  89e9 a5a6                   lda tmp2
  1707  89eb 85fb                   sta ptr1
  1708  89ed a900                   lda #0
  1709  89ef 85fc                   sta ptr1+1
  1710  89f1 60                     rts ; Z true (EQ)
  1711  89f2 a201               +   ldx #1 ; Z false (NE)
  1712  89f4 60                 ++  rts
  1713                          
  1714                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1715  89f5 a296                   ldx #nopcodes-1
  1716  89f7 bd818e             -   lda instidx, x
  1717  89fa bc188f                 ldy modeidx, x
  1718  89fd c523                   cmp inidx
  1719  89ff d00c                   bne +
  1720  8a01 c424                   cpy mode
  1721  8a03 d008                   bne +
  1722  8a05 8622                   stx opidx
  1723  8a07 20b981                 jsr getsize
  1724  8a0a a200                   ldx #0 ; Z true (EQ)
  1725  8a0c 60                     rts
  1726  8a0d ca                 +   dex
  1727  8a0e e0ff                   cpx #$ff
  1728  8a10 d0e5                   bne -
  1729  8a12 a201                   ldx #1 ; Z false (NE)
  1730  8a14 60                     rts
  1731                          
  1732                          executerun:
  1733  8a15 68                     pla ; remove low byte return address
  1734  8a16 68                     pla ; return high byte return address
  1735  8a17 68                     pla ; again, we're really not returning
  1736  8a18 68                     pla ; again, we're really not returning
  1737  8a19 201f8b                 jsr newline
  1738  8a1c 38                     sec
  1739  8a1d a5fb                   lda ptr1
  1740  8a1f e901                   sbc #1
  1741  8a21 85fb                   sta ptr1
  1742  8a23 b002                   bcs +
  1743  8a25 c6fc                   dec ptr1+1
  1744  8a27 a5fc               +   lda ptr1+1
  1745  8a29 48                     pha
  1746  8a2a a5fb                   lda ptr1
  1747  8a2c 48                     pha
  1748  8a2d 60                     rts
  1749                          
  1750                          chkcontinuedis:
  1751  8a2e b90002                 lda inputbuf,y
  1752  8a31 c944                   cmp #'D'
  1753  8a33 d00a                   bne +
  1754  8a35 b90102                 lda inputbuf+1,y
  1755  8a38 c90d                   cmp #13
  1756  8a3a d003                   bne +
  1757  8a3c c8                     iny
  1758  8a3d a200                   ldx #0 ; restore Z set
  1759  8a3f 60                 +   rts
  1760                          
  1761                          chkcontinueasm:
  1762  8a40 b90002                 lda inputbuf,y
  1763  8a43 c941                   cmp #'A'
  1764  8a45 d00a                   bne +
  1765  8a47 b90102                 lda inputbuf+1,y
  1766  8a4a c90d                   cmp #13
  1767  8a4c d003                   bne +
  1768  8a4e c8                     iny
  1769  8a4f a200                   ldx #0 ; restore Z set
  1770  8a51 60                 +   rts
  1771                          
  1772                          executedisassemble:
  1773  8a52 68                     pla ; remove low byte return address
  1774  8a53 68                     pla ; return high byte return address
  1775  8a54 201f8b                 jsr newline
  1776  8a57 4c6181                 jmp disassemble
  1777                          
  1778                          reportnotimplemented:
  1779  8a5a a96c                   lda #<notimplemented
  1780  8a5c a290                   ldx #>notimplemented
  1781  8a5e 4cbb83                 jmp strout
  1782                          
  1783                          reporterr:
  1784  8a61 c000                   cpy #0
  1785  8a63 f008                   beq +
  1786  8a65 a920                   lda #' '
  1787  8a67 20d2ff             -   jsr charout
  1788  8a6a 88                     dey
  1789  8a6b d0fa                   bne -
  1790  8a6d a93f               +   lda #'?'
  1791  8a6f 20d2ff                 jsr charout
  1792  8a72 a90d                   lda #13
  1793  8a74 20d2ff                 jsr charout
  1794  8a77 60                     rts
  1795                          
  1796                          skipspaces:
  1797  8a78 b90002             -   lda inputbuf, y
  1798                          !ifndef MINIMUM {
  1799                              ; skip SHIFT-SPACES too on Commodore
  1800  8a7b c9a0                   cmp #$A0
  1801  8a7d f004                   beq +
  1802                          }
  1803  8a7f c920                   cmp #$20
  1804  8a81 d003                   bne ++
  1805  8a83 c8                 +   iny
  1806  8a84 d0f2                   bne -
  1807  8a86 60                 ++  rts
  1808                          
  1809                          chkdot:
  1810  8a87 b90002                 lda inputbuf, y
  1811  8a8a c92e                   cmp #'.'
  1812  8a8c d003                   bne +
  1813  8a8e c8                     iny
  1814  8a8f a900                   lda #0 ; Z true (EQ)
  1815  8a91 60                 +   rts
  1816                          
  1817                          chkhelp:
  1818  8a92 b90002                 lda inputbuf, y
  1819  8a95 c93f                   cmp #'?'
  1820  8a97 d003                   bne +
  1821  8a99 c8                     iny
  1822  8a9a a900                   lda #0 ; Z true (EQ)
  1823  8a9c 60                 +   rts
  1824                          
  1825                          chkcolon:
  1826  8a9d b90002                 lda inputbuf, y
  1827  8aa0 c93a                   cmp #':'
  1828  8aa2 d003                   bne +
  1829  8aa4 c8                     iny
  1830  8aa5 a900                   lda #0 ; Z true (EQ)
  1831  8aa7 60                 +   rts
  1832                          
  1833                          chkhexbyteofsequence:
  1834  8aa8 208183                 jsr inputhexbyte
  1835  8aab 20c58a                 jsr +
  1836  8aae d011                   bne ++ ; Z false (NE) if failed checks
  1837  8ab0 c4a4                   cpy len
  1838  8ab2 f00d                   beq ++ ; Z true (EQ) if end of input
  1839  8ab4 85ff                   sta tmp
  1840  8ab6 b90002                 lda inputbuf,y
  1841  8ab9 c920                   cmp #$20
  1842  8abb d004                   bne ++ ; Z false (NE) if not space
  1843  8abd a5ff                   lda tmp
  1844  8abf a200                   ldx #0 ; Z true (EQ) is space delimeter
  1845  8ac1 60                 ++  rts
  1846                          
  1847                          chkhexword:
  1848                          chkhexaddr1:
  1849  8ac2 205b83                 jsr inputhexword
  1850  8ac5 a200               +   ldx #0 ; Z true (EQ)
  1851  8ac7 9001                   bcc +
  1852  8ac9 e8                     inx ; Z false (NE)
  1853  8aca 60                 +   rts
  1854                          
  1855                          chkhexbyte:
  1856  8acb 98                     tya
  1857  8acc 48                     pha ; save y
  1858  8acd 208183                 jsr inputhexbyte
  1859  8ad0 b00d                   bcs +
  1860  8ad2 85a6                   sta tmp2
  1861  8ad4 209d83                 jsr inputhexnybble
  1862  8ad7 9006                   bcc +
  1863  8ad9 68                     pla ; throw away saved y
  1864  8ada a5a6                   lda tmp2
  1865  8adc a200                   ldx #0 ; Z true (EQ)
  1866  8ade 60                     rts
  1867  8adf 68                 +   pla
  1868  8ae0 a8                     tay ; won't be zero, so Z false (NE)
  1869  8ae1 60                     rts    
  1870                          
  1871                          chkhexaddr2:
  1872  8ae2 a5fb                   lda ptr1
  1873  8ae4 48                     pha
  1874  8ae5 a5fc                   lda ptr1+1
  1875  8ae7 48                     pha
  1876  8ae8 20c28a                 jsr chkhexaddr1
  1877  8aeb f005                   beq +
  1878  8aed 68                     pla
  1879  8aee 68                     pla
  1880  8aef a901                   lda #1 ; Z false (NE)
  1881  8af1 60                     rts
  1882  8af2 a5fb               +   lda ptr1
  1883  8af4 85fd                   sta ptr2
  1884  8af6 a5fc                   lda ptr1+1
  1885  8af8 85fe                   sta ptr2+1
  1886  8afa 68                     pla
  1887  8afb 85fc                   sta ptr1+1
  1888  8afd 68                     pla
  1889  8afe 85fb                   sta ptr1
  1890  8b00 a900                   lda #0 ; Z true (EQ)
  1891  8b02 60                     rts    
  1892                          
  1893                          chkaddr1cmd:
  1894  8b03 b90002                 lda inputbuf, y
  1895  8b06 c941               +   cmp #'A'
  1896  8b08 d004                   bne +
  1897  8b0a c8                     iny
  1898  8b0b 4c6986                 jmp executeassemble
  1899  8b0e c944               +   cmp #'D'
  1900  8b10 d004                   bne +
  1901  8b12 c8                     iny
  1902  8b13 4c528a                 jmp executedisassemble
  1903  8b16 c952               +   cmp #'R'
  1904  8b18 d004                   bne +
  1905  8b1a c8                     iny
  1906  8b1b 4c158a                 jmp executerun
  1907  8b1e 60                 +   rts
  1908                          
  1909                          newline:
  1910  8b1f a90d                   lda #13
  1911  8b21 4cd2ff                 jmp charout
  1912                          
  1913                          space:
  1914  8b24 a920                   lda #32
  1915  8b26 4cd2ff                 jmp charout
  1916                          
  1917                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1918                          ;     jsr $ffd2
  1919                          ;     pha
  1920                          ; -   lda $d011
  1921                          ;     bpl -
  1922                          ; -   lda $d011
  1923                          ;     bmi -
  1924                          ; -   lda $d011
  1925                          ;     bpl -
  1926                          ; -   lda $d011
  1927                          ;     bmi -
  1928                          ;     pla
  1929                          ;     rts
  1930                          
  1931                          save_regs_and_stack:
  1932                          
  1933                          ; save registers
  1934  8b29 8d8392             sta registerA
  1935  8b2c 8e8492             stx registerX
  1936  8b2f 8c8592             sty registerY
  1937                          
  1938                          ; detect N/Z flags without affecting stack
  1939  8b32 3010               bmi +
  1940  8b34 f007               beq p_pl_eq
  1941                          
  1942  8b36 a900               lda #$00 ;p_pl_ne
  1943  8b38 8d8792             sta registerSR
  1944  8b3b f015               beq ++
  1945                          
  1946                          p_pl_eq:
  1947  8b3d a902               lda #$02
  1948  8b3f 8d8792             sta registerSR
  1949  8b42 100e               bpl ++ 
  1950                          
  1951  8b44 f007               + beq p_mi_eq
  1952  8b46 a980               lda #$80 ;p_mi_ne
  1953  8b48 8d8792             sta registerSR
  1954  8b4b 3005               bmi ++
  1955                          
  1956                          p_mi_eq:
  1957  8b4d a982               lda #$82
  1958  8b4f 8d8792             sta registerSR
  1959                          
  1960                          ; save SP register, affects N/Z
  1961  8b52 ba                 ++tsx
  1962  8b53 8e8692             stx registerSP
  1963                          
  1964                          ; save stack, affects N/Z
  1965  8b56 a200               ldx #0
  1966  8b58 bd0001             -lda $100,x
  1967  8b5b 9d8a92             sta savestack,x
  1968  8b5e e8                 inx
  1969  8b5f d0f7               bne -
  1970                          
  1971                          ; save flags, combining unaffected ones with saved N/Z
  1972  8b61 08                 php
  1973  8b62 68                 pla
  1974  8b63 297d               and #$7d
  1975  8b65 0d8792             ora registerSR
  1976  8b68 8d8792             sta registerSR
  1977                          
  1978                          ; restore stack byte affected
  1979  8b6b aa                 tax
  1980  8b6c bd8a92             lda savestack,x
  1981  8b6f 9d0001             sta $100,x
  1982                          
  1983  8b72 4c778b             jmp +
  1984                          
  1985                          execute_display_registers:
  1986  8b75 68                 pla ; remove return address
  1987  8b76 68                 pla
  1988                          +
  1989                          
  1990                          ; need some normality
  1991  8b77 58                 cli
  1992  8b78 d8                 cld
  1993                          
  1994  8b79 201f8b             jsr newline
  1995  8b7c 20828b             jsr display_registers
  1996  8b7f 4c4780             jmp input_loop
  1997                          
  1998                          ; PC   NV-BDIZC .A .X .Y .S
  1999                          ; 1234 10111011 01 02 03 FF
  2000                          display_registers:
  2001  8b82 a961                   lda #<reg_header
  2002  8b84 a292                   ldx #>reg_header
  2003  8b86 20bb83                 jsr strout
  2004  8b89 ad8892                 lda registerPC
  2005  8b8c ae8992                 ldx registerPC+1
  2006  8b8f 203f83                 jsr disphexword
  2007  8b92 20248b                 jsr space
  2008  8b95 ad8792                 lda registerSR
  2009  8b98 202c83                 jsr dispbinbyte
  2010  8b9b 20248b                 jsr space
  2011  8b9e ad8392                 lda registerA
  2012  8ba1 204583                 jsr disphexbyte
  2013  8ba4 20248b                 jsr space
  2014  8ba7 ad8492                 lda registerX
  2015  8baa 204583                 jsr disphexbyte
  2016  8bad 20248b                 jsr space
  2017  8bb0 ad8592                 lda registerY
  2018  8bb3 204583                 jsr disphexbyte
  2019  8bb6 20248b                 jsr space
  2020  8bb9 ad8692                 lda registerSP
  2021  8bbc 204583                 jsr disphexbyte
  2022  8bbf 4c1f8b                 jmp newline
  2023                          
  2024                          loadregs_go:
  2025  8bc2 a000                   ldy #0
  2026  8bc4 b98a92             -   lda savestack,y
  2027  8bc7 990001                 sta $100,y
  2028  8bca c8                     iny
  2029  8bcb d0f7                   bne -
  2030  8bcd ae8692                 ldx registerSP
  2031  8bd0 9a                     txs
  2032  8bd1 ad8792                 lda registerSR
  2033  8bd4 48                     pha
  2034  8bd5 ad8392                 lda registerA
  2035  8bd8 ae8492                 ldx registerX
  2036  8bdb ac8592                 ldy registerY
  2037  8bde 28                     plp
  2038  8bdf 6c8892                 jmp (registerPC)
  2039                          
  2040                          !ifdef MINIMUM {
  2041                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2042                          ;; MC6850
  2043                          UART_DATA=$FFF8
  2044                          UART_STCR=$FFF9
  2045                          
  2046                          UART_INIT:
  2047                          	ldx #0b00000111 ; 11=reset device
  2048                          	stx UART_STCR
  2049                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  2050                          	sta UART_STCR
  2051                          	rts
  2052                          UART_OUT:
  2053                          	pha
  2054                          -	lda UART_STCR
  2055                          	and #2
  2056                          	beq - ; branch if TDRE=0, not finished transmitting
  2057                          	pla
  2058                          	pha
  2059                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  2060                          	sta UART_DATA
  2061                          	pla
  2062                          	rts
  2063                          UART_IN:
  2064                          -	lda UART_STCR
  2065                          	and #1
  2066                          	beq - ; branch if TDRF=0, not received
  2067                          	lda UART_DATA
  2068                          	; software "CAPS LOCK" because wozmon expects only uppercase
  2069                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  2070                          	beq BREAK
  2071                              ; force lowercase alphabet to uppercase
  2072                              cmp #'a'
  2073                          	bcc +
  2074                          	cmp #'z'+1
  2075                          	bcs +
  2076                          	eor #$20
  2077                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  2078                           	rts
  2079                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  2080                          	pha ; save A
  2081                          	lda UART_STCR
  2082                          	lsr ; put rightmost bit in carry
  2083                          	pla ; restore A affects flags
  2084                          	ror ; move carry to left bit, right bit to carry
  2085                          	php ; push processor to save N
  2086                          	rol ; restore A affects flags
  2087                          	plp ; pull processor to restore N
  2088                          	rts
  2089                          
  2090                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2091                          ; Processor start and interrupts
  2092                          
  2093                          NMI: ; unused on minimum (no source of interrupt)
  2094                              rti
  2095                          
  2096                          IRQ:
  2097                              pha
  2098                              php
  2099                              pla
  2100                              and #$10
  2101                              beq ++ ; not break
  2102                          ;BREAK HANDLER
  2103                              pla
  2104                              sta registerA
  2105                              pla
  2106                              sta registerSR
  2107                              pla
  2108                              cld
  2109                              sec
  2110                              sbc #2
  2111                              sta registerPC
  2112                              pla
  2113                              sbc #0
  2114                              sta registerPC+1
  2115                              lda #>save_regs_and_stack
  2116                              pha
  2117                              lda #<save_regs_and_stack
  2118                              pha
  2119                              lda registerSR
  2120                              pha
  2121                              lda registerA
  2122                              pha
  2123                          ++  pla
  2124                              rti
  2125                          
  2126                          BREAK:
  2127                              jmp RESET
  2128                          
  2129                          RESET:
  2130                              cld
  2131                              ldx #$FF
  2132                              txs
  2133                              jsr JUART_INIT
  2134                              cli
  2135                              jmp start
  2136                          ; !ifdef MINIMUM
  2137                          } else { ; not MINIMUM
  2138                          nmi64:
  2139  8be2 78                     sei
  2140  8be3 8d8392                 sta registerA
  2141  8be6 68                     pla
  2142  8be7 8d8792                 sta registerSR
  2143  8bea 68                     pla
  2144  8beb d8                     cld
  2145  8bec 8d8892                 sta registerPC
  2146  8bef 68                     pla
  2147  8bf0 8d8992                 sta registerPC+1
  2148  8bf3 a98b                   lda #>save_regs_and_stack
  2149  8bf5 48                     pha
  2150  8bf6 a929                   lda #<save_regs_and_stack
  2151  8bf8 48                     pha
  2152  8bf9 ad8792                 lda registerSR
  2153  8bfc 48                     pha
  2154  8bfd ad8392                 lda registerA
  2155  8c00 40                     rti
  2156                          
  2157                          brk64:
  2158  8c01 68                     pla
  2159  8c02 a8                     tay
  2160  8c03 68                     pla
  2161  8c04 aa                     tax
  2162  8c05 68                     pla
  2163  8c06 8d8392                 sta registerA
  2164  8c09 68                     pla
  2165  8c0a 8d8792                 sta registerSR
  2166  8c0d 68                     pla
  2167  8c0e d8                     cld
  2168  8c0f 38                     sec
  2169  8c10 e902                   sbc #2
  2170  8c12 8d8892                 sta registerPC
  2171  8c15 68                     pla
  2172  8c16 e900                   sbc #0
  2173  8c18 8d8992                 sta registerPC+1
  2174  8c1b a98b                   lda #>save_regs_and_stack
  2175  8c1d 48                     pha
  2176  8c1e a929                   lda #<save_regs_and_stack
  2177  8c20 48                     pha
  2178  8c21 ad8792                 lda registerSR
  2179  8c24 48                     pha
  2180  8c25 ad8392                 lda registerA
  2181  8c28 40                     rti
  2182                          }
  2183                          
  2184                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2185                          ; data
  2186                          
  2187                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  2188                          ninst = 56
  2189  8c29 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  2190  8c61 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  2191  8c99 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  2192                          
  2193                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  2194                          mode_jmptable:
  2195  8cd1 4582               !word dispModeAcc-1; 0 Accumulator 1
  2196  8cd3 4a82               !word dispModeNone-1 ; 1 None 1
  2197  8cd5 4b82               !word dispModeImm-1 ; 2 Immediate 2
  2198  8cd7 5c82               !word dispModeIndX-1 ; 3 IndirectX 2
  2199  8cd9 7c82               !word dispModeIndY-1 ; 4 IndirectY 2
  2200  8cdb 9c82               !word dispModeRel-1 ; 5 Relative 2
  2201  8cdd 5082               !word dispModeZP-1 ; 6 ZeroPage 2
  2202  8cdf d882               !word dispModeZPX-1 ; 7 ZeroPageX 2
  2203  8ce1 e582               !word dispModeZPY-1 ; 8 ZeroPageY 2
  2204  8ce3 f282               !word dispModeAbs-1 ; 9 Absolute 3
  2205  8ce5 0483               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  2206  8ce7 1183               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  2207  8ce9 1e83               !word dispModeInd-1 ; 12 Indirect 3
  2208                          
  2209                          nmodes = 13
  2210                          
  2211                          mode_sorted:
  2212  8ceb 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  2213                          
  2214                          !ifdef MINIMUM {
  2215                          mode_0: !text "Accumulator", 0, "A", 0
  2216                          mode_1: !text "None", 0, 8, 0
  2217                          mode_2: !text "Immediate", 0, "#$12", 0
  2218                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  2219                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  2220                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  2221                          mode_6: !text "ZeroPage", 0, "$12", 0
  2222                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  2223                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  2224                          mode_9: !text "Absolute", 0, "$1234", 0
  2225                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  2226                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  2227                          mode_12: !text "Indirect", 0, "($1234)", 0
  2228                          } else {
  2229  8cf8 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2230  8d06 4e4f4e45001400     mode_1: !text "NONE", 0, 20, 0
  2231  8d0d 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2232  8d1c 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2233  8d2e 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2234  8d40 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2235  8d5f 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2236  8d6c 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2237  8d7c 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2238  8d8c 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2239  8d9b 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2240  8dad 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2241  8dbf 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2242                          }
  2243                          
  2244                          modes: ; table for easily displaying each mode_example
  2245  8dd0 f88c               !word mode_0
  2246  8dd2 068d               !word mode_1
  2247  8dd4 0d8d               !word mode_2
  2248  8dd6 1c8d               !word mode_3
  2249  8dd8 2e8d               !word mode_4
  2250  8dda 408d               !word mode_5
  2251  8ddc 5f8d               !word mode_6
  2252  8dde 6c8d               !word mode_7
  2253  8de0 7c8d               !word mode_8
  2254  8de2 8c8d               !word mode_9
  2255  8de4 9b8d               !word mode_10
  2256  8de6 ad8d               !word mode_11
  2257  8de8 bf8d               !word mode_12
  2258                          
  2259                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2260                          nopcodes = 151
  2261  8dea 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2262  8e81 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2263  8f18 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2264                          
  2265                          copyright 
  2266                          ;                  1         2         3         4
  2267                          ;         1234567890123456789012345678901234567890
  2268  8faf 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2269                          !ifdef C64TERMINAL {
  2270                              !text 13, "(TERMINAL VERSION)"
  2271                          }
  2272  8fcf 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2273  8ff5 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2274  900c 00                 !text 0
  2275                          
  2276                          firsthelp
  2277                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2278  900d 0d0d               !text 13, 13
  2279  900f 54595045203f2046...!text "TYPE ? FOR HELP"
  2280  901e 0d00               !text 13, 0
  2281                          
  2282                          !ifndef MINIMUM {
  2283                          ; C64 only
  2284                          extra_help:
  2285  9020 5820202020202020...    !text "X           (EXIT MONITOR)", 13
  2286  903b 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S  (SAVE)", 13
  2287  905d 00                     !text 0
  2288                          
  2289                          !ifdef C64SCREEN {
  2290  905e 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  2291  9065 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  2292                          }
  2293                          
  2294                          }
  2295                          
  2296  906c 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2297                          
  2298                          generalhelp
  2299  907d 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2300  90a3 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2301  90c8 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2302  90eb 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2303  9113 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2304  912f 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2305  914f 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2306  9171 00                 !text 0
  2307                          generalhelp2
  2308  9172 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2309  9197 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2310  91b3 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2311  91d2 3f20412020202020...!text "? A         (LIST 6502 INSTRUCTIONS)", 13
  2312  91f7 3f20414443202020...!text "? ADC       (/ADC/ ADDRESSING MODES)", 13
  2313  921c 3f204d4f44452020...!text "? MODE      (ADDRESSING MODES)", 13
  2314  923b 3f2e202020202020...!text "?.          (DISPLAY REGISTERS)", 13
  2315  925b 00                 !text 0
  2316                          
  2317  925c 4d4f444500         modes_keyword !text "MODE", 0
  2318                          
  2319  9261 2050432020204e56...reg_header !text " PC   NV-BDIZC .A .X .Y .S", 13, '.', 0
  2320                          
  2321                          !ifdef MINIMUM {
  2322                          registerA = $def9
  2323                          registerX = $defa
  2324                          registerY = $defb
  2325                          registerSP = $defc
  2326                          registerSR = $defd
  2327                          registerPC = $defe;/f
  2328                          savestack = $df00
  2329                          } else {
  2330  927e 0000               savebrkvector !word 0
  2331  9280 0000               savenmivector !word 0
  2332  9282 00                 drive !byte 0
  2333  9283 00                 registerA !byte 0
  2334  9284 00                 registerX !byte 0
  2335  9285 00                 registerY !byte 0
  2336  9286 00                 registerSP !byte 0
  2337  9287 00                 registerSR !byte 0
  2338  9288 0000               registerPC !word 0
  2339                          savestack ; 256 bytes
  2340  928a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2341  929a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2342  92aa 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2343  92ba 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2344  92ca 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2345  92da 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2346  92ea 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2347  92fa 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2348  930a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2349  931a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2350  932a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2351  933a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2352  934a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2353  935a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2354  936a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2355  937a 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2356                          }
  2357                          
  2358                          !ifdef MINIMUM {
  2359                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2360                          ; JUMP table for some stability
  2361                          * = $FFEE
  2362                          JUART_INIT: JMP UART_INIT
  2363                          JUART_OUT: JMP UART_OUT
  2364                          JUART_IN: JMP UART_IN
  2365                          JUART_CHK: JMP UART_CHK
  2366                          
  2367                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2368                          ; 6502 vectors 
  2369                          * = $fffa
  2370                              !word NMI
  2371                              !word RESET
  2372                              !word IRQ
  2373                          } else { // C64
  2374                              !if * > $a000 {
  2375                                  !error "code/data overran $a000"
  2376                              }
  2377                          }
  2378                          
  2379                          finish = *
