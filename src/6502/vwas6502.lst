
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: work in progress, disassembles itself <<<
     4                          ;;
     5                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     6                          ;; MIT License
     7                          ;;
     8                          ;; Copyright (c) 2024 David R. Van Wagner
     9                          ;; davevw.com
    10                          ;;
    11                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    12                          ;; of this software and associated documentation files (the "Software"), to deal
    13                          ;; in the Software without restriction, including without limitation the rights
    14                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    15                          ;; copies of the Software, and to permit persons to whom the Software is
    16                          ;; furnished to do so, subject to the following conditions:
    17                          ;;
    18                          ;; The above copyright notice and this permission notice shall be included in all
    19                          ;; copies or substantial portions of the Software.
    20                          ;;
    21                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    22                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    23                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    24                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    25                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    26                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    27                          ;; SOFTWARE.
    28                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    29                          
    30                          ;; VWAS2024 (C) 2024 DAVID R. VAN WAGNER
    31                          ;; MIT LICENSE DAVEVW.COM
    32                          ;; _
    33                          ;; INTERACTIVE SYNTAX >>> PLANNED, work in progress <<<
    34                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    35                          ;; 1000 (display memory at $1000)
    36                          ;; 1000.2000 (display memory range $1000 to $2000)
    37                          ;; 1000 r (JMP $1000)
    38                          ;; 1000: 01 02 03 (modify memory)
    39                          ;; (NEW SYNTAX)
    40                          ;; 1000 d (disassemble starting at, interactive until q or ESC)
    41                          ;; 1000 a (assemble starting at, interactive until empty line) 
    42                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    43                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    44                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    45                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    46                          ;; . (display registers, VICE format or custom? screen editor changeable?)
    47                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    48                          ;; 1000.2000 "filename" 08 save (save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, can abbreviate to s)
    49                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    50                          ;; ? (commands help)
    51                          ;; ? a (list instructions available)
    52                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    53                          ;; ? mode (show addressing modes example syntax for 6502)
    54                          ;;
    55                          ;; (INTERACTIVE ASSEMBLER)
    56                          ;; 1000 _
    57                          ;;      ADC #$12
    58                          ;; 1000 69 12    ADC #$12
    59                          ;; 1002 _
    60                          ;;      JSR $1234
    61                          ;; 1002 20 34 12 JSR $1234
    62                          ;; 1005 _
    63                          ;;      RTS
    64                          ;; 1005 60       RTS
    65                          ;; 1006 _
    66                          ;;      XYZ
    67                          ;;      XYZ ?
    68                          ;; 1006 _
    69                          ;; _
    70                          ;;
    71                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    72                          ;; and can cursor up to revise, 
    73                          ;;
    74                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    75                          ;;
    76                          
    77                          ; global
    78                          inputbuf=$0200
    79                          
    80                          ; kernal/system calls
    81                          charout=$ffd2
    82                          charin=$ffcf ; screen editor
    83                          getkey=$ffe4
    84                          
    85                          ; zeropage
    86                          ptr1=$fb ; and $fc
    87                          ptr2=$fd ; and $fe
    88                          tmp=$ff
    89                          opidx=$22
    90                          inidx=$23
    91                          mode=$24
    92                          size=$25
    93                          ptr3=$26 ; and $27
    94                          count=$a3
    95                          len=$a4
    96                          savelen=$a5
    97                          tmp2=$a6
    98                          
    99                          *=$c000
   100                          start:
   101  c000 a97b                   lda #<copyright
   102  c002 a2ca                   ldx #>copyright
   103  c004 20c5c2                 jsr strout
   104  c007 20d6c2             -   jsr inputline
   105  c00a 20e4c2                 jsr parseline
   106  c00d 4c07c0                 jmp -
   107                          
   108                          test: ; all the addressing modes here for testing disassembly
   109  c010 ea                     nop
   110  c011 ad3412                 lda $1234
   111  c014 bd3412                 lda $1234,x
   112  c017 b93412                 lda $1234,y
   113  c01a 0a                     asl
   114  c01b a912                   lda #$12
   115  c01d a112                   lda ($12,x)
   116  c01f b112                   lda ($12),y
   117  c021 6c3412                 jmp ($1234)
   118  c024 d0fe               -   bne -
   119  c026 a512                   lda $12
   120  c028 b512                   lda $12,x
   121  c02a b612                   ldx $12,y
   122  c02c ff                     !byte $FF ; unknown
   123                          
   124  c02d a97b               +   lda #<copyright
   125  c02f a2ca                   ldx #>copyright
   126  c031 20c5c2                 jsr strout   
   127  c034 a900                   lda #<start
   128  c036 a2c0                   ldx #>start
   129  c038 85fb                   sta ptr1
   130  c03a 86fc                   stx ptr1+1
   131  c03c a998                   lda #<end
   132  c03e a2c7                   ldx #>end
   133  c040 85fd                   sta ptr2
   134  c042 86fe                   stx ptr2+1
   135  c044 205ac0                 jsr disassemble
   136  c047 a5fd                   lda ptr2
   137  c049 a6fe                   ldx ptr2+1
   138  c04b 85fb                   sta ptr1
   139  c04d 86fc                   stx ptr1+1
   140  c04f a9ed                   lda #<finish
   141  c051 a2ca                   ldx #>finish
   142  c053 85fd                   sta ptr2
   143  c055 86fe                   stx ptr2+1
   144  c057 4c3ac2                 jmp display_memory
   145                          
   146                          disassemble:
   147  c05a a918               --  lda #24
   148  c05c 85a3                   sta count
   149  c05e a000               -   ldy #0
   150  c060 b1fb                   lda (ptr1),y
   151  c062 208cc0                 jsr find_opcode
   152  c065 20e5c0                 jsr disp_current
   153  c068 a525                   lda size
   154  c06a 1002                   bpl +
   155  c06c a901                   lda #1
   156  c06e 18                 +   clc
   157  c06f 65fb                   adc ptr1
   158  c071 85fb                   sta ptr1
   159  c073 9002                   bcc +
   160  c075 e6fc                   inc ptr1+1
   161  c077 c6a3               +   dec count
   162  c079 d0e3                   bne -
   163  c07b 2084c7                 jsr pagemore
   164  c07e d0da                   bne --
   165  c080 60                     rts
   166                          
   167                          compareptrs:
   168  c081 a5fc                   lda ptr1+1
   169  c083 c5fe                   cmp ptr2+1
   170  c085 d004                   bne +
   171  c087 a5fb                   lda ptr1
   172  c089 c5fd                   cmp ptr2
   173  c08b 60                 +   rts
   174                          
   175                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   176                          ; and properties updated in ZP globals size,inidx,opidx,mode
   177  c08c a001                   ldy #1
   178  c08e 8425                   sty size
   179  c090 a097                   ldy #nopcodes
   180  c092 a296                   ldx #nopcodes-1
   181  c094 ddb6c8             -   cmp opcodes,x
   182  c097 f00b                   beq +
   183  c099 ca                     dex
   184  c09a 88                     dey
   185  c09b d0f7                   bne -
   186  c09d 18                     clc
   187  c09e a9ff                   lda #$FF
   188  c0a0 aa                     tax
   189  c0a1 a8                     tay
   190  c0a2 9013                   bcc ++
   191  c0a4 bd4dc9             +   lda instidx, x
   192  c0a7 bce4c9                 ldy modeidx, x
   193  c0aa c002                   cpy #2 // Immediate
   194  c0ac 9008                   bcc +
   195  c0ae e625                   inc size
   196  c0b0 c009                   cpy #9 // Absolute
   197  c0b2 9002                   bcc +
   198  c0b4 e625                   inc size
   199  c0b6 38                 +   sec
   200  c0b7 8523               ++  sta inidx
   201  c0b9 8622                   stx opidx
   202  c0bb 8424                   sty mode
   203  c0bd 60                     rts
   204                          
   205                          disp_opcode: ; .A opcode byte
   206  c0be 208cc0                 jsr find_opcode
   207  c0c1 8a                     txa
   208                              ; fall through to display instruction
   209                          
   210                          dispinst: ; .A instruction index 0..55
   211  c0c2 aa                     tax
   212  c0c3 e038                   cpx #ninst
   213  c0c5 b012                   bcs +
   214  c0c7 bd99c7                 lda inst0, x
   215  c0ca 20d2ff                 jsr charout
   216  c0cd bdd1c7                 lda inst1, x
   217  c0d0 20d2ff                 jsr charout
   218  c0d3 bd09c8                 lda inst2, x
   219  c0d6 4cd2ff                 jmp charout
   220  c0d9 a93f               +   lda #'?'
   221  c0db 20d2ff                 jsr charout
   222  c0de 20d2ff                 jsr charout
   223  c0e1 20d2ff                 jsr charout
   224  c0e4 60                     rts
   225                          
   226                          disp_current:
   227  c0e5 a5fb                   lda ptr1
   228  c0e7 a6fc                   ldx ptr1+1
   229  c0e9 201ec2                 jsr disphexword
   230  c0ec a920                   lda #$20
   231  c0ee 20d2ff                 jsr charout
   232  c0f1 a000                   ldy #0
   233  c0f3 a625                   ldx size
   234  c0f5 b1fb               -   lda (ptr1),y
   235  c0f7 2024c2                 jsr disphexbyte
   236  c0fa a920                   lda #$20
   237  c0fc 20d2ff                 jsr charout
   238  c0ff c8                     iny
   239  c100 ca                     dex
   240  c101 d0f2                   bne -
   241  c103 c003               -   cpy #3
   242  c105 f00e                   beq +
   243  c107 a920                   lda #$20
   244  c109 20d2ff                 jsr charout
   245  c10c 20d2ff                 jsr charout
   246  c10f 20d2ff                 jsr charout
   247  c112 c8                     iny
   248  c113 d0ee                   bne -
   249  c115 a523               +   lda inidx
   250  c117 20c2c0                 jsr dispinst
   251  c11a a920                   lda #$20
   252  c11c 20d2ff                 jsr charout
   253  c11f 2027c1                 jsr disp_mode
   254  c122 a90d                   lda #13
   255  c124 4cd2ff                 jmp charout
   256                          
   257                          disp_mode
   258  c127 a524                   lda mode
   259  c129 c90d                   cmp #13
   260  c12b b00a                   bcs +
   261  c12d 0a                     asl
   262  c12e aa                     tax
   263  c12f bd42c8                 lda mode_jmptable+1,x
   264  c132 48                     pha
   265  c133 bd41c8                 lda mode_jmptable,x
   266  c136 48                     pha
   267  c137 60                 +   rts
   268                          
   269                          dispModeAcc:
   270  c138 a941                   lda #'A'
   271  c13a 4cd2ff                 jmp charout
   272                          
   273                          dispModeNone:
   274  c13d 60                     rts
   275                          
   276                          dispModeImm:
   277  c13e a923                   lda #'#'
   278  c140 20d2ff                 jsr charout
   279                          dispModeZP:
   280  c143 a924                   lda #'$'
   281  c145 20d2ff                 jsr charout
   282  c148 a001                   ldy #1
   283  c14a b1fb                   lda (ptr1),y
   284  c14c 4c24c2                 jmp disphexbyte
   285                          
   286                          dispModeIndX:
   287  c14f a928                   lda #'('
   288  c151 20d2ff                 jsr charout
   289  c154 a924                   lda #'$'
   290  c156 20d2ff                 jsr charout
   291  c159 a001                   ldy #1
   292  c15b b1fb                   lda (ptr1),y
   293  c15d 2024c2                 jsr disphexbyte
   294  c160 a92c                   lda #','
   295  c162 20d2ff                 jsr charout
   296  c165 a958                   lda #'X'
   297  c167 20d2ff                 jsr charout
   298  c16a a929                   lda #')'
   299  c16c 4cd2ff                 jmp charout
   300                          
   301                          dispModeIndY:
   302  c16f a928                   lda #'('
   303  c171 20d2ff                 jsr charout
   304  c174 a924                   lda #'$'
   305  c176 20d2ff                 jsr charout
   306  c179 a001                   ldy #1
   307  c17b b1fb                   lda (ptr1),y
   308  c17d 2024c2                 jsr disphexbyte
   309  c180 a929                   lda #')'
   310  c182 20d2ff                 jsr charout
   311  c185 a92c                   lda #','
   312  c187 20d2ff                 jsr charout
   313  c18a a959                   lda #'Y'
   314  c18c 4cd2ff                 jmp charout
   315                          
   316                          dispModeRel:
   317  c18f a924                   lda #'$'
   318  c191 20d2ff                 jsr charout
   319  c194 18                     clc
   320  c195 a5fb                   lda ptr1
   321  c197 6902                   adc #2
   322  c199 8526                   sta ptr3
   323  c19b a5fc                   lda ptr1+1
   324  c19d 6900                   adc #0
   325  c19f 8527                   sta ptr3+1
   326  c1a1 a001                   ldy #1
   327  c1a3 b1fb                   lda (ptr1),y
   328  c1a5 1014                   bpl +
   329                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   330  c1a7 49ff                   eor #$FF ; inverse
   331  c1a9 18                     clc
   332  c1aa 6901                   adc #1 ; complete getting absolute value from two's complement
   333  c1ac 85ff                   sta tmp
   334  c1ae 38                     sec
   335  c1af a526                   lda ptr3
   336  c1b1 e5ff                   sbc tmp
   337  c1b3 8526                   sta ptr3
   338  c1b5 b00d                   bcs ++
   339  c1b7 c627                   dec ptr3+1
   340  c1b9 9009                   bcc ++
   341  c1bb 18                 +   clc ; simple case of adding
   342  c1bc 6526                   adc ptr3
   343  c1be 8526                   sta ptr3
   344  c1c0 9002                   bcc ++
   345  c1c2 e627                   inc ptr3+1
   346  c1c4 a526               ++  lda ptr3
   347  c1c6 a627                   ldx ptr3+1
   348  c1c8 4c1ec2                 jmp disphexword
   349                          
   350                          dispModeZPX:
   351  c1cb 2043c1                 jsr dispModeZP
   352  c1ce a92c                   lda #','
   353  c1d0 20d2ff                 jsr charout
   354  c1d3 a958                   lda #'X'
   355  c1d5 4cd2ff                 jmp charout
   356                          
   357                          dispModeZPY:
   358  c1d8 2043c1                 jsr dispModeZP
   359  c1db a92c                   lda #','
   360  c1dd 20d2ff                 jsr charout
   361  c1e0 a959                   lda #'Y'
   362  c1e2 4cd2ff                 jmp charout
   363                          
   364                          dispModeAbs:
   365  c1e5 a924                   lda #'$'
   366  c1e7 20d2ff                 jsr charout
   367  c1ea a001                   ldy #1
   368  c1ec b1fb                   lda (ptr1),y
   369  c1ee 48                     pha
   370  c1ef c8                     iny
   371  c1f0 b1fb                   lda (ptr1),y
   372  c1f2 aa                     tax
   373  c1f3 68                     pla
   374  c1f4 4c1ec2                 jmp disphexword
   375                          
   376                          dispModeAbsX:
   377  c1f7 20e5c1                 jsr dispModeAbs
   378  c1fa a92c                   lda #','
   379  c1fc 20d2ff                 jsr charout
   380  c1ff a958                   lda #'X'
   381  c201 4cd2ff                 jmp charout
   382                          
   383                          dispModeAbsY:
   384  c204 20e5c1                 jsr dispModeAbs
   385  c207 a92c                   lda #','
   386  c209 20d2ff                 jsr charout
   387  c20c a959                   lda #'Y'
   388  c20e 4cd2ff                 jmp charout
   389                          
   390                          dispModeInd:
   391  c211 a928                   lda #'('
   392  c213 20d2ff                 jsr charout
   393  c216 20e5c1                 jsr dispModeAbs
   394  c219 a929                   lda #')'
   395  c21b 4cd2ff                 jmp charout
   396                          
   397                          disphexword: ; .A low, .X high, 0000..FFFF
   398  c21e 48                     pha
   399  c21f 8a                     txa
   400  c220 2024c2                 jsr disphexbyte
   401  c223 68                     pla
   402                              ;fall through to call again
   403                          
   404                          disphexbyte: ; .A 00..FF
   405  c224 48                     pha
   406  c225 4a                     lsr
   407  c226 4a                     lsr
   408  c227 4a                     lsr
   409  c228 4a                     lsr
   410  c229 202dc2                 jsr disphexnybble
   411  c22c 68                     pla
   412                              ;fall through to call again
   413                          
   414                          disphexnybble: ; .A 0..F
   415  c22d 290f                   and #$0F
   416  c22f 0930                   ora #$30
   417  c231 c93a                   cmp #$3A
   418  c233 9002                   bcc +
   419  c235 6906                   adc #$06
   420  c237 4cd2ff             +   jmp charout
   421                          
   422                          display_memory:
   423  c23a a5fb               --  lda ptr1
   424  c23c a6fc                   ldx ptr1+1
   425  c23e 201ec2                 jsr disphexword
   426  c241 a920                   lda #$20
   427  c243 20d2ff                 jsr charout
   428  c246 2081c0             -   jsr compareptrs
   429  c249 b00c                   bcs +
   430  c24b a000                   ldy #0
   431  c24d b1fb                   lda (ptr1),y
   432  c24f 2024c2                 jsr disphexbyte
   433  c252 a920                   lda #$20
   434  c254 20d2ff                 jsr charout
   435  c257 e6fb               +   inc ptr1
   436  c259 d002                   bne +
   437  c25b e6fc                   inc ptr1+1
   438  c25d a5fb               +   lda ptr1
   439  c25f 2907                   and #$07
   440  c261 d0e3                   bne -
   441  c263 a90d                   lda #13
   442  c265 20d2ff                 jsr charout
   443  c268 2081c0                 jsr compareptrs
   444  c26b 90cd                   bcc --
   445  c26d 60                     rts
   446                              
   447                          inputhexword: ; C set if fails
   448  c26e 98                     tya
   449  c26f aa                     tax ; save buffer pointer in x
   450  c270 208bc2                 jsr inputhexbyte
   451  c273 b013                   bcs ++ ; failed
   452  c275 85fb               +   sta ptr1 ; assume one byte
   453  c277 a900                   lda #0
   454  c279 85fc                   sta ptr1+1 ; extend to 16 bits
   455  c27b 208bc2                 jsr inputhexbyte
   456  c27e b006                   bcs + ; failed
   457  c280 a6fb                   ldx ptr1 ; two bytes so shift the bytes
   458  c282 86fc                   stx ptr1+1
   459  c284 85fb                   sta ptr1
   460  c286 18                 +   clc
   461  c287 60                     rts
   462  c288 8a                 ++  txa
   463  c289 a8                     tay ; restore buffer pointer
   464  c28a 60                     rts
   465                          
   466                          inputhexbyte:
   467  c28b 20a7c2                 jsr inputhexnybble
   468  c28e b016                   bcs ++
   469  c290 85ff                   sta tmp
   470  c292 20a7c2                 jsr inputhexnybble
   471  c295 9005                   bcc +
   472  c297 18                     clc ; allow single digit as byte
   473  c298 a5ff                   lda tmp
   474  c29a 900a                   bcc ++
   475  c29c 06ff               +   asl tmp
   476  c29e 06ff                   asl tmp
   477  c2a0 06ff                   asl tmp
   478  c2a2 06ff                   asl tmp
   479  c2a4 05ff                   ora tmp
   480  c2a6 60                 ++  rts
   481                          
   482                          inputhexnybble:
   483  c2a7 b90002                 lda $0200,y
   484  c2aa 297f                   and #$7F
   485  c2ac 38                     sec
   486  c2ad e930                   sbc #$30
   487  c2af 9012                   bcc ++
   488  c2b1 c90a                   cmp #10
   489  c2b3 900c                   bcc +
   490  c2b5 e907                   sbc #7
   491  c2b7 900a                   bcc ++
   492  c2b9 c90a                   cmp #10
   493  c2bb 9006                   bcc ++
   494  c2bd c910                   cmp #16
   495  c2bf b002                   bcs ++
   496  c2c1 c8                 +   iny
   497  c2c2 60                     rts
   498  c2c3 38                 ++  sec
   499  c2c4 60                     rts
   500                          
   501                          strout:
   502  c2c5 8526                   sta ptr3
   503  c2c7 8627                   stx ptr3+1
   504  c2c9 a000                   ldy #0
   505  c2cb b126               -   lda (ptr3),y
   506  c2cd f006                   beq +
   507  c2cf 20d2ff                 jsr charout
   508  c2d2 c8                     iny
   509  c2d3 d0f6                   bne -
   510  c2d5 60                 +   rts
   511                          
   512                          inputline:
   513  c2d6 a000                   ldy #0
   514  c2d8 20cfff             -   jsr charin
   515  c2db 990002                 sta inputbuf,y
   516  c2de c8                     iny
   517  c2df c90d                   cmp #13
   518  c2e1 d0f5                   bne -
   519  c2e3 60                 +   rts
   520                          
   521                          parseline:
   522  c2e4 c001                   cpy #1
   523  c2e6 d003                   bne +
   524  c2e8 4c7fc7             -   jmp newline
   525  c2eb 88                 +   dey
   526  c2ec 84a4                   sty len
   527                              ; skip whitespace
   528                              ; check for address, put in ptr1
   529                              ; or check for dot, then require address put in ptr2
   530                              ; or check for ?, and optional parameter, execute help
   531                              ; check for whitespace
   532                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   533                              ; check for string, store at start of inputbuf
   534                              ; check for drive number
   535                              ; check for whitespace
   536                              ; check command ":rda?mls", execute command
   537  c2ee a000                   ldy #0
   538  c2f0 20bcc6                 jsr skipspaces
   539  c2f3 c4a4                   cpy len
   540  c2f5 f0f1                   beq -
   541  c2f7 20c7c6                 jsr chkdot
   542  c2fa d003                   bne +
   543  c2fc 4cb2c3                 jmp executedot
   544  c2ff 20d2c6             +   jsr chkhelp
   545  c302 d003                   bne +
   546  c304 4cb2c3                 jmp executehelp
   547  c307 2022c7             +   jsr chkhexaddr1
   548  c30a d003                   bne e
   549  c30c 4c12c3                 jmp executeaddr1
   550  c30f 4ca5c6             e:  jmp reporterr
   551                          
   552                          executeaddr1:
   553  c312 c4a4                   cpy len
   554  c314 d003                   bne +
   555  c316 4c46c3                 jmp executedisplay1
   556  c319 20c7c6             +   jsr chkdot
   557  c31c d008                   bne +
   558  c31e 2042c7                 jsr chkhexaddr2
   559  c321 d0ec                   bne e
   560  c323 4c3cc3                 jmp executeaddr12
   561  c326 20bcc6             +   jsr skipspaces
   562  c329 20ddc6                 jsr chkcolon
   563  c32c d003                   bne +
   564  c32e 4c90c3                 jmp executemodify
   565  c331 2063c7             +   jsr chkaddr1cmd ; rda, will not return here if cmd
   566  c334 20e8c6                 jsr chkfilename
   567  c337 d0d6                   bne e
   568  c339 f077                   beq executeloadfilename
   569  c33b 00                     brk ; will never get here
   570                          
   571                          executeaddr12:
   572  c33c c4a4                   cpy len
   573  c33e d003                   bne +
   574  c340 4c4ec3                 jmp executedisplay12
   575  c343 4c9ec6             +   jmp reportnotimplemented
   576                          
   577                          executedisplay1:
   578  c346 a5fb                   lda ptr1
   579  c348 85fd                   sta ptr2
   580  c34a a5fc                   lda ptr1+1
   581  c34c 85fe                   sta ptr2+1
   582                              ; fall through executedisplay12
   583                          
   584                          executedisplay12:
   585  c34e a9ff                   lda #$ff
   586  c350 85a3                   sta count
   587  c352 e6a3               -   inc count
   588  c354 a5a3                   lda count
   589  c356 2907                   and #$07
   590  c358 d016                   bne +
   591  c35a a90d                   lda #13
   592  c35c 20d2ff                 jsr charout
   593  c35f a5fb                   lda ptr1
   594  c361 a6fc                   ldx ptr1+1
   595  c363 201ec2                 jsr disphexword
   596  c366 a93a                   lda #':'
   597  c368 20d2ff                 jsr charout
   598  c36b a920                   lda #' '
   599  c36d 20d2ff                 jsr charout
   600  c370 a000               +   ldy #0
   601  c372 b1fb                   lda (ptr1),y
   602  c374 2024c2                 jsr disphexbyte
   603  c377 a920                   lda #' '
   604  c379 20d2ff                 jsr charout
   605  c37c e6fb                   inc ptr1
   606  c37e d004                   bne +
   607  c380 e6fc                   inc ptr1+1
   608  c382 f007                   beq ++
   609  c384 2081c0             +   jsr compareptrs
   610  c387 90c9                   bcc -
   611  c389 f0c7                   beq -
   612  c38b a90d               ++  lda #13
   613  c38d 4cd2ff                 jmp charout
   614                          
   615                          executemodify:
   616  c390 20bcc6                 jsr skipspaces
   617  c393 c4a4                   cpy len
   618  c395 f018                   beq ++
   619  c397 2002c7                 jsr chkhexbyteofsequence
   620  c39a f003                   beq +
   621  c39c 4c0fc3                 jmp e
   622  c39f 84ff               +   sty tmp
   623  c3a1 a000                   ldy #0
   624  c3a3 91fb                   sta (ptr1),y
   625  c3a5 e6fb                   inc ptr1
   626  c3a7 d002                   bne +
   627  c3a9 e6fc                   inc ptr1+1
   628  c3ab a4ff               +   ldy tmp
   629  c3ad d0e1                   bne executemodify
   630  c3af 4c7fc7             ++  jmp newline
   631                          
   632                          executeloadfilename:
   633                          executedot:
   634                          executeaddr1cmd:
   635                          executehelp:
   636  c3b2 4c9ec6                 jmp reportnotimplemented
   637                          
   638                          executeassemble:
   639  c3b5 68                     pla ; remove low byte return address
   640  c3b6 68                     pla ; return high byte return address
   641  c3b7 a914                   lda #20
   642  c3b9 20d2ff                 jsr charout
   643  c3bc 20d2ff                 jsr charout
   644                              ; lda ptr1
   645                              ; ldx ptr1+1
   646                              ; jsr disphexword
   647                              ; lda #' '
   648                              ; jsr charout
   649  c3bf 20d6c2                 jsr inputline
   650  c3c2 c001                   cpy #1
   651  c3c4 f021                   beq ++
   652  c3c6 88                     dey
   653  c3c7 84a4                   sty len
   654  c3c9 a000                   ldy #0
   655  c3cb 20bcc6                 jsr skipspaces
   656  c3ce c4a4                   cpy len
   657  c3d0 f015                   beq ++
   658                              ;jsr chkhexaddr1 *** NO interferes with ADC, BCC, DEC
   659                              ;jsr skipspaces
   660  c3d2 204bc6                 jsr chkinstruction
   661  c3d5 f003                   beq +
   662  c3d7 4c0fc3             -   jmp e
   663  c3da 2024c2             +   jsr disphexbyte
   664  c3dd 20eac3                 jsr chkaddressing
   665  c3e0 d0f5                   bne -
   666  c3e2 2024c2                 jsr disphexbyte
   667  c3e5 a200                   ldx #0 ; Z true (EQ)
   668  c3e7 4c7fc7             ++  jmp newline
   669                          
   670                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
   671  c3ea 20bcc6                 jsr skipspaces
   672  c3ed a200                   ldx #0
   673  c3ef 8624                   stx mode
   674  c3f1 204cc4                 jsr chkaccumulator
   675  c3f4 f051                   beq +
   676  c3f6 e624                   inc mode
   677  c3f8 c4a4                   cpy len ; chknone
   678  c3fa f04b                   beq +
   679  c3fc e624                   inc mode
   680  c3fe 2059c4                 jsr chkimmediate
   681  c401 f044                   beq +
   682  c403 e624                   inc mode
   683  c405 207dc4                 jsr chkindirectx
   684  c408 f03d                   beq +
   685  c40a e624                   inc mode
   686  c40c 20c2c4                 jsr chkindirecty
   687  c40f f036                   beq +
   688  c411 e624                   inc mode
   689  c413 2007c5                 jsr chkrelative
   690  c416 f02f                   beq +
   691  c418 e624                   inc mode
   692  c41a 202ec5                 jsr chkzeropage
   693  c41d f028                   beq +
   694  c41f e624                   inc mode
   695  c421 2047c5                 jsr chkzeropagex
   696  c424 f021                   beq +
   697  c426 e624                   inc mode
   698  c428 2076c5                 jsr chkzeropagey
   699  c42b f01a                   beq +
   700  c42d e624                   inc mode
   701  c42f 20a5c5                 jsr chkabsolute
   702  c432 f013                   beq +
   703  c434 e624                   inc mode
   704  c436 20bec5                 jsr chkabsolutex
   705  c439 f00c                   beq +
   706  c43b e624                   inc mode
   707  c43d 20edc5                 jsr chkabsolutey
   708  c440 f005                   beq +
   709  c442 e624                   inc mode
   710  c444 201cc6                 jsr chkindirect
   711  c447 08                 +   php ; save Z
   712  c448 a524                   lda mode
   713  c44a 28                     plp ; restore Z 
   714  c44b 60                     rts
   715                          
   716                          chkaccumulator:
   717                              ; TODO: ASL, LSR, ROL, ROR allowed not have no parameters
   718  c44c b90002                 lda inputbuf, y
   719  c44f c941                   cmp #'A'
   720  c451 d005                   bne +
   721  c453 b90102                 lda inputbuf+1,y
   722  c456 c90d                   cmp #13
   723  c458 60                 +   rts
   724                          
   725                          chkimmediate:
   726  c459 84a5                   sty savelen
   727  c45b b90002                 lda inputbuf, y
   728  c45e c923                   cmp #'#'
   729  c460 d016                   bne ++
   730  c462 c8                     iny
   731  c463 20bcc6                 jsr skipspaces
   732  c466 b90002                 lda inputbuf, y
   733  c469 c924                   cmp #'$'
   734  c46b d001                   bne +
   735  c46d c8                     iny
   736  c46e 202bc7             +   jsr chkhexbyte
   737  c471 d005                   bne ++
   738  c473 c4a4               +   cpy len
   739  c475 d001                   bne ++
   740  c477 60                     rts
   741  c478 a4a5               ++  ldy savelen
   742  c47a a201                   ldx #1 ; Z false (NE)
   743  c47c 60                     rts
   744                          
   745                          chkindirectx:
   746  c47d 84a5                   sty savelen
   747  c47f b90002                 lda inputbuf, y
   748  c482 c928                   cmp #'('
   749  c484 d037                   bne ++
   750  c486 c8                     iny
   751  c487 20bcc6                 jsr skipspaces
   752  c48a b90002                 lda inputbuf, y
   753  c48d c924                   cmp #'$'
   754  c48f d001                   bne +
   755  c491 c8                     iny
   756  c492 202bc7             +   jsr chkhexbyte
   757  c495 d026                   bne ++
   758  c497 20bcc6                 jsr skipspaces
   759  c49a b90002                 lda inputbuf, y
   760  c49d c92c                   cmp #','
   761  c49f d01c                   bne ++
   762  c4a1 c8                     iny
   763  c4a2 20bcc6                 jsr skipspaces
   764  c4a5 b90002                 lda inputbuf, y
   765  c4a8 c958                   cmp #'X'
   766  c4aa d011                   bne ++
   767  c4ac c8                     iny
   768  c4ad 20bcc6                 jsr skipspaces
   769  c4b0 b90002                 lda inputbuf, y
   770  c4b3 c929                   cmp #')'
   771  c4b5 d006                   bne ++
   772  c4b7 c8                     iny
   773  c4b8 c4a4                   cpy len
   774  c4ba d001                   bne ++
   775  c4bc 60                     rts
   776  c4bd a4a5               ++  ldy savelen
   777  c4bf a201                   ldx #1 ; Z false (NE)
   778  c4c1 60                     rts
   779                          
   780                          chkindirecty:
   781  c4c2 84a5                   sty savelen
   782  c4c4 b90002                 lda inputbuf, y
   783  c4c7 c928                   cmp #'('
   784  c4c9 d037                   bne ++
   785  c4cb c8                     iny
   786  c4cc 20bcc6                 jsr skipspaces
   787  c4cf b90002                 lda inputbuf, y
   788  c4d2 c924                   cmp #'$'
   789  c4d4 d001                   bne +
   790  c4d6 c8                     iny
   791  c4d7 202bc7             +   jsr chkhexbyte
   792  c4da d026                   bne ++
   793  c4dc 20bcc6                 jsr skipspaces
   794  c4df b90002                 lda inputbuf, y
   795  c4e2 c929                   cmp #')'
   796  c4e4 d01c                   bne ++
   797  c4e6 c8                     iny
   798  c4e7 20bcc6                 jsr skipspaces
   799  c4ea b90002                 lda inputbuf, y
   800  c4ed c92c                   cmp #','
   801  c4ef d011                   bne ++
   802  c4f1 c8                     iny
   803  c4f2 20bcc6                 jsr skipspaces
   804  c4f5 b90002                 lda inputbuf, y
   805  c4f8 c959                   cmp #'Y'
   806  c4fa d006                   bne ++
   807  c4fc c8                     iny
   808  c4fd c4a4                   cpy len
   809  c4ff d001                   bne ++
   810  c501 60                     rts
   811  c502 a4a5               ++  ldy savelen
   812  c504 a201                   ldx #1 ; Z false (NE)
   813  c506 60                     rts
   814                          
   815                          chkrelative:
   816  c507 84a5                   sty savelen
   817  c509 ae4dc9                 ldx instidx
   818  c50c e006                   cpx #6 ; BIT
   819  c50e f019                   beq ++
   820  c510 bd99c7                 lda inst0, x
   821  c513 c942                   cmp #'B'
   822  c515 d012                   bne ++
   823  c517 b90002                 lda inputbuf, y
   824  c51a c924                   cmp #'$'
   825  c51c d001                   bne +
   826  c51e c8                     iny
   827  c51f 201cc7             +   jsr chkhexword ; TODO compute offset, validate +128 -128
   828  c522 d005                   bne ++
   829  c524 c4a4                   cpy len
   830  c526 d001                   bne ++
   831  c528 60                     rts ; Z true (EQ)
   832  c529 a4a5               ++  ldy savelen
   833  c52b a201                   ldx #1 ; Z false (NE)
   834  c52d 60                     rts
   835                          
   836                          chkzeropage:
   837  c52e 84a5                   sty savelen
   838  c530 b90002                 lda inputbuf, y
   839  c533 c924                   cmp #'$'
   840  c535 d001                   bne +
   841  c537 c8                     iny
   842  c538 202bc7             +   jsr chkhexbyte
   843  c53b d005                   bne ++
   844  c53d c4a4                   cpy len
   845  c53f d001                   bne ++
   846  c541 60                     rts ; Z true (EQ)
   847  c542 a4a5               ++  ldy savelen
   848  c544 a201                   ldx #1 ; Z false (NE)
   849  c546 60                     rts
   850                          
   851                          chkzeropagex:
   852  c547 84a5                   sty savelen
   853  c549 b90002                 lda inputbuf, y
   854  c54c c924                   cmp #'$'
   855  c54e d001                   bne +
   856  c550 c8                     iny
   857  c551 202bc7             +   jsr chkhexbyte
   858  c554 d01b                   bne ++
   859  c556 20bcc6                 jsr skipspaces
   860  c559 b90002                 lda inputbuf, y
   861  c55c c92c                   cmp #','
   862  c55e d011                   bne ++
   863  c560 c8                     iny
   864  c561 20bcc6                 jsr skipspaces
   865  c564 b90002                 lda inputbuf, y
   866  c567 c958                   cmp #'X'
   867  c569 d006                   bne ++
   868  c56b c8                     iny
   869  c56c c4a4                   cpy len
   870  c56e d001                   bne ++
   871  c570 60                     rts ; Z true (EQ)
   872  c571 a4a5               ++  ldy savelen
   873  c573 a201                   ldx #1 ; Z false (NE)
   874  c575 60                     rts
   875                          
   876                          chkzeropagey:
   877  c576 84a5                   sty savelen
   878  c578 b90002                 lda inputbuf, y
   879  c57b c924                   cmp #'$'
   880  c57d d001                   bne +
   881  c57f c8                     iny
   882  c580 202bc7             +   jsr chkhexbyte
   883  c583 d01b                   bne ++
   884  c585 20bcc6                 jsr skipspaces
   885  c588 b90002                 lda inputbuf, y
   886  c58b c92c                   cmp #','
   887  c58d d011                   bne ++
   888  c58f c8                     iny
   889  c590 20bcc6                 jsr skipspaces
   890  c593 b90002                 lda inputbuf, y
   891  c596 c959                   cmp #'Y'
   892  c598 d006                   bne ++
   893  c59a c8                     iny
   894  c59b c4a4                   cpy len
   895  c59d d001                   bne ++
   896  c59f 60                     rts ; Z true (EQ)
   897  c5a0 a4a5               ++  ldy savelen
   898  c5a2 a201                   ldx #1 ; Z false (NE)
   899  c5a4 60                     rts
   900                          
   901                          chkabsolute:
   902  c5a5 84a5                   sty savelen
   903  c5a7 b90002                 lda inputbuf, y
   904  c5aa c924                   cmp #'$'
   905  c5ac d001                   bne +
   906  c5ae c8                     iny
   907  c5af 201cc7             +   jsr chkhexword
   908  c5b2 d005                   bne ++
   909  c5b4 c4a4                   cpy len
   910  c5b6 d001                   bne ++
   911  c5b8 60                     rts ; Z true (EQ)
   912  c5b9 a4a5               ++  ldy savelen
   913  c5bb a201                   ldx #1 ; Z false (NE)
   914  c5bd 60                     rts
   915                          
   916                          chkabsolutex:
   917  c5be 84a5                   sty savelen
   918  c5c0 b90002                 lda inputbuf, y
   919  c5c3 c924                   cmp #'$'
   920  c5c5 d001                   bne +
   921  c5c7 c8                     iny
   922  c5c8 201cc7             +   jsr chkhexword
   923  c5cb d01b                   bne ++
   924  c5cd 20bcc6                 jsr skipspaces
   925  c5d0 b90002                 lda inputbuf, y
   926  c5d3 c92c                   cmp #','
   927  c5d5 d011                   bne ++
   928  c5d7 c8                     iny
   929  c5d8 20bcc6                 jsr skipspaces
   930  c5db b90002                 lda inputbuf, y
   931  c5de c958                   cmp #'X'
   932  c5e0 d006                   bne ++
   933  c5e2 c8                     iny
   934  c5e3 c4a4                   cpy len
   935  c5e5 d001                   bne ++
   936  c5e7 60                     rts ; Z true (EQ)
   937  c5e8 a4a5               ++  ldy savelen
   938  c5ea a201                   ldx #1 ; Z false (NE)
   939  c5ec 60                     rts
   940                          
   941                          chkabsolutey:
   942  c5ed 84a5                   sty savelen
   943  c5ef b90002                 lda inputbuf, y
   944  c5f2 c924                   cmp #'$'
   945  c5f4 d001                   bne +
   946  c5f6 c8                     iny
   947  c5f7 201cc7             +   jsr chkhexword
   948  c5fa d01b                   bne ++
   949  c5fc 20bcc6                 jsr skipspaces
   950  c5ff b90002                 lda inputbuf, y
   951  c602 c92c                   cmp #','
   952  c604 d011                   bne ++
   953  c606 c8                     iny
   954  c607 20bcc6                 jsr skipspaces
   955  c60a b90002                 lda inputbuf, y
   956  c60d c959                   cmp #'Y'
   957  c60f d006                   bne ++
   958  c611 c8                     iny
   959  c612 c4a4                   cpy len
   960  c614 d001                   bne ++
   961  c616 60                     rts ; Z true (EQ)
   962  c617 a4a5               ++  ldy savelen
   963  c619 a201                   ldx #1 ; Z false (NE)
   964  c61b 60                     rts
   965                          
   966                          chkindirect:
   967  c61c 84a5                   sty savelen
   968  c61e b90002                 lda inputbuf, y
   969  c621 c928                   cmp #'('
   970  c623 d021                   bne ++
   971  c625 c8                     iny
   972  c626 20bcc6                 jsr skipspaces
   973  c629 b90002                 lda inputbuf, y
   974  c62c c924                   cmp #'$'
   975  c62e d001                   bne +
   976  c630 c8                     iny
   977  c631 201cc7             +   jsr chkhexword
   978  c634 d010                   bne ++
   979  c636 20bcc6                 jsr skipspaces
   980  c639 b90002                 lda inputbuf, y
   981  c63c c929                   cmp #')'
   982  c63e d006                   bne ++
   983  c640 c8                     iny
   984  c641 c4a4                   cpy len
   985  c643 d001                   bne ++
   986  c645 60                     rts ; Z true (EQ)
   987  c646 a4a5               ++  ldy savelen
   988  c648 a201                   ldx #1 ; Z false (NE)
   989  c64a 60                     rts
   990                          
   991                          chkinstruction:
   992  c64b c4a4                   cpy len
   993  c64d f02b                   beq ++
   994  c64f 84ff                   sty tmp
   995  c651 a237                   ldx #(ninst-1)
   996  c653 b90002             -   lda inputbuf,y
   997  c656 dd99c7                 cmp inst0,x
   998  c659 d01a                   bne +
   999  c65b c8                     iny
  1000  c65c b90002                 lda inputbuf,y
  1001  c65f ddd1c7                 cmp inst1,x
  1002  c662 d011                   bne +
  1003  c664 c8                     iny
  1004  c665 b90002                 lda inputbuf,y
  1005  c668 dd09c8                 cmp inst2,x
  1006  c66b d008                   bne +
  1007  c66d c8                     iny
  1008  c66e 8a                     txa
  1009  c66f 8d4dc9                 sta instidx
  1010  c672 a200                   ldx #0
  1011  c674 60                     rts
  1012  c675 a4ff               +   ldy tmp
  1013  c677 ca                     dex
  1014  c678 10d9                   bpl -
  1015  c67a a201               ++  ldx #1 ; Z false (NE)
  1016  c67c 60                     rts
  1017                          
  1018                          executerun:
  1019  c67d 68                     pla ; remove low byte return address
  1020  c67e 68                     pla ; return high byte return address
  1021  c67f 68                     pla ; again, we're really not returning
  1022  c680 68                     pla ; again, we're really not returning
  1023  c681 207fc7                 jsr newline
  1024  c684 38                     sec
  1025  c685 a5fb                   lda ptr1
  1026  c687 e901                   sbc #1
  1027  c689 85fb                   sta ptr1
  1028  c68b b002                   bcs +
  1029  c68d c6fc                   dec ptr1+1
  1030  c68f a5fc               +   lda ptr1+1
  1031  c691 48                     pha
  1032  c692 a5fb                   lda ptr1
  1033  c694 48                     pha
  1034  c695 60                     rts
  1035                          
  1036                          executedisassemble:
  1037  c696 68                     pla ; remove low byte return address
  1038  c697 68                     pla ; return high byte return address
  1039  c698 207fc7                 jsr newline
  1040  c69b 4c5ac0                 jmp disassemble
  1041                          
  1042                          reportnotimplemented:
  1043  c69e a9bc                   lda #<notimplemented
  1044  c6a0 a2ca                   ldx #>notimplemented
  1045  c6a2 4cc5c2                 jmp strout
  1046                          
  1047                          reporterr:
  1048  c6a5 c000                   cpy #0
  1049  c6a7 f008                   beq +
  1050  c6a9 a920                   lda #' '
  1051  c6ab 20d2ff             -   jsr charout
  1052  c6ae 88                     dey
  1053  c6af d0fa                   bne -
  1054  c6b1 a93f               +   lda #'?'
  1055  c6b3 20d2ff                 jsr charout
  1056  c6b6 a90d                   lda #13
  1057  c6b8 20d2ff                 jsr charout
  1058  c6bb 60                     rts
  1059                          
  1060                          skipspaces:
  1061  c6bc b90002             -   lda inputbuf, y
  1062  c6bf c920                   cmp #$20
  1063  c6c1 d003                   bne +
  1064  c6c3 c8                     iny
  1065  c6c4 d0f6                   bne -
  1066  c6c6 60                 +   rts
  1067                          
  1068                          chkdot:
  1069  c6c7 b90002                 lda inputbuf, y
  1070  c6ca c92e                   cmp #'.'
  1071  c6cc d003                   bne +
  1072  c6ce c8                     iny
  1073  c6cf a900                   lda #0 ; Z true (EQ)
  1074  c6d1 60                 +   rts
  1075                          
  1076                          chkhelp:
  1077  c6d2 b90002                 lda inputbuf, y
  1078  c6d5 c93f                   cmp #'?'
  1079  c6d7 d003                   bne +
  1080  c6d9 c8                     iny
  1081  c6da a900                   lda #0 ; Z true (EQ)
  1082  c6dc 60                 +   rts
  1083                          
  1084                          chkcolon:
  1085  c6dd b90002                 lda inputbuf, y
  1086  c6e0 c93a                   cmp #':'
  1087  c6e2 d003                   bne +
  1088  c6e4 c8                     iny
  1089  c6e5 a900                   lda #0 ; Z true (EQ)
  1090  c6e7 60                 +   rts
  1091                          
  1092                          chkfilename:
  1093  c6e8 84ff                   sty tmp
  1094  c6ea b90002                 lda inputbuf, y
  1095  c6ed c922                   cmp #34
  1096  c6ef d010                   bne ++
  1097  c6f1 c8                 -   iny
  1098  c6f2 b90002                 lda inputbuf, y
  1099  c6f5 c90d                   cmp #13
  1100  c6f7 d004                   bne +
  1101  c6f9 a4ff                   ldy tmp
  1102  c6fb d004                   bne ++
  1103  c6fd c922               +   cmp #34
  1104  c6ff d0f0                   bne -
  1105  c701 60                 ++  rts
  1106                          
  1107                          chkhexbyteofsequence:
  1108  c702 208bc2                 jsr inputhexbyte
  1109  c705 2025c7                 jsr +
  1110  c708 d011                   bne ++ ; Z false (NE) if failed checks
  1111  c70a c4a4                   cpy len
  1112  c70c f00d                   beq ++ ; Z true (EQ) if end of input
  1113  c70e 85ff                   sta tmp
  1114  c710 b90002                 lda inputbuf,y
  1115  c713 c920                   cmp #$20
  1116  c715 d004                   bne ++ ; Z false (NE) if not space
  1117  c717 a5ff                   lda tmp
  1118  c719 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1119  c71b 60                 ++  rts
  1120                          
  1121                          chkhexword:
  1122  c71c 206ec2                 jsr inputhexword
  1123  c71f 4c25c7                 jmp +
  1124                          
  1125                          chkhexaddr1:
  1126  c722 206ec2                 jsr inputhexword
  1127  c725 a200               +   ldx #0 ; Z true (EQ)
  1128  c727 9001                   bcc +
  1129  c729 e8                     inx ; Z false (NE)
  1130  c72a 60                 +   rts
  1131                          
  1132                          chkhexbyte
  1133  c72b 98                     tya
  1134  c72c 48                     pha ; save y
  1135  c72d 208bc2                 jsr inputhexbyte
  1136  c730 b00d                   bcs +
  1137  c732 85a6                   sta tmp2
  1138  c734 20a7c2                 jsr inputhexnybble
  1139  c737 9006                   bcc +
  1140  c739 68                     pla ; throw away saved y
  1141  c73a a5a6                   lda tmp2
  1142  c73c a200                   ldx #0 ; Z true (EQ)
  1143  c73e 60                     rts
  1144  c73f 68                 +   pla
  1145  c740 a8                     tay ; won't be zero, so Z false (NE)
  1146  c741 60                     rts    
  1147                          
  1148                          chkhexaddr2:
  1149  c742 a5fb                   lda ptr1
  1150  c744 48                     pha
  1151  c745 a5fc                   lda ptr1+1
  1152  c747 48                     pha
  1153  c748 2022c7                 jsr chkhexaddr1
  1154  c74b f005                   beq +
  1155  c74d 68                     pla
  1156  c74e 68                     pla
  1157  c74f a901                   lda #1 ; Z false (NE)
  1158  c751 60                     rts
  1159  c752 a5fb               +   lda ptr1
  1160  c754 85fd                   sta ptr2
  1161  c756 a5fc                   lda ptr1+1
  1162  c758 85fe                   sta ptr2+1
  1163  c75a 68                     pla
  1164  c75b 85fc                   sta ptr1+1
  1165  c75d 68                     pla
  1166  c75e 85fb                   sta ptr1
  1167  c760 a900                   lda #0 ; Z true (EQ)
  1168  c762 60                     rts    
  1169                          
  1170                          chkaddr1cmd:
  1171  c763 b90002                 lda inputbuf, y
  1172  c766 c941               +   cmp #'A'
  1173  c768 d004                   bne +
  1174  c76a c8                     iny
  1175  c76b 4cb5c3                 jmp executeassemble
  1176  c76e c944               +   cmp #'D'
  1177  c770 d004                   bne +
  1178  c772 c8                     iny
  1179  c773 4c96c6                 jmp executedisassemble
  1180  c776 c952               +   cmp #'R'
  1181  c778 d004                   bne +
  1182  c77a c8                     iny
  1183  c77b 4c7dc6                 jmp executerun
  1184  c77e 60                 +   rts
  1185                          
  1186                          newline:
  1187  c77f a90d                   lda #13
  1188  c781 4cd2ff                 jmp charout
  1189                          
  1190                          pagemore:
  1191  c784 a9cd                   lda #<pagemoremsg
  1192  c786 a2ca                   ldx #>pagemoremsg
  1193  c788 20c5c2                 jsr strout
  1194  c78b 20e4ff             -   jsr getkey
  1195  c78e f0fb                   beq -
  1196  c790 48                     pha
  1197  c791 207fc7                 jsr newline
  1198  c794 68                     pla
  1199  c795 c951                   cmp #'Q'
  1200  c797 60                     rts
  1201                          
  1202                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1203                          ;     jsr $ffd2
  1204                          ;     pha
  1205                          ; -   lda $d011
  1206                          ;     bpl -
  1207                          ; -   lda $d011
  1208                          ;     bmi -
  1209                          ; -   lda $d011
  1210                          ;     bpl -
  1211                          ; -   lda $d011
  1212                          ;     bmi -
  1213                          ;     pla
  1214                          ;     rts
  1215                          
  1216  c798 00                 end: brk
  1217                          
  1218                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  1219                          ninst = 56
  1220  c799 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  1221  c7d1 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  1222  c809 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  1223                          
  1224                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  1225                          mode_jmptable:
  1226  c841 37c1               !word dispModeAcc-1; 0 Accumulator 1
  1227  c843 3cc1               !word dispModeNone-1 ; 1 None 1
  1228  c845 3dc1               !word dispModeImm-1 ; 2 Immediate 2
  1229  c847 4ec1               !word dispModeIndX-1 ; 3 IndirectX 2
  1230  c849 6ec1               !word dispModeIndY-1 ; 4 IndirectY 2
  1231  c84b 8ec1               !word dispModeRel-1 ; 5 Relative 2
  1232  c84d 42c1               !word dispModeZP-1 ; 6 ZeroPage 2
  1233  c84f cac1               !word dispModeZPX-1 ; 7 ZeroPageX 2
  1234  c851 d7c1               !word dispModeZPY-1 ; 8 ZeroPageY 2
  1235  c853 e4c1               !word dispModeAbs-1 ; 9 Absolute 3
  1236  c855 f6c1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  1237  c857 03c2               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  1238  c859 10c2               !word dispModeInd-1 ; 12 Indirect 3
  1239                          
  1240                          mode_examples:
  1241  c85b 4100               !text "A", 0 ; 0 Accumulator
  1242  c85d 00                 !text "", 0 ; 1 None
  1243  c85e 2324313200         !text "#$12", 0 ; 2 Immediate
  1244  c863 282431322c582900   !text "($12,X)", 0 ; 3 IndirectX
  1245  c86b 28243132292c5900   !text "($12),Y", 0 ; 4 IndirectY
  1246  c873 243132333420282d...!text "$1234 (-128 to +127)", 0 ; 5 Relative
  1247  c888 24313200           !text "$12", 0 ; 6 ZeroPage
  1248  c88c 2431322c5800       !text "$12,X", 0 ; 7 ZeroPageX
  1249  c892 2431322c5900       !text "$12,Y", 0 ; 8 ZeroPageY
  1250  c898 243132333400       !text "$1234", 0 ; 9 Absolute
  1251  c89e 24313233342c5800   !text "$1234,X", 0 ; 10 AbsoluteX
  1252  c8a6 24313233342c5900   !text "$1234,Y", 0 ; 11 AbsoluteY
  1253  c8ae 2824313233342900   !text "($1234)", 0 ; 12 Indirect
  1254                          
  1255                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  1256                          nopcodes = 151
  1257  c8b6 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  1258  c94d 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  1259  c9e4 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  1260                          
  1261  ca7b 0d91565741533230...copyright !text 13,145,"VWAS2024 (C) 2024 DAVID R. VAN WAGNER", 13, "MIT LICENSE DAVEVW.COM", 157, 13, 0
  1262  cabc 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  1263  cacd 285b515d20544f20...pagemoremsg !text "([Q] TO QUIT, ELSE CONTINUE)...",0
  1264                          
  1265                          finish = *
