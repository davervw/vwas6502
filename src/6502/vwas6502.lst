
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGET  C64 and...                    *        <<<
     7                          ;; >>>       ** INCLUDES VERSION FOR 6502+MC6850 minimum system *        <<<
     8                          ;; >>>       *   60K(RAM),4K(ROM), 2 bytes IO for MC6850 UART   *        <<<
     9                          ;; >>>       ****************************************************        <<<
    10                          ;;
    11                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    12                          ;; MIT License
    13                          ;;
    14                          ;; Copyright (c) 2024 David R. Van Wagner
    15                          ;; davevw.com
    16                          ;;
    17                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    18                          ;; of this software and associated documentation files (the "Software"), to deal
    19                          ;; in the Software without restriction, including without limitation the rights
    20                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    21                          ;; copies of the Software, and to permit persons to whom the Software is
    22                          ;; furnished to do so, subject to the following conditions:
    23                          ;;
    24                          ;; The above copyright notice and this permission notice shall be included in all
    25                          ;; copies or substantial portions of the Software.
    26                          ;;
    27                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    28                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    29                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    30                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    31                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    32                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    33                          ;; SOFTWARE.
    34                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    35                          
    36                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ; Important! define exactly ONE target (set in build.sh)
    39                          ;C64SCREEN = 1
    40                          ;C64TERMINAL = 1
    41                          ;MINIMUM = 1
    42                          
    43                          ; options (set in build.sh)
    44                          ;NEEDECHO = 0
    45                          
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;; _
    49                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    50                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    51                          ;; 1000 (display memory at $1000)
    52                          ;; 1000.2000 (display memory range $1000 to $2000)
    53                          ;; 1000. (display next screenful of memory starting at $1000)
    54                          ;; . (display next screenful of memory)
    55                          ;; 1000 r (JMP $1000)
    56                          ;; 1000: 01 02 03 (modify memory)
    57                          ;; (NEW SYNTAX)
    58                          ;; 1000 d (disassemble starting at address, for screenful)
    59                          ;; d (continue disassembling from last address)
    60                          ;; 1000 a (assemble starting at, interactive until empty line) 
    61                          ;; (FUTURE SYNTAX, not implemented)
    62                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    63                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    64                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    65                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    66                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    67                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    68                          ;; 1000.2000 "filename" 08 save (save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, can abbreviate to s)
    69                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    70                          ;; ? (commands help)
    71                          ;; ? a (list instructions available)
    72                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    73                          ;; ? mode (show addressing modes example syntax for 6502)
    74                          ;;
    75                          ;; (INTERACTIVE ASSEMBLER)
    76                          ;; 1000 _
    77                          ;;      ADC #$12
    78                          ;; 1000 69 12    ADC #$12
    79                          ;; 1002 _
    80                          ;;      JSR $1234
    81                          ;; 1002 20 34 12 JSR $1234
    82                          ;; 1005 _
    83                          ;;      RTS
    84                          ;; 1005 60       RTS
    85                          ;; 1006 _
    86                          ;;      XYZ
    87                          ;;      XYZ ?
    88                          ;; 1006 _
    89                          ;; _
    90                          ;;
    91                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    92                          ;; and can cursor up to revise, 
    93                          ;;
    94                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    95                          ;;
    96                          
    97                          ; global
    98                          inputbuf=$0200
    99                          
   100                          
   101                          ; kernal/system calls
   102                          
   103                          !ifdef MINIMUM {
   104                          charout=JUART_OUT
   105                          getkey=JUART_IN
   106                          }
   107                          
   108                          !ifdef C64SCREEN {
   109                          charin=$ffcf ; screen editor
   110                          charout=$ffd2
   111                          getkey=$ffe4
   112                          }
   113                          
   114                          !ifdef C64TERMINAL {
   115                          charout=$ffd2
   116                          getkey=$ffe4
   117                          }
   118                          
   119                          ; zeropage
   120                          !ifdef MINIMUM {
   121                          opidx=$f0
   122                          inidx=$f1
   123                          mode=$f2
   124                          size=$f3
   125                          ptr3=$f4 ; and $f5
   126                          count=$f6
   127                          len=$f7
   128                          savepos=$f8
   129                          tmp2=$f9
   130                          flag=$fa
   131                          ptr1=$fb ; and $fc
   132                          ptr2=$fd ; and $fe
   133                          tmp=$ff
   134                          } else {
   135                          ptr1=$fb ; and $fc
   136                          ptr2=$fd ; and $fe
   137                          tmp=$ff
   138                          opidx=$22
   139                          inidx=$23
   140                          mode=$24
   141                          size=$25
   142                          ptr3=$26 ; and $27
   143                          count=$a3
   144                          len=$a4
   145                          savepos=$a5
   146                          tmp2=$a6
   147                          flag=$a7
   148                          banksel=$02
   149                          }
   150                          
   151                          !ifdef MINIMUM {
   152                          *=$f000
   153                          } else {
   154                          *=$bc00 ; use some extra RAM under C64 BASIC ROM for more code
   155                          }
   156                          
   157                          ; ************************************************************************************
   158                          ; **** skip over next section, and see ** start ** below for beginning of program ****
   159                          ; ************************************************************************************
   160                          
   161                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   162                          
   163                          !ifndef MINIMUM {
   164                          ; C64 only
   165                          ; THIS CODE IS IN RAM UNDER BASIC ROM SO USE EXTRA CARE AS RUNNING IN THIS DIFFERENT MEMORY CONFIGURATION
   166                          ; REQUIRES ENTRY WHILE RAM IS ACCESSIBLE (SEE SETBANK) BUT ROM IS INACCESSIBLE
   167                          
   168                          chkextrac64:
   169  bc00 200cbc                 jsr chkexit
   170  bc03 d003                   bne +
   171  bc05 4c20bc                 jmp execute_exit
   172  bc08 18                 +   clc ; no error
   173  bc09 a201                   ldx #1 ; Z false - not consumed
   174  bc0b 60                     rts
   175                          
   176                          chkexit:
   177  bc0c b90002                 lda inputbuf, y
   178  bc0f c958                   cmp #'X'
   179  bc11 d008                   bne +
   180  bc13 c8                     iny
   181  bc14 c4a4                   cpy len ; validate no extra characters
   182  bc16 f003                   beq +
   183  bc18 4c1cbc                 jmp extra_error
   184  bc1b 60                 +   rts
   185                          
   186                          extra_error:
   187                              ; pop local return address
   188  bc1c 68                     pla
   189  bc1d 68                     pla
   190  bc1e 38                     sec ; error
   191  bc1f 60                     rts
   192                          
   193                          execute_exit:
   194                              ; pop monitor return addresses, so only original caller is left
   195  bc20 68                     pla
   196  bc21 68                     pla
   197  bc22 68                     pla
   198  bc23 68                     pla
   199  bc24 68                     pla
   200  bc25 68                     pla
   201  bc26 a907                   lda #7
   202  bc28 4cb2cf                 jmp setbank
   203                          
   204                          display_extra_help:
   205  bc2b a979                   lda #<extra_help
   206  bc2d a2bc                   ldx #>extra_help
   207  bc2f 4c62c2                 jmp strout
   208                          
   209                          !ifdef C64SCREEN {
   210                          display_page_disassemble:
   211  bc32 a5fb                   lda ptr1
   212  bc34 a6fc                   ldx ptr1+1
   213  bc36 20e6c1                 jsr disphexword
   214  bc39 a995                   lda #<page_disassemble
   215  bc3b a2bc                   ldx #>page_disassemble
   216  bc3d 4c62c2                 jmp strout
   217                          
   218                          display_page_displaymemory:
   219  bc40 20dcc9                 jsr newline
   220  bc43 a5fb                   lda ptr1
   221  bc45 a6fc                   ldx ptr1+1
   222  bc47 20e6c1                 jsr disphexword
   223  bc4a a99c                   lda #<page_displaymemory
   224  bc4c a2bc                   ldx #>page_displaymemory
   225  bc4e 4c62c2                 jmp strout
   226                          
   227                          inputlinec64:
   228  bc51 a000                   ldy #0
   229  bc53 20cfff             -   jsr charin
   230  bc56 990002                 sta inputbuf,y
   231  bc59 c8                     iny
   232  bc5a c90d                   cmp #13
   233  bc5c d0f5                   bne -
   234  bc5e 60                     rts
   235                          
   236                          continueassemblec64:
   237  bc5f a914                   lda #20
   238  bc61 20d2ff                 jsr charout
   239  bc64 20d2ff                 jsr charout
   240  bc67 a5fb                   lda ptr1
   241  bc69 a6fc                   ldx ptr1+1
   242  bc6b 20e6c1                 jsr disphexword
   243  bc6e a920                   lda #' '
   244  bc70 20d2ff                 jsr charout
   245  bc73 20d2ff                 jsr charout
   246  bc76 4cd2ff                 jmp charout
   247                          }
   248                          
   249                          extra_help:
   250  bc79 5820202020202020...    !text "X           (EXIT MONITOR)", 13
   251  bc94 00                     !text 0
   252                          
   253                          !ifdef C64SCREEN {
   254  bc95 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
   255  bc9c 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
   256                          }
   257                          
   258                          *=$c000 ; switch to section of RAM always accessible for start...
   259                          }
   260                          
   261                          ;; end C64 part
   262                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   263                          
   264                          start:
   265  c000 a966                   lda #<copyright
   266  c002 a2cd                   ldx #>copyright
   267  c004 2062c2                 jsr strout
   268  c007 a9c4                   lda #<firsthelp
   269  c009 a2cd                   ldx #>firsthelp
   270  c00b 2062c2                 jsr strout
   271  c00e 207dc2             -   jsr inputline
   272  c011 2084c2                 jsr parseline
   273  c014 4c0ec0                 jmp -
   274                          
   275                          ; test: ; all the addressing modes here for testing disassembly
   276                          ;     nop
   277                          ;     lda $1234
   278                          ;     lda $1234,x
   279                          ;     lda $1234,y
   280                          ;     asl
   281                          ;     lda #$12
   282                          ;     lda ($12,x)
   283                          ;     lda ($12),y
   284                          ;     jmp ($1234)
   285                          ; -   bne -
   286                          ;     lda $12
   287                          ;     lda $12,x
   288                          ;     ldx $12,y
   289                          ;     !byte $FF ; unknown
   290                          
   291                          disassemble:
   292  c017 a917                   lda #23
   293  c019 85a3                   sta count
   294  c01b a000               -   ldy #0
   295  c01d b1fb                   lda (ptr1),y
   296  c01f 204ac0                 jsr find_opcode
   297  c022 20adc0                 jsr disp_current
   298  c025 a525                   lda size
   299  c027 1002                   bpl +
   300  c029 a901                   lda #1
   301  c02b 18                 +   clc
   302  c02c 65fb                   adc ptr1
   303  c02e 85fb                   sta ptr1
   304  c030 9002                   bcc +
   305  c032 e6fc                   inc ptr1+1
   306  c034 c6a3               +   dec count
   307  c036 d0e3                   bne -
   308                          !ifdef C64SCREEN {
   309  c038 a932                   lda #<display_page_disassemble
   310  c03a a2bc                   ldx #>display_page_disassemble
   311  c03c 20a0cf                 jsr callbank6
   312                          } else {    
   313                              rts
   314                          }
   315                          
   316                          compareptrs:
   317  c03f a5fc                   lda ptr1+1
   318  c041 c5fe                   cmp ptr2+1
   319  c043 d004                   bne +
   320  c045 a5fb                   lda ptr1
   321  c047 c5fd                   cmp ptr2
   322  c049 60                 +   rts
   323                          
   324                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   325                          ; and properties updated in ZP globals size,inidx,opidx,mode
   326  c04a a097                   ldy #nopcodes
   327  c04c a296                   ldx #nopcodes-1
   328  c04e dda1cb             -   cmp opcodes,x
   329  c051 f00f                   beq +
   330  c053 ca                     dex
   331  c054 88                     dey
   332  c055 d0f7                   bne -
   333  c057 18                     clc
   334  c058 a901                   lda #1
   335  c05a 8525                   sta size
   336  c05c a9ff                   lda #$FF
   337  c05e aa                     tax
   338  c05f a8                     tay
   339  c060 900a                   bcc ++
   340  c062 bd38cc             +   lda instidx, x
   341  c065 bccfcc                 ldy modeidx, x
   342  c068 2073c0                 jsr getsize
   343  c06b 38                     sec
   344  c06c 8523               ++  sta inidx
   345  c06e 8622                   stx opidx
   346  c070 8424                   sty mode
   347  c072 60                     rts
   348                          
   349                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   350                              ; result returned in size
   351  c073 48                     pha
   352  c074 a901                   lda #1
   353  c076 8525                   sta size
   354  c078 68                     pla
   355  c079 c002                   cpy #2 // Immediate
   356  c07b 9008                   bcc +
   357  c07d e625                   inc size
   358  c07f c009                   cpy #9 // Absolute
   359  c081 9002                   bcc +
   360  c083 e625                   inc size
   361  c085 60                 +   rts
   362                          
   363                          disp_opcode: ; .A opcode byte
   364  c086 204ac0                 jsr find_opcode
   365  c089 8a                     txa
   366                              ; fall through to display instruction
   367                          
   368                          dispinst: ; .A instruction index 0..55, note modifies A and X
   369  c08a aa                     tax
   370  c08b e038                   cpx #ninst
   371  c08d b012                   bcs +
   372  c08f bde1c9                 lda inst0, x
   373  c092 20d2ff                 jsr charout
   374  c095 bd19ca                 lda inst1, x
   375  c098 20d2ff                 jsr charout
   376  c09b bd51ca                 lda inst2, x
   377  c09e 4cd2ff                 jmp charout
   378  c0a1 a93f               +   lda #'?'
   379  c0a3 20d2ff                 jsr charout
   380  c0a6 20d2ff                 jsr charout
   381  c0a9 20d2ff                 jsr charout
   382  c0ac 60                     rts
   383                          
   384                          disp_current:
   385  c0ad a5fb                   lda ptr1
   386  c0af a6fc                   ldx ptr1+1
   387  c0b1 20e6c1                 jsr disphexword
   388  c0b4 a920                   lda #$20
   389  c0b6 20d2ff                 jsr charout
   390  c0b9 a000                   ldy #0
   391  c0bb a625                   ldx size
   392  c0bd b1fb               -   lda (ptr1),y
   393  c0bf 20ecc1                 jsr disphexbyte
   394  c0c2 a920                   lda #$20
   395  c0c4 20d2ff                 jsr charout
   396  c0c7 c8                     iny
   397  c0c8 ca                     dex
   398  c0c9 d0f2                   bne -
   399  c0cb c003               -   cpy #3
   400  c0cd f00e                   beq +
   401  c0cf a920                   lda #$20
   402  c0d1 20d2ff                 jsr charout
   403  c0d4 20d2ff                 jsr charout
   404  c0d7 20d2ff                 jsr charout
   405  c0da c8                     iny
   406  c0db d0ee                   bne -
   407  c0dd a523               +   lda inidx
   408  c0df 208ac0                 jsr dispinst
   409  c0e2 a920                   lda #$20
   410  c0e4 20d2ff                 jsr charout
   411  c0e7 20efc0                 jsr disp_mode
   412  c0ea a90d                   lda #13
   413  c0ec 4cd2ff                 jmp charout
   414                          
   415                          disp_mode
   416  c0ef a524                   lda mode
   417  c0f1 c90d                   cmp #13
   418  c0f3 b00a                   bcs +
   419  c0f5 0a                     asl
   420  c0f6 aa                     tax
   421  c0f7 bd8aca                 lda mode_jmptable+1,x
   422  c0fa 48                     pha
   423  c0fb bd89ca                 lda mode_jmptable,x
   424  c0fe 48                     pha
   425  c0ff 60                 +   rts
   426                          
   427                          dispModeAcc:
   428  c100 a941                   lda #'A'
   429  c102 4cd2ff                 jmp charout
   430                          
   431                          dispModeNone:
   432  c105 60                     rts
   433                          
   434                          dispModeImm:
   435  c106 a923                   lda #'#'
   436  c108 20d2ff                 jsr charout
   437                          dispModeZP:
   438  c10b a924                   lda #'$'
   439  c10d 20d2ff                 jsr charout
   440  c110 a001                   ldy #1
   441  c112 b1fb                   lda (ptr1),y
   442  c114 4cecc1                 jmp disphexbyte
   443                          
   444                          dispModeIndX:
   445  c117 a928                   lda #'('
   446  c119 20d2ff                 jsr charout
   447  c11c a924                   lda #'$'
   448  c11e 20d2ff                 jsr charout
   449  c121 a001                   ldy #1
   450  c123 b1fb                   lda (ptr1),y
   451  c125 20ecc1                 jsr disphexbyte
   452  c128 a92c                   lda #','
   453  c12a 20d2ff                 jsr charout
   454  c12d a958                   lda #'X'
   455  c12f 20d2ff                 jsr charout
   456  c132 a929                   lda #')'
   457  c134 4cd2ff                 jmp charout
   458                          
   459                          dispModeIndY:
   460  c137 a928                   lda #'('
   461  c139 20d2ff                 jsr charout
   462  c13c a924                   lda #'$'
   463  c13e 20d2ff                 jsr charout
   464  c141 a001                   ldy #1
   465  c143 b1fb                   lda (ptr1),y
   466  c145 20ecc1                 jsr disphexbyte
   467  c148 a929                   lda #')'
   468  c14a 20d2ff                 jsr charout
   469  c14d a92c                   lda #','
   470  c14f 20d2ff                 jsr charout
   471  c152 a959                   lda #'Y'
   472  c154 4cd2ff                 jmp charout
   473                          
   474                          dispModeRel:
   475  c157 a924                   lda #'$'
   476  c159 20d2ff                 jsr charout
   477  c15c 18                     clc
   478  c15d a5fb                   lda ptr1
   479  c15f 6902                   adc #2
   480  c161 8526                   sta ptr3
   481  c163 a5fc                   lda ptr1+1
   482  c165 6900                   adc #0
   483  c167 8527                   sta ptr3+1
   484  c169 a001                   ldy #1
   485  c16b b1fb                   lda (ptr1),y
   486  c16d 1014                   bpl +
   487                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   488  c16f 49ff                   eor #$FF ; inverse
   489  c171 18                     clc
   490  c172 6901                   adc #1 ; complete getting absolute value from two's complement
   491  c174 85ff                   sta tmp
   492  c176 38                     sec
   493  c177 a526                   lda ptr3
   494  c179 e5ff                   sbc tmp
   495  c17b 8526                   sta ptr3
   496  c17d b00d                   bcs ++
   497  c17f c627                   dec ptr3+1
   498  c181 9009                   bcc ++
   499  c183 18                 +   clc ; simple case of adding
   500  c184 6526                   adc ptr3
   501  c186 8526                   sta ptr3
   502  c188 9002                   bcc ++
   503  c18a e627                   inc ptr3+1
   504  c18c a526               ++  lda ptr3
   505  c18e a627                   ldx ptr3+1
   506  c190 4ce6c1                 jmp disphexword
   507                          
   508                          dispModeZPX:
   509  c193 200bc1                 jsr dispModeZP
   510  c196 a92c                   lda #','
   511  c198 20d2ff                 jsr charout
   512  c19b a958                   lda #'X'
   513  c19d 4cd2ff                 jmp charout
   514                          
   515                          dispModeZPY:
   516  c1a0 200bc1                 jsr dispModeZP
   517  c1a3 a92c                   lda #','
   518  c1a5 20d2ff                 jsr charout
   519  c1a8 a959                   lda #'Y'
   520  c1aa 4cd2ff                 jmp charout
   521                          
   522                          dispModeAbs:
   523  c1ad a924                   lda #'$'
   524  c1af 20d2ff                 jsr charout
   525  c1b2 a001                   ldy #1
   526  c1b4 b1fb                   lda (ptr1),y
   527  c1b6 48                     pha
   528  c1b7 c8                     iny
   529  c1b8 b1fb                   lda (ptr1),y
   530  c1ba aa                     tax
   531  c1bb 68                     pla
   532  c1bc 4ce6c1                 jmp disphexword
   533                          
   534                          dispModeAbsX:
   535  c1bf 20adc1                 jsr dispModeAbs
   536  c1c2 a92c                   lda #','
   537  c1c4 20d2ff                 jsr charout
   538  c1c7 a958                   lda #'X'
   539  c1c9 4cd2ff                 jmp charout
   540                          
   541                          dispModeAbsY:
   542  c1cc 20adc1                 jsr dispModeAbs
   543  c1cf a92c                   lda #','
   544  c1d1 20d2ff                 jsr charout
   545  c1d4 a959                   lda #'Y'
   546  c1d6 4cd2ff                 jmp charout
   547                          
   548                          dispModeInd:
   549  c1d9 a928                   lda #'('
   550  c1db 20d2ff                 jsr charout
   551  c1de 20adc1                 jsr dispModeAbs
   552  c1e1 a929                   lda #')'
   553  c1e3 4cd2ff                 jmp charout
   554                          
   555                          disphexword: ; .A low, .X high, 0000..FFFF
   556  c1e6 48                     pha
   557  c1e7 8a                     txa
   558  c1e8 20ecc1                 jsr disphexbyte
   559  c1eb 68                     pla
   560                              ;fall through to call again
   561                          
   562                          disphexbyte: ; .A 00..FF
   563  c1ec 48                     pha
   564  c1ed 4a                     lsr
   565  c1ee 4a                     lsr
   566  c1ef 4a                     lsr
   567  c1f0 4a                     lsr
   568  c1f1 20f5c1                 jsr disphexnybble
   569  c1f4 68                     pla
   570                              ;fall through to call again
   571                          
   572                          disphexnybble: ; .A 0..F
   573  c1f5 290f                   and #$0F
   574  c1f7 0930                   ora #$30
   575  c1f9 c93a                   cmp #$3A
   576  c1fb 9002                   bcc +
   577  c1fd 6906                   adc #$06
   578  c1ff 4cd2ff             +   jmp charout
   579                          
   580                          inputhexword: ; C set if fails
   581  c202 a900                   lda #0
   582  c204 85fb                   sta ptr1
   583  c206 85fc                   sta ptr1+1
   584                          
   585  c208 a904                   lda #4 ; word is at most 4 nybbles
   586  c20a 85a3                   sta count
   587  c20c 2044c2             --  jsr inputhexnybble
   588  c20f b012                   bcs +
   589                          
   590                              ; shift nibble up
   591  c211 0a                     asl
   592  c212 0a                     asl
   593  c213 0a                     asl
   594  c214 0a                     asl
   595                          
   596  c215 a204                   ldx #4 ; 4 bits rotated into word
   597  c217 2a                 -   rol
   598  c218 26fb                   rol ptr1
   599  c21a 26fc                   rol ptr1+1
   600  c21c ca                     dex
   601  c21d d0f8                   bne - ; repeat bits
   602                          
   603  c21f c6a3                   dec count
   604  c221 d0e9                   bne -- ; repeat nybbles
   605                          
   606  c223 a5a3               +   lda count
   607  c225 c904                   cmp #4 ; set C if 4, otherwise clear
   608  c227 60                     rts
   609                          
   610                          inputhexbyte:
   611  c228 2044c2                 jsr inputhexnybble
   612  c22b b016                   bcs ++
   613  c22d 85ff                   sta tmp
   614  c22f 2044c2                 jsr inputhexnybble
   615  c232 9005                   bcc +
   616  c234 18                     clc ; allow single digit as byte
   617  c235 a5ff                   lda tmp
   618  c237 900a                   bcc ++
   619  c239 06ff               +   asl tmp
   620  c23b 06ff                   asl tmp
   621  c23d 06ff                   asl tmp
   622  c23f 06ff                   asl tmp
   623  c241 05ff                   ora tmp ; necessary to assemble the two nybbles
   624  c243 60                 ++  rts
   625                          
   626                          inputhexnybble:
   627  c244 b90002                 lda $0200,y
   628  c247 297f                   and #$7F
   629  c249 38                     sec
   630  c24a e930                   sbc #$30
   631  c24c 9012                   bcc ++
   632  c24e c90a                   cmp #10
   633  c250 900c                   bcc +
   634  c252 e907                   sbc #7
   635  c254 900a                   bcc ++
   636  c256 c90a                   cmp #10
   637  c258 9006                   bcc ++
   638  c25a c910                   cmp #16
   639  c25c b002                   bcs ++
   640  c25e c8                 +   iny
   641  c25f 60                     rts
   642  c260 38                 ++  sec
   643  c261 60                     rts
   644                          
   645                          strout:
   646  c262 8526                   sta ptr3
   647  c264 8627                   stx ptr3+1
   648                          strout2:    
   649  c266 a000                   ldy #0
   650  c268 b126               -   lda (ptr3),y
   651  c26a f006                   beq +
   652  c26c 20d2ff                 jsr charout
   653  c26f c8                     iny
   654  c270 d0f6                   bne -
   655  c272 98                 +   tya
   656  c273 38                     sec
   657  c274 6526                   adc ptr3
   658  c276 8526                   sta ptr3
   659  c278 9002                   bcc +
   660  c27a e627                   inc ptr3+1
   661  c27c 60                 +   rts
   662                          
   663                          inputline:
   664                          !ifdef C64SCREEN {
   665  c27d a951                   lda #<inputlinec64
   666  c27f a2bc                   ldx #>inputlinec64
   667  c281 4ca0cf                 jmp callbank6
   668                          } else {
   669                              ldy #0
   670                          --  sty count
   671                          -   jsr getkey
   672                              beq -
   673                              ldy count
   674                          !ifdef MINIMUM {
   675                              cmp #8 ; backspace
   676                          } else {
   677                              cmp #20
   678                          }
   679                              bne +
   680                              cpy #0
   681                              beq -
   682                              dey
   683                          !if NEEDECHO = 1 {    
   684                              jsr charout
   685                          }
   686                              jmp --
   687                          +   cmp #13
   688                              beq +
   689                              cmp #' '
   690                              bcc -
   691                              cmp #128
   692                              bcs -
   693                          +
   694                          !if NEEDECHO = 1 {    
   695                              jsr charout
   696                          }
   697                              sta inputbuf,y
   698                              iny
   699                              cmp #13
   700                              bne --
   701                              rts
   702                          }
   703                          
   704                          parseline:
   705  c284 c001                   cpy #1
   706  c286 d003                   bne +
   707                          -
   708                          !ifdef C64SCREEN {   
   709  c288 4cdcc9                 jmp newline
   710                          } else {
   711                              rts
   712                          }
   713  c28b 88                 +   dey
   714  c28c 84a4                   sty len
   715                              ; skip whitespace
   716                              ; check for address, put in ptr1
   717                              ; or check for dot, then require address put in ptr2
   718                              ; or check for ?, and optional parameter, execute help
   719                              ; check for whitespace
   720                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   721                              ; check for string, store at start of inputbuf
   722                              ; check for drive number
   723                              ; check for whitespace
   724                              ; check command ":rda?mls", execute command
   725  c28e a000                   ldy #0
   726  c290 201fc9                 jsr skipspaces
   727  c293 c4a4                   cpy len
   728  c295 f0f1                   beq -
   729  c297 20d5c8                 jsr chkcontinuedis
   730  c29a d003                   bne +
   731  c29c 20f9c8                 jsr executedisassemble ; note won't return
   732  c29f 20e7c8             +   jsr chkcontinueasm
   733  c2a2 d003                   bne +
   734  c2a4 2009c5                 jsr continueassemble ; note won't return
   735  c2a7 202ac9             +   jsr chkdot
   736  c2aa d003                   bne +
   737  c2ac 4c98c3                 jmp executedot
   738  c2af 2035c9             +   jsr chkhelp
   739  c2b2 d003                   bne +
   740  c2b4 4ca2c3                 jmp executehelp
   741                          +
   742                          !ifndef MINIMUM {
   743  c2b7 20c9c2                 jsr bank6_chkextrac64 ; check syntax only available on C64
   744  c2ba b01b                   bcs + ; error if C set
   745  c2bc f005                   beq ++ ; consumed if Z set, skip next test(s)
   746                          }    
   747  c2be 207fc9                 jsr chkhexaddr1
   748  c2c1 d003                   bne error
   749  c2c3 4cd0c2             ++  jmp executeaddr1
   750                          error:
   751  c2c6 4c08c9                 jmp reporterr
   752                          
   753                          !ifndef MINIMUM {
   754                          bank6_chkextrac64:
   755  c2c9 a900                   lda #<chkextrac64
   756  c2cb a2bc                   ldx #>chkextrac64
   757  c2cd 4ca0cf                 jmp callbank6
   758                          }
   759                          
   760                          executeaddr1:
   761  c2d0 c4a4                   cpy len
   762  c2d2 d003                   bne +
   763  c2d4 4c23c3                 jmp executedisplay1
   764  c2d7 202ac9             +   jsr chkdot
   765  c2da d00f                   bne +
   766  c2dc c4a4                   cpy len
   767  c2de f021                   beq executepagedisplay
   768  c2e0 209fc9                 jsr chkhexaddr2
   769  c2e3 d0e1                   bne error
   770  c2e5 18                     clc
   771  c2e6 66a7                   ror flag
   772  c2e8 4c19c3                 jmp executeaddr12
   773  c2eb 201fc9             +   jsr skipspaces
   774  c2ee 2040c9                 jsr chkcolon
   775  c2f1 d003                   bne +
   776  c2f3 4c76c3                 jmp executemodify
   777  c2f6 20c0c9             +   jsr chkaddr1cmd ; rda, will not return here if cmd
   778  c2f9 204bc9                 jsr chkfilename
   779  c2fc d0c8                   bne error
   780  c2fe 4c9fc3                 jmp executeloadfilename
   781                          
   782                          executepagedisplay:
   783  c301 a5fb                   lda ptr1
   784  c303 18                     clc
   785                          !ifdef MINIMUM {
   786                              adc #$5f
   787                          } else {
   788  c304 69b7                   adc #$b7
   789                          }
   790  c306 85fd                   sta ptr2
   791  c308 a5fc                   lda ptr1+1
   792                          !ifdef MINIMUM {
   793                              adc #$01
   794                          } else {
   795  c30a 6900                   adc #$00
   796                          }
   797  c30c 85fe                   sta ptr2+1
   798  c30e 9006                   bcc +
   799  c310 a9ff                   lda #$ff
   800  c312 85fd                   sta ptr2
   801  c314 85fe                   sta ptr2+1
   802  c316 38                 +   sec
   803  c317 66a7                   ror flag
   804                              ; fall through to executeaddr12
   805                          
   806                          executeaddr12:
   807  c319 c4a4                   cpy len
   808  c31b d003                   bne +
   809  c31d 4c2bc3                 jmp executedisplay12
   810  c320 4c01c9             +   jmp reportnotimplemented
   811                          
   812                          executedisplay1:
   813  c323 a5fb                   lda ptr1
   814  c325 85fd                   sta ptr2
   815  c327 a5fc                   lda ptr1+1
   816  c329 85fe                   sta ptr2+1
   817                              ; fall through executedisplay12
   818                          
   819                          executedisplay12:
   820  c32b a9ff                   lda #$ff
   821  c32d 85a3                   sta count
   822  c32f e6a3               -   inc count
   823  c331 a5a3                   lda count
   824                          !ifdef MINIMUM {    
   825                              and #$0f
   826                          } else {
   827  c333 2907                   and #$07
   828                          }
   829  c335 d016                   bne +
   830  c337 a90d                   lda #13
   831  c339 20d2ff                 jsr charout
   832  c33c a5fb                   lda ptr1
   833  c33e a6fc                   ldx ptr1+1
   834  c340 20e6c1                 jsr disphexword
   835  c343 a93a                   lda #':'
   836  c345 20d2ff                 jsr charout
   837  c348 a920                   lda #' '
   838  c34a 20d2ff                 jsr charout
   839  c34d a000               +   ldy #0
   840  c34f b1fb                   lda (ptr1),y
   841  c351 20ecc1                 jsr disphexbyte
   842  c354 a920                   lda #' '
   843  c356 20d2ff                 jsr charout
   844  c359 e6fb                   inc ptr1
   845  c35b d004                   bne +
   846  c35d e6fc                   inc ptr1+1
   847  c35f f012                   beq ++
   848  c361 203fc0             +   jsr compareptrs
   849  c364 90c9                   bcc -
   850  c366 f0c7                   beq -
   851  c368 24a7                   bit flag
   852  c36a 1007                   bpl ++
   853                          !ifdef C64SCREEN {
   854  c36c a940                   lda #<display_page_displaymemory
   855  c36e a2bc                   ldx #>display_page_displaymemory
   856  c370 4ca0cf                 jmp callbank6
   857                          }
   858  c373 4cdcc9             ++  jmp newline
   859                          
   860                          executemodify:
   861  c376 201fc9                 jsr skipspaces
   862  c379 c4a4                   cpy len
   863  c37b f018                   beq ++
   864  c37d 2065c9                 jsr chkhexbyteofsequence
   865  c380 f003                   beq +
   866  c382 4cc6c2                 jmp error
   867  c385 84ff               +   sty tmp
   868  c387 a000                   ldy #0
   869  c389 91fb                   sta (ptr1),y
   870  c38b e6fb                   inc ptr1
   871  c38d d002                   bne +
   872  c38f e6fc                   inc ptr1+1
   873  c391 a4ff               +   ldy tmp
   874  c393 d0e1                   bne executemodify
   875  c395 4cdcc9             ++  jmp newline
   876                          
   877                          executedot:
   878  c398 c4a4                   cpy len
   879  c39a d003                   bne +
   880  c39c 4c01c3                 jmp executepagedisplay
   881                          
   882                          executeloadfilename:
   883                          executeaddr1cmd:
   884  c39f 4c01c9             +   jmp reportnotimplemented
   885                          
   886                          executehelp:
   887                          !ifdef C64SCREEN {
   888  c3a2 20dcc9                 jsr newline
   889                          }
   890  c3a5 c4a4                   cpy len
   891  c3a7 d003                   bne +
   892  c3a9 4ccac3                 jmp displayhelp
   893  c3ac 201fc9             +   jsr skipspaces
   894  c3af 20e6c3                 jsr chkhelpinstructions
   895  c3b2 d003                   bne +
   896  c3b4 4c15c4                 jmp displayinstructions
   897  c3b7 20f3c3             +   jsr chkhelpmodes
   898  c3ba d003                   bne +
   899  c3bc 4c2cc4                 jmp displaymodes
   900  c3bf 2047c8             +   jsr chkinstruction
   901  c3c2 d003                   bne +
   902  c3c4 4cdcc4                 jmp executehelpinstruction
   903  c3c7 4c01c9             +   jmp reportnotimplemented
   904                          
   905                          displayhelp:
   906  c3ca a945                   lda #<generalhelp
   907  c3cc a2ce                   ldx #>generalhelp
   908  c3ce 2062c2                 jsr strout
   909  c3d1 a9b4                   lda #<generalhelp2
   910  c3d3 a2ce                   ldx #>generalhelp2
   911  c3d5 2062c2                 jsr strout
   912                          !ifndef MINIMUM {
   913  c3d8 a92b                   lda #<display_extra_help
   914  c3da a2bc                   ldx #>display_extra_help
   915  c3dc 20a0cf                 jsr callbank6
   916                          }
   917  c3df a9c4                   lda #<firsthelp
   918  c3e1 a2cd                   ldx #>firsthelp
   919  c3e3 4c62c2                 jmp strout
   920                          
   921                          chkhelpinstructions:
   922  c3e6 b90002                 lda inputbuf, y
   923  c3e9 c941                   cmp #'A'
   924  c3eb d005                   bne +
   925  c3ed b90102                 lda inputbuf+1, y
   926  c3f0 c90d                   cmp #13
   927                              ; no need to increment y if found, done parsing line
   928  c3f2 60                 +   rts
   929                          
   930                          chkhelpmodes:
   931  c3f3 a99b                   lda #<modes_keyword
   932  c3f5 a2cf                   ldx #>modes_keyword
   933                              ; fall through to chkkeyword
   934                          
   935                          chkkeyword:
   936  c3f7 84a3                   sty count
   937  c3f9 8526                   sta ptr3
   938  c3fb 8627                   stx ptr3+1
   939  c3fd a6a3                   ldx count
   940  c3ff a000                   ldy #0
   941  c401 bd0002             -   lda inputbuf, x
   942  c404 d126                   cmp (ptr3),y
   943  c406 d008                   bne +
   944  c408 e8                     inx
   945  c409 c8                     iny
   946  c40a e4a4                   cpx len
   947  c40c d0f3                   bne -
   948  c40e b126                   lda (ptr3),y ; matched if end of string, will set Z
   949  c410 08                 +   php ; save Z
   950  c411 a4a3                   ldy count
   951  c413 28                     plp ; restore Z
   952  c414 60                     rts
   953                          
   954                          displayinstructions:
   955  c415 a038                   ldy #ninst
   956  c417 a200                   ldx #0
   957  c419 8a                 -   txa
   958  c41a 48                     pha
   959  c41b 208ac0                 jsr dispinst
   960  c41e a920                   lda #' '
   961  c420 20d2ff                 jsr charout
   962  c423 68                     pla
   963  c424 aa                     tax
   964  c425 e8                     inx
   965  c426 88                     dey
   966  c427 d0f0                   bne -
   967  c429 4cdcc9                 jmp newline
   968                          
   969                          displaymodes:
   970  c42c 38                     sec
   971  c42d a900                   lda #0
   972  c42f 48                 -   pha
   973  c430 aa                     tax
   974  c431 bda3ca                 lda mode_sorted, x
   975  c434 2041c4                 jsr dispmode
   976  c437 68                     pla
   977  c438 18                     clc
   978  c439 6901                   adc #1
   979  c43b c90d                   cmp #nmodes
   980  c43d 90f0                   bcc -
   981  c43f 18                     clc
   982  c440 60                     rts
   983                          
   984                          dispmode:
   985  c441 c90d                   cmp #nmodes
   986  c443 b008                   bcs +
   987  c445 8524                   sta mode
   988  c447 2089c4                 jsr disp_modename_and_example
   989  c44a 4c4ec4                 jmp dispmodeinstructions
   990  c44d 60                 +   rts
   991                          
   992                          dispmodeinstructions:
   993                          !ifdef C64SCREEN {
   994                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
   995  c44e a524                   lda mode
   996  c450 c903                   cmp #3
   997  c452 d005                   bne +
   998  c454 a920                   lda #' '
   999  c456 4cd2ff                 jmp charout
  1000                          }
  1001                              ; display instructions with this mode
  1002  c459 a000               +   ldy #0
  1003  c45b 8423               --  sty inidx
  1004  c45d a200                   ldx #0
  1005  c45f 86ff               -   stx tmp
  1006  c461 a523                   lda inidx
  1007  c463 dd38cc                 cmp instidx, x
  1008  c466 d014                   bne ++
  1009  c468 bdcfcc                 lda modeidx, x
  1010  c46b c524                   cmp mode
  1011  c46d d00d                   bne ++
  1012  c46f a920                   lda #' '
  1013  c471 20d2ff                 jsr charout
  1014  c474 bd38cc                 lda instidx, x
  1015  c477 208ac0                 jsr dispinst
  1016  c47a a6ff                   ldx tmp
  1017  c47c e8                 ++  inx
  1018  c47d e097                   cpx #nopcodes
  1019  c47f 90de                   bcc -
  1020  c481 c8                     iny
  1021  c482 c038                   cpy #ninst
  1022  c484 d0d5                   bne --
  1023  c486 4cdcc9                 jmp newline
  1024                          
  1025                          disp_modename_and_example:
  1026  c489 0a                     asl
  1027  c48a aa                     tax
  1028  c48b bd87cb                 lda modes, x
  1029  c48e 48                     pha
  1030  c48f bd88cb                 lda modes+1, x
  1031  c492 aa                     tax
  1032                          !ifdef C64SCREEN {
  1033  c493 a912                   lda #18
  1034  c495 20d2ff                 jsr charout
  1035                          }    
  1036  c498 68                     pla
  1037  c499 2062c2                 jsr strout
  1038  c49c a920                   lda #' '
  1039  c49e 20d2ff                 jsr charout
  1040  c4a1 2066c2                 jsr strout2
  1041                          !ifdef C64SCREEN {    
  1042  c4a4 a992                   lda #146
  1043  c4a6 20d2ff                 jsr charout
  1044                          }   
  1045  c4a9 60                     rts
  1046                          
  1047                          disp_modename_instruction_example:
  1048  c4aa 0a                     asl
  1049  c4ab aa                     tax
  1050  c4ac bd87cb                 lda modes, x
  1051  c4af 48                     pha
  1052  c4b0 bd88cb                 lda modes+1, x
  1053  c4b3 aa                     tax
  1054  c4b4 68                     pla
  1055  c4b5 2062c2                 jsr strout ; mode name
  1056  c4b8 a526                   lda ptr3
  1057  c4ba 48                     pha
  1058  c4bb a527                   lda ptr3+1
  1059  c4bd 48                     pha
  1060  c4be a93a                   lda #':'
  1061  c4c0 20d2ff                 jsr charout
  1062  c4c3 a920                   lda #' '
  1063  c4c5 20d2ff                 jsr charout
  1064  c4c8 a523                   lda inidx
  1065  c4ca 208ac0                 jsr dispinst ; instruction
  1066  c4cd a920                   lda #' '
  1067  c4cf 20d2ff                 jsr charout
  1068  c4d2 68                     pla
  1069  c4d3 8527                   sta ptr3+1
  1070  c4d5 68                     pla
  1071  c4d6 8526                   sta ptr3
  1072  c4d8 2066c2                 jsr strout2 ; example
  1073  c4db 60                     rts
  1074                          
  1075                          
  1076                          executehelpinstruction:
  1077  c4dc a000                   ldy #0
  1078  c4de 8422               -   sty opidx
  1079  c4e0 b938cc                 lda instidx, y
  1080  c4e3 c523                   cmp inidx
  1081  c4e5 d01a                   bne +
  1082  c4e7 b9cfcc                 lda modeidx, y
  1083  c4ea 8524                   sta mode
  1084  c4ec a622                   ldx opidx
  1085  c4ee bda1cb                 lda opcodes, x
  1086  c4f1 20ecc1                 jsr disphexbyte
  1087  c4f4 a920                   lda #' '
  1088  c4f6 20d2ff                 jsr charout
  1089  c4f9 a524                   lda mode
  1090  c4fb 20aac4                 jsr disp_modename_instruction_example
  1091  c4fe 20dcc9                 jsr newline
  1092  c501 a422               +   ldy opidx
  1093  c503 c8                     iny
  1094  c504 c097                   cpy #nopcodes
  1095  c506 90d6                   bcc -
  1096  c508 60                     rts
  1097                          
  1098                          continueassemble:
  1099                          !ifdef C64SCREEN {   
  1100  c509 a95f                   lda #<continueassemblec64
  1101  c50b a2bc                   ldx #>continueassemblec64
  1102  c50d 20a0cf                 jsr callbank6
  1103                          }
  1104                              ; continue...
  1105                          
  1106                          executeassemble:
  1107  c510 68                     pla ; remove low byte return address
  1108  c511 68                     pla ; return high byte return address
  1109                          !ifdef C64SCREEN {    
  1110  c512 a914                   lda #20
  1111  c514 20d2ff                 jsr charout
  1112  c517 20d2ff                 jsr charout
  1113                          } else {
  1114                              lda ptr1
  1115                              ldx ptr1+1
  1116                              jsr disphexword
  1117                              lda #' '
  1118                              jsr charout
  1119                          }
  1120                              ; save current pointer
  1121  c51a a5fb               --  lda ptr1
  1122  c51c a6fc                   ldx ptr1+1
  1123  c51e 8526                   sta ptr3
  1124  c520 8627                   stx ptr3+1
  1125  c522 207dc2                 jsr inputline
  1126  c525 c001                   cpy #1
  1127  c527 f048                   beq ++
  1128  c529 88                     dey
  1129  c52a 84a4                   sty len
  1130  c52c a000                   ldy #0
  1131  c52e 201fc9                 jsr skipspaces
  1132  c531 c4a4                   cpy len
  1133  c533 f03c                   beq ++
  1134                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1135                              ;jsr skipspaces
  1136  c535 2047c8                 jsr chkinstruction
  1137  c538 f00b                   beq +
  1138  c53a a526               -   lda ptr3
  1139  c53c 85fb                   sta ptr1
  1140  c53e a527                   lda ptr3+1
  1141  c540 85fc                   sta ptr1+1
  1142  c542 4cc6c2                 jmp error
  1143  c545 209bc5             +   jsr chkaddressing
  1144  c548 d0f0                   bne -
  1145  c54a 2078c8                 jsr find_inst_and_mode
  1146  c54d d0eb                   bne -
  1147  c54f 2074c5                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1148  c552 18                     clc
  1149  c553 a525                   lda size
  1150  c555 6526                   adc ptr3
  1151  c557 85fb                   sta ptr1
  1152  c559 a527                   lda ptr3+1
  1153  c55b 6900                   adc #0
  1154  c55d 85fc                   sta ptr1+1
  1155                          !ifdef C64SCREEN {    
  1156  c55f 20dcc9                 jsr newline
  1157                          }
  1158  c562 a5fb                   lda ptr1
  1159  c564 a6fc                   ldx ptr1+1
  1160  c566 20e6c1                 jsr disphexword
  1161  c569 a920                   lda #' '
  1162  c56b 20d2ff                 jsr charout
  1163  c56e 4c1ac5                 jmp --
  1164                          ++  
  1165                          !ifdef C64SCREEN {
  1166  c571 4cdcc9                 jmp newline
  1167                          } else {
  1168                              rts
  1169                          }
  1170                          
  1171                          store_assembly:
  1172  c574 a622                   ldx opidx
  1173  c576 bda1cb                 lda opcodes, x
  1174  c579 a000                   ldy #0
  1175  c57b 9126                   sta (ptr3), y
  1176  c57d c8                     iny
  1177  c57e a625                   ldx size
  1178  c580 e001                   cpx #1
  1179  c582 f016                   beq ++
  1180  c584 e002               +   cpx #2
  1181  c586 d005                   bne +
  1182  c588 a5a6                   lda tmp2
  1183  c58a 9126                   sta (ptr3), y
  1184  c58c 60                     rts
  1185  c58d e003               +   cpx #3
  1186  c58f d009                   bne ++
  1187  c591 a5fb                   lda ptr1
  1188  c593 9126                   sta (ptr3), y
  1189  c595 c8                     iny
  1190  c596 a5fc                   lda ptr1+1
  1191  c598 9126                   sta (ptr3), y
  1192  c59a 60                 ++  rts
  1193                          
  1194                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1195  c59b 201fc9                 jsr skipspaces
  1196  c59e a200                   ldx #0
  1197  c5a0 8624                   stx mode
  1198  c5a2 20fdc5                 jsr chkaccumulator
  1199  c5a5 f051                   beq +
  1200  c5a7 e624                   inc mode
  1201  c5a9 c4a4                   cpy len ; chknone
  1202  c5ab f04b                   beq +
  1203  c5ad e624                   inc mode
  1204  c5af 2021c6                 jsr chkimmediate
  1205  c5b2 f044                   beq +
  1206  c5b4 e624                   inc mode
  1207  c5b6 2045c6                 jsr chkindirectx
  1208  c5b9 f03d                   beq +
  1209  c5bb e624                   inc mode
  1210  c5bd 208ac6                 jsr chkindirecty
  1211  c5c0 f036                   beq +
  1212  c5c2 e624                   inc mode
  1213  c5c4 20cfc6                 jsr chkrelative
  1214  c5c7 f02f                   beq +
  1215  c5c9 e624                   inc mode
  1216  c5cb 202ac7                 jsr chkzeropage
  1217  c5ce f028                   beq +
  1218  c5d0 e624                   inc mode
  1219  c5d2 2043c7                 jsr chkzeropagex
  1220  c5d5 f021                   beq +
  1221  c5d7 e624                   inc mode
  1222  c5d9 2072c7                 jsr chkzeropagey
  1223  c5dc f01a                   beq +
  1224  c5de e624                   inc mode
  1225  c5e0 20a1c7                 jsr chkabsolute
  1226  c5e3 f013                   beq +
  1227  c5e5 e624                   inc mode
  1228  c5e7 20bac7                 jsr chkabsolutex
  1229  c5ea f00c                   beq +
  1230  c5ec e624                   inc mode
  1231  c5ee 20e9c7                 jsr chkabsolutey
  1232  c5f1 f005                   beq +
  1233  c5f3 e624                   inc mode
  1234  c5f5 2018c8                 jsr chkindirect
  1235  c5f8 08                 +   php ; save Z
  1236  c5f9 a524                   lda mode
  1237  c5fb 28                     plp ; restore Z 
  1238  c5fc 60                     rts
  1239                          
  1240                          chkaccumulator:
  1241  c5fd c4a4                   cpy len
  1242  c5ff d013                   bne +
  1243  c601 a523                   lda inidx
  1244  c603 c902                   cmp #2 ; ASL
  1245  c605 f019                   beq ++
  1246  c607 c920                   cmp #32 ; LSR
  1247  c609 f015                   beq ++
  1248  c60b c927                   cmp #39 ; ROL
  1249  c60d f011                   beq ++
  1250  c60f c928                   cmp #40 ; ROR
  1251  c611 4c20c6                 jmp ++
  1252  c614 b90002             +   lda inputbuf, y
  1253  c617 c941                   cmp #'A'
  1254  c619 d005                   bne ++
  1255  c61b b90102                 lda inputbuf+1,y
  1256  c61e c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1257  c620 60                 ++  rts
  1258                          
  1259                          chkimmediate:
  1260  c621 84a5                   sty savepos
  1261  c623 b90002                 lda inputbuf, y
  1262  c626 c923                   cmp #'#'
  1263  c628 d016                   bne ++
  1264  c62a c8                     iny
  1265  c62b 201fc9                 jsr skipspaces
  1266  c62e b90002                 lda inputbuf, y
  1267  c631 c924                   cmp #'$'
  1268  c633 d001                   bne +
  1269  c635 c8                     iny
  1270  c636 2088c9             +   jsr chkhexbyte
  1271  c639 d005                   bne ++
  1272  c63b c4a4               +   cpy len
  1273  c63d d001                   bne ++
  1274  c63f 60                     rts
  1275  c640 a4a5               ++  ldy savepos
  1276  c642 a201                   ldx #1 ; Z false (NE)
  1277  c644 60                     rts
  1278                          
  1279                          chkindirectx:
  1280  c645 84a5                   sty savepos
  1281  c647 b90002                 lda inputbuf, y
  1282  c64a c928                   cmp #'('
  1283  c64c d037                   bne ++
  1284  c64e c8                     iny
  1285  c64f 201fc9                 jsr skipspaces
  1286  c652 b90002                 lda inputbuf, y
  1287  c655 c924                   cmp #'$'
  1288  c657 d001                   bne +
  1289  c659 c8                     iny
  1290  c65a 2088c9             +   jsr chkhexbyte
  1291  c65d d026                   bne ++
  1292  c65f 201fc9                 jsr skipspaces
  1293  c662 b90002                 lda inputbuf, y
  1294  c665 c92c                   cmp #','
  1295  c667 d01c                   bne ++
  1296  c669 c8                     iny
  1297  c66a 201fc9                 jsr skipspaces
  1298  c66d b90002                 lda inputbuf, y
  1299  c670 c958                   cmp #'X'
  1300  c672 d011                   bne ++
  1301  c674 c8                     iny
  1302  c675 201fc9                 jsr skipspaces
  1303  c678 b90002                 lda inputbuf, y
  1304  c67b c929                   cmp #')'
  1305  c67d d006                   bne ++
  1306  c67f c8                     iny
  1307  c680 c4a4                   cpy len
  1308  c682 d001                   bne ++
  1309  c684 60                     rts
  1310  c685 a4a5               ++  ldy savepos
  1311  c687 a201                   ldx #1 ; Z false (NE)
  1312  c689 60                     rts
  1313                          
  1314                          chkindirecty:
  1315  c68a 84a5                   sty savepos
  1316  c68c b90002                 lda inputbuf, y
  1317  c68f c928                   cmp #'('
  1318  c691 d037                   bne ++
  1319  c693 c8                     iny
  1320  c694 201fc9                 jsr skipspaces
  1321  c697 b90002                 lda inputbuf, y
  1322  c69a c924                   cmp #'$'
  1323  c69c d001                   bne +
  1324  c69e c8                     iny
  1325  c69f 2088c9             +   jsr chkhexbyte
  1326  c6a2 d026                   bne ++
  1327  c6a4 201fc9                 jsr skipspaces
  1328  c6a7 b90002                 lda inputbuf, y
  1329  c6aa c929                   cmp #')'
  1330  c6ac d01c                   bne ++
  1331  c6ae c8                     iny
  1332  c6af 201fc9                 jsr skipspaces
  1333  c6b2 b90002                 lda inputbuf, y
  1334  c6b5 c92c                   cmp #','
  1335  c6b7 d011                   bne ++
  1336  c6b9 c8                     iny
  1337  c6ba 201fc9                 jsr skipspaces
  1338  c6bd b90002                 lda inputbuf, y
  1339  c6c0 c959                   cmp #'Y'
  1340  c6c2 d006                   bne ++
  1341  c6c4 c8                     iny
  1342  c6c5 c4a4                   cpy len
  1343  c6c7 d001                   bne ++
  1344  c6c9 60                     rts
  1345  c6ca a4a5               ++  ldy savepos
  1346  c6cc a201                   ldx #1 ; Z false (NE)
  1347  c6ce 60                     rts
  1348                          
  1349                          chkrelative:
  1350  c6cf 84a5                   sty savepos
  1351  c6d1 a623                   ldx inidx
  1352  c6d3 e006                   cpx #6 ; BIT
  1353  c6d5 f01e                   beq ++
  1354  c6d7 bde1c9                 lda inst0, x
  1355  c6da c942                   cmp #'B'
  1356  c6dc d017                   bne ++
  1357  c6de b90002                 lda inputbuf, y
  1358  c6e1 c924                   cmp #'$'
  1359  c6e3 d001                   bne +
  1360  c6e5 c8                     iny
  1361  c6e6 207fc9             +   jsr chkhexword
  1362  c6e9 d00a                   bne ++
  1363  c6eb c4a4                   cpy len
  1364  c6ed d006                   bne ++
  1365  c6ef 20fac6                 jsr computeoffset
  1366  c6f2 d001                   bne ++
  1367  c6f4 60                     rts ; Z true (EQ)
  1368  c6f5 a4a5               ++  ldy savepos
  1369  c6f7 a201                   ldx #1 ; Z false (NE)
  1370  c6f9 60                     rts
  1371                          
  1372                          computeoffset:
  1373                          ;   compute next address
  1374  c6fa a527                   lda ptr3+1
  1375  c6fc 85fe                   sta ptr2+1
  1376  c6fe a526                   lda ptr3
  1377  c700 18                     clc
  1378  c701 6902                   adc #2
  1379  c703 85fd                   sta ptr2
  1380  c705 9002                   bcc +
  1381  c707 e6fe                   inc ptr2+1
  1382                          +  ; subtract argument
  1383  c709 38                     sec
  1384  c70a a5fb                   lda ptr1
  1385  c70c e5fd                   sbc ptr2
  1386  c70e 85a6                   sta tmp2
  1387  c710 a5fc                   lda ptr1+1
  1388  c712 e5fe                   sbc ptr2+1
  1389  c714 f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1390  c716 c9ff                   cmp #$FF
  1391  c718 d00d                   bne failedoffset ; 0 and FF were only options so fail
  1392                              ; chkeck negative offset
  1393  c71a a5a6                   lda tmp2
  1394  c71c 3006                   bmi successoffset ; branch if signed byte is negative
  1395  c71e 1007                   bpl failedoffset ; otherwise fail
  1396                          chkoffsetto127:
  1397  c720 a5a6                   lda tmp2
  1398  c722 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1399                          successoffset:    
  1400  c724 a900                   lda #0 ; Z true (EQ)
  1401  c726 60                     rts
  1402                          failedoffset:
  1403  c727 a901                   lda #1 ; Z false (NE)
  1404  c729 60                     rts
  1405                          
  1406                          chkzeropage:
  1407  c72a 84a5                   sty savepos
  1408  c72c b90002                 lda inputbuf, y
  1409  c72f c924                   cmp #'$'
  1410  c731 d001                   bne +
  1411  c733 c8                     iny
  1412  c734 2088c9             +   jsr chkhexbyte
  1413  c737 d005                   bne ++
  1414  c739 c4a4                   cpy len
  1415  c73b d001                   bne ++
  1416  c73d 60                     rts ; Z true (EQ)
  1417  c73e a4a5               ++  ldy savepos
  1418  c740 a201                   ldx #1 ; Z false (NE)
  1419  c742 60                     rts
  1420                          
  1421                          chkzeropagex:
  1422  c743 84a5                   sty savepos
  1423  c745 b90002                 lda inputbuf, y
  1424  c748 c924                   cmp #'$'
  1425  c74a d001                   bne +
  1426  c74c c8                     iny
  1427  c74d 2088c9             +   jsr chkhexbyte
  1428  c750 d01b                   bne ++
  1429  c752 201fc9                 jsr skipspaces
  1430  c755 b90002                 lda inputbuf, y
  1431  c758 c92c                   cmp #','
  1432  c75a d011                   bne ++
  1433  c75c c8                     iny
  1434  c75d 201fc9                 jsr skipspaces
  1435  c760 b90002                 lda inputbuf, y
  1436  c763 c958                   cmp #'X'
  1437  c765 d006                   bne ++
  1438  c767 c8                     iny
  1439  c768 c4a4                   cpy len
  1440  c76a d001                   bne ++
  1441  c76c 60                     rts ; Z true (EQ)
  1442  c76d a4a5               ++  ldy savepos
  1443  c76f a201                   ldx #1 ; Z false (NE)
  1444  c771 60                     rts
  1445                          
  1446                          chkzeropagey:
  1447  c772 84a5                   sty savepos
  1448  c774 b90002                 lda inputbuf, y
  1449  c777 c924                   cmp #'$'
  1450  c779 d001                   bne +
  1451  c77b c8                     iny
  1452  c77c 2088c9             +   jsr chkhexbyte
  1453  c77f d01b                   bne ++
  1454  c781 201fc9                 jsr skipspaces
  1455  c784 b90002                 lda inputbuf, y
  1456  c787 c92c                   cmp #','
  1457  c789 d011                   bne ++
  1458  c78b c8                     iny
  1459  c78c 201fc9                 jsr skipspaces
  1460  c78f b90002                 lda inputbuf, y
  1461  c792 c959                   cmp #'Y'
  1462  c794 d006                   bne ++
  1463  c796 c8                     iny
  1464  c797 c4a4                   cpy len
  1465  c799 d001                   bne ++
  1466  c79b 60                     rts ; Z true (EQ)
  1467  c79c a4a5               ++  ldy savepos
  1468  c79e a201                   ldx #1 ; Z false (NE)
  1469  c7a0 60                     rts
  1470                          
  1471                          chkabsolute:
  1472  c7a1 84a5                   sty savepos
  1473  c7a3 b90002                 lda inputbuf, y
  1474  c7a6 c924                   cmp #'$'
  1475  c7a8 d001                   bne +
  1476  c7aa c8                     iny
  1477  c7ab 207fc9             +   jsr chkhexword
  1478  c7ae d005                   bne ++
  1479  c7b0 c4a4                   cpy len
  1480  c7b2 d001                   bne ++
  1481  c7b4 60                     rts ; Z true (EQ)
  1482  c7b5 a4a5               ++  ldy savepos
  1483  c7b7 a201                   ldx #1 ; Z false (NE)
  1484  c7b9 60                     rts
  1485                          
  1486                          chkabsolutex:
  1487  c7ba 84a5                   sty savepos
  1488  c7bc b90002                 lda inputbuf, y
  1489  c7bf c924                   cmp #'$'
  1490  c7c1 d001                   bne +
  1491  c7c3 c8                     iny
  1492  c7c4 207fc9             +   jsr chkhexword
  1493  c7c7 d01b                   bne ++
  1494  c7c9 201fc9                 jsr skipspaces
  1495  c7cc b90002                 lda inputbuf, y
  1496  c7cf c92c                   cmp #','
  1497  c7d1 d011                   bne ++
  1498  c7d3 c8                     iny
  1499  c7d4 201fc9                 jsr skipspaces
  1500  c7d7 b90002                 lda inputbuf, y
  1501  c7da c958                   cmp #'X'
  1502  c7dc d006                   bne ++
  1503  c7de c8                     iny
  1504  c7df c4a4                   cpy len
  1505  c7e1 d001                   bne ++
  1506  c7e3 60                     rts ; Z true (EQ)
  1507  c7e4 a4a5               ++  ldy savepos
  1508  c7e6 a201                   ldx #1 ; Z false (NE)
  1509  c7e8 60                     rts
  1510                          
  1511                          chkabsolutey:
  1512  c7e9 84a5                   sty savepos
  1513  c7eb b90002                 lda inputbuf, y
  1514  c7ee c924                   cmp #'$'
  1515  c7f0 d001                   bne +
  1516  c7f2 c8                     iny
  1517  c7f3 207fc9             +   jsr chkhexword
  1518  c7f6 d01b                   bne ++
  1519  c7f8 201fc9                 jsr skipspaces
  1520  c7fb b90002                 lda inputbuf, y
  1521  c7fe c92c                   cmp #','
  1522  c800 d011                   bne ++
  1523  c802 c8                     iny
  1524  c803 201fc9                 jsr skipspaces
  1525  c806 b90002                 lda inputbuf, y
  1526  c809 c959                   cmp #'Y'
  1527  c80b d006                   bne ++
  1528  c80d c8                     iny
  1529  c80e c4a4                   cpy len
  1530  c810 d001                   bne ++
  1531  c812 60                     rts ; Z true (EQ)
  1532  c813 a4a5               ++  ldy savepos
  1533  c815 a201                   ldx #1 ; Z false (NE)
  1534  c817 60                     rts
  1535                          
  1536                          chkindirect:
  1537  c818 84a5                   sty savepos
  1538  c81a b90002                 lda inputbuf, y
  1539  c81d c928                   cmp #'('
  1540  c81f d021                   bne ++
  1541  c821 c8                     iny
  1542  c822 201fc9                 jsr skipspaces
  1543  c825 b90002                 lda inputbuf, y
  1544  c828 c924                   cmp #'$'
  1545  c82a d001                   bne +
  1546  c82c c8                     iny
  1547  c82d 207fc9             +   jsr chkhexword
  1548  c830 d010                   bne ++
  1549  c832 201fc9                 jsr skipspaces
  1550  c835 b90002                 lda inputbuf, y
  1551  c838 c929                   cmp #')'
  1552  c83a d006                   bne ++
  1553  c83c c8                     iny
  1554  c83d c4a4                   cpy len
  1555  c83f d001                   bne ++
  1556  c841 60                     rts ; Z true (EQ)
  1557  c842 a4a5               ++  ldy savepos
  1558  c844 a201                   ldx #1 ; Z false (NE)
  1559  c846 60                     rts
  1560                          
  1561                          chkinstruction:
  1562  c847 c4a4                   cpy len
  1563  c849 f02a                   beq ++
  1564  c84b 84ff                   sty tmp
  1565  c84d a237                   ldx #(ninst-1)
  1566  c84f b90002             -   lda inputbuf,y
  1567  c852 dde1c9                 cmp inst0,x
  1568  c855 d019                   bne +
  1569  c857 c8                     iny
  1570  c858 b90002                 lda inputbuf,y
  1571  c85b dd19ca                 cmp inst1,x
  1572  c85e d010                   bne +
  1573  c860 c8                     iny
  1574  c861 b90002                 lda inputbuf,y
  1575  c864 dd51ca                 cmp inst2,x
  1576  c867 d007                   bne +
  1577  c869 c8                     iny
  1578  c86a 8a                     txa
  1579  c86b 8523                   sta inidx
  1580  c86d a200                   ldx #0
  1581  c86f 60                     rts
  1582  c870 a4ff               +   ldy tmp
  1583  c872 ca                     dex
  1584  c873 10da                   bpl -
  1585  c875 a201               ++  ldx #1 ; Z false (NE)
  1586  c877 60                     rts
  1587                          
  1588                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1589                              ; and allows mode promotion
  1590  c878 209cc8                 jsr find_inst_and_mode2
  1591  c87b f01e                   beq ++
  1592  c87d a524                   lda mode
  1593  c87f c906                   cmp #6
  1594  c881 9018                   bcc ++
  1595  c883 c90a                   cmp #10
  1596  c885 b012                   bcs +
  1597  c887 6903                   adc #3
  1598  c889 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1599  c88b 209cc8                 jsr find_inst_and_mode2 ; try again once
  1600  c88e d00b                   bne ++
  1601  c890 a5a6                   lda tmp2
  1602  c892 85fb                   sta ptr1
  1603  c894 a900                   lda #0
  1604  c896 85fc                   sta ptr1+1
  1605  c898 60                     rts ; Z true (EQ)
  1606  c899 a201               +   ldx #1 ; Z false (NE)
  1607  c89b 60                 ++  rts
  1608                          
  1609                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1610  c89c a296                   ldx #nopcodes-1
  1611  c89e bd38cc             -   lda instidx, x
  1612  c8a1 bccfcc                 ldy modeidx, x
  1613  c8a4 c523                   cmp inidx
  1614  c8a6 d00c                   bne +
  1615  c8a8 c424                   cpy mode
  1616  c8aa d008                   bne +
  1617  c8ac 8622                   stx opidx
  1618  c8ae 2073c0                 jsr getsize
  1619  c8b1 a200                   ldx #0 ; Z true (EQ)
  1620  c8b3 60                     rts
  1621  c8b4 ca                 +   dex
  1622  c8b5 e0ff                   cpx #$ff
  1623  c8b7 d0e5                   bne -
  1624  c8b9 a201                   ldx #1 ; Z false (NE)
  1625  c8bb 60                     rts
  1626                          
  1627                          executerun:
  1628  c8bc 68                     pla ; remove low byte return address
  1629  c8bd 68                     pla ; return high byte return address
  1630  c8be 68                     pla ; again, we're really not returning
  1631  c8bf 68                     pla ; again, we're really not returning
  1632  c8c0 20dcc9                 jsr newline
  1633  c8c3 38                     sec
  1634  c8c4 a5fb                   lda ptr1
  1635  c8c6 e901                   sbc #1
  1636  c8c8 85fb                   sta ptr1
  1637  c8ca b002                   bcs +
  1638  c8cc c6fc                   dec ptr1+1
  1639  c8ce a5fc               +   lda ptr1+1
  1640  c8d0 48                     pha
  1641  c8d1 a5fb                   lda ptr1
  1642  c8d3 48                     pha
  1643  c8d4 60                     rts
  1644                          
  1645                          chkcontinuedis:
  1646  c8d5 b90002                 lda inputbuf,y
  1647  c8d8 c944                   cmp #'D'
  1648  c8da d00a                   bne +
  1649  c8dc b90102                 lda inputbuf+1,y
  1650  c8df c90d                   cmp #13
  1651  c8e1 d003                   bne +
  1652  c8e3 c8                     iny
  1653  c8e4 a200                   ldx #0 ; restore Z set
  1654  c8e6 60                 +   rts
  1655                          
  1656                          chkcontinueasm:
  1657  c8e7 b90002                 lda inputbuf,y
  1658  c8ea c941                   cmp #'A'
  1659  c8ec d00a                   bne +
  1660  c8ee b90102                 lda inputbuf+1,y
  1661  c8f1 c90d                   cmp #13
  1662  c8f3 d003                   bne +
  1663  c8f5 c8                     iny
  1664  c8f6 a200                   ldx #0 ; restore Z set
  1665  c8f8 60                 +   rts
  1666                          
  1667                          executedisassemble:
  1668  c8f9 68                     pla ; remove low byte return address
  1669  c8fa 68                     pla ; return high byte return address
  1670  c8fb 20dcc9                 jsr newline
  1671  c8fe 4c17c0                 jmp disassemble
  1672                          
  1673                          reportnotimplemented:
  1674  c901 a934                   lda #<notimplemented
  1675  c903 a2ce                   ldx #>notimplemented
  1676  c905 4c62c2                 jmp strout
  1677                          
  1678                          reporterr:
  1679  c908 c000                   cpy #0
  1680  c90a f008                   beq +
  1681  c90c a920                   lda #' '
  1682  c90e 20d2ff             -   jsr charout
  1683  c911 88                     dey
  1684  c912 d0fa                   bne -
  1685  c914 a93f               +   lda #'?'
  1686  c916 20d2ff                 jsr charout
  1687  c919 a90d                   lda #13
  1688  c91b 20d2ff                 jsr charout
  1689  c91e 60                     rts
  1690                          
  1691                          skipspaces:
  1692  c91f b90002             -   lda inputbuf, y
  1693  c922 c920                   cmp #$20
  1694  c924 d003                   bne +
  1695  c926 c8                     iny
  1696  c927 d0f6                   bne -
  1697  c929 60                 +   rts
  1698                          
  1699                          chkdot:
  1700  c92a b90002                 lda inputbuf, y
  1701  c92d c92e                   cmp #'.'
  1702  c92f d003                   bne +
  1703  c931 c8                     iny
  1704  c932 a900                   lda #0 ; Z true (EQ)
  1705  c934 60                 +   rts
  1706                          
  1707                          chkhelp:
  1708  c935 b90002                 lda inputbuf, y
  1709  c938 c93f                   cmp #'?'
  1710  c93a d003                   bne +
  1711  c93c c8                     iny
  1712  c93d a900                   lda #0 ; Z true (EQ)
  1713  c93f 60                 +   rts
  1714                          
  1715                          chkcolon:
  1716  c940 b90002                 lda inputbuf, y
  1717  c943 c93a                   cmp #':'
  1718  c945 d003                   bne +
  1719  c947 c8                     iny
  1720  c948 a900                   lda #0 ; Z true (EQ)
  1721  c94a 60                 +   rts
  1722                          
  1723                          chkfilename:
  1724  c94b 84ff                   sty tmp
  1725  c94d b90002                 lda inputbuf, y
  1726  c950 c922                   cmp #34
  1727  c952 d010                   bne ++
  1728  c954 c8                 -   iny
  1729  c955 b90002                 lda inputbuf, y
  1730  c958 c90d                   cmp #13
  1731  c95a d004                   bne +
  1732  c95c a4ff                   ldy tmp
  1733  c95e d004                   bne ++
  1734  c960 c922               +   cmp #34
  1735  c962 d0f0                   bne -
  1736  c964 60                 ++  rts
  1737                          
  1738                          chkhexbyteofsequence:
  1739  c965 2028c2                 jsr inputhexbyte
  1740  c968 2082c9                 jsr +
  1741  c96b d011                   bne ++ ; Z false (NE) if failed checks
  1742  c96d c4a4                   cpy len
  1743  c96f f00d                   beq ++ ; Z true (EQ) if end of input
  1744  c971 85ff                   sta tmp
  1745  c973 b90002                 lda inputbuf,y
  1746  c976 c920                   cmp #$20
  1747  c978 d004                   bne ++ ; Z false (NE) if not space
  1748  c97a a5ff                   lda tmp
  1749  c97c a200                   ldx #0 ; Z true (EQ) is space delimeter
  1750  c97e 60                 ++  rts
  1751                          
  1752                          chkhexword:
  1753                          chkhexaddr1:
  1754  c97f 2002c2                 jsr inputhexword
  1755  c982 a200               +   ldx #0 ; Z true (EQ)
  1756  c984 9001                   bcc +
  1757  c986 e8                     inx ; Z false (NE)
  1758  c987 60                 +   rts
  1759                          
  1760                          chkhexbyte:
  1761  c988 98                     tya
  1762  c989 48                     pha ; save y
  1763  c98a 2028c2                 jsr inputhexbyte
  1764  c98d b00d                   bcs +
  1765  c98f 85a6                   sta tmp2
  1766  c991 2044c2                 jsr inputhexnybble
  1767  c994 9006                   bcc +
  1768  c996 68                     pla ; throw away saved y
  1769  c997 a5a6                   lda tmp2
  1770  c999 a200                   ldx #0 ; Z true (EQ)
  1771  c99b 60                     rts
  1772  c99c 68                 +   pla
  1773  c99d a8                     tay ; won't be zero, so Z false (NE)
  1774  c99e 60                     rts    
  1775                          
  1776                          chkhexaddr2:
  1777  c99f a5fb                   lda ptr1
  1778  c9a1 48                     pha
  1779  c9a2 a5fc                   lda ptr1+1
  1780  c9a4 48                     pha
  1781  c9a5 207fc9                 jsr chkhexaddr1
  1782  c9a8 f005                   beq +
  1783  c9aa 68                     pla
  1784  c9ab 68                     pla
  1785  c9ac a901                   lda #1 ; Z false (NE)
  1786  c9ae 60                     rts
  1787  c9af a5fb               +   lda ptr1
  1788  c9b1 85fd                   sta ptr2
  1789  c9b3 a5fc                   lda ptr1+1
  1790  c9b5 85fe                   sta ptr2+1
  1791  c9b7 68                     pla
  1792  c9b8 85fc                   sta ptr1+1
  1793  c9ba 68                     pla
  1794  c9bb 85fb                   sta ptr1
  1795  c9bd a900                   lda #0 ; Z true (EQ)
  1796  c9bf 60                     rts    
  1797                          
  1798                          chkaddr1cmd:
  1799  c9c0 b90002                 lda inputbuf, y
  1800  c9c3 c941               +   cmp #'A'
  1801  c9c5 d004                   bne +
  1802  c9c7 c8                     iny
  1803  c9c8 4c10c5                 jmp executeassemble
  1804  c9cb c944               +   cmp #'D'
  1805  c9cd d004                   bne +
  1806  c9cf c8                     iny
  1807  c9d0 4cf9c8                 jmp executedisassemble
  1808  c9d3 c952               +   cmp #'R'
  1809  c9d5 d004                   bne +
  1810  c9d7 c8                     iny
  1811  c9d8 4cbcc8                 jmp executerun
  1812  c9db 60                 +   rts
  1813                          
  1814                          newline:
  1815  c9dc a90d                   lda #13
  1816  c9de 4cd2ff                 jmp charout
  1817                          
  1818                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1819                          ;     jsr $ffd2
  1820                          ;     pha
  1821                          ; -   lda $d011
  1822                          ;     bpl -
  1823                          ; -   lda $d011
  1824                          ;     bmi -
  1825                          ; -   lda $d011
  1826                          ;     bpl -
  1827                          ; -   lda $d011
  1828                          ;     bmi -
  1829                          ;     pla
  1830                          ;     rts
  1831                          
  1832                          !ifdef MINIMUM {
  1833                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1834                          ;; MC6850
  1835                          UART_DATA=$FFF8
  1836                          UART_STCR=$FFF9
  1837                          
  1838                          UART_INIT:
  1839                          	ldx #0b00000111 ; 11=reset device
  1840                          	stx UART_STCR
  1841                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  1842                          	sta UART_STCR
  1843                          	rts
  1844                          UART_OUT:
  1845                          	pha
  1846                          -	lda UART_STCR
  1847                          	and #2
  1848                          	beq - ; branch if TDRE=0, not finished transmitting
  1849                          	pla
  1850                          	pha
  1851                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  1852                          	sta UART_DATA
  1853                          	pla
  1854                          	rts
  1855                          UART_IN:
  1856                          -	lda UART_STCR
  1857                          	and #1
  1858                          	beq - ; branch if TDRF=0, not received
  1859                          	lda UART_DATA
  1860                          	; software "CAPS LOCK" because wozmon expects only uppercase
  1861                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  1862                          	beq BREAK
  1863                              ; force lowercase alphabet to uppercase
  1864                              cmp #'a'
  1865                          	bcc +
  1866                          	cmp #'z'+1
  1867                          	bcs +
  1868                          	eor #$20
  1869                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  1870                           	rts
  1871                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  1872                          	pha ; save A
  1873                          	lda UART_STCR
  1874                          	lsr ; put rightmost bit in carry
  1875                          	pla ; restore A affects flags
  1876                          	ror ; move carry to left bit, right bit to carry
  1877                          	php ; push processor to save N
  1878                          	rol ; restore A affects flags
  1879                          	plp ; pull processor to restore N
  1880                          	rts
  1881                          
  1882                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1883                          ; Processor start and interrupts
  1884                          
  1885                          NMI: ; unused on minimum (no source of interrupt)
  1886                              rti
  1887                          
  1888                          IRQ:
  1889                              rti ; TODO implement BRK HANDLING in monitor
  1890                          
  1891                          BREAK:
  1892                              jmp RESET
  1893                          
  1894                          RESET:
  1895                              cld
  1896                              ldx #$00
  1897                              txs
  1898                              jsr JUART_INIT
  1899                              cli
  1900                              jmp start
  1901                          } ; !ifdef MINIMUM
  1902                          
  1903                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1904                          ; data
  1905                          
  1906                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  1907                          ninst = 56
  1908  c9e1 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  1909  ca19 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  1910  ca51 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  1911                          
  1912                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  1913                          mode_jmptable:
  1914  ca89 ffc0               !word dispModeAcc-1; 0 Accumulator 1
  1915  ca8b 04c1               !word dispModeNone-1 ; 1 None 1
  1916  ca8d 05c1               !word dispModeImm-1 ; 2 Immediate 2
  1917  ca8f 16c1               !word dispModeIndX-1 ; 3 IndirectX 2
  1918  ca91 36c1               !word dispModeIndY-1 ; 4 IndirectY 2
  1919  ca93 56c1               !word dispModeRel-1 ; 5 Relative 2
  1920  ca95 0ac1               !word dispModeZP-1 ; 6 ZeroPage 2
  1921  ca97 92c1               !word dispModeZPX-1 ; 7 ZeroPageX 2
  1922  ca99 9fc1               !word dispModeZPY-1 ; 8 ZeroPageY 2
  1923  ca9b acc1               !word dispModeAbs-1 ; 9 Absolute 3
  1924  ca9d bec1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  1925  ca9f cbc1               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  1926  caa1 d8c1               !word dispModeInd-1 ; 12 Indirect 3
  1927                          
  1928                          nmodes = 13
  1929                          
  1930                          mode_sorted:
  1931  caa3 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  1932                          
  1933                          !ifdef MINIMUM {
  1934                          mode_0: !text "Accumulator", 0, "A", 0
  1935                          mode_1: !text "None", 0, "", 0
  1936                          mode_2: !text "Immediate", 0, "#$12", 0
  1937                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  1938                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  1939                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  1940                          mode_6: !text "ZeroPage", 0, "$12", 0
  1941                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  1942                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  1943                          mode_9: !text "Absolute", 0, "$1234", 0
  1944                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  1945                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  1946                          mode_12: !text "Indirect", 0, "($1234)", 0
  1947                          } else {
  1948  cab0 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  1949  cabe 4e4f4e450000       mode_1: !text "NONE", 0, "", 0
  1950  cac4 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  1951  cad3 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  1952  cae5 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  1953  caf7 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  1954  cb16 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  1955  cb23 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  1956  cb33 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  1957  cb43 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  1958  cb52 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  1959  cb64 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  1960  cb76 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  1961                          }
  1962                          
  1963                          modes: ; table for easily displaying each mode_example
  1964  cb87 b0ca               !word mode_0
  1965  cb89 beca               !word mode_1
  1966  cb8b c4ca               !word mode_2
  1967  cb8d d3ca               !word mode_3
  1968  cb8f e5ca               !word mode_4
  1969  cb91 f7ca               !word mode_5
  1970  cb93 16cb               !word mode_6
  1971  cb95 23cb               !word mode_7
  1972  cb97 33cb               !word mode_8
  1973  cb99 43cb               !word mode_9
  1974  cb9b 52cb               !word mode_10
  1975  cb9d 64cb               !word mode_11
  1976  cb9f 76cb               !word mode_12
  1977                          
  1978                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  1979                          nopcodes = 151
  1980  cba1 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  1981  cc38 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  1982  cccf 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  1983                          
  1984                          copyright 
  1985                          ;                  1         2         3         4
  1986                          ;         1234567890123456789012345678901234567890
  1987  cd66 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  1988                          !ifdef C64TERMINAL {
  1989                              !text 13, "(TERMINAL VERSION)"
  1990                          }
  1991  cd86 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  1992  cdac 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  1993  cdc3 00                 !text 0
  1994                          
  1995                          firsthelp
  1996  cdc4 0d3f202020202020...!text 13, "?       (SYNTAX)"
  1997  cdd5 0d3f204120202020...!text 13, "? A     (LIST 6502 INSTRUCTIONS)"
  1998  cdf6 0d3f204144432020...!text 13, "? ADC   (/ADC/ ADDRESSING MODES)"
  1999  ce17 0d3f204d4f444520...!text 13, "? MODE  (ADDRESSING MODES)"
  2000                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2001  ce32 0d00               !text 13, 0
  2002                          
  2003  ce34 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2004                          
  2005                          generalhelp
  2006  ce45 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2007  ce6b 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2008  ce90 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2009  ceb3 00                 !text 0
  2010                          generalhelp2
  2011  ceb4 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2012  cedc 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2013  cef8 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2014  cf18 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2015  cf3a 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2016  cf5f 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2017  cf7b 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2018  cf9a 00                 !text 0
  2019                          
  2020  cf9b 4d4f444500         modes_keyword !text "MODE", 0
  2021                          
  2022                          !ifndef MINIMUM { ; any C64
  2023                          callbank6:
  2024  cfa0 8daccf                 sta calladdr+1
  2025  cfa3 8eadcf                 stx calladdr+2
  2026  cfa6 a906                   lda #6 ; RAM under BASIC, otherwise similar to normal memory configuration
  2027  cfa8 20b2cf                 jsr setbank
  2028  cfab 200000             calladdr: jsr $0000
  2029  cfae 08                     php ; save return status
  2030  cfaf a907                   lda #7 ; normal memory configuration
  2031  cfb1 28                     plp ; restore return status
  2032                              ; fall through setbank
  2033                          setbank:
  2034  cfb2 08                     php ; save possible return status
  2035  cfb3 8502                   sta banksel
  2036  cfb5 a501                   lda $01
  2037  cfb7 29f8                   and #$f8 ; mask out bits 0,1,2
  2038  cfb9 0502                   ora banksel
  2039  cfbb 8501                   sta $01
  2040  cfbd 28                     plp ; restore possible return status
  2041  cfbe 60                     rts
  2042                          
  2043                              !if * > $d000 {
  2044                                  !error "code/data overran $d000"
  2045                              }
  2046                          
  2047                          }
  2048                          
  2049                          !ifdef MINIMUM {
  2050                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2051                          ; JUMP table for some stability
  2052                          * = $FFEE
  2053                          JUART_INIT: JMP UART_INIT
  2054                          JUART_OUT: JMP UART_OUT
  2055                          JUART_IN: JMP UART_IN
  2056                          JUART_CHK: JMP UART_CHK
  2057                          
  2058                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2059                          ; 6502 vectors 
  2060                          * = $fffa
  2061                              !word NMI
  2062                              !word RESET
  2063                              !word IRQ
  2064                          }
  2065                          
  2066                          finish = *
