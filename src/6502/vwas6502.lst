
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<<
     5                          ;; >>>       ****************************************************        <<<
     6                          ;; >>>       **           TARGETS:                              *        <<<
     7                          ;; >>>       ** (1)  C64 8000-9FFF screen editor                *        <<<
     8                          ;; >>>       ** (2)  C64 8000-9FFF terminal edition             *        <<<
     9                          ;; >>>       ** (3)  6502+MC6850 E000-FFFF minimum system       *        <<<
    10                          ;; >>>       *   56K(RAM),8K(ROM), 2 bytes IO for MC6850 UART   *        <<<
    11                          ;; >>>       ****************************************************        <<<
    12                          ;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          ;; MIT License
    15                          ;;
    16                          ;; Copyright (c) 2024 David R. Van Wagner
    17                          ;; davevw.com
    18                          ;;
    19                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    20                          ;; of this software and associated documentation files (the "Software"), to deal
    21                          ;; in the Software without restriction, including without limitation the rights
    22                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    23                          ;; copies of the Software, and to permit persons to whom the Software is
    24                          ;; furnished to do so, subject to the following conditions:
    25                          ;;
    26                          ;; The above copyright notice and this permission notice shall be included in all
    27                          ;; copies or substantial portions of the Software.
    28                          ;;
    29                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    30                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    31                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    32                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    33                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    34                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    35                          ;; SOFTWARE.
    36                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                          
    40                          ; Important! define exactly ONE target (set in build.sh)
    41                          ;C64SCREEN = 1
    42                          ;C64TERMINAL = 1
    43                          ;MINIMUM = 1
    44                          
    45                          ; options (set in build.sh)
    46                          ;NEEDECHO = 0
    47                          
    48                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                          
    50                          ;; _
    51                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    52                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    53                          ;; 1000 (display memory at $1000)
    54                          ;; 1000.2000 (display memory range $1000 to $2000)
    55                          ;; 1000. (display next screenful of memory starting at $1000)
    56                          ;; . (display next screenful of memory)
    57                          ;; 1000 r (JMP $1000)
    58                          ;; 1000: 01 02 03 (modify memory)
    59                          ;; (NEW SYNTAX)
    60                          ;; 1000 d (disassemble starting at address, for screenful)
    61                          ;; d (continue disassembling from last address)
    62                          ;; 1000 a (assemble starting at, interactive until empty line)
    63                          ;; x (exit monitor -- C64 only)
    64                          ;; ? (commands help)
    65                          ;; ?a (list instructions available)
    66                          ;; ?adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    67                          ;; ?mode (show addressing modes example syntax for 6502)
    68                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    69                          ;; .? (display registers in format .1234 10110000 01 02 03 f6)
    70                          ;; .1234 10110000 01 02 03 f6 (set registers PC FLAGS A X Y S)
    71                          ;; .A:00 (change register, replace A with X, Y, S, P as appropriate, use space or colon as separator)
    72                          ;; (FUTURE SYNTAX, not implemented)
    73                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    74                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    75                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    76                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    77                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    78                          ;;
    79                          ;; (INTERACTIVE ASSEMBLER)
    80                          ;; 1000 _
    81                          ;;      ADC #$12
    82                          ;; 1000 69 12    ADC #$12
    83                          ;; 1002 _
    84                          ;;      JSR $1234
    85                          ;; 1002 20 34 12 JSR $1234
    86                          ;; 1005 _
    87                          ;;      RTS
    88                          ;; 1005 60       RTS
    89                          ;; 1006 _
    90                          ;;      XYZ
    91                          ;;      XYZ ?
    92                          ;; 1006 _
    93                          ;; _
    94                          ;;
    95                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    96                          ;; and can cursor up to revise,
    97                          ;;
    98                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    99                          ;;
   100                          
   101                          ; global
   102                          inputbuf=$0200
   103                          
   104                          
   105                          ; kernal/system calls
   106                          
   107                          !ifdef MINIMUM {
   108                          charout=JUART_OUT
   109                          getkey=JUART_IN
   110                          }
   111                          
   112                          !ifdef C64SCREEN {
   113                          setlfs=$ffba
   114                          setnam=$ffbd
   115                          charin=$ffcf ; screen editor
   116                          charout=$ffd2
   117                          fsave =$ffd8
   118                          getkey=$ffe4
   119                          }
   120                          
   121                          !ifdef C64TERMINAL {
   122                          setlfs=$ffba
   123                          setnam=$ffbd
   124                          charout=$ffd2
   125                          getkey=$ffe4
   126                          fsave =$ffd8
   127                          }
   128                          
   129                          ; zeropage
   130                          !ifdef MINIMUM {
   131                          ptr1=$fc ; and $fd
   132                          ptr3=$fe ; and $ff
   133                          }
   134                          
   135                          !ifdef MINIMUM {
   136                          * = $e000
   137                          first:
   138                              jmp start
   139                          } else { // any C64
   140                          * = $8000
   141                          first:
   142  8000 4c2080                 jmp init64
   143                          }
   144                          
   145                          test: ; all the addressing modes here for testing disassembly
   146  8003 ea                     nop
   147  8004 ad3412                 lda $1234
   148  8007 bd3412                 lda $1234,x
   149  800a b93412                 lda $1234,y
   150  800d 0a                     asl
   151  800e a912                   lda #$12
   152  8010 a112                   lda ($12,x)
   153  8012 b112                   lda ($12),y
   154  8014 6c3412                 jmp ($1234)
   155  8017 d0fe               -   bne -
   156  8019 a512                   lda $12
   157  801b b512                   lda $12,x
   158  801d b612                   ldx $12,y
   159  801f ff                     !byte $FF ; unknown
   160                          
   161                          !ifndef MINIMUM {
   162                              ; any C64
   163                          init64:    
   164                              ; check if irq/brk vector installed
   165  8020 ad1603                 lda $316
   166  8023 ae1703                 ldx $317
   167  8026 e08e                   cpx #>brk64
   168  8028 f010                   beq +
   169  802a 8d1495                 sta savebrkvector
   170  802d 8e1595                 stx savebrkvector+1
   171  8030 a93a                   lda #<brk64
   172  8032 a28e                   ldx #>brk64
   173  8034 8d1603                 sta $316
   174  8037 8e1703                 stx $317
   175  803a 206980             +   jsr install_nmi64
   176                              ; check if BASIC RAM limited to exclude monitor
   177  803d a538                   lda 56
   178  803f c980                   cmp #>first
   179  8041 f00a                   beq +
   180  8043 9008                   bcc +
   181  8045 a980                   lda #>first
   182  8047 8538                   sta 56
   183  8049 a900                   lda #0
   184  804b 8537                   sta 55
   185                          +   ; fall through to start
   186                          }
   187                          
   188                          start:
   189  804d d8                     cld
   190  804e 58                     cli
   191  804f a9e8                   lda #<copyright
   192  8051 a291                   ldx #>copyright
   193  8053 205284                 jsr strout
   194  8056 a946                   lda #<firsthelp
   195  8058 a292                   ldx #>firsthelp
   196  805a 205284                 jsr strout
   197  805d 4c8e8d                 jmp save_registers
   198                          
   199                          input_loop:
   200  8060 207384                 jsr inputline
   201  8063 207684                 jsr parseline
   202  8066 4c6080                 jmp input_loop
   203                          
   204                          !ifndef MINIMUM {
   205                          ; C64 only
   206                          
   207                          install_nmi64:
   208                              ; check if nmi vector installed
   209  8069 ad1803                 lda $318
   210  806c ae1903                 ldx $319
   211  806f e08e                   cpx #>nmi64
   212  8071 f010                   beq +
   213  8073 8d1695                 sta savenmivector
   214  8076 8e1795                 stx savenmivector+1
   215  8079 a91b                   lda #<nmi64
   216  807b a28e                   ldx #>nmi64
   217  807d 8d1803                 sta $318
   218  8080 8e1903                 stx $319
   219  8083 60                 +   rts
   220                          
   221                          uninstall_nmi64:
   222  8084 ad1695                 lda savenmivector
   223  8087 ae1795                 ldx savenmivector+1
   224  808a 8d1803                 sta $318
   225  808d 8e1903                 stx $319
   226  8090 60                     rts
   227                          
   228                          chkextrac64:
   229  8091 209d80                 jsr chkexit
   230  8094 d003                   bne +
   231  8096 4cb280                 jmp execute_exit
   232  8099 18                 +   clc ; no error
   233  809a a201                   ldx #1 ; Z false - not consumed
   234  809c 60                     rts
   235                          
   236                          chkexit:
   237  809d b90002                 lda inputbuf, y
   238  80a0 c958                   cmp #'X'
   239  80a2 d009                   bne +
   240  80a4 c8                     iny
   241  80a5 cc0d95                 cpy len ; validate no extra characters
   242  80a8 f003                   beq +
   243  80aa 4cae80                 jmp extra_error
   244  80ad 60                 +   rts
   245                          
   246                          extra_error:
   247                              ; pop local return address
   248  80ae 68                     pla
   249  80af 68                     pla
   250  80b0 38                     sec ; error
   251  80b1 60                     rts
   252                          
   253                          execute_exit:
   254  80b2 ad1495                 lda savebrkvector
   255  80b5 ae1595                 ldx savebrkvector+1
   256  80b8 8d1603                 sta $316
   257  80bb 8e1703                 stx $317
   258  80be 208480                 jsr uninstall_nmi64
   259                              ; pop monitor return addresses, so only original caller is left
   260  80c1 68                     pla
   261  80c2 68                     pla
   262  80c3 68                     pla
   263  80c4 68                     pla
   264  80c5 68                     pla
   265  80c6 68                     pla
   266  80c7 60                     rts
   267                          
   268                          display_extra_help:
   269  80c8 a959                   lda #<extra_help
   270  80ca a292                   ldx #>extra_help
   271  80cc 4c5284                 jmp strout
   272                          
   273                          !ifdef C64SCREEN {
   274                          display_page_disassemble:
   275  80cf ad048e                 lda ptr1
   276  80d2 ae058e                 ldx ptr1+1
   277  80d5 20c883                 jsr disphexword
   278  80d8 a997                   lda #<page_disassemble
   279  80da a292                   ldx #>page_disassemble
   280  80dc 4c5284                 jmp strout
   281                          
   282                          display_page_displaymemory:
   283  80df 20848d                 jsr newline
   284  80e2 ad048e                 lda ptr1
   285  80e5 ae058e                 ldx ptr1+1
   286  80e8 20c883                 jsr disphexword
   287  80eb a99e                   lda #<page_displaymemory
   288  80ed a292                   ldx #>page_displaymemory
   289  80ef 4c5284                 jmp strout
   290                          
   291                          inputlinec64:
   292  80f2 a000                   ldy #0
   293  80f4 20cfff             -   jsr charin
   294  80f7 990002                 sta inputbuf,y
   295  80fa c8                     iny
   296  80fb c90d                   cmp #13
   297  80fd d0f5                   bne -
   298  80ff 60                     rts
   299                          
   300                          continueassemblec64:
   301  8100 a914                   lda #20
   302  8102 20d2ff                 jsr charout
   303  8105 20d2ff                 jsr charout
   304  8108 ad048e                 lda ptr1
   305  810b ae058e                 ldx ptr1+1
   306  810e 20c883                 jsr disphexword
   307  8111 a920                   lda #' '
   308  8113 20d2ff                 jsr charout
   309  8116 20d2ff                 jsr charout
   310  8119 4cd2ff                 jmp charout
   311                          }
   312                          
   313                          chkfilename:
   314  811c 20978c                 jsr skipspaces
   315  811f 8c1195                 sty tmp
   316  8122 b90002                 lda inputbuf, y
   317  8125 c922                   cmp #34 ; double quote
   318  8127 d025                   bne ++
   319  8129 c8                 -   iny
   320  812a b90002                 lda inputbuf, y
   321  812d c90d                   cmp #13
   322  812f d005                   bne +
   323  8131 ac1195                 ldy tmp
   324  8134 d018                   bne ++
   325  8136 c922               +   cmp #34 ; double quote
   326  8138 d0ef                   bne -
   327  813a 98                     tya ; index of ending double quotes
   328  813b 48                     pha ; save
   329  813c 18                     clc ; will subtract one more
   330  813d ed1195                 sbc tmp ; subtract index of first quote, have filename length
   331  8140 ae1195                 ldx tmp
   332  8143 e8                     inx ; low address of filename
   333  8144 a002                   ldy #>inputbuf ; high address of filename
   334  8146 20bdff                 jsr setnam
   335  8149 68                     pla
   336  814a a8                     tay
   337  814b c8                     iny ; advance past ending double quotes
   338  814c a900                   lda #0 ; set Z true
   339  814e 60                 ++  rts
   340                          
   341                          check_execute_save:
   342  814f 201c81             +   jsr chkfilename
   343  8152 f006                   beq +
   344  8154 206e8c                 jsr reporterr
   345  8157 a201                   ldx #1 ; set Z false
   346  8159 60                     rts
   347  815a 206881             +   jsr chkoptionaldrive
   348  815d 207e81                 jsr chksave
   349  8160 d005                   bne +
   350  8162 208781                 jsr executesave
   351  8165 a200                   ldx #0 ; set Z true
   352  8167 60                 +   rts
   353                          
   354                          chkoptionaldrive:
   355  8168 a908                   lda #8
   356  816a 8d1895                 sta drive
   357  816d 20978c                 jsr skipspaces
   358  8170 20ed8c                 jsr chkhexbyte
   359  8173 d008                   bne +
   360  8175 8d1895                 sta drive
   361  8178 20978c                 jsr skipspaces
   362  817b a900                   lda #0 ; set Z true
   363  817d 60                 +   rts
   364                          
   365                          chksave:
   366  817e 20978c                 jsr skipspaces
   367  8181 b90002                 lda inputbuf, y
   368  8184 c953                   cmp #'S'
   369  8186 60                     rts
   370                          
   371                          executesave:
   372  8187 20848d                 jsr newline
   373  818a a522                   lda $22
   374  818c 48                     pha
   375  818d a523                   lda $23
   376  818f 48                     pha
   377  8190 ad048e                 lda ptr1
   378  8193 8522                   sta $22
   379  8195 ad058e                 lda ptr1+1
   380  8198 8523                   sta $23
   381  819a a9c0                   lda #$c0 ; KERNAL control and error messages
   382  819c 859d                   sta $9d ; set messages to be displayed
   383  819e a901                   lda #1
   384  81a0 ae1895                 ldx drive
   385  81a3 a00f                   ldy #15
   386  81a5 20baff                 jsr setlfs
   387  81a8 a922                   lda #$22
   388  81aa ae1295                 ldx ptr2
   389  81ad ac1395                 ldy ptr2+1
   390  81b0 20d8ff                 jsr fsave
   391  81b3 68                     pla
   392  81b4 8523                   sta $23
   393  81b6 68                     pla
   394  81b7 8522                   sta $22
   395  81b9 4c848d                 jmp newline
   396                          }
   397                          
   398                          disassemble:
   399  81bc a917                   lda #23
   400  81be 8d0c95                 sta count
   401  81c1 a000               -   ldy #0
   402  81c3 20f38d                 jsr lda_at_ptr1_y
   403  81c6 20f681                 jsr find_opcode
   404  81c9 206082                 jsr disp_current
   405  81cc ad0b95                 lda size
   406  81cf 1002                   bpl +
   407  81d1 a901                   lda #1
   408  81d3 18                 +   clc
   409  81d4 6d048e                 adc ptr1
   410  81d7 8d048e                 sta ptr1
   411  81da 9003                   bcc +
   412  81dc ee058e                 inc ptr1+1
   413  81df ce0c95             +   dec count
   414  81e2 d0dd                   bne -
   415                          !ifdef C64SCREEN {
   416  81e4 4ccf80                 jmp display_page_disassemble
   417                          } else {
   418                              rts
   419                          }
   420                          
   421                          compareptrs:
   422  81e7 ad058e                 lda ptr1+1
   423  81ea cd1395                 cmp ptr2+1
   424  81ed d006                   bne +
   425  81ef ad048e                 lda ptr1
   426  81f2 cd1295                 cmp ptr2
   427  81f5 60                 +   rts
   428                          
   429                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   430                          ; and properties updated in ZP globals size,inidx,opidx,mode
   431  81f6 a097                   ldy #nopcodes
   432  81f8 a296                   ldx #nopcodes-1
   433  81fa dd2390             -   cmp opcodes,x
   434  81fd f010                   beq +
   435  81ff ca                     dex
   436  8200 88                     dey
   437  8201 d0f7                   bne -
   438  8203 18                     clc
   439  8204 a901                   lda #1
   440  8206 8d0b95                 sta size
   441  8209 a9ff                   lda #$FF
   442  820b aa                     tax
   443  820c a8                     tay
   444  820d 900a                   bcc ++
   445  820f bdba90             +   lda instidx, x
   446  8212 bc5191                 ldy modeidx, x
   447  8215 202382                 jsr getsize
   448  8218 38                     sec
   449  8219 8d0995             ++  sta inidx
   450  821c 8e0895                 stx opidx
   451  821f 8c0a95                 sty mode
   452  8222 60                     rts
   453                          
   454                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   455                              ; result returned in size
   456  8223 48                     pha
   457  8224 a901                   lda #1
   458  8226 8d0b95                 sta size
   459  8229 68                     pla
   460  822a c002                   cpy #2 // Immediate
   461  822c 900a                   bcc +
   462  822e ee0b95                 inc size
   463  8231 c009                   cpy #9 // Absolute
   464  8233 9003                   bcc +
   465  8235 ee0b95                 inc size
   466  8238 60                 +   rts
   467                          
   468                          disp_opcode: ; .A opcode byte
   469  8239 20f681                 jsr find_opcode
   470  823c 8a                     txa
   471                              ; fall through to display instruction
   472                          
   473                          dispinst: ; .A instruction index 0..55, note modifies A and X
   474  823d aa                     tax
   475  823e e038                   cpx #ninst
   476  8240 b012                   bcs +
   477  8242 bd628e                 lda inst0, x
   478  8245 20d2ff                 jsr charout
   479  8248 bd9a8e                 lda inst1, x
   480  824b 20d2ff                 jsr charout
   481  824e bdd28e                 lda inst2, x
   482  8251 4cd2ff                 jmp charout
   483  8254 a93f               +   lda #'?'
   484  8256 20d2ff                 jsr charout
   485  8259 20d2ff                 jsr charout
   486  825c 20d2ff                 jsr charout
   487  825f 60                     rts
   488                          
   489                          disp_current:
   490  8260 ad048e                 lda ptr1
   491  8263 ae058e                 ldx ptr1+1
   492  8266 20c883                 jsr disphexword
   493  8269 a920                   lda #$20
   494  826b 20d2ff                 jsr charout
   495  826e a000                   ldy #0
   496  8270 ae0b95                 ldx size
   497  8273 20f38d             -   jsr lda_at_ptr1_y
   498  8276 20ce83                 jsr disphexbyte
   499  8279 a920                   lda #$20
   500  827b 20d2ff                 jsr charout
   501  827e c8                     iny
   502  827f ca                     dex
   503  8280 d0f1                   bne -
   504  8282 c003               -   cpy #3
   505  8284 f00e                   beq +
   506  8286 a920                   lda #$20
   507  8288 20d2ff                 jsr charout
   508  828b 20d2ff                 jsr charout
   509  828e 20d2ff                 jsr charout
   510  8291 c8                     iny
   511  8292 d0ee                   bne -
   512  8294 ad0995             +   lda inidx
   513  8297 203d82                 jsr dispinst
   514  829a a920                   lda #$20
   515  829c 20d2ff                 jsr charout
   516  829f 20a782                 jsr disp_mode
   517  82a2 a90d                   lda #13
   518  82a4 4cd2ff                 jmp charout
   519                          
   520                          disp_mode
   521  82a7 ad0a95                 lda mode
   522  82aa c90d                   cmp #13
   523  82ac b00a                   bcs +
   524  82ae 0a                     asl
   525  82af aa                     tax
   526  82b0 bd0b8f                 lda mode_jmptable+1,x
   527  82b3 48                     pha
   528  82b4 bd0a8f                 lda mode_jmptable,x
   529  82b7 48                     pha
   530  82b8 60                 +   rts
   531                          
   532                          dispModeAcc:
   533  82b9 a941                   lda #'A'
   534  82bb 4cd2ff                 jmp charout
   535                          
   536                          dispModeNone:
   537  82be 60                     rts
   538                          
   539                          dispModeImm:
   540  82bf a923                   lda #'#'
   541  82c1 20d2ff                 jsr charout
   542                          dispModeZP:
   543  82c4 a924                   lda #'$'
   544  82c6 20d2ff                 jsr charout
   545  82c9 a001                   ldy #1
   546  82cb 20f38d                 jsr lda_at_ptr1_y
   547  82ce 4cce83                 jmp disphexbyte
   548                          
   549                          dispModeIndX:
   550  82d1 a928                   lda #'('
   551  82d3 20d2ff                 jsr charout
   552  82d6 a924                   lda #'$'
   553  82d8 20d2ff                 jsr charout
   554  82db a001                   ldy #1
   555  82dd 20f38d                 jsr lda_at_ptr1_y
   556  82e0 20ce83                 jsr disphexbyte
   557  82e3 a92c                   lda #','
   558  82e5 20d2ff                 jsr charout
   559  82e8 a958                   lda #'X'
   560  82ea 20d2ff                 jsr charout
   561  82ed a929                   lda #')'
   562  82ef 4cd2ff                 jmp charout
   563                          
   564                          dispModeIndY:
   565  82f2 a928                   lda #'('
   566  82f4 20d2ff                 jsr charout
   567  82f7 a924                   lda #'$'
   568  82f9 20d2ff                 jsr charout
   569  82fc a001                   ldy #1
   570  82fe 20f38d                 jsr lda_at_ptr1_y
   571  8301 20ce83                 jsr disphexbyte
   572  8304 a929                   lda #')'
   573  8306 20d2ff                 jsr charout
   574  8309 a92c                   lda #','
   575  830b 20d2ff                 jsr charout
   576  830e a959                   lda #'Y'
   577  8310 4cd2ff                 jmp charout
   578                          
   579                          dispModeRel:
   580  8313 a924                   lda #'$'
   581  8315 20d2ff                 jsr charout
   582  8318 18                     clc
   583  8319 ad048e                 lda ptr1
   584  831c 6902                   adc #2
   585  831e 8d188e                 sta ptr3
   586  8321 ad058e                 lda ptr1+1
   587  8324 6900                   adc #0
   588  8326 8d198e                 sta ptr3+1
   589  8329 a001                   ldy #1
   590  832b 20f38d                 jsr lda_at_ptr1_y
   591  832e 1019                   bpl +
   592                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   593  8330 49ff                   eor #$FF ; inverse
   594  8332 18                     clc
   595  8333 6901                   adc #1 ; complete getting absolute value from two's complement
   596  8335 8d1195                 sta tmp
   597  8338 38                     sec
   598  8339 ad188e                 lda ptr3
   599  833c ed1195                 sbc tmp
   600  833f 8d188e                 sta ptr3
   601  8342 b011                   bcs ++
   602  8344 ce198e                 dec ptr3+1
   603  8347 900c                   bcc ++
   604  8349 18                 +   clc ; simple case of adding
   605  834a 6d188e                 adc ptr3
   606  834d 8d188e                 sta ptr3
   607  8350 9003                   bcc ++
   608  8352 ee198e                 inc ptr3+1
   609  8355 ad188e             ++  lda ptr3
   610  8358 ae198e                 ldx ptr3+1
   611  835b 4cc883                 jmp disphexword
   612                          
   613                          dispModeZPX:
   614  835e 20c482                 jsr dispModeZP
   615  8361 a92c                   lda #','
   616  8363 20d2ff                 jsr charout
   617  8366 a958                   lda #'X'
   618  8368 4cd2ff                 jmp charout
   619                          
   620                          dispModeZPY:
   621  836b 20c482                 jsr dispModeZP
   622  836e a92c                   lda #','
   623  8370 20d2ff                 jsr charout
   624  8373 a959                   lda #'Y'
   625  8375 4cd2ff                 jmp charout
   626                          
   627                          dispModeAbs:
   628  8378 a924                   lda #'$'
   629  837a 20d2ff                 jsr charout
   630  837d a001                   ldy #1
   631  837f 20f38d                 jsr lda_at_ptr1_y
   632  8382 48                     pha
   633  8383 c8                     iny
   634  8384 20f38d                 jsr lda_at_ptr1_y
   635  8387 aa                     tax
   636  8388 68                     pla
   637  8389 4cc883                 jmp disphexword
   638                          
   639                          dispModeAbsX:
   640  838c 207883                 jsr dispModeAbs
   641  838f a92c                   lda #','
   642  8391 20d2ff                 jsr charout
   643  8394 a958                   lda #'X'
   644  8396 4cd2ff                 jmp charout
   645                          
   646                          dispModeAbsY:
   647  8399 207883                 jsr dispModeAbs
   648  839c a92c                   lda #','
   649  839e 20d2ff                 jsr charout
   650  83a1 a959                   lda #'Y'
   651  83a3 4cd2ff                 jmp charout
   652                          
   653                          dispModeInd:
   654  83a6 a928                   lda #'('
   655  83a8 20d2ff                 jsr charout
   656  83ab 207883                 jsr dispModeAbs
   657  83ae a929                   lda #')'
   658  83b0 4cd2ff                 jmp charout
   659                          
   660                          dispbinbyte: ; .A 00..FF
   661  83b3 a208                   ldx #8
   662  83b5 8d1195                 sta tmp
   663  83b8 a930               -   lda #'0'
   664  83ba 2e1195                 rol tmp
   665  83bd 9002                   bcc +
   666  83bf a931                   lda #'1'
   667  83c1 20d2ff             +   jsr charout
   668  83c4 ca                     dex
   669  83c5 d0f1                   bne -
   670  83c7 60                     rts
   671                          
   672                          disphexword: ; .A low, .X high, 0000..FFFF
   673  83c8 48                     pha
   674  83c9 8a                     txa
   675  83ca 20ce83                 jsr disphexbyte
   676  83cd 68                     pla
   677                              ;fall through to call again
   678                          
   679                          disphexbyte: ; .A 00..FF
   680  83ce 48                     pha
   681  83cf 4a                     lsr
   682  83d0 4a                     lsr
   683  83d1 4a                     lsr
   684  83d2 4a                     lsr
   685  83d3 20d783                 jsr disphexnybble
   686  83d6 68                     pla
   687                              ;fall through to call again
   688                          
   689                          disphexnybble: ; .A 0..F
   690  83d7 290f                   and #$0F
   691  83d9 0930                   ora #$30
   692  83db c93a                   cmp #$3A
   693  83dd 9002                   bcc +
   694  83df 6906                   adc #$06
   695  83e1 4cd2ff             +   jmp charout
   696                          
   697                          inputhexword: ; C set if fails
   698  83e4 a900                   lda #0
   699  83e6 8d048e                 sta ptr1
   700  83e9 8d058e                 sta ptr1+1
   701                          
   702  83ec a904                   lda #4 ; word is at most 4 nybbles
   703  83ee 8d0c95                 sta count
   704  83f1 203484             --  jsr inputhexnybble
   705  83f4 b015                   bcs +
   706                          
   707                              ; shift nibble up
   708  83f6 0a                     asl
   709  83f7 0a                     asl
   710  83f8 0a                     asl
   711  83f9 0a                     asl
   712                          
   713  83fa a204                   ldx #4 ; 4 bits rotated into word
   714  83fc 2a                 -   rol
   715  83fd 2e048e                 rol ptr1
   716  8400 2e058e                 rol ptr1+1
   717  8403 ca                     dex
   718  8404 d0f6                   bne - ; repeat bits
   719                          
   720  8406 ce0c95                 dec count
   721  8409 d0e6                   bne -- ; repeat nybbles
   722                          
   723  840b ad0c95             +   lda count
   724  840e c904                   cmp #4 ; set C if 4, otherwise clear
   725  8410 60                     rts
   726                          
   727                          inputhexbyte:
   728  8411 203484                 jsr inputhexnybble
   729  8414 b01d                   bcs ++
   730  8416 8d1195                 sta tmp
   731  8419 203484                 jsr inputhexnybble
   732  841c 9006                   bcc +
   733  841e 18                     clc ; allow single digit as byte
   734  841f ad1195                 lda tmp
   735  8422 900f                   bcc ++
   736  8424 0e1195             +   asl tmp
   737  8427 0e1195                 asl tmp
   738  842a 0e1195                 asl tmp
   739  842d 0e1195                 asl tmp
   740  8430 0d1195                 ora tmp ; necessary to assemble the two nybbles
   741  8433 60                 ++  rts
   742                          
   743                          inputhexnybble:
   744  8434 b90002                 lda $0200,y
   745  8437 297f                   and #$7F
   746  8439 38                     sec
   747  843a e930                   sbc #$30
   748  843c 9012                   bcc ++
   749  843e c90a                   cmp #10
   750  8440 900c                   bcc +
   751  8442 e907                   sbc #7
   752  8444 900a                   bcc ++
   753  8446 c90a                   cmp #10
   754  8448 9006                   bcc ++
   755  844a c910                   cmp #16
   756  844c b002                   bcs ++
   757  844e c8                 +   iny
   758  844f 60                     rts
   759  8450 38                 ++  sec
   760  8451 60                     rts
   761                          
   762                          strout:
   763  8452 8d188e                 sta ptr3
   764  8455 8e198e                 stx ptr3+1
   765                          strout2:
   766  8458 a000                   ldy #0
   767  845a 20078e             -   jsr lda_at_ptr3_y
   768  845d f006                   beq +
   769  845f 20d2ff                 jsr charout
   770  8462 c8                     iny
   771  8463 d0f5                   bne -
   772  8465 98                 +   tya
   773  8466 38                     sec
   774  8467 6d188e                 adc ptr3
   775  846a 8d188e                 sta ptr3
   776  846d 9003                   bcc +
   777  846f ee198e                 inc ptr3+1
   778  8472 60                 +   rts
   779                          
   780                          inputline:
   781                          !ifdef C64SCREEN {
   782  8473 4cf280                 jmp inputlinec64
   783                          } else {
   784                              ldy #0
   785                          --  sty count
   786                          -   jsr getkey
   787                              beq -
   788                              ldy count
   789                          !ifdef MINIMUM {
   790                              cmp #8 ; backspace
   791                          } else {
   792                              cmp #20
   793                          }
   794                              bne +
   795                              cpy #0
   796                              beq -
   797                              dey
   798                          !if NEEDECHO = 1 {
   799                              jsr charout
   800                          }
   801                              jmp --
   802                          +   cmp #13
   803                              beq +
   804                              cmp #' '
   805                              bcc -
   806                              cmp #128
   807                              bcs -
   808                          +
   809                          !if NEEDECHO = 1 {
   810                              jsr charout
   811                          }
   812                              sta inputbuf,y
   813                              iny
   814                              cmp #13
   815                              bne --
   816                              rts
   817                          }
   818                          
   819                          parseline:
   820  8476 c001                   cpy #1
   821  8478 d003                   bne +
   822                          -
   823                          !ifdef C64SCREEN {
   824  847a 4c848d                 jmp newline
   825                          } else {
   826                              rts
   827                          }
   828  847d 88                 +   dey
   829  847e 8c0d95                 sty len
   830                              ; skip whitespace
   831                              ; check for address, put in ptr1
   832                              ; or check for dot, then require address put in ptr2
   833                              ; or check for ?, and optional parameter, execute help
   834                              ; check for whitespace
   835                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   836                              ; check for string, store at start of inputbuf
   837                              ; check for drive number
   838                              ; check for whitespace
   839                              ; check command ":rda?mls", execute command
   840  8481 a000                   ldy #0
   841  8483 20978c                 jsr skipspaces
   842  8486 cc0d95                 cpy len
   843  8489 f0ef                   beq -
   844  848b 203b8c                 jsr chkcontinuedis
   845  848e d003                   bne +
   846  8490 205f8c                 jsr executedisassemble ; note won't return
   847  8493 204d8c             +   jsr chkcontinueasm
   848  8496 d003                   bne +
   849  8498 200888                 jsr continueassemble ; note won't return
   850  849b 20a68c             +   jsr chkdot
   851  849e d003                   bne +
   852  84a0 4ca585                 jmp executedot
   853  84a3 20b18c             +   jsr chkhelp
   854  84a6 d003                   bne +
   855  84a8 4c7286                 jmp executehelp
   856                          +
   857                          !ifndef MINIMUM {
   858  84ab 209180                 jsr chkextrac64 ; check syntax only available on C64
   859  84ae b015                   bcs + ; error if C set
   860  84b0 f005                   beq ++ ; consumed if Z set, skip next test(s)
   861                          }
   862  84b2 20e48c                 jsr chkhexaddr1
   863  84b5 d003                   bne error
   864  84b7 4cbd84             ++  jmp executeaddr1
   865                          error:
   866  84ba 4c6e8c                 jmp reporterr
   867                          
   868                          executeaddr1:
   869  84bd cc0d95                 cpy len
   870  84c0 d003                   bne +
   871  84c2 4c2185                 jmp executedisplay1
   872  84c5 20a68c             +   jsr chkdot
   873  84c8 d011                   bne +
   874  84ca cc0d95                 cpy len
   875  84cd f022                   beq executepagedisplay
   876  84cf 20068d                 jsr chkhexaddr2
   877  84d2 d0e6                   bne error
   878  84d4 18                     clc
   879  84d5 6e1095                 ror flag
   880  84d8 4c1085                 jmp executeaddr12
   881  84db 20978c             +   jsr skipspaces
   882  84de 20bc8c                 jsr chkcolon
   883  84e1 d003                   bne +
   884  84e3 4c7d85                 jmp executemodify
   885  84e6 20538d             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   886                          !ifdef MINIMUM {
   887                              jmp reportnotimplemented
   888                          } else {
   889  84e9 201c81                 jsr chkfilename
   890  84ec d0cc                   bne error
   891  84ee 4cb585                 jmp executeloadfilename
   892                          }
   893                          
   894                          executepagedisplay:
   895  84f1 ad048e                 lda ptr1
   896  84f4 18                     clc
   897                          !ifdef MINIMUM {
   898                              adc #$5f
   899                          } else {
   900  84f5 69b7                   adc #$b7
   901                          }
   902  84f7 8d1295                 sta ptr2
   903  84fa ad058e                 lda ptr1+1
   904                          !ifdef MINIMUM {
   905                              adc #$01
   906                          } else {
   907  84fd 6900                   adc #$00
   908                          }
   909  84ff 8d1395                 sta ptr2+1
   910  8502 9008                   bcc +
   911  8504 a9ff                   lda #$ff
   912  8506 8d1295                 sta ptr2
   913  8509 8d1395                 sta ptr2+1
   914  850c 38                 +   sec
   915  850d 6e1095                 ror flag
   916                              ; fall through to executeaddr12
   917                          
   918                          executeaddr12:
   919  8510 cc0d95                 cpy len
   920  8513 d003                   bne +
   921  8515 4c2d85                 jmp executedisplay12
   922                          !ifndef MINIMUM { // any C64
   923  8518 204f81             +   jsr check_execute_save
   924  851b f003                   beq ++
   925                          }
   926  851d 4c678c             +   jmp reportnotimplemented
   927  8520 60                 ++  rts
   928                          
   929                          executedisplay1:
   930  8521 ad048e                 lda ptr1
   931  8524 8d1295                 sta ptr2
   932  8527 ad058e                 lda ptr1+1
   933  852a 8d1395                 sta ptr2+1
   934                              ; fall through executedisplay12
   935                          
   936                          executedisplay12:
   937  852d a9ff                   lda #$ff
   938  852f 8d0c95                 sta count
   939  8532 ee0c95             -   inc count
   940  8535 ad0c95                 lda count
   941                          !ifdef MINIMUM {
   942                              and #$0f
   943                          } else {
   944  8538 2907                   and #$07
   945                          }
   946  853a d018                   bne +
   947  853c a90d                   lda #13
   948  853e 20d2ff                 jsr charout
   949  8541 ad048e                 lda ptr1
   950  8544 ae058e                 ldx ptr1+1
   951  8547 20c883                 jsr disphexword
   952  854a a93a                   lda #':'
   953  854c 20d2ff                 jsr charout
   954  854f a920                   lda #' '
   955  8551 20d2ff                 jsr charout
   956  8554 a000               +   ldy #0
   957  8556 20f38d                 jsr lda_at_ptr1_y
   958  8559 20ce83                 jsr disphexbyte
   959  855c a920                   lda #' '
   960  855e 20d2ff                 jsr charout
   961  8561 ee048e                 inc ptr1
   962  8564 d005                   bne +
   963  8566 ee058e                 inc ptr1+1
   964  8569 f00f                   beq ++
   965  856b 20e781             +   jsr compareptrs
   966  856e 90c2                   bcc -
   967  8570 f0c0                   beq -
   968  8572 2c1095                 bit flag
   969  8575 1003                   bpl ++
   970                          !ifdef C64SCREEN {
   971  8577 4cdf80                 jmp display_page_displaymemory
   972                          }
   973  857a 4c848d             ++  jmp newline
   974                          
   975                          executemodify:
   976  857d 20978c                 jsr skipspaces
   977  8580 cc0d95                 cpy len
   978  8583 f01d                   beq ++
   979  8585 20c78c                 jsr chkhexbyteofsequence
   980  8588 f003                   beq +
   981  858a 4cba84                 jmp error
   982  858d 8c1195             +   sty tmp
   983  8590 a000                   ldy #0
   984  8592 20038e                 jsr sta_at_ptr1_y
   985  8595 ee048e                 inc ptr1
   986  8598 d003                   bne +
   987  859a ee058e                 inc ptr1+1
   988  859d ac1195             +   ldy tmp
   989  85a0 d0db                   bne executemodify
   990  85a2 4c848d             ++  jmp newline
   991                          
   992                          executedot:
   993  85a5 cc0d95                 cpy len
   994  85a8 d003                   bne +
   995  85aa 4cf184                 jmp executepagedisplay
   996  85ad 20b885             +   jsr chkloadregister
   997  85b0 d000                   bne +
   998  85b2 201886             +   jsr chkloadregisters
   999                          
  1000                          executeloadfilename:
  1001                          executeaddr1cmd:
  1002  85b5 4c678c             +   jmp reportnotimplemented
  1003                          
  1004                          chkloadregister:
  1005  85b8 20c285                 jsr chkload_a_x_y_s_p
  1006  85bb 201286                 jsr chkload_pc
  1007  85be 201586                 jsr chkload_n_v_b_d_i_z_c
  1008  85c1 60                     rts
  1009                          
  1010                          chkload_a_x_y_s_p:
  1011  85c2 8c1195                 sty tmp
  1012  85c5 b90002                 lda inputbuf, y
  1013  85c8 a200                   ldx #0
  1014  85ca c941                   cmp #'A'
  1015  85cc f014                   beq +
  1016  85ce e8                     inx
  1017  85cf c958                   cmp #'X'
  1018  85d1 f00f                   beq +
  1019  85d3 e8                     inx
  1020  85d4 c959                   cmp #'Y'
  1021  85d6 f00a                   beq +
  1022  85d8 e8                     inx
  1023  85d9 c953                   cmp #'S'
  1024  85db f005                   beq +
  1025  85dd e8                     inx
  1026  85de c950                   cmp #'P'
  1027  85e0 d02c                   bne ++
  1028  85e2 c8                 +   iny
  1029  85e3 b90002                 lda inputbuf, y
  1030                          !ifndef MINIMUM {
  1031  85e6 c9a0                   cmp #$A0
  1032  85e8 f008                   beq +
  1033                          }
  1034  85ea c920                   cmp #' '
  1035  85ec f004                   beq +
  1036  85ee c93a                   cmp #':'
  1037  85f0 d01c                   bne ++
  1038  85f2 c8                 +   iny
  1039  85f3 20978c                 jsr skipspaces
  1040  85f6 8e0a95                 stx mode
  1041  85f9 20ed8c                 jsr chkhexbyte
  1042  85fc d010                   bne ++
  1043  85fe ae0a95                 ldx mode
  1044  8601 9d1995                 sta registerA, x
  1045                          !ifndef MINIMUM {
  1046  8604 20848d                 jsr newline
  1047                          }
  1048                              ; pop call stack so return to input_loop
  1049  8607 68                     pla
  1050  8608 68                     pla
  1051  8609 68                     pla
  1052  860a 68                     pla
  1053  860b 4c1186                 jmp +++
  1054  860e ac1195             ++  ldy tmp ; not Z (NE)
  1055  8611 60                 +++ rts
  1056                          
  1057                          chkload_pc:
  1058  8612 a901                   lda #1 ; not Z (NE)
  1059  8614 60                     rts
  1060                          
  1061                          chkload_n_v_b_d_i_z_c:
  1062  8615 a901                   lda #1 ; not Z (NE)
  1063  8617 60                     rts
  1064                          
  1065                          chkloadregisters:
  1066  8618 20e48c                 jsr chkhexword
  1067  861b d054                   bne ++
  1068  861d ad048e                 lda ptr1
  1069  8620 8d1e95                 sta registerPC
  1070  8623 ad058e                 lda ptr1+1
  1071  8626 8d1f95                 sta registerPC+1
  1072  8629 20858c                 jsr chkspace
  1073  862c d03c                   bne +
  1074  862e 202f8d                 jsr chkbinbyte
  1075  8631 d037                   bne +
  1076  8633 8d1d95                 sta registerSR
  1077  8636 20858c                 jsr chkspace
  1078  8639 d02f                   bne +
  1079  863b 20ed8c                 jsr chkhexbyte
  1080  863e d02a                   bne +
  1081  8640 8d1995                 sta registerA
  1082  8643 20858c                 jsr chkspace
  1083  8646 d022                   bne +
  1084  8648 20ed8c                 jsr chkhexbyte
  1085  864b d01d                   bne +
  1086  864d 8d1a95                 sta registerX
  1087  8650 20858c                 jsr chkspace
  1088  8653 d015                   bne +
  1089  8655 20ed8c                 jsr chkhexbyte
  1090  8658 d010                   bne +
  1091  865a 8d1b95                 sta registerY
  1092  865d 20858c                 jsr chkspace
  1093  8660 d008                   bne +
  1094  8662 20ed8c                 jsr chkhexbyte
  1095  8665 d003                   bne +
  1096  8667 8d1c95                 sta registerSP
  1097                              ; don't return to executedot
  1098  866a 68                 +   pla
  1099  866b 68                     pla
  1100                          !ifdef C64SCREEN {
  1101  866c 20848d                 jsr newline
  1102                          }
  1103  866f a900                   lda #0 ; set Z
  1104  8671 60                 ++  rts
  1105                          
  1106                          executehelp:
  1107                          !ifdef C64SCREEN {
  1108  8672 20848d                 jsr newline
  1109                          }
  1110  8675 cc0d95                 cpy len
  1111  8678 d003                   bne +
  1112  867a 4ca386                 jmp displayhelp
  1113  867d 20978c             +   jsr skipspaces
  1114  8680 20be86                 jsr chkhelpinstructions
  1115  8683 d003                   bne +
  1116  8685 4c0287                 jmp displayinstructions
  1117  8688 20d886             +   jsr chkhelpmodes
  1118  868b d003                   bne +
  1119  868d 4c1987                 jmp displaymodes
  1120  8690 209b8b             +   jsr chkinstruction
  1121  8693 d003                   bne +
  1122  8695 4cd587                 jmp executehelpinstruction
  1123  8698 20cb86             +   jsr chkhelpregisters
  1124  869b d003                   bne +
  1125  869d 4ca38d                 jmp execute_display_registers
  1126  86a0 4c678c             +   jmp reportnotimplemented
  1127                          
  1128                          displayhelp:
  1129  86a3 a9b6                   lda #<generalhelp
  1130  86a5 a292                   ldx #>generalhelp
  1131  86a7 205284                 jsr strout
  1132  86aa a9ab                   lda #<generalhelp2
  1133  86ac a293                   ldx #>generalhelp2
  1134  86ae 205284                 jsr strout
  1135  86b1 a975                   lda #<generalhelp3
  1136  86b3 a294                   ldx #>generalhelp3
  1137  86b5 205284                 jsr strout
  1138                          !ifndef MINIMUM { // any C64
  1139  86b8 20c880                 jsr display_extra_help
  1140                          }
  1141  86bb 4c848d                 jmp newline
  1142                          
  1143                          chkhelpinstructions:
  1144  86be b90002                 lda inputbuf, y
  1145  86c1 c941                   cmp #'A'
  1146  86c3 d005                   bne +
  1147  86c5 b90102                 lda inputbuf+1, y
  1148  86c8 c90d                   cmp #13
  1149                              ; no need to increment y if found, done parsing line
  1150  86ca 60                 +   rts
  1151                          
  1152                          chkhelpregisters:
  1153  86cb b90002                 lda inputbuf, y
  1154  86ce c92e                   cmp #'.'
  1155  86d0 d005                   bne +
  1156  86d2 b90102                 lda inputbuf+1, y
  1157  86d5 c90d                   cmp #13
  1158  86d7 60                 +   rts
  1159                          
  1160                          chkhelpmodes:
  1161  86d8 a9e6                   lda #<modes_keyword
  1162  86da a294                   ldx #>modes_keyword
  1163                              ; fall through to chkkeyword
  1164                          
  1165                          chkkeyword:
  1166  86dc 8c0c95                 sty count
  1167  86df 8d188e                 sta ptr3
  1168  86e2 8e198e                 stx ptr3+1
  1169  86e5 ae0c95                 ldx count
  1170  86e8 a000                   ldy #0
  1171  86ea 20078e             -   jsr lda_at_ptr3_y
  1172  86ed dd0002                 cmp inputbuf, x
  1173  86f0 d00a                   bne +
  1174  86f2 e8                     inx
  1175  86f3 c8                     iny
  1176  86f4 ec0d95                 cpx len
  1177  86f7 d0f1                   bne -
  1178  86f9 20078e                 jsr lda_at_ptr3_y ; matched if end of string, will set Z
  1179  86fc 08                 +   php ; save Z
  1180  86fd ac0c95                 ldy count
  1181  8700 28                     plp ; restore Z
  1182  8701 60                     rts
  1183                          
  1184                          displayinstructions:
  1185  8702 a038                   ldy #ninst
  1186  8704 a200                   ldx #0
  1187  8706 8a                 -   txa
  1188  8707 48                     pha
  1189  8708 203d82                 jsr dispinst
  1190  870b a920                   lda #' '
  1191  870d 20d2ff                 jsr charout
  1192  8710 68                     pla
  1193  8711 aa                     tax
  1194  8712 e8                     inx
  1195  8713 88                     dey
  1196  8714 d0f0                   bne -
  1197  8716 4c848d                 jmp newline
  1198                          
  1199                          displaymodes:
  1200  8719 38                     sec
  1201  871a a900                   lda #0
  1202  871c 48                 -   pha
  1203  871d aa                     tax
  1204  871e bd248f                 lda mode_sorted, x
  1205  8721 202e87                 jsr dispmode
  1206  8724 68                     pla
  1207  8725 18                     clc
  1208  8726 6901                   adc #1
  1209  8728 c90d                   cmp #nmodes
  1210  872a 90f0                   bcc -
  1211  872c 18                     clc
  1212  872d 60                     rts
  1213                          
  1214                          dispmode:
  1215  872e c90d                   cmp #nmodes
  1216  8730 b009                   bcs +
  1217  8732 8d0a95                 sta mode
  1218  8735 207d87                 jsr disp_modename_and_example
  1219  8738 4c3c87                 jmp dispmodeinstructions
  1220  873b 60                 +   rts
  1221                          
  1222                          dispmodeinstructions:
  1223                          !ifdef C64SCREEN {
  1224                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1225  873c ad0a95                 lda mode
  1226  873f c903                   cmp #3
  1227  8741 d005                   bne +
  1228  8743 a920                   lda #' '
  1229  8745 4cd2ff                 jmp charout
  1230                          }
  1231                              ; display instructions with this mode
  1232  8748 a000               +   ldy #0
  1233  874a 8c0995             --  sty inidx
  1234  874d a200                   ldx #0
  1235  874f 8e1195             -   stx tmp
  1236  8752 ad0995                 lda inidx
  1237  8755 ddba90                 cmp instidx, x
  1238  8758 d016                   bne ++
  1239  875a bd5191                 lda modeidx, x
  1240  875d cd0a95                 cmp mode
  1241  8760 d00e                   bne ++
  1242  8762 a920                   lda #' '
  1243  8764 20d2ff                 jsr charout
  1244  8767 bdba90                 lda instidx, x
  1245  876a 203d82                 jsr dispinst
  1246  876d ae1195                 ldx tmp
  1247  8770 e8                 ++  inx
  1248  8771 e097                   cpx #nopcodes
  1249  8773 90da                   bcc -
  1250  8775 c8                     iny
  1251  8776 c038                   cpy #ninst
  1252  8778 d0d0                   bne --
  1253  877a 4c848d                 jmp newline
  1254                          
  1255                          disp_modename_and_example:
  1256  877d 0a                     asl
  1257  877e aa                     tax
  1258  877f bd0990                 lda modes, x
  1259  8782 48                     pha
  1260  8783 bd0a90                 lda modes+1, x
  1261  8786 aa                     tax
  1262                          !ifdef C64SCREEN {
  1263  8787 a912                   lda #18
  1264  8789 20d2ff                 jsr charout
  1265                          }
  1266  878c 68                     pla
  1267  878d 205284                 jsr strout
  1268  8790 a920                   lda #' '
  1269  8792 20d2ff                 jsr charout
  1270  8795 205884                 jsr strout2
  1271                          !ifdef C64SCREEN {
  1272  8798 a992                   lda #146
  1273  879a 20d2ff                 jsr charout
  1274                          }
  1275  879d 60                     rts
  1276                          
  1277                          disp_modename_instruction_example:
  1278  879e 0a                     asl
  1279  879f aa                     tax
  1280  87a0 bd0990                 lda modes, x
  1281  87a3 48                     pha
  1282  87a4 bd0a90                 lda modes+1, x
  1283  87a7 aa                     tax
  1284  87a8 68                     pla
  1285  87a9 205284                 jsr strout ; mode name
  1286  87ac ad188e                 lda ptr3
  1287  87af 48                     pha
  1288  87b0 ad198e                 lda ptr3+1
  1289  87b3 48                     pha
  1290  87b4 a93a                   lda #':'
  1291  87b6 20d2ff                 jsr charout
  1292  87b9 a920                   lda #' '
  1293  87bb 20d2ff                 jsr charout
  1294  87be ad0995                 lda inidx
  1295  87c1 203d82                 jsr dispinst ; instruction
  1296  87c4 a920                   lda #' '
  1297  87c6 20d2ff                 jsr charout
  1298  87c9 68                     pla
  1299  87ca 8d198e                 sta ptr3+1
  1300  87cd 68                     pla
  1301  87ce 8d188e                 sta ptr3
  1302  87d1 205884                 jsr strout2 ; example
  1303  87d4 60                     rts
  1304                          
  1305                          
  1306                          executehelpinstruction:
  1307  87d5 a000                   ldy #0
  1308  87d7 8c0895             -   sty opidx
  1309  87da b9ba90                 lda instidx, y
  1310  87dd cd0995                 cmp inidx
  1311  87e0 d01d                   bne +
  1312  87e2 b95191                 lda modeidx, y
  1313  87e5 8d0a95                 sta mode
  1314  87e8 ae0895                 ldx opidx
  1315  87eb bd2390                 lda opcodes, x
  1316  87ee 20ce83                 jsr disphexbyte
  1317  87f1 a920                   lda #' '
  1318  87f3 20d2ff                 jsr charout
  1319  87f6 ad0a95                 lda mode
  1320  87f9 209e87                 jsr disp_modename_instruction_example
  1321  87fc 20848d                 jsr newline
  1322  87ff ac0895             +   ldy opidx
  1323  8802 c8                     iny
  1324  8803 c097                   cpy #nopcodes
  1325  8805 90d0                   bcc -
  1326  8807 60                     rts
  1327                          
  1328                          continueassemble:
  1329                          !ifdef C64SCREEN {
  1330  8808 200081                 jsr continueassemblec64
  1331                          }
  1332                              ; continue...
  1333                          
  1334                          executeassemble:
  1335  880b 68                     pla ; remove low byte return address
  1336  880c 68                     pla ; return high byte return address
  1337                          !ifdef C64SCREEN {
  1338  880d a914                   lda #20
  1339  880f 20d2ff                 jsr charout
  1340  8812 20d2ff                 jsr charout
  1341                          } else {
  1342                              lda ptr1
  1343                              ldx ptr1+1
  1344                              jsr disphexword
  1345                              lda #' '
  1346                              jsr charout
  1347                          }
  1348                              ; save current pointer
  1349  8815 ad048e             --  lda ptr1
  1350  8818 ae058e                 ldx ptr1+1
  1351  881b 8d188e                 sta ptr3
  1352  881e 8e198e                 stx ptr3+1
  1353  8821 207384                 jsr inputline
  1354  8824 c001                   cpy #1
  1355  8826 f055                   beq ++
  1356  8828 88                     dey
  1357  8829 8c0d95                 sty len
  1358  882c a000                   ldy #0
  1359  882e 20978c                 jsr skipspaces
  1360  8831 cc0d95                 cpy len
  1361  8834 f047                   beq ++
  1362                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1363                              ;jsr skipspaces
  1364  8836 209b8b                 jsr chkinstruction
  1365  8839 f00f                   beq +
  1366  883b ad188e             -   lda ptr3
  1367  883e 8d048e                 sta ptr1
  1368  8841 ad198e                 lda ptr3+1
  1369  8844 8d058e                 sta ptr1+1
  1370  8847 4cba84                 jmp error
  1371  884a 20b088             +   jsr chkaddressing
  1372  884d d0ec                   bne -
  1373  884f 20d08b                 jsr find_inst_and_mode
  1374  8852 d0e7                   bne -
  1375  8854 208088                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1376  8857 18                     clc
  1377  8858 ad0b95                 lda size
  1378  885b 6d188e                 adc ptr3
  1379  885e 8d048e                 sta ptr1
  1380  8861 ad198e                 lda ptr3+1
  1381  8864 6900                   adc #0
  1382  8866 8d058e                 sta ptr1+1
  1383                          !ifdef C64SCREEN {
  1384  8869 20848d                 jsr newline
  1385                          }
  1386  886c ad048e                 lda ptr1
  1387  886f ae058e                 ldx ptr1+1
  1388  8872 20c883                 jsr disphexword
  1389  8875 a920                   lda #' '
  1390  8877 20d2ff                 jsr charout
  1391  887a 4c1588                 jmp --
  1392                          ++
  1393                          !ifdef C64SCREEN {
  1394  887d 4c848d                 jmp newline
  1395                          } else {
  1396                              rts
  1397                          }
  1398                          
  1399                          store_assembly:
  1400  8880 ae0895                 ldx opidx
  1401  8883 bd2390                 lda opcodes, x
  1402  8886 a000                   ldy #0
  1403  8888 20178e                 jsr sta_at_ptr3_y
  1404  888b c8                     iny
  1405  888c ae0b95                 ldx size
  1406  888f e001                   cpx #1
  1407  8891 f01c                   beq ++
  1408  8893 e002               +   cpx #2
  1409  8895 d007                   bne +
  1410  8897 ad0f95                 lda tmp2
  1411  889a 20178e                 jsr sta_at_ptr3_y
  1412  889d 60                     rts
  1413  889e e003               +   cpx #3
  1414  88a0 d00d                   bne ++
  1415  88a2 ad048e                 lda ptr1
  1416  88a5 20178e                 jsr sta_at_ptr3_y
  1417  88a8 c8                     iny
  1418  88a9 ad058e                 lda ptr1+1
  1419  88ac 20178e                 jsr sta_at_ptr3_y
  1420  88af 60                 ++  rts
  1421                          
  1422                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1423  88b0 20978c                 jsr skipspaces
  1424  88b3 a200                   ldx #0
  1425  88b5 8e0a95                 stx mode
  1426  88b8 202189                 jsr chkaccumulator
  1427  88bb f05e                   beq +
  1428  88bd ee0a95                 inc mode
  1429  88c0 cc0d95                 cpy len ; chknone
  1430  88c3 f056                   beq +
  1431  88c5 ee0a95                 inc mode
  1432  88c8 204789                 jsr chkimmediate
  1433  88cb f04e                   beq +
  1434  88cd ee0a95                 inc mode
  1435  88d0 206e89                 jsr chkindirectx
  1436  88d3 f046                   beq +
  1437  88d5 ee0a95                 inc mode
  1438  88d8 20b689                 jsr chkindirecty
  1439  88db f03e                   beq +
  1440  88dd ee0a95                 inc mode
  1441  88e0 20fe89                 jsr chkrelative
  1442  88e3 f036                   beq +
  1443  88e5 ee0a95                 inc mode
  1444  88e8 20698a                 jsr chkzeropage
  1445  88eb f02e                   beq +
  1446  88ed ee0a95                 inc mode
  1447  88f0 20858a                 jsr chkzeropagex
  1448  88f3 f026                   beq +
  1449  88f5 ee0a95                 inc mode
  1450  88f8 20b78a                 jsr chkzeropagey
  1451  88fb f01e                   beq +
  1452  88fd ee0a95                 inc mode
  1453  8900 20e98a                 jsr chkabsolute
  1454  8903 f016                   beq +
  1455  8905 ee0a95                 inc mode
  1456  8908 20058b                 jsr chkabsolutex
  1457  890b f00e                   beq +
  1458  890d ee0a95                 inc mode
  1459  8910 20378b                 jsr chkabsolutey
  1460  8913 f006                   beq +
  1461  8915 ee0a95                 inc mode
  1462  8918 20698b                 jsr chkindirect
  1463  891b 08                 +   php ; save Z
  1464  891c ad0a95                 lda mode
  1465  891f 28                     plp ; restore Z
  1466  8920 60                     rts
  1467                          
  1468                          chkaccumulator:
  1469  8921 cc0d95                 cpy len
  1470  8924 d014                   bne +
  1471  8926 ad0995                 lda inidx
  1472  8929 c902                   cmp #2 ; ASL
  1473  892b f019                   beq ++
  1474  892d c920                   cmp #32 ; LSR
  1475  892f f015                   beq ++
  1476  8931 c927                   cmp #39 ; ROL
  1477  8933 f011                   beq ++
  1478  8935 c928                   cmp #40 ; ROR
  1479  8937 4c4689                 jmp ++
  1480  893a b90002             +   lda inputbuf, y
  1481  893d c941                   cmp #'A'
  1482  893f d005                   bne ++
  1483  8941 b90102                 lda inputbuf+1,y
  1484  8944 c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1485  8946 60                 ++  rts
  1486                          
  1487                          chkimmediate:
  1488  8947 8c0e95                 sty savepos
  1489  894a b90002                 lda inputbuf, y
  1490  894d c923                   cmp #'#'
  1491  894f d017                   bne ++
  1492  8951 c8                     iny
  1493  8952 20978c                 jsr skipspaces
  1494  8955 b90002                 lda inputbuf, y
  1495  8958 c924                   cmp #'$'
  1496  895a d001                   bne +
  1497  895c c8                     iny
  1498  895d 20ed8c             +   jsr chkhexbyte
  1499  8960 d006                   bne ++
  1500  8962 cc0d95             +   cpy len
  1501  8965 d001                   bne ++
  1502  8967 60                     rts
  1503  8968 ac0e95             ++  ldy savepos
  1504  896b a201                   ldx #1 ; Z false (NE)
  1505  896d 60                     rts
  1506                          
  1507                          chkindirectx:
  1508  896e 8c0e95                 sty savepos
  1509  8971 b90002                 lda inputbuf, y
  1510  8974 c928                   cmp #'('
  1511  8976 d038                   bne ++
  1512  8978 c8                     iny
  1513  8979 20978c                 jsr skipspaces
  1514  897c b90002                 lda inputbuf, y
  1515  897f c924                   cmp #'$'
  1516  8981 d001                   bne +
  1517  8983 c8                     iny
  1518  8984 20ed8c             +   jsr chkhexbyte
  1519  8987 d027                   bne ++
  1520  8989 20978c                 jsr skipspaces
  1521  898c b90002                 lda inputbuf, y
  1522  898f c92c                   cmp #','
  1523  8991 d01d                   bne ++
  1524  8993 c8                     iny
  1525  8994 20978c                 jsr skipspaces
  1526  8997 b90002                 lda inputbuf, y
  1527  899a c958                   cmp #'X'
  1528  899c d012                   bne ++
  1529  899e c8                     iny
  1530  899f 20978c                 jsr skipspaces
  1531  89a2 b90002                 lda inputbuf, y
  1532  89a5 c929                   cmp #')'
  1533  89a7 d007                   bne ++
  1534  89a9 c8                     iny
  1535  89aa cc0d95                 cpy len
  1536  89ad d001                   bne ++
  1537  89af 60                     rts
  1538  89b0 ac0e95             ++  ldy savepos
  1539  89b3 a201                   ldx #1 ; Z false (NE)
  1540  89b5 60                     rts
  1541                          
  1542                          chkindirecty:
  1543  89b6 8c0e95                 sty savepos
  1544  89b9 b90002                 lda inputbuf, y
  1545  89bc c928                   cmp #'('
  1546  89be d038                   bne ++
  1547  89c0 c8                     iny
  1548  89c1 20978c                 jsr skipspaces
  1549  89c4 b90002                 lda inputbuf, y
  1550  89c7 c924                   cmp #'$'
  1551  89c9 d001                   bne +
  1552  89cb c8                     iny
  1553  89cc 20ed8c             +   jsr chkhexbyte
  1554  89cf d027                   bne ++
  1555  89d1 20978c                 jsr skipspaces
  1556  89d4 b90002                 lda inputbuf, y
  1557  89d7 c929                   cmp #')'
  1558  89d9 d01d                   bne ++
  1559  89db c8                     iny
  1560  89dc 20978c                 jsr skipspaces
  1561  89df b90002                 lda inputbuf, y
  1562  89e2 c92c                   cmp #','
  1563  89e4 d012                   bne ++
  1564  89e6 c8                     iny
  1565  89e7 20978c                 jsr skipspaces
  1566  89ea b90002                 lda inputbuf, y
  1567  89ed c959                   cmp #'Y'
  1568  89ef d007                   bne ++
  1569  89f1 c8                     iny
  1570  89f2 cc0d95                 cpy len
  1571  89f5 d001                   bne ++
  1572  89f7 60                     rts
  1573  89f8 ac0e95             ++  ldy savepos
  1574  89fb a201                   ldx #1 ; Z false (NE)
  1575  89fd 60                     rts
  1576                          
  1577                          chkrelative:
  1578  89fe 8c0e95                 sty savepos
  1579  8a01 ae0995                 ldx inidx
  1580  8a04 e006                   cpx #6 ; BIT
  1581  8a06 f01f                   beq ++
  1582  8a08 bd628e                 lda inst0, x
  1583  8a0b c942                   cmp #'B'
  1584  8a0d d018                   bne ++
  1585  8a0f b90002                 lda inputbuf, y
  1586  8a12 c924                   cmp #'$'
  1587  8a14 d001                   bne +
  1588  8a16 c8                     iny
  1589  8a17 20e48c             +   jsr chkhexword
  1590  8a1a d00b                   bne ++
  1591  8a1c cc0d95                 cpy len
  1592  8a1f d006                   bne ++
  1593  8a21 202d8a                 jsr computeoffset
  1594  8a24 d001                   bne ++
  1595  8a26 60                     rts ; Z true (EQ)
  1596  8a27 ac0e95             ++  ldy savepos
  1597  8a2a a201                   ldx #1 ; Z false (NE)
  1598  8a2c 60                     rts
  1599                          
  1600                          computeoffset:
  1601                          ;   compute next address
  1602  8a2d ad198e                 lda ptr3+1
  1603  8a30 8d1395                 sta ptr2+1
  1604  8a33 ad188e                 lda ptr3
  1605  8a36 18                     clc
  1606  8a37 6902                   adc #2
  1607  8a39 8d1295                 sta ptr2
  1608  8a3c 9003                   bcc +
  1609  8a3e ee1395                 inc ptr2+1
  1610                          +  ; subtract argument
  1611  8a41 38                     sec
  1612  8a42 ad048e                 lda ptr1
  1613  8a45 ed1295                 sbc ptr2
  1614  8a48 8d0f95                 sta tmp2
  1615  8a4b ad058e                 lda ptr1+1
  1616  8a4e ed1395                 sbc ptr2+1
  1617  8a51 f00b                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1618  8a53 c9ff                   cmp #$FF
  1619  8a55 d00f                   bne failedoffset ; 0 and FF were only options so fail
  1620                              ; chkeck negative offset
  1621  8a57 ad0f95                 lda tmp2
  1622  8a5a 3007                   bmi successoffset ; branch if signed byte is negative
  1623  8a5c 1008                   bpl failedoffset ; otherwise fail
  1624                          chkoffsetto127:
  1625  8a5e ad0f95                 lda tmp2
  1626  8a61 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1627                          successoffset:
  1628  8a63 a900                   lda #0 ; Z true (EQ)
  1629  8a65 60                     rts
  1630                          failedoffset:
  1631  8a66 a901                   lda #1 ; Z false (NE)
  1632  8a68 60                     rts
  1633                          
  1634                          chkzeropage:
  1635  8a69 8c0e95                 sty savepos
  1636  8a6c b90002                 lda inputbuf, y
  1637  8a6f c924                   cmp #'$'
  1638  8a71 d001                   bne +
  1639  8a73 c8                     iny
  1640  8a74 20ed8c             +   jsr chkhexbyte
  1641  8a77 d006                   bne ++
  1642  8a79 cc0d95                 cpy len
  1643  8a7c d001                   bne ++
  1644  8a7e 60                     rts ; Z true (EQ)
  1645  8a7f ac0e95             ++  ldy savepos
  1646  8a82 a201                   ldx #1 ; Z false (NE)
  1647  8a84 60                     rts
  1648                          
  1649                          chkzeropagex:
  1650  8a85 8c0e95                 sty savepos
  1651  8a88 b90002                 lda inputbuf, y
  1652  8a8b c924                   cmp #'$'
  1653  8a8d d001                   bne +
  1654  8a8f c8                     iny
  1655  8a90 20ed8c             +   jsr chkhexbyte
  1656  8a93 d01c                   bne ++
  1657  8a95 20978c                 jsr skipspaces
  1658  8a98 b90002                 lda inputbuf, y
  1659  8a9b c92c                   cmp #','
  1660  8a9d d012                   bne ++
  1661  8a9f c8                     iny
  1662  8aa0 20978c                 jsr skipspaces
  1663  8aa3 b90002                 lda inputbuf, y
  1664  8aa6 c958                   cmp #'X'
  1665  8aa8 d007                   bne ++
  1666  8aaa c8                     iny
  1667  8aab cc0d95                 cpy len
  1668  8aae d001                   bne ++
  1669  8ab0 60                     rts ; Z true (EQ)
  1670  8ab1 ac0e95             ++  ldy savepos
  1671  8ab4 a201                   ldx #1 ; Z false (NE)
  1672  8ab6 60                     rts
  1673                          
  1674                          chkzeropagey:
  1675  8ab7 8c0e95                 sty savepos
  1676  8aba b90002                 lda inputbuf, y
  1677  8abd c924                   cmp #'$'
  1678  8abf d001                   bne +
  1679  8ac1 c8                     iny
  1680  8ac2 20ed8c             +   jsr chkhexbyte
  1681  8ac5 d01c                   bne ++
  1682  8ac7 20978c                 jsr skipspaces
  1683  8aca b90002                 lda inputbuf, y
  1684  8acd c92c                   cmp #','
  1685  8acf d012                   bne ++
  1686  8ad1 c8                     iny
  1687  8ad2 20978c                 jsr skipspaces
  1688  8ad5 b90002                 lda inputbuf, y
  1689  8ad8 c959                   cmp #'Y'
  1690  8ada d007                   bne ++
  1691  8adc c8                     iny
  1692  8add cc0d95                 cpy len
  1693  8ae0 d001                   bne ++
  1694  8ae2 60                     rts ; Z true (EQ)
  1695  8ae3 ac0e95             ++  ldy savepos
  1696  8ae6 a201                   ldx #1 ; Z false (NE)
  1697  8ae8 60                     rts
  1698                          
  1699                          chkabsolute:
  1700  8ae9 8c0e95                 sty savepos
  1701  8aec b90002                 lda inputbuf, y
  1702  8aef c924                   cmp #'$'
  1703  8af1 d001                   bne +
  1704  8af3 c8                     iny
  1705  8af4 20e48c             +   jsr chkhexword
  1706  8af7 d006                   bne ++
  1707  8af9 cc0d95                 cpy len
  1708  8afc d001                   bne ++
  1709  8afe 60                     rts ; Z true (EQ)
  1710  8aff ac0e95             ++  ldy savepos
  1711  8b02 a201                   ldx #1 ; Z false (NE)
  1712  8b04 60                     rts
  1713                          
  1714                          chkabsolutex:
  1715  8b05 8c0e95                 sty savepos
  1716  8b08 b90002                 lda inputbuf, y
  1717  8b0b c924                   cmp #'$'
  1718  8b0d d001                   bne +
  1719  8b0f c8                     iny
  1720  8b10 20e48c             +   jsr chkhexword
  1721  8b13 d01c                   bne ++
  1722  8b15 20978c                 jsr skipspaces
  1723  8b18 b90002                 lda inputbuf, y
  1724  8b1b c92c                   cmp #','
  1725  8b1d d012                   bne ++
  1726  8b1f c8                     iny
  1727  8b20 20978c                 jsr skipspaces
  1728  8b23 b90002                 lda inputbuf, y
  1729  8b26 c958                   cmp #'X'
  1730  8b28 d007                   bne ++
  1731  8b2a c8                     iny
  1732  8b2b cc0d95                 cpy len
  1733  8b2e d001                   bne ++
  1734  8b30 60                     rts ; Z true (EQ)
  1735  8b31 ac0e95             ++  ldy savepos
  1736  8b34 a201                   ldx #1 ; Z false (NE)
  1737  8b36 60                     rts
  1738                          
  1739                          chkabsolutey:
  1740  8b37 8c0e95                 sty savepos
  1741  8b3a b90002                 lda inputbuf, y
  1742  8b3d c924                   cmp #'$'
  1743  8b3f d001                   bne +
  1744  8b41 c8                     iny
  1745  8b42 20e48c             +   jsr chkhexword
  1746  8b45 d01c                   bne ++
  1747  8b47 20978c                 jsr skipspaces
  1748  8b4a b90002                 lda inputbuf, y
  1749  8b4d c92c                   cmp #','
  1750  8b4f d012                   bne ++
  1751  8b51 c8                     iny
  1752  8b52 20978c                 jsr skipspaces
  1753  8b55 b90002                 lda inputbuf, y
  1754  8b58 c959                   cmp #'Y'
  1755  8b5a d007                   bne ++
  1756  8b5c c8                     iny
  1757  8b5d cc0d95                 cpy len
  1758  8b60 d001                   bne ++
  1759  8b62 60                     rts ; Z true (EQ)
  1760  8b63 ac0e95             ++  ldy savepos
  1761  8b66 a201                   ldx #1 ; Z false (NE)
  1762  8b68 60                     rts
  1763                          
  1764                          chkindirect:
  1765  8b69 8c0e95                 sty savepos
  1766  8b6c b90002                 lda inputbuf, y
  1767  8b6f c928                   cmp #'('
  1768  8b71 d022                   bne ++
  1769  8b73 c8                     iny
  1770  8b74 20978c                 jsr skipspaces
  1771  8b77 b90002                 lda inputbuf, y
  1772  8b7a c924                   cmp #'$'
  1773  8b7c d001                   bne +
  1774  8b7e c8                     iny
  1775  8b7f 20e48c             +   jsr chkhexword
  1776  8b82 d011                   bne ++
  1777  8b84 20978c                 jsr skipspaces
  1778  8b87 b90002                 lda inputbuf, y
  1779  8b8a c929                   cmp #')'
  1780  8b8c d007                   bne ++
  1781  8b8e c8                     iny
  1782  8b8f cc0d95                 cpy len
  1783  8b92 d001                   bne ++
  1784  8b94 60                     rts ; Z true (EQ)
  1785  8b95 ac0e95             ++  ldy savepos
  1786  8b98 a201                   ldx #1 ; Z false (NE)
  1787  8b9a 60                     rts
  1788                          
  1789                          chkinstruction:
  1790  8b9b cc0d95                 cpy len
  1791  8b9e f02d                   beq ++
  1792  8ba0 8c1195                 sty tmp
  1793  8ba3 a237                   ldx #(ninst-1)
  1794  8ba5 b90002             -   lda inputbuf,y
  1795  8ba8 dd628e                 cmp inst0,x
  1796  8bab d01a                   bne +
  1797  8bad c8                     iny
  1798  8bae b90002                 lda inputbuf,y
  1799  8bb1 dd9a8e                 cmp inst1,x
  1800  8bb4 d011                   bne +
  1801  8bb6 c8                     iny
  1802  8bb7 b90002                 lda inputbuf,y
  1803  8bba ddd28e                 cmp inst2,x
  1804  8bbd d008                   bne +
  1805  8bbf c8                     iny
  1806  8bc0 8a                     txa
  1807  8bc1 8d0995                 sta inidx
  1808  8bc4 a200                   ldx #0
  1809  8bc6 60                     rts
  1810  8bc7 ac1195             +   ldy tmp
  1811  8bca ca                     dex
  1812  8bcb 10d8                   bpl -
  1813  8bcd a201               ++  ldx #1 ; Z false (NE)
  1814  8bcf 60                     rts
  1815                          
  1816                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1817                              ; and allows mode promotion
  1818  8bd0 20f98b                 jsr find_inst_and_mode2
  1819  8bd3 f023                   beq ++
  1820  8bd5 ad0a95                 lda mode
  1821  8bd8 c906                   cmp #6
  1822  8bda 901c                   bcc ++
  1823  8bdc c90a                   cmp #10
  1824  8bde b016                   bcs +
  1825  8be0 6903                   adc #3
  1826  8be2 8d0a95                 sta mode ; promote ZeroPage modes to Absolute modes
  1827  8be5 20f98b                 jsr find_inst_and_mode2 ; try again once
  1828  8be8 d00e                   bne ++
  1829  8bea ad0f95                 lda tmp2
  1830  8bed 8d048e                 sta ptr1
  1831  8bf0 a900                   lda #0
  1832  8bf2 8d058e                 sta ptr1+1
  1833  8bf5 60                     rts ; Z true (EQ)
  1834  8bf6 a201               +   ldx #1 ; Z false (NE)
  1835  8bf8 60                 ++  rts
  1836                          
  1837                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1838  8bf9 a296                   ldx #nopcodes-1
  1839  8bfb bdba90             -   lda instidx, x
  1840  8bfe bc5191                 ldy modeidx, x
  1841  8c01 cd0995                 cmp inidx
  1842  8c04 d00e                   bne +
  1843  8c06 cc0a95                 cpy mode
  1844  8c09 d009                   bne +
  1845  8c0b 8e0895                 stx opidx
  1846  8c0e 202382                 jsr getsize
  1847  8c11 a200                   ldx #0 ; Z true (EQ)
  1848  8c13 60                     rts
  1849  8c14 ca                 +   dex
  1850  8c15 e0ff                   cpx #$ff
  1851  8c17 d0e2                   bne -
  1852  8c19 a201                   ldx #1 ; Z false (NE)
  1853  8c1b 60                     rts
  1854                          
  1855                          executerun:
  1856  8c1c 68                     pla ; remove low byte return address
  1857  8c1d 68                     pla ; return high byte return address
  1858  8c1e 68                     pla ; again, we're really not returning
  1859  8c1f 68                     pla ; again, we're really not returning
  1860  8c20 20848d                 jsr newline
  1861                          !ifndef MINIMUM {
  1862                          ; any C64
  1863  8c23 206980                 jsr install_nmi64
  1864                          }
  1865                          +   ; restore registers
  1866  8c26 ae1c95                 ldx registerSP
  1867  8c29 9a                     txs
  1868  8c2a ad1d95                 lda registerSR
  1869  8c2d 48                     pha
  1870  8c2e ad1995                 lda registerA
  1871  8c31 ae1a95                 ldx registerX
  1872  8c34 ac1b95                 ldy registerY
  1873  8c37 28                     plp
  1874  8c38 6c048e                 jmp (ptr1)
  1875                          
  1876                          chkcontinuedis:
  1877  8c3b b90002                 lda inputbuf,y
  1878  8c3e c944                   cmp #'D'
  1879  8c40 d00a                   bne +
  1880  8c42 b90102                 lda inputbuf+1,y
  1881  8c45 c90d                   cmp #13
  1882  8c47 d003                   bne +
  1883  8c49 c8                     iny
  1884  8c4a a200                   ldx #0 ; restore Z set
  1885  8c4c 60                 +   rts
  1886                          
  1887                          chkcontinueasm:
  1888  8c4d b90002                 lda inputbuf,y
  1889  8c50 c941                   cmp #'A'
  1890  8c52 d00a                   bne +
  1891  8c54 b90102                 lda inputbuf+1,y
  1892  8c57 c90d                   cmp #13
  1893  8c59 d003                   bne +
  1894  8c5b c8                     iny
  1895  8c5c a200                   ldx #0 ; restore Z set
  1896  8c5e 60                 +   rts
  1897                          
  1898                          executedisassemble:
  1899  8c5f 68                     pla ; remove low byte return address
  1900  8c60 68                     pla ; return high byte return address
  1901  8c61 20848d                 jsr newline
  1902  8c64 4cbc81                 jmp disassemble
  1903                          
  1904                          reportnotimplemented:
  1905  8c67 a9a5                   lda #<notimplemented
  1906  8c69 a292                   ldx #>notimplemented
  1907  8c6b 4c5284                 jmp strout
  1908                          
  1909                          reporterr:
  1910  8c6e c000                   cpy #0
  1911  8c70 f008                   beq +
  1912  8c72 a920                   lda #' '
  1913  8c74 20d2ff             -   jsr charout
  1914  8c77 88                     dey
  1915  8c78 d0fa                   bne -
  1916  8c7a a93f               +   lda #'?'
  1917  8c7c 20d2ff                 jsr charout
  1918  8c7f a90d                   lda #13
  1919  8c81 20d2ff                 jsr charout
  1920  8c84 60                     rts
  1921                          
  1922                          chkspace:
  1923  8c85 b90002                 lda inputbuf, y
  1924                          !ifndef MINIMUM {
  1925                              ; skip SHIFT-SPACES too on Commodore
  1926  8c88 c9a0                   cmp #$A0
  1927  8c8a f004                   beq +
  1928                          }
  1929  8c8c c920                   cmp #$20
  1930  8c8e d006                   bne ++
  1931  8c90 c8                 +   iny
  1932  8c91 20978c                 jsr skipspaces
  1933  8c94 a900                   lda #0 ; set Z
  1934  8c96 60                 ++  rts
  1935                          
  1936                          skipspaces:
  1937  8c97 b90002             -   lda inputbuf, y
  1938                          !ifndef MINIMUM {
  1939                              ; skip SHIFT-SPACES too on Commodore
  1940  8c9a c9a0                   cmp #$A0
  1941  8c9c f004                   beq +
  1942                          }
  1943  8c9e c920                   cmp #$20
  1944  8ca0 d003                   bne ++
  1945  8ca2 c8                 +   iny
  1946  8ca3 d0f2                   bne -
  1947  8ca5 60                 ++  rts
  1948                          
  1949                          chkdot:
  1950  8ca6 b90002                 lda inputbuf, y
  1951  8ca9 c92e                   cmp #'.'
  1952  8cab d003                   bne +
  1953  8cad c8                     iny
  1954  8cae a900                   lda #0 ; Z true (EQ)
  1955  8cb0 60                 +   rts
  1956                          
  1957                          chkhelp:
  1958  8cb1 b90002                 lda inputbuf, y
  1959  8cb4 c93f                   cmp #'?'
  1960  8cb6 d003                   bne +
  1961  8cb8 c8                     iny
  1962  8cb9 a900                   lda #0 ; Z true (EQ)
  1963  8cbb 60                 +   rts
  1964                          
  1965                          chkcolon:
  1966  8cbc b90002                 lda inputbuf, y
  1967  8cbf c93a                   cmp #':'
  1968  8cc1 d003                   bne +
  1969  8cc3 c8                     iny
  1970  8cc4 a900                   lda #0 ; Z true (EQ)
  1971  8cc6 60                 +   rts
  1972                          
  1973                          chkhexbyteofsequence:
  1974  8cc7 201184                 jsr inputhexbyte
  1975  8cca 20e78c                 jsr +
  1976  8ccd d014                   bne ++ ; Z false (NE) if failed checks
  1977  8ccf cc0d95                 cpy len
  1978  8cd2 f00f                   beq ++ ; Z true (EQ) if end of input
  1979  8cd4 8d1195                 sta tmp
  1980  8cd7 b90002                 lda inputbuf,y
  1981  8cda c920                   cmp #$20
  1982  8cdc d005                   bne ++ ; Z false (NE) if not space
  1983  8cde ad1195                 lda tmp
  1984  8ce1 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1985  8ce3 60                 ++  rts
  1986                          
  1987                          chkhexword:
  1988                          chkhexaddr1:
  1989  8ce4 20e483                 jsr inputhexword
  1990  8ce7 a200               +   ldx #0 ; Z true (EQ)
  1991  8ce9 9001                   bcc +
  1992  8ceb e8                     inx ; Z false (NE)
  1993  8cec 60                 +   rts
  1994                          
  1995                          chkhexbyte:
  1996  8ced 98                     tya
  1997  8cee 48                     pha ; save y
  1998  8cef 201184                 jsr inputhexbyte
  1999  8cf2 b00f                   bcs +
  2000  8cf4 8d0f95                 sta tmp2
  2001  8cf7 203484                 jsr inputhexnybble
  2002  8cfa 9007                   bcc +
  2003  8cfc 68                     pla ; throw away saved y
  2004  8cfd ad0f95                 lda tmp2
  2005  8d00 a200                   ldx #0 ; Z true (EQ)
  2006  8d02 60                     rts
  2007  8d03 68                 +   pla
  2008  8d04 a8                     tay ; won't be zero, so Z false (NE)
  2009  8d05 60                     rts
  2010                          
  2011                          chkhexaddr2:
  2012  8d06 ad048e                 lda ptr1
  2013  8d09 48                     pha
  2014  8d0a ad058e                 lda ptr1+1
  2015  8d0d 48                     pha
  2016  8d0e 20e48c                 jsr chkhexaddr1
  2017  8d11 f005                   beq +
  2018  8d13 68                     pla
  2019  8d14 68                     pla
  2020  8d15 a901                   lda #1 ; Z false (NE)
  2021  8d17 60                     rts
  2022  8d18 ad048e             +   lda ptr1
  2023  8d1b 8d1295                 sta ptr2
  2024  8d1e ad058e                 lda ptr1+1
  2025  8d21 8d1395                 sta ptr2+1
  2026  8d24 68                     pla
  2027  8d25 8d058e                 sta ptr1+1
  2028  8d28 68                     pla
  2029  8d29 8d048e                 sta ptr1
  2030  8d2c a900                   lda #0 ; Z true (EQ)
  2031  8d2e 60                     rts
  2032                          
  2033                          chkbinbyte:
  2034  8d2f a208                   ldx #8
  2035  8d31 203f8d             -   jsr chkbindigit
  2036  8d34 d008                   bne +
  2037  8d36 ca                     dex
  2038  8d37 d0f8                   bne -
  2039  8d39 08                     php ; save Z true
  2040  8d3a ad0f95                 lda tmp2
  2041  8d3d 28                     plp ; restore Z true
  2042  8d3e 60                 +   rts
  2043                          
  2044                          chkbindigit:
  2045  8d3f b90002                 lda inputbuf, y
  2046  8d42 38                     sec
  2047  8d43 e930                   sbc #$30
  2048  8d45 900b                   bcc +
  2049  8d47 c902                   cmp #$02
  2050  8d49 b007                   bcs +
  2051  8d4b 4a                     lsr ; rotate bit value into C
  2052  8d4c 2e0f95                 rol tmp2 ; rotate bit value into tmp2
  2053  8d4f c8                     iny ; advance in buffer
  2054  8d50 a900                   lda #0 ; set Z
  2055  8d52 60                 +   rts
  2056                          
  2057                          chkaddr1cmd:
  2058  8d53 b90002                 lda inputbuf, y
  2059  8d56 c941               +   cmp #'A'
  2060  8d58 d00b                   bne +
  2061  8d5a be0102                 ldx inputbuf+1, y
  2062  8d5d e00d                   cpx #13
  2063  8d5f d004                   bne +
  2064  8d61 c8                     iny
  2065  8d62 4c0b88                 jmp executeassemble
  2066  8d65 c944               +   cmp #'D'
  2067  8d67 d00b                   bne +
  2068  8d69 be0102                 ldx inputbuf+1, y
  2069  8d6c e00d                   cpx #13
  2070  8d6e d004                   bne +
  2071  8d70 c8                     iny
  2072  8d71 4c5f8c                 jmp executedisassemble
  2073  8d74 c952               +   cmp #'R'
  2074  8d76 d00b                   bne +
  2075  8d78 be0102                 ldx inputbuf+1, y
  2076  8d7b e00d                   cpx #13
  2077  8d7d d004                   bne +
  2078  8d7f c8                     iny
  2079  8d80 4c1c8c                 jmp executerun
  2080  8d83 60                 +   rts
  2081                          
  2082                          newline:
  2083  8d84 a90d                   lda #13
  2084  8d86 4cd2ff                 jmp charout
  2085                          
  2086                          space:
  2087  8d89 a920                   lda #32
  2088  8d8b 4cd2ff                 jmp charout
  2089                          
  2090                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  2091                          ;     jsr $ffd2
  2092                          ;     pha
  2093                          ; -   lda $d011
  2094                          ;     bpl -
  2095                          ; -   lda $d011
  2096                          ;     bmi -
  2097                          ; -   lda $d011
  2098                          ;     bpl -
  2099                          ; -   lda $d011
  2100                          ;     bmi -
  2101                          ;     pla
  2102                          ;     rts
  2103                          
  2104                          save_registers:
  2105  8d8e 08                     php
  2106  8d8f 8d1995                 sta registerA
  2107  8d92 8e1a95                 stx registerX
  2108  8d95 8c1b95                 sty registerY
  2109  8d98 68                     pla
  2110  8d99 8d1d95                 sta registerSR
  2111  8d9c ba                     tsx
  2112  8d9d 8e1c95                 stx registerSP
  2113  8da0 4ca58d                 jmp +
  2114                          
  2115                          execute_display_registers:
  2116  8da3 68                     pla ; remove return address
  2117  8da4 68                     pla
  2118                          +
  2119                              ; need some normality
  2120  8da5 58                     cli
  2121  8da6 d8                     cld
  2122                          
  2123  8da7 20848d                 jsr newline
  2124  8daa 20b38d                 jsr display_registers
  2125                          !ifndef MINIMUM {
  2126                              ; any C64
  2127  8dad 208480                 jsr uninstall_nmi64
  2128                          }
  2129  8db0 4c6080                 jmp input_loop
  2130                          
  2131                          ; PC   NV-BDIZC .A .X .Y .S
  2132                          ; 1234 10111011 01 02 03 FF
  2133                          display_registers:
  2134  8db3 a9eb                   lda #<reg_header
  2135  8db5 a294                   ldx #>reg_header
  2136  8db7 205284                 jsr strout
  2137  8dba ad1e95                 lda registerPC
  2138  8dbd ae1f95                 ldx registerPC+1
  2139  8dc0 20c883                 jsr disphexword
  2140  8dc3 20898d                 jsr space
  2141  8dc6 ad1d95                 lda registerSR
  2142  8dc9 20b383                 jsr dispbinbyte
  2143  8dcc 20898d                 jsr space
  2144  8dcf ad1995                 lda registerA
  2145  8dd2 20ce83                 jsr disphexbyte
  2146  8dd5 20898d                 jsr space
  2147  8dd8 ad1a95                 lda registerX
  2148  8ddb 20ce83                 jsr disphexbyte
  2149  8dde 20898d                 jsr space
  2150  8de1 ad1b95                 lda registerY
  2151  8de4 20ce83                 jsr disphexbyte
  2152  8de7 20898d                 jsr space
  2153  8dea ad1c95                 lda registerSP
  2154  8ded 20ce83                 jsr disphexbyte
  2155  8df0 4c848d                 jmp newline
  2156                          
  2157                          !ifdef MINIMUM {
  2158                          
  2159                          lda_at_ptr1_y:
  2160                              lda (ptr1),y
  2161                              rts
  2162                          
  2163                          sta_at_ptr1_y:
  2164                              sta (ptr1),y
  2165                              rts
  2166                          
  2167                          lda_at_ptr3_y:
  2168                              lda (ptr3),y
  2169                              rts
  2170                          
  2171                          sta_at_ptr3_y:
  2172                              sta (ptr3),y
  2173                              rts
  2174                          
  2175                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2176                          ;; MC6850
  2177                          UART_DATA=$FFF8
  2178                          UART_STCR=$FFF9
  2179                          
  2180                          UART_INIT:
  2181                          	ldx #0b00000111 ; 11=reset device
  2182                          	stx UART_STCR
  2183                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  2184                          	sta UART_STCR
  2185                          	rts
  2186                          UART_OUT:
  2187                          	pha
  2188                          -	lda UART_STCR
  2189                          	and #2
  2190                          	beq - ; branch if TDRE=0, not finished transmitting
  2191                          	pla
  2192                          	pha
  2193                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  2194                          	sta UART_DATA
  2195                          	pla
  2196                          	rts
  2197                          UART_IN:
  2198                          -	lda UART_STCR
  2199                          	and #1
  2200                          	beq - ; branch if TDRF=0, not received
  2201                          	lda UART_DATA
  2202                          	; software "CAPS LOCK" because wozmon expects only uppercase
  2203                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  2204                          	beq BREAK
  2205                              ; force lowercase alphabet to uppercase
  2206                              cmp #'a'
  2207                          	bcc +
  2208                          	cmp #'z'+1
  2209                          	bcs +
  2210                          	eor #$20
  2211                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  2212                           	rts
  2213                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  2214                          	pha ; save A
  2215                          	lda UART_STCR
  2216                          	lsr ; put rightmost bit in carry
  2217                          	pla ; restore A affects flags
  2218                          	ror ; move carry to left bit, right bit to carry
  2219                          	php ; push processor to save N
  2220                          	rol ; restore A affects flags
  2221                          	plp ; pull processor to restore N
  2222                          	rts
  2223                          
  2224                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2225                          ; Processor start and interrupts
  2226                          
  2227                          NMI: ; unused on minimum (no source of interrupt)
  2228                              rti
  2229                          
  2230                          IRQ:
  2231                              pha
  2232                              php
  2233                              pla
  2234                              and #$10
  2235                              beq ++ ; not break
  2236                          ;BREAK HANDLER
  2237                              pla
  2238                              sta registerA
  2239                              pla
  2240                              sta registerSR
  2241                              pla
  2242                              cld
  2243                              sec
  2244                              sbc #2
  2245                              sta registerPC
  2246                              pla
  2247                              sbc #0
  2248                              sta registerPC+1
  2249                              lda #>save_registers
  2250                              pha
  2251                              lda #<save_registers
  2252                              pha
  2253                              lda registerSR
  2254                              pha
  2255                              lda registerA
  2256                              pha
  2257                          ++  pla
  2258                              rti
  2259                          
  2260                          BREAK:
  2261                              jmp RESET
  2262                          
  2263                          RESET:
  2264                              cld
  2265                              ldx #$FF
  2266                              txs
  2267                              jsr JUART_INIT
  2268                              cli
  2269                              jmp start
  2270                          ; !ifdef MINIMUM
  2271                          } else { ; not MINIMUM
  2272                          
  2273                          ptr1 = sta_at_ptr1_y + 1 ; and + 2
  2274                          
  2275                          lda_at_ptr1_y:
  2276  8df3 ad048e                 lda ptr1
  2277  8df6 8d008e                 sta lda_ptr1_op+1
  2278  8df9 ad058e                 lda ptr1+1
  2279  8dfc 8d018e                 sta lda_ptr1_op+2
  2280                          lda_ptr1_op:
  2281  8dff b9ffff                 lda $ffff, y
  2282  8e02 60                     rts
  2283                          
  2284                          sta_at_ptr1_y:
  2285  8e03 99ffff                 sta $ffff, y
  2286  8e06 60                     rts
  2287                          
  2288                          ptr3 = sta_at_ptr3_y + 1 ; and + 2
  2289                          
  2290                          lda_at_ptr3_y:
  2291  8e07 ad188e                 lda ptr3
  2292  8e0a 8d148e                 sta lda_ptr3_op+1
  2293  8e0d ad198e                 lda ptr3+1
  2294  8e10 8d158e                 sta lda_ptr3_op+2
  2295                          lda_ptr3_op:
  2296  8e13 b9ffff                 lda $ffff, y
  2297  8e16 60                     rts
  2298                          
  2299                          sta_at_ptr3_y:
  2300  8e17 99ffff                 sta $ffff, y
  2301  8e1a 60                     rts
  2302                          
  2303                          nmi64:
  2304  8e1b 78                     sei
  2305  8e1c 8d1995                 sta registerA
  2306  8e1f 68                     pla
  2307  8e20 8d1d95                 sta registerSR
  2308  8e23 68                     pla
  2309  8e24 d8                     cld
  2310  8e25 8d1e95                 sta registerPC
  2311  8e28 68                     pla
  2312  8e29 8d1f95                 sta registerPC+1
  2313  8e2c a98d                   lda #>save_registers
  2314  8e2e 48                     pha
  2315  8e2f a98e                   lda #<save_registers
  2316  8e31 48                     pha
  2317  8e32 ad1d95                 lda registerSR
  2318  8e35 48                     pha
  2319  8e36 ad1995                 lda registerA
  2320  8e39 40                     rti
  2321                          
  2322                          brk64:
  2323  8e3a 68                     pla
  2324  8e3b a8                     tay
  2325  8e3c 68                     pla
  2326  8e3d aa                     tax
  2327  8e3e 68                     pla
  2328  8e3f 8d1995                 sta registerA
  2329  8e42 68                     pla
  2330  8e43 8d1d95                 sta registerSR
  2331  8e46 68                     pla
  2332  8e47 d8                     cld
  2333  8e48 38                     sec
  2334  8e49 e902                   sbc #2
  2335  8e4b 8d1e95                 sta registerPC
  2336  8e4e 68                     pla
  2337  8e4f e900                   sbc #0
  2338  8e51 8d1f95                 sta registerPC+1
  2339  8e54 a98d                   lda #>save_registers
  2340  8e56 48                     pha
  2341  8e57 a98e                   lda #<save_registers
  2342  8e59 48                     pha
  2343  8e5a ad1d95                 lda registerSR
  2344  8e5d 48                     pha
  2345  8e5e ad1995                 lda registerA
  2346  8e61 40                     rti
  2347                          }
  2348                          
  2349                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2350                          ; data
  2351                          
  2352                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  2353                          ninst = 56
  2354  8e62 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  2355  8e9a 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  2356  8ed2 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  2357                          
  2358                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  2359                          mode_jmptable:
  2360  8f0a b882               !word dispModeAcc-1; 0 Accumulator 1
  2361  8f0c bd82               !word dispModeNone-1 ; 1 None 1
  2362  8f0e be82               !word dispModeImm-1 ; 2 Immediate 2
  2363  8f10 d082               !word dispModeIndX-1 ; 3 IndirectX 2
  2364  8f12 f182               !word dispModeIndY-1 ; 4 IndirectY 2
  2365  8f14 1283               !word dispModeRel-1 ; 5 Relative 2
  2366  8f16 c382               !word dispModeZP-1 ; 6 ZeroPage 2
  2367  8f18 5d83               !word dispModeZPX-1 ; 7 ZeroPageX 2
  2368  8f1a 6a83               !word dispModeZPY-1 ; 8 ZeroPageY 2
  2369  8f1c 7783               !word dispModeAbs-1 ; 9 Absolute 3
  2370  8f1e 8b83               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  2371  8f20 9883               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  2372  8f22 a583               !word dispModeInd-1 ; 12 Indirect 3
  2373                          
  2374                          nmodes = 13
  2375                          
  2376                          mode_sorted:
  2377  8f24 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  2378                          
  2379                          !ifdef MINIMUM {
  2380                          mode_0: !text "Accumulator", 0, "A", 0
  2381                          mode_1: !text "None", 0, 8, 0
  2382                          mode_2: !text "Immediate", 0, "#$12", 0
  2383                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  2384                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  2385                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  2386                          mode_6: !text "ZeroPage", 0, "$12", 0
  2387                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  2388                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  2389                          mode_9: !text "Absolute", 0, "$1234", 0
  2390                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  2391                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  2392                          mode_12: !text "Indirect", 0, "($1234)", 0
  2393                          } else {
  2394  8f31 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2395  8f3f 4e4f4e45001400     mode_1: !text "NONE", 0, 20, 0
  2396  8f46 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2397  8f55 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2398  8f67 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2399  8f79 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2400  8f98 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2401  8fa5 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2402  8fb5 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2403  8fc5 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2404  8fd4 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2405  8fe6 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2406  8ff8 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2407                          }
  2408                          
  2409                          modes: ; table for easily displaying each mode_example
  2410  9009 318f               !word mode_0
  2411  900b 3f8f               !word mode_1
  2412  900d 468f               !word mode_2
  2413  900f 558f               !word mode_3
  2414  9011 678f               !word mode_4
  2415  9013 798f               !word mode_5
  2416  9015 988f               !word mode_6
  2417  9017 a58f               !word mode_7
  2418  9019 b58f               !word mode_8
  2419  901b c58f               !word mode_9
  2420  901d d48f               !word mode_10
  2421  901f e68f               !word mode_11
  2422  9021 f88f               !word mode_12
  2423                          
  2424                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2425                          nopcodes = 151
  2426  9023 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2427  90ba 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2428  9151 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2429                          
  2430                          copyright
  2431                          ;                  1         2         3         4
  2432                          ;         1234567890123456789012345678901234567890
  2433  91e8 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2434                          !ifdef C64TERMINAL {
  2435                              !text 13, "(TERMINAL VERSION)"
  2436                          }
  2437  9208 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2438  922e 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2439  9245 00                 !text 0
  2440                          
  2441                          firsthelp
  2442                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2443  9246 0d0d               !text 13, 13
  2444  9248 54595045203f2046...!text "TYPE ? FOR HELP"
  2445  9257 0d00               !text 13, 0
  2446                          
  2447                          !ifndef MINIMUM {
  2448                          ; C64 only
  2449                          extra_help:
  2450  9259 5820202020202020...    !text "X           (EXIT MONITOR)", 13
  2451  9274 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S  (SAVE)", 13
  2452  9296 00                     !text 0
  2453                          
  2454                          !ifdef C64SCREEN {
  2455  9297 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  2456  929e 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  2457                          }
  2458                          
  2459                          }
  2460                          
  2461  92a5 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2462                          
  2463                          generalhelp
  2464  92b6 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2465  92dc 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2466  9301 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2467  9324 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2468  934c 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2469  9368 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2470  9388 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2471  93aa 00                 !text 0
  2472                          generalhelp2
  2473  93ab 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2474  93d0 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2475  93ec 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2476  940b 3f41202020202020...!text "?A          (LIST 6502 INSTRUCTIONS)", 13
  2477  9430 3f41444320202020...!text "?ADC        (/ADC/ ADDRESSING MODES)", 13
  2478  9455 3f4d4f4445202020...!text "?MODE       (ADDRESSING MODES)", 13
  2479  9474 00                 !text 0
  2480                          generalhelp3
  2481  9475 3f2e202020202020...!text "?.          (DISPLAY REGISTERS)", 13
  2482  9495 2e31323334202020...!text ".1234       (MODIFY PC,FLAGS,REGISTERS)", 13
  2483  94bd 2e413a3031202020...!text ".A:01       (MODIFY REGISTER A,X,Y,S,P)", 13
  2484  94e5 00                 !text 0
  2485                          
  2486  94e6 4d4f444500         modes_keyword !text "MODE", 0
  2487                          
  2488  94eb 2050432020204e56...reg_header !text " PC   NV-BDIZC .A .X .Y .S", 13, '.', 0
  2489                          
  2490                          !ifdef MINIMUM {
  2491                          opidx=$dfed
  2492                          inidx=$dfee
  2493                          mode=$dfef
  2494                          size=$dff0
  2495                          count=$dff1
  2496                          len=$dff2
  2497                          savepos=$dff3
  2498                          tmp2=$dff4
  2499                          flag=$dff5
  2500                          ptr2=$dff6;/7
  2501                          tmp=$dff8
  2502                          registerA = $dff9
  2503                          registerX = $dffa
  2504                          registerY = $dffb
  2505                          registerSP = $dffc
  2506                          registerSR = $dffd
  2507                          registerPC = $dffe;/f
  2508                          } else {
  2509  9508 00                 opidx !byte 0
  2510  9509 00                 inidx !byte 0
  2511  950a 00                 mode !byte 0
  2512  950b 00                 size !byte 0
  2513  950c 00                 count !byte 0
  2514  950d 00                 len !byte 0
  2515  950e 00                 savepos !byte 0
  2516  950f 00                 tmp2 !byte 0
  2517  9510 00                 flag !byte 0
  2518  9511 00                 tmp !byte 0
  2519  9512 0000               ptr2 !word 0
  2520  9514 0000               savebrkvector !word 0
  2521  9516 0000               savenmivector !word 0
  2522  9518 00                 drive !byte 0
  2523  9519 00                 registerA !byte 0
  2524  951a 00                 registerX !byte 0
  2525  951b 00                 registerY !byte 0
  2526  951c 00                 registerSP !byte 0
  2527  951d 00                 registerSR !byte 0
  2528  951e 0000               registerPC !word 0
  2529                          }
  2530                          
  2531                          !ifdef MINIMUM {
  2532                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2533                          ; JUMP table for some stability
  2534                          * = $FFEE
  2535                          JUART_INIT: JMP UART_INIT
  2536                          JUART_OUT: JMP UART_OUT
  2537                          JUART_IN: JMP UART_IN
  2538                          JUART_CHK: JMP UART_CHK
  2539                          
  2540                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2541                          ; 6502 vectors
  2542                          * = $fffa
  2543                              !word NMI
  2544                              !word RESET
  2545                              !word IRQ
  2546                          } else { // C64
  2547                              !if * > $a000 {
  2548                                  !error "code/data overran $a000"
  2549                              }
  2550                          }
  2551                          
  2552                          finish = *
