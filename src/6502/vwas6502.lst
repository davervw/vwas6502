
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGET  C64 and...                    *        <<<
     7                          ;; >>>       ** INCLUDES VERSION FOR 6502+MC6850 minimum system *        <<<
     8                          ;; >>>       *   60K(RAM),4K(ROM), 2 bytes IO for MC6850 UART   *        <<<
     9                          ;; >>>       ****************************************************        <<<
    10                          ;;
    11                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    12                          ;; MIT License
    13                          ;;
    14                          ;; Copyright (c) 2024 David R. Van Wagner
    15                          ;; davevw.com
    16                          ;;
    17                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    18                          ;; of this software and associated documentation files (the "Software"), to deal
    19                          ;; in the Software without restriction, including without limitation the rights
    20                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    21                          ;; copies of the Software, and to permit persons to whom the Software is
    22                          ;; furnished to do so, subject to the following conditions:
    23                          ;;
    24                          ;; The above copyright notice and this permission notice shall be included in all
    25                          ;; copies or substantial portions of the Software.
    26                          ;;
    27                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    28                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    29                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    30                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    31                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    32                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    33                          ;; SOFTWARE.
    34                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    35                          
    36                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ; Important! define exactly ONE target (set in build.sh)
    39                          ;C64SCREEN = 1
    40                          ;C64TERMINAL = 1
    41                          ;MINIMUM = 1
    42                          
    43                          ; options (set in build.sh)
    44                          ;NEEDECHO = 0
    45                          
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;; _
    49                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    50                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    51                          ;; 1000 (display memory at $1000)
    52                          ;; 1000.2000 (display memory range $1000 to $2000)
    53                          ;; 1000. (display next screenful of memory starting at $1000)
    54                          ;; . (display next screenful of memory)
    55                          ;; 1000 r (JMP $1000)
    56                          ;; 1000: 01 02 03 (modify memory)
    57                          ;; (NEW SYNTAX)
    58                          ;; 1000 d (disassemble starting at address, for screenful)
    59                          ;; d (continue disassembling from last address)
    60                          ;; 1000 a (assemble starting at, interactive until empty line) 
    61                          ;; (FUTURE SYNTAX, not implemented)
    62                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    63                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    64                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    65                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    66                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    67                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    68                          ;; 1000.2000 "filename" 08 save (save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, can abbreviate to s)
    69                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    70                          ;; ? (commands help)
    71                          ;; ? a (list instructions available)
    72                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    73                          ;; ? mode (show addressing modes example syntax for 6502)
    74                          ;;
    75                          ;; (INTERACTIVE ASSEMBLER)
    76                          ;; 1000 _
    77                          ;;      ADC #$12
    78                          ;; 1000 69 12    ADC #$12
    79                          ;; 1002 _
    80                          ;;      JSR $1234
    81                          ;; 1002 20 34 12 JSR $1234
    82                          ;; 1005 _
    83                          ;;      RTS
    84                          ;; 1005 60       RTS
    85                          ;; 1006 _
    86                          ;;      XYZ
    87                          ;;      XYZ ?
    88                          ;; 1006 _
    89                          ;; _
    90                          ;;
    91                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    92                          ;; and can cursor up to revise, 
    93                          ;;
    94                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    95                          ;;
    96                          
    97                          ; global
    98                          inputbuf=$0200
    99                          
   100                          
   101                          ; kernal/system calls
   102                          
   103                          !ifdef MINIMUM {
   104                          charout=JUART_OUT
   105                          getkey=JUART_IN
   106                          }
   107                          
   108                          !ifdef C64SCREEN {
   109                          charin=$ffcf ; screen editor
   110                          charout=$ffd2
   111                          getkey=$ffe4
   112                          }
   113                          
   114                          !ifdef C64TERMINAL {
   115                          charout=$ffd2
   116                          getkey=$ffe4
   117                          }
   118                          
   119                          ; zeropage
   120                          !ifdef MINIMUM {
   121                          opidx=$f0
   122                          inidx=$f1
   123                          mode=$f2
   124                          size=$f3
   125                          ptr3=$f4 ; and $f5
   126                          count=$f6
   127                          len=$f7
   128                          savepos=$f8
   129                          tmp2=$f9
   130                          flag=$fa
   131                          ptr1=$fb ; and $fc
   132                          ptr2=$fd ; and $fe
   133                          tmp=$ff
   134                          } else {
   135                          ptr1=$fb ; and $fc
   136                          ptr2=$fd ; and $fe
   137                          tmp=$ff
   138                          opidx=$22
   139                          inidx=$23
   140                          mode=$24
   141                          size=$25
   142                          ptr3=$26 ; and $27
   143                          count=$a3
   144                          len=$a4
   145                          savepos=$a5
   146                          tmp2=$a6
   147                          flag=$a7
   148                          }
   149                          
   150                          !ifdef MINIMUM {
   151                          *=$f000
   152                          } else {
   153                          *=$c000
   154                          }
   155                          start:
   156  c000 a987                   lda #<copyright
   157  c002 a2cd                   ldx #>copyright
   158  c004 2087c2                 jsr strout
   159  c007 a9e5                   lda #<firsthelp
   160  c009 a2cd                   ldx #>firsthelp
   161  c00b 2087c2                 jsr strout
   162  c00e 20a2c2             -   jsr inputline
   163  c011 20b0c2                 jsr parseline
   164  c014 4c0ec0                 jmp -
   165                          
   166                          test: ; all the addressing modes here for testing disassembly
   167  c017 ea                     nop
   168  c018 ad3412                 lda $1234
   169  c01b bd3412                 lda $1234,x
   170  c01e b93412                 lda $1234,y
   171  c021 0a                     asl
   172  c022 a912                   lda #$12
   173  c024 a112                   lda ($12,x)
   174  c026 b112                   lda ($12),y
   175  c028 6c3412                 jmp ($1234)
   176  c02b d0fe               -   bne -
   177  c02d a512                   lda $12
   178  c02f b512                   lda $12,x
   179  c031 b612                   ldx $12,y
   180  c033 ff                     !byte $FF ; unknown
   181                          
   182                          disassemble:
   183  c034 a917                   lda #23
   184  c036 85a3                   sta count
   185  c038 a000               -   ldy #0
   186  c03a b1fb                   lda (ptr1),y
   187  c03c 206ec0                 jsr find_opcode
   188  c03f 20d1c0                 jsr disp_current
   189  c042 a525                   lda size
   190  c044 1002                   bpl +
   191  c046 a901                   lda #1
   192  c048 18                 +   clc
   193  c049 65fb                   adc ptr1
   194  c04b 85fb                   sta ptr1
   195  c04d 9002                   bcc +
   196  c04f e6fc                   inc ptr1+1
   197  c051 c6a3               +   dec count
   198  c053 d0e3                   bne -
   199                          !ifdef C64SCREEN {
   200  c055 a5fb                   lda ptr1
   201  c057 a6fc                   ldx ptr1+1
   202  c059 200ac2                 jsr disphexword
   203  c05c a9a5                   lda #<page_disassemble
   204  c05e a2cf                   ldx #>page_disassemble
   205  c060 4c87c2                 jmp strout
   206                          } else {    
   207                              rts
   208                          }
   209                          
   210                          compareptrs:
   211  c063 a5fc                   lda ptr1+1
   212  c065 c5fe                   cmp ptr2+1
   213  c067 d004                   bne +
   214  c069 a5fb                   lda ptr1
   215  c06b c5fd                   cmp ptr2
   216  c06d 60                 +   rts
   217                          
   218                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   219                          ; and properties updated in ZP globals size,inidx,opidx,mode
   220  c06e a097                   ldy #nopcodes
   221  c070 a296                   ldx #nopcodes-1
   222  c072 ddc2cb             -   cmp opcodes,x
   223  c075 f00f                   beq +
   224  c077 ca                     dex
   225  c078 88                     dey
   226  c079 d0f7                   bne -
   227  c07b 18                     clc
   228  c07c a901                   lda #1
   229  c07e 8525                   sta size
   230  c080 a9ff                   lda #$FF
   231  c082 aa                     tax
   232  c083 a8                     tay
   233  c084 900a                   bcc ++
   234  c086 bd59cc             +   lda instidx, x
   235  c089 bcf0cc                 ldy modeidx, x
   236  c08c 2097c0                 jsr getsize
   237  c08f 38                     sec
   238  c090 8523               ++  sta inidx
   239  c092 8622                   stx opidx
   240  c094 8424                   sty mode
   241  c096 60                     rts
   242                          
   243                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   244                              ; result returned in size
   245  c097 48                     pha
   246  c098 a901                   lda #1
   247  c09a 8525                   sta size
   248  c09c 68                     pla
   249  c09d c002                   cpy #2 // Immediate
   250  c09f 9008                   bcc +
   251  c0a1 e625                   inc size
   252  c0a3 c009                   cpy #9 // Absolute
   253  c0a5 9002                   bcc +
   254  c0a7 e625                   inc size
   255  c0a9 60                 +   rts
   256                          
   257                          disp_opcode: ; .A opcode byte
   258  c0aa 206ec0                 jsr find_opcode
   259  c0ad 8a                     txa
   260                              ; fall through to display instruction
   261                          
   262                          dispinst: ; .A instruction index 0..55, note modifies A and X
   263  c0ae aa                     tax
   264  c0af e038                   cpx #ninst
   265  c0b1 b012                   bcs +
   266  c0b3 bd02ca                 lda inst0, x
   267  c0b6 20d2ff                 jsr charout
   268  c0b9 bd3aca                 lda inst1, x
   269  c0bc 20d2ff                 jsr charout
   270  c0bf bd72ca                 lda inst2, x
   271  c0c2 4cd2ff                 jmp charout
   272  c0c5 a93f               +   lda #'?'
   273  c0c7 20d2ff                 jsr charout
   274  c0ca 20d2ff                 jsr charout
   275  c0cd 20d2ff                 jsr charout
   276  c0d0 60                     rts
   277                          
   278                          disp_current:
   279  c0d1 a5fb                   lda ptr1
   280  c0d3 a6fc                   ldx ptr1+1
   281  c0d5 200ac2                 jsr disphexword
   282  c0d8 a920                   lda #$20
   283  c0da 20d2ff                 jsr charout
   284  c0dd a000                   ldy #0
   285  c0df a625                   ldx size
   286  c0e1 b1fb               -   lda (ptr1),y
   287  c0e3 2010c2                 jsr disphexbyte
   288  c0e6 a920                   lda #$20
   289  c0e8 20d2ff                 jsr charout
   290  c0eb c8                     iny
   291  c0ec ca                     dex
   292  c0ed d0f2                   bne -
   293  c0ef c003               -   cpy #3
   294  c0f1 f00e                   beq +
   295  c0f3 a920                   lda #$20
   296  c0f5 20d2ff                 jsr charout
   297  c0f8 20d2ff                 jsr charout
   298  c0fb 20d2ff                 jsr charout
   299  c0fe c8                     iny
   300  c0ff d0ee                   bne -
   301  c101 a523               +   lda inidx
   302  c103 20aec0                 jsr dispinst
   303  c106 a920                   lda #$20
   304  c108 20d2ff                 jsr charout
   305  c10b 2013c1                 jsr disp_mode
   306  c10e a90d                   lda #13
   307  c110 4cd2ff                 jmp charout
   308                          
   309                          disp_mode
   310  c113 a524                   lda mode
   311  c115 c90d                   cmp #13
   312  c117 b00a                   bcs +
   313  c119 0a                     asl
   314  c11a aa                     tax
   315  c11b bdabca                 lda mode_jmptable+1,x
   316  c11e 48                     pha
   317  c11f bdaaca                 lda mode_jmptable,x
   318  c122 48                     pha
   319  c123 60                 +   rts
   320                          
   321                          dispModeAcc:
   322  c124 a941                   lda #'A'
   323  c126 4cd2ff                 jmp charout
   324                          
   325                          dispModeNone:
   326  c129 60                     rts
   327                          
   328                          dispModeImm:
   329  c12a a923                   lda #'#'
   330  c12c 20d2ff                 jsr charout
   331                          dispModeZP:
   332  c12f a924                   lda #'$'
   333  c131 20d2ff                 jsr charout
   334  c134 a001                   ldy #1
   335  c136 b1fb                   lda (ptr1),y
   336  c138 4c10c2                 jmp disphexbyte
   337                          
   338                          dispModeIndX:
   339  c13b a928                   lda #'('
   340  c13d 20d2ff                 jsr charout
   341  c140 a924                   lda #'$'
   342  c142 20d2ff                 jsr charout
   343  c145 a001                   ldy #1
   344  c147 b1fb                   lda (ptr1),y
   345  c149 2010c2                 jsr disphexbyte
   346  c14c a92c                   lda #','
   347  c14e 20d2ff                 jsr charout
   348  c151 a958                   lda #'X'
   349  c153 20d2ff                 jsr charout
   350  c156 a929                   lda #')'
   351  c158 4cd2ff                 jmp charout
   352                          
   353                          dispModeIndY:
   354  c15b a928                   lda #'('
   355  c15d 20d2ff                 jsr charout
   356  c160 a924                   lda #'$'
   357  c162 20d2ff                 jsr charout
   358  c165 a001                   ldy #1
   359  c167 b1fb                   lda (ptr1),y
   360  c169 2010c2                 jsr disphexbyte
   361  c16c a929                   lda #')'
   362  c16e 20d2ff                 jsr charout
   363  c171 a92c                   lda #','
   364  c173 20d2ff                 jsr charout
   365  c176 a959                   lda #'Y'
   366  c178 4cd2ff                 jmp charout
   367                          
   368                          dispModeRel:
   369  c17b a924                   lda #'$'
   370  c17d 20d2ff                 jsr charout
   371  c180 18                     clc
   372  c181 a5fb                   lda ptr1
   373  c183 6902                   adc #2
   374  c185 8526                   sta ptr3
   375  c187 a5fc                   lda ptr1+1
   376  c189 6900                   adc #0
   377  c18b 8527                   sta ptr3+1
   378  c18d a001                   ldy #1
   379  c18f b1fb                   lda (ptr1),y
   380  c191 1014                   bpl +
   381                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   382  c193 49ff                   eor #$FF ; inverse
   383  c195 18                     clc
   384  c196 6901                   adc #1 ; complete getting absolute value from two's complement
   385  c198 85ff                   sta tmp
   386  c19a 38                     sec
   387  c19b a526                   lda ptr3
   388  c19d e5ff                   sbc tmp
   389  c19f 8526                   sta ptr3
   390  c1a1 b00d                   bcs ++
   391  c1a3 c627                   dec ptr3+1
   392  c1a5 9009                   bcc ++
   393  c1a7 18                 +   clc ; simple case of adding
   394  c1a8 6526                   adc ptr3
   395  c1aa 8526                   sta ptr3
   396  c1ac 9002                   bcc ++
   397  c1ae e627                   inc ptr3+1
   398  c1b0 a526               ++  lda ptr3
   399  c1b2 a627                   ldx ptr3+1
   400  c1b4 4c0ac2                 jmp disphexword
   401                          
   402                          dispModeZPX:
   403  c1b7 202fc1                 jsr dispModeZP
   404  c1ba a92c                   lda #','
   405  c1bc 20d2ff                 jsr charout
   406  c1bf a958                   lda #'X'
   407  c1c1 4cd2ff                 jmp charout
   408                          
   409                          dispModeZPY:
   410  c1c4 202fc1                 jsr dispModeZP
   411  c1c7 a92c                   lda #','
   412  c1c9 20d2ff                 jsr charout
   413  c1cc a959                   lda #'Y'
   414  c1ce 4cd2ff                 jmp charout
   415                          
   416                          dispModeAbs:
   417  c1d1 a924                   lda #'$'
   418  c1d3 20d2ff                 jsr charout
   419  c1d6 a001                   ldy #1
   420  c1d8 b1fb                   lda (ptr1),y
   421  c1da 48                     pha
   422  c1db c8                     iny
   423  c1dc b1fb                   lda (ptr1),y
   424  c1de aa                     tax
   425  c1df 68                     pla
   426  c1e0 4c0ac2                 jmp disphexword
   427                          
   428                          dispModeAbsX:
   429  c1e3 20d1c1                 jsr dispModeAbs
   430  c1e6 a92c                   lda #','
   431  c1e8 20d2ff                 jsr charout
   432  c1eb a958                   lda #'X'
   433  c1ed 4cd2ff                 jmp charout
   434                          
   435                          dispModeAbsY:
   436  c1f0 20d1c1                 jsr dispModeAbs
   437  c1f3 a92c                   lda #','
   438  c1f5 20d2ff                 jsr charout
   439  c1f8 a959                   lda #'Y'
   440  c1fa 4cd2ff                 jmp charout
   441                          
   442                          dispModeInd:
   443  c1fd a928                   lda #'('
   444  c1ff 20d2ff                 jsr charout
   445  c202 20d1c1                 jsr dispModeAbs
   446  c205 a929                   lda #')'
   447  c207 4cd2ff                 jmp charout
   448                          
   449                          disphexword: ; .A low, .X high, 0000..FFFF
   450  c20a 48                     pha
   451  c20b 8a                     txa
   452  c20c 2010c2                 jsr disphexbyte
   453  c20f 68                     pla
   454                              ;fall through to call again
   455                          
   456                          disphexbyte: ; .A 00..FF
   457  c210 48                     pha
   458  c211 4a                     lsr
   459  c212 4a                     lsr
   460  c213 4a                     lsr
   461  c214 4a                     lsr
   462  c215 2019c2                 jsr disphexnybble
   463  c218 68                     pla
   464                              ;fall through to call again
   465                          
   466                          disphexnybble: ; .A 0..F
   467  c219 290f                   and #$0F
   468  c21b 0930                   ora #$30
   469  c21d c93a                   cmp #$3A
   470  c21f 9002                   bcc +
   471  c221 6906                   adc #$06
   472  c223 4cd2ff             +   jmp charout
   473                          
   474                          inputhexword: ; C set if fails
   475  c226 a900                   lda #0
   476  c228 85fb                   sta ptr1
   477  c22a 85fc                   sta ptr1+1
   478                          
   479  c22c a904                   lda #4 ; word is at most 4 nybbles
   480  c22e 85a3                   sta count
   481  c230 2069c2             --  jsr inputhexnybble
   482  c233 b012                   bcs +
   483                          
   484                              ; shift nibble up
   485  c235 0a                     asl
   486  c236 0a                     asl
   487  c237 0a                     asl
   488  c238 0a                     asl
   489                          
   490  c239 a204                   ldx #4 ; 4 bits rotated into word
   491  c23b 2a                 -   rol
   492  c23c 26fb                   rol ptr1
   493  c23e 26fc                   rol ptr1+1
   494  c240 ca                     dex
   495  c241 d0f8                   bne - ; repeat bits
   496                          
   497  c243 c6a3                   dec count
   498  c245 d0e9                   bne -- ; repeat nybbles
   499                          
   500  c247 a5a3               +   lda count
   501  c249 c904                   cmp #4
   502  c24b f0ee                   beq - ; fail if none parsed
   503  c24d 18                 +   clc ; any nybbles parsed (0..4 is fine)
   504  c24e 60                     rts
   505                          
   506                          inputhexbyte:
   507  c24f 2069c2                 jsr inputhexnybble
   508  c252 b014                   bcs ++
   509  c254 85ff                   sta tmp
   510  c256 2069c2                 jsr inputhexnybble
   511  c259 9005                   bcc +
   512  c25b 18                     clc ; allow single digit as byte
   513  c25c a5ff                   lda tmp
   514  c25e 9008                   bcc ++
   515  c260 06ff               +   asl tmp
   516  c262 06ff                   asl tmp
   517  c264 06ff                   asl tmp
   518  c266 06ff                   asl tmp
   519  c268 60                 ++  rts
   520                          
   521                          inputhexnybble:
   522  c269 b90002                 lda $0200,y
   523  c26c 297f                   and #$7F
   524  c26e 38                     sec
   525  c26f e930                   sbc #$30
   526  c271 9012                   bcc ++
   527  c273 c90a                   cmp #10
   528  c275 900c                   bcc +
   529  c277 e907                   sbc #7
   530  c279 900a                   bcc ++
   531  c27b c90a                   cmp #10
   532  c27d 9006                   bcc ++
   533  c27f c910                   cmp #16
   534  c281 b002                   bcs ++
   535  c283 c8                 +   iny
   536  c284 60                     rts
   537  c285 38                 ++  sec
   538  c286 60                     rts
   539                          
   540                          strout:
   541  c287 8526                   sta ptr3
   542  c289 8627                   stx ptr3+1
   543                          strout2:    
   544  c28b a000                   ldy #0
   545  c28d b126               -   lda (ptr3),y
   546  c28f f006                   beq +
   547  c291 20d2ff                 jsr charout
   548  c294 c8                     iny
   549  c295 d0f6                   bne -
   550  c297 98                 +   tya
   551  c298 38                     sec
   552  c299 6526                   adc ptr3
   553  c29b 8526                   sta ptr3
   554  c29d 9002                   bcc +
   555  c29f e627                   inc ptr3+1
   556  c2a1 60                 +   rts
   557                          
   558                          inputline:
   559                          !ifdef C64SCREEN {
   560  c2a2 a000                   ldy #0
   561  c2a4 20cfff             -   jsr charin
   562  c2a7 990002                 sta inputbuf,y
   563  c2aa c8                     iny
   564  c2ab c90d                   cmp #13
   565  c2ad d0f5                   bne -
   566  c2af 60                     rts
   567                          } else {
   568                              ldy #0
   569                          --  sty count
   570                          -   jsr getkey
   571                              beq -
   572                              ldy count
   573                          !ifdef MINIMUM {
   574                              cmp #8 ; backspace
   575                          } else {
   576                              cmp #20
   577                          }
   578                              bne +
   579                              cpy #0
   580                              beq -
   581                              dey
   582                          !if NEEDECHO = 1 {    
   583                              jsr charout
   584                          }
   585                              jmp --
   586                          +   cmp #13
   587                              beq +
   588                              cmp #' '
   589                              bcc -
   590                              cmp #128
   591                              bcs -
   592                          +
   593                          !if NEEDECHO = 1 {    
   594                              jsr charout
   595                          }
   596                              sta inputbuf,y
   597                              iny
   598                              cmp #13
   599                              bne --
   600                              rts
   601                          }
   602                          
   603                          parseline:
   604  c2b0 c001                   cpy #1
   605  c2b2 d003                   bne +
   606                          -
   607                          !ifdef C64SCREEN {   
   608  c2b4 4cfdc9                 jmp newline
   609                          } else {
   610                              rts
   611                          }
   612  c2b7 88                 +   dey
   613  c2b8 84a4                   sty len
   614                              ; skip whitespace
   615                              ; check for address, put in ptr1
   616                              ; or check for dot, then require address put in ptr2
   617                              ; or check for ?, and optional parameter, execute help
   618                              ; check for whitespace
   619                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   620                              ; check for string, store at start of inputbuf
   621                              ; check for drive number
   622                              ; check for whitespace
   623                              ; check command ":rda?mls", execute command
   624  c2ba a000                   ldy #0
   625  c2bc 2040c9                 jsr skipspaces
   626  c2bf c4a4                   cpy len
   627  c2c1 f0f1                   beq -
   628  c2c3 20f6c8                 jsr chkcontinuedis
   629  c2c6 d003                   bne +
   630  c2c8 201ac9                 jsr executedisassemble ; note won't return
   631  c2cb 2008c9             +   jsr chkcontinueasm
   632  c2ce d003                   bne +
   633  c2d0 202ac5                 jsr continueassemble ; note won't return
   634  c2d3 204bc9             +   jsr chkdot
   635  c2d6 d003                   bne +
   636  c2d8 4cc0c3                 jmp executedot
   637  c2db 2056c9             +   jsr chkhelp
   638  c2de d003                   bne +
   639  c2e0 4ccac3                 jmp executehelp
   640  c2e3 20a0c9             +   jsr chkhexaddr1
   641  c2e6 d003                   bne error
   642  c2e8 4ceec2                 jmp executeaddr1
   643                          error:
   644  c2eb 4c29c9                 jmp reporterr
   645                          
   646                          executeaddr1:
   647  c2ee c4a4                   cpy len
   648  c2f0 d003                   bne +
   649  c2f2 4c41c3                 jmp executedisplay1
   650  c2f5 204bc9             +   jsr chkdot
   651  c2f8 d00f                   bne +
   652  c2fa c4a4                   cpy len
   653  c2fc f021                   beq executepagedisplay
   654  c2fe 20c0c9                 jsr chkhexaddr2
   655  c301 d0e8                   bne error
   656  c303 18                     clc
   657  c304 66a7                   ror flag
   658  c306 4c37c3                 jmp executeaddr12
   659  c309 2040c9             +   jsr skipspaces
   660  c30c 2061c9                 jsr chkcolon
   661  c30f d003                   bne +
   662  c311 4c9ec3                 jmp executemodify
   663  c314 20e1c9             +   jsr chkaddr1cmd ; rda, will not return here if cmd
   664  c317 206cc9                 jsr chkfilename
   665  c31a d0cf                   bne error
   666  c31c 4cc7c3                 jmp executeloadfilename
   667                          
   668                          executepagedisplay:
   669  c31f a5fb                   lda ptr1
   670  c321 18                     clc
   671                          !ifdef MINIMUM {
   672                              adc #$5f
   673                          } else {
   674  c322 69b7                   adc #$b7
   675                          }
   676  c324 85fd                   sta ptr2
   677  c326 a5fc                   lda ptr1+1
   678                          !ifdef MINIMUM {
   679                              adc #$01
   680                          } else {
   681  c328 6900                   adc #$00
   682                          }
   683  c32a 85fe                   sta ptr2+1
   684  c32c 9006                   bcc +
   685  c32e a9ff                   lda #$ff
   686  c330 85fd                   sta ptr2
   687  c332 85fe                   sta ptr2+1
   688  c334 38                 +   sec
   689  c335 66a7                   ror flag
   690                              ; fall through to executeaddr12
   691                          
   692                          executeaddr12:
   693  c337 c4a4                   cpy len
   694  c339 d003                   bne +
   695  c33b 4c49c3                 jmp executedisplay12
   696  c33e 4c22c9             +   jmp reportnotimplemented
   697                          
   698                          executedisplay1:
   699  c341 a5fb                   lda ptr1
   700  c343 85fd                   sta ptr2
   701  c345 a5fc                   lda ptr1+1
   702  c347 85fe                   sta ptr2+1
   703                              ; fall through executedisplay12
   704                          
   705                          executedisplay12:
   706  c349 a9ff                   lda #$ff
   707  c34b 85a3                   sta count
   708  c34d e6a3               -   inc count
   709  c34f a5a3                   lda count
   710                          !ifdef MINIMUM {    
   711                              and #$0f
   712                          } else {
   713  c351 2907                   and #$07
   714                          }
   715  c353 d016                   bne +
   716  c355 a90d                   lda #13
   717  c357 20d2ff                 jsr charout
   718  c35a a5fb                   lda ptr1
   719  c35c a6fc                   ldx ptr1+1
   720  c35e 200ac2                 jsr disphexword
   721  c361 a93a                   lda #':'
   722  c363 20d2ff                 jsr charout
   723  c366 a920                   lda #' '
   724  c368 20d2ff                 jsr charout
   725  c36b a000               +   ldy #0
   726  c36d b1fb                   lda (ptr1),y
   727  c36f 2010c2                 jsr disphexbyte
   728  c372 a920                   lda #' '
   729  c374 20d2ff                 jsr charout
   730  c377 e6fb                   inc ptr1
   731  c379 d004                   bne +
   732  c37b e6fc                   inc ptr1+1
   733  c37d f01c                   beq ++
   734  c37f 2063c0             +   jsr compareptrs
   735  c382 90c9                   bcc -
   736  c384 f0c7                   beq -
   737  c386 24a7                   bit flag
   738  c388 1011                   bpl ++
   739                          !ifdef C64SCREEN {
   740  c38a 20fdc9                 jsr newline
   741  c38d a5fb                   lda ptr1
   742  c38f a6fc                   ldx ptr1+1
   743  c391 200ac2                 jsr disphexword
   744  c394 a9ac                   lda #<page_displaymemory
   745  c396 a2cf                   ldx #>page_displaymemory
   746  c398 4c87c2                 jmp strout
   747                          }
   748  c39b 4cfdc9             ++  jmp newline
   749                          
   750                          executemodify:
   751  c39e 2040c9                 jsr skipspaces
   752  c3a1 c4a4                   cpy len
   753  c3a3 f018                   beq ++
   754  c3a5 2086c9                 jsr chkhexbyteofsequence
   755  c3a8 f003                   beq +
   756  c3aa 4cebc2                 jmp error
   757  c3ad 84ff               +   sty tmp
   758  c3af a000                   ldy #0
   759  c3b1 91fb                   sta (ptr1),y
   760  c3b3 e6fb                   inc ptr1
   761  c3b5 d002                   bne +
   762  c3b7 e6fc                   inc ptr1+1
   763  c3b9 a4ff               +   ldy tmp
   764  c3bb d0e1                   bne executemodify
   765  c3bd 4cfdc9             ++  jmp newline
   766                          
   767                          executedot:
   768  c3c0 c4a4                   cpy len
   769  c3c2 d003                   bne +
   770  c3c4 4c1fc3                 jmp executepagedisplay
   771                          
   772                          executeloadfilename:
   773                          executeaddr1cmd:
   774  c3c7 4c22c9             +   jmp reportnotimplemented
   775                          
   776                          executehelp:
   777                          !ifdef C64SCREEN {
   778  c3ca 20fdc9                 jsr newline
   779                          }
   780  c3cd c4a4                   cpy len
   781  c3cf d003                   bne +
   782  c3d1 4cf2c3                 jmp displayhelp
   783  c3d4 2040c9             +   jsr skipspaces
   784  c3d7 2007c4                 jsr chkhelpinstructions
   785  c3da d003                   bne +
   786  c3dc 4c36c4                 jmp displayinstructions
   787  c3df 2014c4             +   jsr chkhelpmodes
   788  c3e2 d003                   bne +
   789  c3e4 4c4dc4                 jmp displaymodes
   790  c3e7 2073c8             +   jsr chkinstruction
   791  c3ea d003                   bne +
   792  c3ec 4cfdc4                 jmp executehelpinstruction
   793  c3ef 4c22c9             +   jmp reportnotimplemented
   794                          
   795                          displayhelp:
   796  c3f2 a966                   lda #<generalhelp
   797  c3f4 a2ce                   ldx #>generalhelp
   798  c3f6 2087c2                 jsr strout
   799  c3f9 a9d5                   lda #<generalhelp2
   800  c3fb a2ce                   ldx #>generalhelp2
   801  c3fd 2087c2                 jsr strout
   802  c400 a9e5                   lda #<firsthelp
   803  c402 a2cd                   ldx #>firsthelp
   804  c404 4c87c2                 jmp strout
   805                          
   806                          chkhelpinstructions:
   807  c407 b90002                 lda inputbuf, y
   808  c40a c941                   cmp #'A'
   809  c40c d005                   bne +
   810  c40e b90102                 lda inputbuf+1, y
   811  c411 c90d                   cmp #13
   812                              ; no need to increment y if found, done parsing line
   813  c413 60                 +   rts
   814                          
   815                          chkhelpmodes:
   816  c414 a9a0                   lda #<modes_keyword
   817  c416 a2cf                   ldx #>modes_keyword
   818                              ; fall through to chkkeyword
   819                          
   820                          chkkeyword:
   821  c418 84a3                   sty count
   822  c41a 8526                   sta ptr3
   823  c41c 8627                   stx ptr3+1
   824  c41e a6a3                   ldx count
   825  c420 a000                   ldy #0
   826  c422 bd0002             -   lda inputbuf, x
   827  c425 d126                   cmp (ptr3),y
   828  c427 d008                   bne +
   829  c429 e8                     inx
   830  c42a c8                     iny
   831  c42b e4a4                   cpx len
   832  c42d d0f3                   bne -
   833  c42f b126                   lda (ptr3),y ; matched if end of string, will set Z
   834  c431 08                 +   php ; save Z
   835  c432 a4a3                   ldy count
   836  c434 28                     plp ; restore Z
   837  c435 60                     rts
   838                          
   839                          displayinstructions:
   840  c436 a038                   ldy #ninst
   841  c438 a200                   ldx #0
   842  c43a 8a                 -   txa
   843  c43b 48                     pha
   844  c43c 20aec0                 jsr dispinst
   845  c43f a920                   lda #' '
   846  c441 20d2ff                 jsr charout
   847  c444 68                     pla
   848  c445 aa                     tax
   849  c446 e8                     inx
   850  c447 88                     dey
   851  c448 d0f0                   bne -
   852  c44a 4cfdc9                 jmp newline
   853                          
   854                          displaymodes:
   855  c44d 38                     sec
   856  c44e a900                   lda #0
   857  c450 48                 -   pha
   858  c451 aa                     tax
   859  c452 bdc4ca                 lda mode_sorted, x
   860  c455 2062c4                 jsr dispmode
   861  c458 68                     pla
   862  c459 18                     clc
   863  c45a 6901                   adc #1
   864  c45c c90d                   cmp #nmodes
   865  c45e 90f0                   bcc -
   866  c460 18                     clc
   867  c461 60                     rts
   868                          
   869                          dispmode:
   870  c462 c90d                   cmp #nmodes
   871  c464 b008                   bcs +
   872  c466 8524                   sta mode
   873  c468 20aac4                 jsr disp_modename_and_example
   874  c46b 4c6fc4                 jmp dispmodeinstructions
   875  c46e 60                 +   rts
   876                          
   877                          dispmodeinstructions:
   878                          !ifdef C64SCREEN {
   879                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
   880  c46f a524                   lda mode
   881  c471 c903                   cmp #3
   882  c473 d005                   bne +
   883  c475 a920                   lda #' '
   884  c477 4cd2ff                 jmp charout
   885                          }
   886                              ; display instructions with this mode
   887  c47a a000               +   ldy #0
   888  c47c 8423               --  sty inidx
   889  c47e a200                   ldx #0
   890  c480 86ff               -   stx tmp
   891  c482 a523                   lda inidx
   892  c484 dd59cc                 cmp instidx, x
   893  c487 d014                   bne ++
   894  c489 bdf0cc                 lda modeidx, x
   895  c48c c524                   cmp mode
   896  c48e d00d                   bne ++
   897  c490 a920                   lda #' '
   898  c492 20d2ff                 jsr charout
   899  c495 bd59cc                 lda instidx, x
   900  c498 20aec0                 jsr dispinst
   901  c49b a6ff                   ldx tmp
   902  c49d e8                 ++  inx
   903  c49e e097                   cpx #nopcodes
   904  c4a0 90de                   bcc -
   905  c4a2 c8                     iny
   906  c4a3 c038                   cpy #ninst
   907  c4a5 d0d5                   bne --
   908  c4a7 4cfdc9                 jmp newline
   909                          
   910                          disp_modename_and_example:
   911  c4aa 0a                     asl
   912  c4ab aa                     tax
   913  c4ac bda8cb                 lda modes, x
   914  c4af 48                     pha
   915  c4b0 bda9cb                 lda modes+1, x
   916  c4b3 aa                     tax
   917                          !ifdef C64SCREEN {
   918  c4b4 a912                   lda #18
   919  c4b6 20d2ff                 jsr charout
   920                          }    
   921  c4b9 68                     pla
   922  c4ba 2087c2                 jsr strout
   923  c4bd a920                   lda #' '
   924  c4bf 20d2ff                 jsr charout
   925  c4c2 208bc2                 jsr strout2
   926                          !ifdef C64SCREEN {    
   927  c4c5 a992                   lda #146
   928  c4c7 20d2ff                 jsr charout
   929                          }   
   930  c4ca 60                     rts
   931                          
   932                          disp_modename_instruction_example:
   933  c4cb 0a                     asl
   934  c4cc aa                     tax
   935  c4cd bda8cb                 lda modes, x
   936  c4d0 48                     pha
   937  c4d1 bda9cb                 lda modes+1, x
   938  c4d4 aa                     tax
   939  c4d5 68                     pla
   940  c4d6 2087c2                 jsr strout ; mode name
   941  c4d9 a526                   lda ptr3
   942  c4db 48                     pha
   943  c4dc a527                   lda ptr3+1
   944  c4de 48                     pha
   945  c4df a93a                   lda #':'
   946  c4e1 20d2ff                 jsr charout
   947  c4e4 a920                   lda #' '
   948  c4e6 20d2ff                 jsr charout
   949  c4e9 a523                   lda inidx
   950  c4eb 20aec0                 jsr dispinst ; instruction
   951  c4ee a920                   lda #' '
   952  c4f0 20d2ff                 jsr charout
   953  c4f3 68                     pla
   954  c4f4 8527                   sta ptr3+1
   955  c4f6 68                     pla
   956  c4f7 8526                   sta ptr3
   957  c4f9 208bc2                 jsr strout2 ; example
   958  c4fc 60                     rts
   959                          
   960                          
   961                          executehelpinstruction:
   962  c4fd a000                   ldy #0
   963  c4ff 8422               -   sty opidx
   964  c501 b959cc                 lda instidx, y
   965  c504 c523                   cmp inidx
   966  c506 d01a                   bne +
   967  c508 b9f0cc                 lda modeidx, y
   968  c50b 8524                   sta mode
   969  c50d a622                   ldx opidx
   970  c50f bdc2cb                 lda opcodes, x
   971  c512 2010c2                 jsr disphexbyte
   972  c515 a920                   lda #' '
   973  c517 20d2ff                 jsr charout
   974  c51a a524                   lda mode
   975  c51c 20cbc4                 jsr disp_modename_instruction_example
   976  c51f 20fdc9                 jsr newline
   977  c522 a422               +   ldy opidx
   978  c524 c8                     iny
   979  c525 c097                   cpy #nopcodes
   980  c527 90d6                   bcc -
   981  c529 60                     rts
   982                          
   983                          continueassemble:
   984                          !ifdef C64SCREEN {   
   985  c52a a914                   lda #20
   986  c52c 20d2ff                 jsr charout
   987  c52f 20d2ff                 jsr charout
   988                          }
   989  c532 a5fb                   lda ptr1
   990  c534 a6fc                   ldx ptr1+1
   991  c536 200ac2                 jsr disphexword
   992  c539 a920                   lda #' '
   993  c53b 20d2ff                 jsr charout
   994                          !ifdef C64SCREEN {   
   995  c53e 20d2ff                 jsr charout
   996  c541 20d2ff                 jsr charout
   997                          }
   998                              ; continue...
   999                          
  1000                          executeassemble:
  1001  c544 68                     pla ; remove low byte return address
  1002  c545 68                     pla ; return high byte return address
  1003                          !ifdef C64SCREEN {    
  1004  c546 a914                   lda #20
  1005  c548 20d2ff                 jsr charout
  1006  c54b 20d2ff                 jsr charout
  1007                          } else {
  1008                              lda ptr1
  1009                              ldx ptr1+1
  1010                              jsr disphexword
  1011                              lda #' '
  1012                              jsr charout
  1013                          }
  1014                              ; save current pointer
  1015  c54e a5fb               --  lda ptr1
  1016  c550 a6fc                   ldx ptr1+1
  1017  c552 8526                   sta ptr3
  1018  c554 8627                   stx ptr3+1
  1019  c556 20a2c2                 jsr inputline
  1020  c559 c001                   cpy #1
  1021  c55b f040                   beq ++
  1022  c55d 88                     dey
  1023  c55e 84a4                   sty len
  1024  c560 a000                   ldy #0
  1025  c562 2040c9                 jsr skipspaces
  1026  c565 c4a4                   cpy len
  1027  c567 f034                   beq ++
  1028                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1029                              ;jsr skipspaces
  1030  c569 2073c8                 jsr chkinstruction
  1031  c56c f003                   beq +
  1032  c56e 4cebc2             -   jmp error    
  1033  c571 20c7c5             +   jsr chkaddressing
  1034  c574 d0f8                   bne -
  1035  c576 20a4c8                 jsr find_inst_and_mode
  1036  c579 d0f3                   bne -
  1037  c57b 20a0c5                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1038  c57e 18                     clc
  1039  c57f a525                   lda size
  1040  c581 6526                   adc ptr3
  1041  c583 85fb                   sta ptr1
  1042  c585 a527                   lda ptr3+1
  1043  c587 6900                   adc #0
  1044  c589 85fc                   sta ptr1+1
  1045                          !ifdef C64SCREEN {    
  1046  c58b 20fdc9                 jsr newline
  1047                          }
  1048  c58e a5fb                   lda ptr1
  1049  c590 a6fc                   ldx ptr1+1
  1050  c592 200ac2                 jsr disphexword
  1051  c595 a920                   lda #' '
  1052  c597 20d2ff                 jsr charout
  1053  c59a 4c4ec5                 jmp --
  1054                          ++  
  1055                          !ifdef C64SCREEN {
  1056  c59d 4cfdc9                 jmp newline
  1057                          } else {
  1058                              rts
  1059                          }
  1060                          
  1061                          store_assembly:
  1062  c5a0 a622                   ldx opidx
  1063  c5a2 bdc2cb                 lda opcodes, x
  1064  c5a5 a000                   ldy #0
  1065  c5a7 9126                   sta (ptr3), y
  1066  c5a9 c8                     iny
  1067  c5aa a625                   ldx size
  1068  c5ac e001                   cpx #1
  1069  c5ae f016                   beq ++
  1070  c5b0 e002               +   cpx #2
  1071  c5b2 d005                   bne +
  1072  c5b4 a5a6                   lda tmp2
  1073  c5b6 9126                   sta (ptr3), y
  1074  c5b8 60                     rts
  1075  c5b9 e003               +   cpx #3
  1076  c5bb d009                   bne ++
  1077  c5bd a5fb                   lda ptr1
  1078  c5bf 9126                   sta (ptr3), y
  1079  c5c1 c8                     iny
  1080  c5c2 a5fc                   lda ptr1+1
  1081  c5c4 9126                   sta (ptr3), y
  1082  c5c6 60                 ++  rts
  1083                          
  1084                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1085  c5c7 2040c9                 jsr skipspaces
  1086  c5ca a200                   ldx #0
  1087  c5cc 8624                   stx mode
  1088  c5ce 2029c6                 jsr chkaccumulator
  1089  c5d1 f051                   beq +
  1090  c5d3 e624                   inc mode
  1091  c5d5 c4a4                   cpy len ; chknone
  1092  c5d7 f04b                   beq +
  1093  c5d9 e624                   inc mode
  1094  c5db 204dc6                 jsr chkimmediate
  1095  c5de f044                   beq +
  1096  c5e0 e624                   inc mode
  1097  c5e2 2071c6                 jsr chkindirectx
  1098  c5e5 f03d                   beq +
  1099  c5e7 e624                   inc mode
  1100  c5e9 20b6c6                 jsr chkindirecty
  1101  c5ec f036                   beq +
  1102  c5ee e624                   inc mode
  1103  c5f0 20fbc6                 jsr chkrelative
  1104  c5f3 f02f                   beq +
  1105  c5f5 e624                   inc mode
  1106  c5f7 2056c7                 jsr chkzeropage
  1107  c5fa f028                   beq +
  1108  c5fc e624                   inc mode
  1109  c5fe 206fc7                 jsr chkzeropagex
  1110  c601 f021                   beq +
  1111  c603 e624                   inc mode
  1112  c605 209ec7                 jsr chkzeropagey
  1113  c608 f01a                   beq +
  1114  c60a e624                   inc mode
  1115  c60c 20cdc7                 jsr chkabsolute
  1116  c60f f013                   beq +
  1117  c611 e624                   inc mode
  1118  c613 20e6c7                 jsr chkabsolutex
  1119  c616 f00c                   beq +
  1120  c618 e624                   inc mode
  1121  c61a 2015c8                 jsr chkabsolutey
  1122  c61d f005                   beq +
  1123  c61f e624                   inc mode
  1124  c621 2044c8                 jsr chkindirect
  1125  c624 08                 +   php ; save Z
  1126  c625 a524                   lda mode
  1127  c627 28                     plp ; restore Z 
  1128  c628 60                     rts
  1129                          
  1130                          chkaccumulator:
  1131  c629 c4a4                   cpy len
  1132  c62b d013                   bne +
  1133  c62d a523                   lda inidx
  1134  c62f c902                   cmp #2 ; ASL
  1135  c631 f019                   beq ++
  1136  c633 c920                   cmp #32 ; LSR
  1137  c635 f015                   beq ++
  1138  c637 c927                   cmp #39 ; ROL
  1139  c639 f011                   beq ++
  1140  c63b c928                   cmp #40 ; ROR
  1141  c63d 4c4cc6                 jmp ++
  1142  c640 b90002             +   lda inputbuf, y
  1143  c643 c941                   cmp #'A'
  1144  c645 d005                   bne ++
  1145  c647 b90102                 lda inputbuf+1,y
  1146  c64a c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1147  c64c 60                 ++  rts
  1148                          
  1149                          chkimmediate:
  1150  c64d 84a5                   sty savepos
  1151  c64f b90002                 lda inputbuf, y
  1152  c652 c923                   cmp #'#'
  1153  c654 d016                   bne ++
  1154  c656 c8                     iny
  1155  c657 2040c9                 jsr skipspaces
  1156  c65a b90002                 lda inputbuf, y
  1157  c65d c924                   cmp #'$'
  1158  c65f d001                   bne +
  1159  c661 c8                     iny
  1160  c662 20a9c9             +   jsr chkhexbyte
  1161  c665 d005                   bne ++
  1162  c667 c4a4               +   cpy len
  1163  c669 d001                   bne ++
  1164  c66b 60                     rts
  1165  c66c a4a5               ++  ldy savepos
  1166  c66e a201                   ldx #1 ; Z false (NE)
  1167  c670 60                     rts
  1168                          
  1169                          chkindirectx:
  1170  c671 84a5                   sty savepos
  1171  c673 b90002                 lda inputbuf, y
  1172  c676 c928                   cmp #'('
  1173  c678 d037                   bne ++
  1174  c67a c8                     iny
  1175  c67b 2040c9                 jsr skipspaces
  1176  c67e b90002                 lda inputbuf, y
  1177  c681 c924                   cmp #'$'
  1178  c683 d001                   bne +
  1179  c685 c8                     iny
  1180  c686 20a9c9             +   jsr chkhexbyte
  1181  c689 d026                   bne ++
  1182  c68b 2040c9                 jsr skipspaces
  1183  c68e b90002                 lda inputbuf, y
  1184  c691 c92c                   cmp #','
  1185  c693 d01c                   bne ++
  1186  c695 c8                     iny
  1187  c696 2040c9                 jsr skipspaces
  1188  c699 b90002                 lda inputbuf, y
  1189  c69c c958                   cmp #'X'
  1190  c69e d011                   bne ++
  1191  c6a0 c8                     iny
  1192  c6a1 2040c9                 jsr skipspaces
  1193  c6a4 b90002                 lda inputbuf, y
  1194  c6a7 c929                   cmp #')'
  1195  c6a9 d006                   bne ++
  1196  c6ab c8                     iny
  1197  c6ac c4a4                   cpy len
  1198  c6ae d001                   bne ++
  1199  c6b0 60                     rts
  1200  c6b1 a4a5               ++  ldy savepos
  1201  c6b3 a201                   ldx #1 ; Z false (NE)
  1202  c6b5 60                     rts
  1203                          
  1204                          chkindirecty:
  1205  c6b6 84a5                   sty savepos
  1206  c6b8 b90002                 lda inputbuf, y
  1207  c6bb c928                   cmp #'('
  1208  c6bd d037                   bne ++
  1209  c6bf c8                     iny
  1210  c6c0 2040c9                 jsr skipspaces
  1211  c6c3 b90002                 lda inputbuf, y
  1212  c6c6 c924                   cmp #'$'
  1213  c6c8 d001                   bne +
  1214  c6ca c8                     iny
  1215  c6cb 20a9c9             +   jsr chkhexbyte
  1216  c6ce d026                   bne ++
  1217  c6d0 2040c9                 jsr skipspaces
  1218  c6d3 b90002                 lda inputbuf, y
  1219  c6d6 c929                   cmp #')'
  1220  c6d8 d01c                   bne ++
  1221  c6da c8                     iny
  1222  c6db 2040c9                 jsr skipspaces
  1223  c6de b90002                 lda inputbuf, y
  1224  c6e1 c92c                   cmp #','
  1225  c6e3 d011                   bne ++
  1226  c6e5 c8                     iny
  1227  c6e6 2040c9                 jsr skipspaces
  1228  c6e9 b90002                 lda inputbuf, y
  1229  c6ec c959                   cmp #'Y'
  1230  c6ee d006                   bne ++
  1231  c6f0 c8                     iny
  1232  c6f1 c4a4                   cpy len
  1233  c6f3 d001                   bne ++
  1234  c6f5 60                     rts
  1235  c6f6 a4a5               ++  ldy savepos
  1236  c6f8 a201                   ldx #1 ; Z false (NE)
  1237  c6fa 60                     rts
  1238                          
  1239                          chkrelative:
  1240  c6fb 84a5                   sty savepos
  1241  c6fd a623                   ldx inidx
  1242  c6ff e006                   cpx #6 ; BIT
  1243  c701 f01e                   beq ++
  1244  c703 bd02ca                 lda inst0, x
  1245  c706 c942                   cmp #'B'
  1246  c708 d017                   bne ++
  1247  c70a b90002                 lda inputbuf, y
  1248  c70d c924                   cmp #'$'
  1249  c70f d001                   bne +
  1250  c711 c8                     iny
  1251  c712 20a0c9             +   jsr chkhexword
  1252  c715 d00a                   bne ++
  1253  c717 c4a4                   cpy len
  1254  c719 d006                   bne ++
  1255  c71b 2026c7                 jsr computeoffset
  1256  c71e d001                   bne ++
  1257  c720 60                     rts ; Z true (EQ)
  1258  c721 a4a5               ++  ldy savepos
  1259  c723 a201                   ldx #1 ; Z false (NE)
  1260  c725 60                     rts
  1261                          
  1262                          computeoffset:
  1263                          ;   compute next address
  1264  c726 a527                   lda ptr3+1
  1265  c728 85fe                   sta ptr2+1
  1266  c72a a526                   lda ptr3
  1267  c72c 18                     clc
  1268  c72d 6902                   adc #2
  1269  c72f 85fd                   sta ptr2
  1270  c731 9002                   bcc +
  1271  c733 e6fe                   inc ptr2+1
  1272                          +  ; subtract argument
  1273  c735 38                     sec
  1274  c736 a5fb                   lda ptr1
  1275  c738 e5fd                   sbc ptr2
  1276  c73a 85a6                   sta tmp2
  1277  c73c a5fc                   lda ptr1+1
  1278  c73e e5fe                   sbc ptr2+1
  1279  c740 f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1280  c742 c9ff                   cmp #$FF
  1281  c744 d00d                   bne failedoffset ; 0 and FF were only options so fail
  1282                              ; chkeck negative offset
  1283  c746 a5a6                   lda tmp2
  1284  c748 3006                   bmi successoffset ; branch if signed byte is negative
  1285  c74a 1007                   bpl failedoffset ; otherwise fail
  1286                          chkoffsetto127:
  1287  c74c a5a6                   lda tmp2
  1288  c74e 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1289                          successoffset:    
  1290  c750 a900                   lda #0 ; Z true (EQ)
  1291  c752 60                     rts
  1292                          failedoffset:
  1293  c753 a901                   lda #1 ; Z false (NE)
  1294  c755 60                     rts
  1295                          
  1296                          chkzeropage:
  1297  c756 84a5                   sty savepos
  1298  c758 b90002                 lda inputbuf, y
  1299  c75b c924                   cmp #'$'
  1300  c75d d001                   bne +
  1301  c75f c8                     iny
  1302  c760 20a9c9             +   jsr chkhexbyte
  1303  c763 d005                   bne ++
  1304  c765 c4a4                   cpy len
  1305  c767 d001                   bne ++
  1306  c769 60                     rts ; Z true (EQ)
  1307  c76a a4a5               ++  ldy savepos
  1308  c76c a201                   ldx #1 ; Z false (NE)
  1309  c76e 60                     rts
  1310                          
  1311                          chkzeropagex:
  1312  c76f 84a5                   sty savepos
  1313  c771 b90002                 lda inputbuf, y
  1314  c774 c924                   cmp #'$'
  1315  c776 d001                   bne +
  1316  c778 c8                     iny
  1317  c779 20a9c9             +   jsr chkhexbyte
  1318  c77c d01b                   bne ++
  1319  c77e 2040c9                 jsr skipspaces
  1320  c781 b90002                 lda inputbuf, y
  1321  c784 c92c                   cmp #','
  1322  c786 d011                   bne ++
  1323  c788 c8                     iny
  1324  c789 2040c9                 jsr skipspaces
  1325  c78c b90002                 lda inputbuf, y
  1326  c78f c958                   cmp #'X'
  1327  c791 d006                   bne ++
  1328  c793 c8                     iny
  1329  c794 c4a4                   cpy len
  1330  c796 d001                   bne ++
  1331  c798 60                     rts ; Z true (EQ)
  1332  c799 a4a5               ++  ldy savepos
  1333  c79b a201                   ldx #1 ; Z false (NE)
  1334  c79d 60                     rts
  1335                          
  1336                          chkzeropagey:
  1337  c79e 84a5                   sty savepos
  1338  c7a0 b90002                 lda inputbuf, y
  1339  c7a3 c924                   cmp #'$'
  1340  c7a5 d001                   bne +
  1341  c7a7 c8                     iny
  1342  c7a8 20a9c9             +   jsr chkhexbyte
  1343  c7ab d01b                   bne ++
  1344  c7ad 2040c9                 jsr skipspaces
  1345  c7b0 b90002                 lda inputbuf, y
  1346  c7b3 c92c                   cmp #','
  1347  c7b5 d011                   bne ++
  1348  c7b7 c8                     iny
  1349  c7b8 2040c9                 jsr skipspaces
  1350  c7bb b90002                 lda inputbuf, y
  1351  c7be c959                   cmp #'Y'
  1352  c7c0 d006                   bne ++
  1353  c7c2 c8                     iny
  1354  c7c3 c4a4                   cpy len
  1355  c7c5 d001                   bne ++
  1356  c7c7 60                     rts ; Z true (EQ)
  1357  c7c8 a4a5               ++  ldy savepos
  1358  c7ca a201                   ldx #1 ; Z false (NE)
  1359  c7cc 60                     rts
  1360                          
  1361                          chkabsolute:
  1362  c7cd 84a5                   sty savepos
  1363  c7cf b90002                 lda inputbuf, y
  1364  c7d2 c924                   cmp #'$'
  1365  c7d4 d001                   bne +
  1366  c7d6 c8                     iny
  1367  c7d7 20a0c9             +   jsr chkhexword
  1368  c7da d005                   bne ++
  1369  c7dc c4a4                   cpy len
  1370  c7de d001                   bne ++
  1371  c7e0 60                     rts ; Z true (EQ)
  1372  c7e1 a4a5               ++  ldy savepos
  1373  c7e3 a201                   ldx #1 ; Z false (NE)
  1374  c7e5 60                     rts
  1375                          
  1376                          chkabsolutex:
  1377  c7e6 84a5                   sty savepos
  1378  c7e8 b90002                 lda inputbuf, y
  1379  c7eb c924                   cmp #'$'
  1380  c7ed d001                   bne +
  1381  c7ef c8                     iny
  1382  c7f0 20a0c9             +   jsr chkhexword
  1383  c7f3 d01b                   bne ++
  1384  c7f5 2040c9                 jsr skipspaces
  1385  c7f8 b90002                 lda inputbuf, y
  1386  c7fb c92c                   cmp #','
  1387  c7fd d011                   bne ++
  1388  c7ff c8                     iny
  1389  c800 2040c9                 jsr skipspaces
  1390  c803 b90002                 lda inputbuf, y
  1391  c806 c958                   cmp #'X'
  1392  c808 d006                   bne ++
  1393  c80a c8                     iny
  1394  c80b c4a4                   cpy len
  1395  c80d d001                   bne ++
  1396  c80f 60                     rts ; Z true (EQ)
  1397  c810 a4a5               ++  ldy savepos
  1398  c812 a201                   ldx #1 ; Z false (NE)
  1399  c814 60                     rts
  1400                          
  1401                          chkabsolutey:
  1402  c815 84a5                   sty savepos
  1403  c817 b90002                 lda inputbuf, y
  1404  c81a c924                   cmp #'$'
  1405  c81c d001                   bne +
  1406  c81e c8                     iny
  1407  c81f 20a0c9             +   jsr chkhexword
  1408  c822 d01b                   bne ++
  1409  c824 2040c9                 jsr skipspaces
  1410  c827 b90002                 lda inputbuf, y
  1411  c82a c92c                   cmp #','
  1412  c82c d011                   bne ++
  1413  c82e c8                     iny
  1414  c82f 2040c9                 jsr skipspaces
  1415  c832 b90002                 lda inputbuf, y
  1416  c835 c959                   cmp #'Y'
  1417  c837 d006                   bne ++
  1418  c839 c8                     iny
  1419  c83a c4a4                   cpy len
  1420  c83c d001                   bne ++
  1421  c83e 60                     rts ; Z true (EQ)
  1422  c83f a4a5               ++  ldy savepos
  1423  c841 a201                   ldx #1 ; Z false (NE)
  1424  c843 60                     rts
  1425                          
  1426                          chkindirect:
  1427  c844 84a5                   sty savepos
  1428  c846 b90002                 lda inputbuf, y
  1429  c849 c928                   cmp #'('
  1430  c84b d021                   bne ++
  1431  c84d c8                     iny
  1432  c84e 2040c9                 jsr skipspaces
  1433  c851 b90002                 lda inputbuf, y
  1434  c854 c924                   cmp #'$'
  1435  c856 d001                   bne +
  1436  c858 c8                     iny
  1437  c859 20a0c9             +   jsr chkhexword
  1438  c85c d010                   bne ++
  1439  c85e 2040c9                 jsr skipspaces
  1440  c861 b90002                 lda inputbuf, y
  1441  c864 c929                   cmp #')'
  1442  c866 d006                   bne ++
  1443  c868 c8                     iny
  1444  c869 c4a4                   cpy len
  1445  c86b d001                   bne ++
  1446  c86d 60                     rts ; Z true (EQ)
  1447  c86e a4a5               ++  ldy savepos
  1448  c870 a201                   ldx #1 ; Z false (NE)
  1449  c872 60                     rts
  1450                          
  1451                          chkinstruction:
  1452  c873 c4a4                   cpy len
  1453  c875 f02a                   beq ++
  1454  c877 84ff                   sty tmp
  1455  c879 a237                   ldx #(ninst-1)
  1456  c87b b90002             -   lda inputbuf,y
  1457  c87e dd02ca                 cmp inst0,x
  1458  c881 d019                   bne +
  1459  c883 c8                     iny
  1460  c884 b90002                 lda inputbuf,y
  1461  c887 dd3aca                 cmp inst1,x
  1462  c88a d010                   bne +
  1463  c88c c8                     iny
  1464  c88d b90002                 lda inputbuf,y
  1465  c890 dd72ca                 cmp inst2,x
  1466  c893 d007                   bne +
  1467  c895 c8                     iny
  1468  c896 8a                     txa
  1469  c897 8523                   sta inidx
  1470  c899 a200                   ldx #0
  1471  c89b 60                     rts
  1472  c89c a4ff               +   ldy tmp
  1473  c89e ca                     dex
  1474  c89f 10da                   bpl -
  1475  c8a1 a201               ++  ldx #1 ; Z false (NE)
  1476  c8a3 60                     rts
  1477                          
  1478                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1479                              ; and allows mode promotion
  1480  c8a4 20bdc8                 jsr find_inst_and_mode2
  1481  c8a7 f013                   beq ++
  1482  c8a9 a524                   lda mode
  1483  c8ab c906                   cmp #6
  1484  c8ad 900d                   bcc ++
  1485  c8af c90a                   cmp #10
  1486  c8b1 b007                   bcs +
  1487  c8b3 6903                   adc #3
  1488  c8b5 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1489  c8b7 4cbdc8                 jmp find_inst_and_mode2 ; try again once
  1490  c8ba a201               +   ldx #1 ; Z false (NE)
  1491  c8bc 60                 ++  rts
  1492                          
  1493                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1494  c8bd a296                   ldx #nopcodes-1
  1495  c8bf bd59cc             -   lda instidx, x
  1496  c8c2 bcf0cc                 ldy modeidx, x
  1497  c8c5 c523                   cmp inidx
  1498  c8c7 d00c                   bne +
  1499  c8c9 c424                   cpy mode
  1500  c8cb d008                   bne +
  1501  c8cd 8622                   stx opidx
  1502  c8cf 2097c0                 jsr getsize
  1503  c8d2 a200                   ldx #0 ; Z true (EQ)
  1504  c8d4 60                     rts
  1505  c8d5 ca                 +   dex
  1506  c8d6 e0ff                   cpx #$ff
  1507  c8d8 d0e5                   bne -
  1508  c8da a201                   ldx #1 ; Z false (NE)
  1509  c8dc 60                     rts
  1510                          
  1511                          executerun:
  1512  c8dd 68                     pla ; remove low byte return address
  1513  c8de 68                     pla ; return high byte return address
  1514  c8df 68                     pla ; again, we're really not returning
  1515  c8e0 68                     pla ; again, we're really not returning
  1516  c8e1 20fdc9                 jsr newline
  1517  c8e4 38                     sec
  1518  c8e5 a5fb                   lda ptr1
  1519  c8e7 e901                   sbc #1
  1520  c8e9 85fb                   sta ptr1
  1521  c8eb b002                   bcs +
  1522  c8ed c6fc                   dec ptr1+1
  1523  c8ef a5fc               +   lda ptr1+1
  1524  c8f1 48                     pha
  1525  c8f2 a5fb                   lda ptr1
  1526  c8f4 48                     pha
  1527  c8f5 60                     rts
  1528                          
  1529                          chkcontinuedis:
  1530  c8f6 b90002                 lda inputbuf,y
  1531  c8f9 c944                   cmp #'D'
  1532  c8fb d00a                   bne +
  1533  c8fd b90102                 lda inputbuf+1,y
  1534  c900 c90d                   cmp #13
  1535  c902 d003                   bne +
  1536  c904 c8                     iny
  1537  c905 a200                   ldx #0 ; restore Z set
  1538  c907 60                 +   rts
  1539                          
  1540                          chkcontinueasm:
  1541  c908 b90002                 lda inputbuf,y
  1542  c90b c941                   cmp #'A'
  1543  c90d d00a                   bne +
  1544  c90f b90102                 lda inputbuf+1,y
  1545  c912 c90d                   cmp #13
  1546  c914 d003                   bne +
  1547  c916 c8                     iny
  1548  c917 a200                   ldx #0 ; restore Z set
  1549  c919 60                 +   rts
  1550                          
  1551                          executedisassemble:
  1552  c91a 68                     pla ; remove low byte return address
  1553  c91b 68                     pla ; return high byte return address
  1554  c91c 20fdc9                 jsr newline
  1555  c91f 4c34c0                 jmp disassemble
  1556                          
  1557                          reportnotimplemented:
  1558  c922 a955                   lda #<notimplemented
  1559  c924 a2ce                   ldx #>notimplemented
  1560  c926 4c87c2                 jmp strout
  1561                          
  1562                          reporterr:
  1563  c929 c000                   cpy #0
  1564  c92b f008                   beq +
  1565  c92d a920                   lda #' '
  1566  c92f 20d2ff             -   jsr charout
  1567  c932 88                     dey
  1568  c933 d0fa                   bne -
  1569  c935 a93f               +   lda #'?'
  1570  c937 20d2ff                 jsr charout
  1571  c93a a90d                   lda #13
  1572  c93c 20d2ff                 jsr charout
  1573  c93f 60                     rts
  1574                          
  1575                          skipspaces:
  1576  c940 b90002             -   lda inputbuf, y
  1577  c943 c920                   cmp #$20
  1578  c945 d003                   bne +
  1579  c947 c8                     iny
  1580  c948 d0f6                   bne -
  1581  c94a 60                 +   rts
  1582                          
  1583                          chkdot:
  1584  c94b b90002                 lda inputbuf, y
  1585  c94e c92e                   cmp #'.'
  1586  c950 d003                   bne +
  1587  c952 c8                     iny
  1588  c953 a900                   lda #0 ; Z true (EQ)
  1589  c955 60                 +   rts
  1590                          
  1591                          chkhelp:
  1592  c956 b90002                 lda inputbuf, y
  1593  c959 c93f                   cmp #'?'
  1594  c95b d003                   bne +
  1595  c95d c8                     iny
  1596  c95e a900                   lda #0 ; Z true (EQ)
  1597  c960 60                 +   rts
  1598                          
  1599                          chkcolon:
  1600  c961 b90002                 lda inputbuf, y
  1601  c964 c93a                   cmp #':'
  1602  c966 d003                   bne +
  1603  c968 c8                     iny
  1604  c969 a900                   lda #0 ; Z true (EQ)
  1605  c96b 60                 +   rts
  1606                          
  1607                          chkfilename:
  1608  c96c 84ff                   sty tmp
  1609  c96e b90002                 lda inputbuf, y
  1610  c971 c922                   cmp #34
  1611  c973 d010                   bne ++
  1612  c975 c8                 -   iny
  1613  c976 b90002                 lda inputbuf, y
  1614  c979 c90d                   cmp #13
  1615  c97b d004                   bne +
  1616  c97d a4ff                   ldy tmp
  1617  c97f d004                   bne ++
  1618  c981 c922               +   cmp #34
  1619  c983 d0f0                   bne -
  1620  c985 60                 ++  rts
  1621                          
  1622                          chkhexbyteofsequence:
  1623  c986 204fc2                 jsr inputhexbyte
  1624  c989 20a3c9                 jsr +
  1625  c98c d011                   bne ++ ; Z false (NE) if failed checks
  1626  c98e c4a4                   cpy len
  1627  c990 f00d                   beq ++ ; Z true (EQ) if end of input
  1628  c992 85ff                   sta tmp
  1629  c994 b90002                 lda inputbuf,y
  1630  c997 c920                   cmp #$20
  1631  c999 d004                   bne ++ ; Z false (NE) if not space
  1632  c99b a5ff                   lda tmp
  1633  c99d a200                   ldx #0 ; Z true (EQ) is space delimeter
  1634  c99f 60                 ++  rts
  1635                          
  1636                          chkhexword:
  1637                          chkhexaddr1:
  1638  c9a0 2026c2                 jsr inputhexword
  1639  c9a3 a200               +   ldx #0 ; Z true (EQ)
  1640  c9a5 9001                   bcc +
  1641  c9a7 e8                     inx ; Z false (NE)
  1642  c9a8 60                 +   rts
  1643                          
  1644                          chkhexbyte
  1645  c9a9 98                     tya
  1646  c9aa 48                     pha ; save y
  1647  c9ab 204fc2                 jsr inputhexbyte
  1648  c9ae b00d                   bcs +
  1649  c9b0 85a6                   sta tmp2
  1650  c9b2 2069c2                 jsr inputhexnybble
  1651  c9b5 9006                   bcc +
  1652  c9b7 68                     pla ; throw away saved y
  1653  c9b8 a5a6                   lda tmp2
  1654  c9ba a200                   ldx #0 ; Z true (EQ)
  1655  c9bc 60                     rts
  1656  c9bd 68                 +   pla
  1657  c9be a8                     tay ; won't be zero, so Z false (NE)
  1658  c9bf 60                     rts    
  1659                          
  1660                          chkhexaddr2:
  1661  c9c0 a5fb                   lda ptr1
  1662  c9c2 48                     pha
  1663  c9c3 a5fc                   lda ptr1+1
  1664  c9c5 48                     pha
  1665  c9c6 20a0c9                 jsr chkhexaddr1
  1666  c9c9 f005                   beq +
  1667  c9cb 68                     pla
  1668  c9cc 68                     pla
  1669  c9cd a901                   lda #1 ; Z false (NE)
  1670  c9cf 60                     rts
  1671  c9d0 a5fb               +   lda ptr1
  1672  c9d2 85fd                   sta ptr2
  1673  c9d4 a5fc                   lda ptr1+1
  1674  c9d6 85fe                   sta ptr2+1
  1675  c9d8 68                     pla
  1676  c9d9 85fc                   sta ptr1+1
  1677  c9db 68                     pla
  1678  c9dc 85fb                   sta ptr1
  1679  c9de a900                   lda #0 ; Z true (EQ)
  1680  c9e0 60                     rts    
  1681                          
  1682                          chkaddr1cmd:
  1683  c9e1 b90002                 lda inputbuf, y
  1684  c9e4 c941               +   cmp #'A'
  1685  c9e6 d004                   bne +
  1686  c9e8 c8                     iny
  1687  c9e9 4c44c5                 jmp executeassemble
  1688  c9ec c944               +   cmp #'D'
  1689  c9ee d004                   bne +
  1690  c9f0 c8                     iny
  1691  c9f1 4c1ac9                 jmp executedisassemble
  1692  c9f4 c952               +   cmp #'R'
  1693  c9f6 d004                   bne +
  1694  c9f8 c8                     iny
  1695  c9f9 4cddc8                 jmp executerun
  1696  c9fc 60                 +   rts
  1697                          
  1698                          newline:
  1699  c9fd a90d                   lda #13
  1700  c9ff 4cd2ff                 jmp charout
  1701                          
  1702                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1703                          ;     jsr $ffd2
  1704                          ;     pha
  1705                          ; -   lda $d011
  1706                          ;     bpl -
  1707                          ; -   lda $d011
  1708                          ;     bmi -
  1709                          ; -   lda $d011
  1710                          ;     bpl -
  1711                          ; -   lda $d011
  1712                          ;     bmi -
  1713                          ;     pla
  1714                          ;     rts
  1715                          
  1716                          !ifdef MINIMUM {
  1717                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1718                          ;; MC6850
  1719                          UART_DATA=$FFF8
  1720                          UART_STCR=$FFF9
  1721                          
  1722                          UART_INIT:
  1723                          	ldx #0b00000111 ; 11=reset device
  1724                          	stx UART_STCR
  1725                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  1726                          	sta UART_STCR
  1727                          	rts
  1728                          UART_OUT:
  1729                          	pha
  1730                          -	lda UART_STCR
  1731                          	and #2
  1732                          	beq - ; branch if TDRE=0, not finished transmitting
  1733                          	pla
  1734                          	pha
  1735                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  1736                          	sta UART_DATA
  1737                          	pla
  1738                          	rts
  1739                          UART_IN:
  1740                          -	lda UART_STCR
  1741                          	and #1
  1742                          	beq - ; branch if TDRF=0, not received
  1743                          	lda UART_DATA
  1744                          	; software "CAPS LOCK" because wozmon expects only uppercase
  1745                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  1746                          	beq BREAK
  1747                              ; force lowercase alphabet to uppercase
  1748                              cmp #'a'
  1749                          	bcc +
  1750                          	cmp #'z'+1
  1751                          	bcs +
  1752                          	eor #$20
  1753                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  1754                           	rts
  1755                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  1756                          	pha ; save A
  1757                          	lda UART_STCR
  1758                          	lsr ; put rightmost bit in carry
  1759                          	pla ; restore A affects flags
  1760                          	ror ; move carry to left bit, right bit to carry
  1761                          	php ; push processor to save N
  1762                          	rol ; restore A affects flags
  1763                          	plp ; pull processor to restore N
  1764                          	rts
  1765                          
  1766                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1767                          ; Processor start and interrupts
  1768                          
  1769                          NMI: ; unused on minimum (no source of interrupt)
  1770                              rti
  1771                          
  1772                          IRQ:
  1773                              rti ; TODO implement BRK HANDLING in monitor
  1774                          
  1775                          BREAK:
  1776                              jmp RESET
  1777                          
  1778                          RESET:
  1779                              cld
  1780                              ldx #$00
  1781                              txs
  1782                              jsr JUART_INIT
  1783                              cli
  1784                              jmp start
  1785                          } ; !ifdef MINIMUM
  1786                          
  1787                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1788                          ; data
  1789                          
  1790                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  1791                          ninst = 56
  1792  ca02 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  1793  ca3a 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  1794  ca72 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  1795                          
  1796                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  1797                          mode_jmptable:
  1798  caaa 23c1               !word dispModeAcc-1; 0 Accumulator 1
  1799  caac 28c1               !word dispModeNone-1 ; 1 None 1
  1800  caae 29c1               !word dispModeImm-1 ; 2 Immediate 2
  1801  cab0 3ac1               !word dispModeIndX-1 ; 3 IndirectX 2
  1802  cab2 5ac1               !word dispModeIndY-1 ; 4 IndirectY 2
  1803  cab4 7ac1               !word dispModeRel-1 ; 5 Relative 2
  1804  cab6 2ec1               !word dispModeZP-1 ; 6 ZeroPage 2
  1805  cab8 b6c1               !word dispModeZPX-1 ; 7 ZeroPageX 2
  1806  caba c3c1               !word dispModeZPY-1 ; 8 ZeroPageY 2
  1807  cabc d0c1               !word dispModeAbs-1 ; 9 Absolute 3
  1808  cabe e2c1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  1809  cac0 efc1               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  1810  cac2 fcc1               !word dispModeInd-1 ; 12 Indirect 3
  1811                          
  1812                          nmodes = 13
  1813                          
  1814                          mode_sorted:
  1815  cac4 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  1816                          
  1817                          !ifdef MINIMUM {
  1818                          mode_0: !text "Accumulator", 0, "A", 0
  1819                          mode_1: !text "None", 0, "", 0
  1820                          mode_2: !text "Immediate", 0, "#$12", 0
  1821                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  1822                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  1823                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  1824                          mode_6: !text "ZeroPage", 0, "$12", 0
  1825                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  1826                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  1827                          mode_9: !text "Absolute", 0, "$1234", 0
  1828                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  1829                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  1830                          mode_12: !text "Indirect", 0, "($1234)", 0
  1831                          } else {
  1832  cad1 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  1833  cadf 4e4f4e450000       mode_1: !text "NONE", 0, "", 0
  1834  cae5 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  1835  caf4 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  1836  cb06 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  1837  cb18 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  1838  cb37 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  1839  cb44 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  1840  cb54 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  1841  cb64 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  1842  cb73 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  1843  cb85 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  1844  cb97 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  1845                          }
  1846                          
  1847                          modes: ; table for easily displaying each mode_example
  1848  cba8 d1ca               !word mode_0
  1849  cbaa dfca               !word mode_1
  1850  cbac e5ca               !word mode_2
  1851  cbae f4ca               !word mode_3
  1852  cbb0 06cb               !word mode_4
  1853  cbb2 18cb               !word mode_5
  1854  cbb4 37cb               !word mode_6
  1855  cbb6 44cb               !word mode_7
  1856  cbb8 54cb               !word mode_8
  1857  cbba 64cb               !word mode_9
  1858  cbbc 73cb               !word mode_10
  1859  cbbe 85cb               !word mode_11
  1860  cbc0 97cb               !word mode_12
  1861                          
  1862                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  1863                          nopcodes = 151
  1864  cbc2 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  1865  cc59 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  1866  ccf0 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  1867                          
  1868                          copyright 
  1869                          ;                  1         2         3         4
  1870                          ;         1234567890123456789012345678901234567890
  1871  cd87 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  1872                          !ifdef C64TERMINAL {
  1873                              !text 13, "(TERMINAL VERSION)"
  1874                          }
  1875  cda7 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  1876  cdcd 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  1877  cde4 00                 !text 0
  1878                          
  1879                          firsthelp
  1880  cde5 0d3f202020202020...!text 13, "?       (SYNTAX)"
  1881  cdf6 0d3f204120202020...!text 13, "? A     (LIST 6502 INSTRUCTIONS)"
  1882  ce17 0d3f204144432020...!text 13, "? ADC   (/ADC/ ADDRESSING MODES)"
  1883  ce38 0d3f204d4f444520...!text 13, "? MODE  (ADDRESSING MODES)"
  1884                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  1885  ce53 0d00               !text 13, 0
  1886                          
  1887  ce55 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  1888                          
  1889                          generalhelp
  1890  ce66 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  1891  ce8c 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  1892  ceb1 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  1893  ced4 00                 !text 0
  1894                          generalhelp2
  1895  ced5 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  1896  cefd 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  1897  cf19 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  1898  cf39 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  1899  cf5b 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  1900  cf80 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  1901  cf9f 00                 !text 0
  1902                          
  1903  cfa0 4d4f444500         modes_keyword !text "MODE", 0
  1904                          
  1905                          !ifdef C64SCREEN {
  1906  cfa5 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  1907  cfac 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  1908                          }
  1909                          
  1910                          !ifdef MINIMUM {
  1911                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1912                          ; JUMP table for some stability
  1913                          * = $FFEE
  1914                          JUART_INIT: JMP UART_INIT
  1915                          JUART_OUT: JMP UART_OUT
  1916                          JUART_IN: JMP UART_IN
  1917                          JUART_CHK: JMP UART_CHK
  1918                          
  1919                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1920                          ; 6502 vectors 
  1921                          * = $fffa
  1922                              !word NMI
  1923                              !word RESET
  1924                              !word IRQ
  1925                          }
  1926                          
  1927                          finish = *
