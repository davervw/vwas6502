
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGETS:                              *        <<<
     7                          ;; >>>       ** (1)  C64 8000-9FFF screen editor                *        <<<
     8                          ;; >>>       ** (2)  C64 8000-9FFF terminal edition             *        <<<
     9                          ;; >>>       ** (3)  6502+MC6850 minimum system                 *        <<<
    10                          ;; >>>       *   56K(RAM),8K(ROM), 2 bytes IO for MC6850 UART   *        <<<
    11                          ;; >>>       ****************************************************        <<<
    12                          ;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          ;; MIT License
    15                          ;;
    16                          ;; Copyright (c) 2024 David R. Van Wagner
    17                          ;; davevw.com
    18                          ;;
    19                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    20                          ;; of this software and associated documentation files (the "Software"), to deal
    21                          ;; in the Software without restriction, including without limitation the rights
    22                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    23                          ;; copies of the Software, and to permit persons to whom the Software is
    24                          ;; furnished to do so, subject to the following conditions:
    25                          ;;
    26                          ;; The above copyright notice and this permission notice shall be included in all
    27                          ;; copies or substantial portions of the Software.
    28                          ;;
    29                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    30                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    31                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    32                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    33                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    34                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    35                          ;; SOFTWARE.
    36                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                          
    40                          ; Important! define exactly ONE target (set in build.sh)
    41                          ;C64SCREEN = 1
    42                          ;C64TERMINAL = 1
    43                          ;MINIMUM = 1
    44                          
    45                          ; options (set in build.sh)
    46                          ;NEEDECHO = 0
    47                          
    48                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                          
    50                          ;; _
    51                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    52                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    53                          ;; 1000 (display memory at $1000)
    54                          ;; 1000.2000 (display memory range $1000 to $2000)
    55                          ;; 1000. (display next screenful of memory starting at $1000)
    56                          ;; . (display next screenful of memory)
    57                          ;; 1000 r (JMP $1000)
    58                          ;; 1000: 01 02 03 (modify memory)
    59                          ;; (NEW SYNTAX)
    60                          ;; 1000 d (disassemble starting at address, for screenful)
    61                          ;; d (continue disassembling from last address)
    62                          ;; 1000 a (assemble starting at, interactive until empty line) 
    63                          ;; x (exit monitor -- C64 only)
    64                          ;; ? (commands help)
    65                          ;; ? a (list instructions available)
    66                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    67                          ;; ? mode (show addressing modes example syntax for 6502)
    68                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    69                          ;; (FUTURE SYNTAX, not implemented)
    70                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    71                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    72                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    73                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    74                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    75                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    76                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    77                          ;;
    78                          ;; (INTERACTIVE ASSEMBLER)
    79                          ;; 1000 _
    80                          ;;      ADC #$12
    81                          ;; 1000 69 12    ADC #$12
    82                          ;; 1002 _
    83                          ;;      JSR $1234
    84                          ;; 1002 20 34 12 JSR $1234
    85                          ;; 1005 _
    86                          ;;      RTS
    87                          ;; 1005 60       RTS
    88                          ;; 1006 _
    89                          ;;      XYZ
    90                          ;;      XYZ ?
    91                          ;; 1006 _
    92                          ;; _
    93                          ;;
    94                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    95                          ;; and can cursor up to revise, 
    96                          ;;
    97                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    98                          ;;
    99                          
   100                          ; global
   101                          inputbuf=$0200
   102                          
   103                          
   104                          ; kernal/system calls
   105                          
   106                          !ifdef MINIMUM {
   107                          charout=JUART_OUT
   108                          getkey=JUART_IN
   109                          }
   110                          
   111                          !ifdef C64SCREEN {
   112                          setlfs=$ffba
   113                          setnam=$ffbd
   114                          charin=$ffcf ; screen editor
   115                          charout=$ffd2
   116                          fsave =$ffd8
   117                          getkey=$ffe4
   118                          }
   119                          
   120                          !ifdef C64TERMINAL {
   121                          setlfs=$ffba
   122                          setnam=$ffbd
   123                          charout=$ffd2
   124                          getkey=$ffe4
   125                          fsave =$ffd8
   126                          }
   127                          
   128                          ; zeropage
   129                          !ifdef MINIMUM {
   130                          opidx=$f0
   131                          inidx=$f1
   132                          mode=$f2
   133                          size=$f3
   134                          ptr3=$f4 ; and $f5
   135                          count=$f6
   136                          len=$f7
   137                          savepos=$f8
   138                          tmp2=$f9
   139                          flag=$fa
   140                          ptr1=$fb ; and $fc
   141                          ptr2=$fd ; and $fe
   142                          tmp=$ff
   143                          } else {
   144                          ptr1=$fb ; and $fc
   145                          ptr2=$fd ; and $fe
   146                          tmp=$ff
   147                          opidx=$22
   148                          inidx=$23
   149                          mode=$24
   150                          size=$25
   151                          ptr3=$26 ; and $27
   152                          count=$a3
   153                          len=$a4
   154                          savepos=$a5
   155                          tmp2=$a6
   156                          flag=$a7
   157                          banksel=$02
   158                          drive=$a8
   159                          }
   160                          
   161                          !ifdef MINIMUM {
   162                          * = $e000
   163                          } else { // any C64
   164                          * = $8000
   165                          }
   166                          
   167                          start:
   168  8000 a97d                   lda #<copyright
   169  8002 a28e                   ldx #>copyright
   170  8004 209f83                 jsr strout
   171  8007 a9db                   lda #<firsthelp
   172  8009 a28e                   ldx #>firsthelp
   173  800b 209f83                 jsr strout
   174  800e 20ba83             -   jsr inputline
   175  8011 20bd83                 jsr parseline
   176  8014 4c0e80                 jmp -
   177                          
   178                          !ifndef MINIMUM {
   179                          ; C64 only
   180                          chkextrac64:
   181  8017 202380                 jsr chkexit
   182  801a d003                   bne +
   183  801c 4c3780                 jmp execute_exit
   184  801f 18                 +   clc ; no error
   185  8020 a201                   ldx #1 ; Z false - not consumed
   186  8022 60                     rts
   187                          
   188                          chkexit:
   189  8023 b90002                 lda inputbuf, y
   190  8026 c958                   cmp #'X'
   191  8028 d008                   bne +
   192  802a c8                     iny
   193  802b c4a4                   cpy len ; validate no extra characters
   194  802d f003                   beq +
   195  802f 4c3380                 jmp extra_error
   196  8032 60                 +   rts
   197                          
   198                          extra_error:
   199                              ; pop local return address
   200  8033 68                     pla
   201  8034 68                     pla
   202  8035 38                     sec ; error
   203  8036 60                     rts
   204                          
   205                          execute_exit:
   206                              ; pop monitor return addresses, so only original caller is left
   207  8037 68                     pla
   208  8038 68                     pla
   209  8039 68                     pla
   210  803a 68                     pla
   211  803b 68                     pla
   212  803c 68                     pla
   213  803d 60                     rts
   214                          
   215                          display_extra_help:
   216  803e a90d                   lda #<extra_help
   217  8040 a281                   ldx #>extra_help
   218  8042 4c9f83                 jmp strout
   219                          
   220                          !ifdef C64SCREEN {
   221                          display_page_disassemble:
   222  8045 a5fb                   lda ptr1
   223  8047 a6fc                   ldx ptr1+1
   224  8049 202383                 jsr disphexword
   225  804c a94a                   lda #<page_disassemble
   226  804e a281                   ldx #>page_disassemble
   227  8050 4c9f83                 jmp strout
   228                          
   229                          display_page_displaymemory:
   230  8053 20f28a                 jsr newline
   231  8056 a5fb                   lda ptr1
   232  8058 a6fc                   ldx ptr1+1
   233  805a 202383                 jsr disphexword
   234  805d a951                   lda #<page_displaymemory
   235  805f a281                   ldx #>page_displaymemory
   236  8061 4c9f83                 jmp strout
   237                          
   238                          inputlinec64:
   239  8064 a000                   ldy #0
   240  8066 20cfff             -   jsr charin
   241  8069 990002                 sta inputbuf,y
   242  806c c8                     iny
   243  806d c90d                   cmp #13
   244  806f d0f5                   bne -
   245  8071 60                     rts
   246                          
   247                          continueassemblec64:
   248  8072 a914                   lda #20
   249  8074 20d2ff                 jsr charout
   250  8077 20d2ff                 jsr charout
   251  807a a5fb                   lda ptr1
   252  807c a6fc                   ldx ptr1+1
   253  807e 202383                 jsr disphexword
   254  8081 a920                   lda #' '
   255  8083 20d2ff                 jsr charout
   256  8086 20d2ff                 jsr charout
   257  8089 4cd2ff                 jmp charout
   258                          }
   259                          
   260                          chkfilename:
   261  808c 204b8a                 jsr skipspaces
   262  808f 84ff                   sty tmp
   263  8091 b90002                 lda inputbuf, y
   264  8094 c922                   cmp #34 ; double quote
   265  8096 d022                   bne ++
   266  8098 c8                 -   iny
   267  8099 b90002                 lda inputbuf, y
   268  809c c90d                   cmp #13
   269  809e d004                   bne +
   270  80a0 a4ff                   ldy tmp
   271  80a2 d016                   bne ++
   272  80a4 c922               +   cmp #34 ; double quote
   273  80a6 d0f0                   bne -
   274  80a8 98                     tya ; index of ending double quotes
   275  80a9 48                     pha ; save
   276  80aa 18                     clc ; will subtract one more
   277  80ab e5ff                   sbc tmp ; subtract index of first quote, have filename length
   278  80ad a6ff                   ldx tmp
   279  80af e8                     inx ; low address of filename
   280  80b0 a002                   ldy #>inputbuf ; high address of filename
   281  80b2 20bdff                 jsr setnam
   282  80b5 68                     pla
   283  80b6 a8                     tay
   284  80b7 c8                     iny ; advance past ending double quotes
   285  80b8 a900                   lda #0 ; set Z true
   286  80ba 60                 ++  rts
   287                          
   288                          check_execute_save:
   289  80bb 208c80             +   jsr chkfilename
   290  80be f006                   beq +
   291  80c0 20348a                 jsr reporterr
   292  80c3 a201                   ldx #1 ; set Z false
   293  80c5 60                     rts
   294  80c6 20d480             +   jsr chkoptionaldrive
   295  80c9 20e880                 jsr chksave
   296  80cc d005                   bne +
   297  80ce 20f180                 jsr executesave
   298  80d1 a200                   ldx #0 ; set Z true
   299  80d3 60                 +   rts
   300                          
   301                          chkoptionaldrive:
   302  80d4 a908                   lda #8
   303  80d6 85a8                   sta drive
   304  80d8 204b8a                 jsr skipspaces
   305  80db 209e8a                 jsr chkhexbyte
   306  80de d007                   bne +
   307  80e0 85a8                   sta drive
   308  80e2 204b8a                 jsr skipspaces
   309  80e5 a900                   lda #0 ; set Z true
   310  80e7 60                 +   rts
   311                          
   312                          chksave:
   313  80e8 204b8a                 jsr skipspaces
   314  80eb b90002                 lda inputbuf, y
   315  80ee c953                   cmp #'S'
   316  80f0 60                     rts
   317                          
   318                          executesave:
   319  80f1 20f28a                 jsr newline
   320  80f4 a9c0                   lda #$c0 ; KERNAL control and error messages
   321  80f6 859d                   sta $9d ; set messages to be displayed
   322  80f8 a901                   lda #1
   323  80fa a6a8                   ldx drive
   324  80fc a00f                   ldy #15
   325  80fe 20baff                 jsr setlfs
   326  8101 a9fb                   lda #ptr1
   327  8103 a6fd                   ldx ptr2
   328  8105 a4fe                   ldy ptr2+1
   329  8107 20d8ff                 jsr fsave
   330  810a 4cf28a                 jmp newline
   331                          
   332                          extra_help:
   333  810d 5820202020202020...    !text "X           (EXIT MONITOR)", 13
   334  8128 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S  (SAVE)"
   335  8149 00                     !text 0
   336                          
   337                          !ifdef C64SCREEN {
   338  814a 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
   339  8151 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
   340                          }
   341                          
   342                          }
   343                          
   344                          ; test: ; all the addressing modes here for testing disassembly
   345                          ;     nop
   346                          ;     lda $1234
   347                          ;     lda $1234,x
   348                          ;     lda $1234,y
   349                          ;     asl
   350                          ;     lda #$12
   351                          ;     lda ($12,x)
   352                          ;     lda ($12),y
   353                          ;     jmp ($1234)
   354                          ; -   bne -
   355                          ;     lda $12
   356                          ;     lda $12,x
   357                          ;     ldx $12,y
   358                          ;     !byte $FF ; unknown
   359                          
   360                          disassemble:
   361  8158 a917                   lda #23
   362  815a 85a3                   sta count
   363  815c a000               -   ldy #0
   364  815e b1fb                   lda (ptr1),y
   365  8160 208781                 jsr find_opcode
   366  8163 20ea81                 jsr disp_current
   367  8166 a525                   lda size
   368  8168 1002                   bpl +
   369  816a a901                   lda #1
   370  816c 18                 +   clc
   371  816d 65fb                   adc ptr1
   372  816f 85fb                   sta ptr1
   373  8171 9002                   bcc +
   374  8173 e6fc                   inc ptr1+1
   375  8175 c6a3               +   dec count
   376  8177 d0e3                   bne -
   377                          !ifdef C64SCREEN {
   378  8179 4c4580                 jmp display_page_disassemble
   379                          } else {    
   380                              rts
   381                          }
   382                          
   383                          compareptrs:
   384  817c a5fc                   lda ptr1+1
   385  817e c5fe                   cmp ptr2+1
   386  8180 d004                   bne +
   387  8182 a5fb                   lda ptr1
   388  8184 c5fd                   cmp ptr2
   389  8186 60                 +   rts
   390                          
   391                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   392                          ; and properties updated in ZP globals size,inidx,opidx,mode
   393  8187 a097                   ldy #nopcodes
   394  8189 a296                   ldx #nopcodes-1
   395  818b ddb88c             -   cmp opcodes,x
   396  818e f00f                   beq +
   397  8190 ca                     dex
   398  8191 88                     dey
   399  8192 d0f7                   bne -
   400  8194 18                     clc
   401  8195 a901                   lda #1
   402  8197 8525                   sta size
   403  8199 a9ff                   lda #$FF
   404  819b aa                     tax
   405  819c a8                     tay
   406  819d 900a                   bcc ++
   407  819f bd4f8d             +   lda instidx, x
   408  81a2 bce68d                 ldy modeidx, x
   409  81a5 20b081                 jsr getsize
   410  81a8 38                     sec
   411  81a9 8523               ++  sta inidx
   412  81ab 8622                   stx opidx
   413  81ad 8424                   sty mode
   414  81af 60                     rts
   415                          
   416                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   417                              ; result returned in size
   418  81b0 48                     pha
   419  81b1 a901                   lda #1
   420  81b3 8525                   sta size
   421  81b5 68                     pla
   422  81b6 c002                   cpy #2 // Immediate
   423  81b8 9008                   bcc +
   424  81ba e625                   inc size
   425  81bc c009                   cpy #9 // Absolute
   426  81be 9002                   bcc +
   427  81c0 e625                   inc size
   428  81c2 60                 +   rts
   429                          
   430                          disp_opcode: ; .A opcode byte
   431  81c3 208781                 jsr find_opcode
   432  81c6 8a                     txa
   433                              ; fall through to display instruction
   434                          
   435                          dispinst: ; .A instruction index 0..55, note modifies A and X
   436  81c7 aa                     tax
   437  81c8 e038                   cpx #ninst
   438  81ca b012                   bcs +
   439  81cc bdf78a                 lda inst0, x
   440  81cf 20d2ff                 jsr charout
   441  81d2 bd2f8b                 lda inst1, x
   442  81d5 20d2ff                 jsr charout
   443  81d8 bd678b                 lda inst2, x
   444  81db 4cd2ff                 jmp charout
   445  81de a93f               +   lda #'?'
   446  81e0 20d2ff                 jsr charout
   447  81e3 20d2ff                 jsr charout
   448  81e6 20d2ff                 jsr charout
   449  81e9 60                     rts
   450                          
   451                          disp_current:
   452  81ea a5fb                   lda ptr1
   453  81ec a6fc                   ldx ptr1+1
   454  81ee 202383                 jsr disphexword
   455  81f1 a920                   lda #$20
   456  81f3 20d2ff                 jsr charout
   457  81f6 a000                   ldy #0
   458  81f8 a625                   ldx size
   459  81fa b1fb               -   lda (ptr1),y
   460  81fc 202983                 jsr disphexbyte
   461  81ff a920                   lda #$20
   462  8201 20d2ff                 jsr charout
   463  8204 c8                     iny
   464  8205 ca                     dex
   465  8206 d0f2                   bne -
   466  8208 c003               -   cpy #3
   467  820a f00e                   beq +
   468  820c a920                   lda #$20
   469  820e 20d2ff                 jsr charout
   470  8211 20d2ff                 jsr charout
   471  8214 20d2ff                 jsr charout
   472  8217 c8                     iny
   473  8218 d0ee                   bne -
   474  821a a523               +   lda inidx
   475  821c 20c781                 jsr dispinst
   476  821f a920                   lda #$20
   477  8221 20d2ff                 jsr charout
   478  8224 202c82                 jsr disp_mode
   479  8227 a90d                   lda #13
   480  8229 4cd2ff                 jmp charout
   481                          
   482                          disp_mode
   483  822c a524                   lda mode
   484  822e c90d                   cmp #13
   485  8230 b00a                   bcs +
   486  8232 0a                     asl
   487  8233 aa                     tax
   488  8234 bda08b                 lda mode_jmptable+1,x
   489  8237 48                     pha
   490  8238 bd9f8b                 lda mode_jmptable,x
   491  823b 48                     pha
   492  823c 60                 +   rts
   493                          
   494                          dispModeAcc:
   495  823d a941                   lda #'A'
   496  823f 4cd2ff                 jmp charout
   497                          
   498                          dispModeNone:
   499  8242 60                     rts
   500                          
   501                          dispModeImm:
   502  8243 a923                   lda #'#'
   503  8245 20d2ff                 jsr charout
   504                          dispModeZP:
   505  8248 a924                   lda #'$'
   506  824a 20d2ff                 jsr charout
   507  824d a001                   ldy #1
   508  824f b1fb                   lda (ptr1),y
   509  8251 4c2983                 jmp disphexbyte
   510                          
   511                          dispModeIndX:
   512  8254 a928                   lda #'('
   513  8256 20d2ff                 jsr charout
   514  8259 a924                   lda #'$'
   515  825b 20d2ff                 jsr charout
   516  825e a001                   ldy #1
   517  8260 b1fb                   lda (ptr1),y
   518  8262 202983                 jsr disphexbyte
   519  8265 a92c                   lda #','
   520  8267 20d2ff                 jsr charout
   521  826a a958                   lda #'X'
   522  826c 20d2ff                 jsr charout
   523  826f a929                   lda #')'
   524  8271 4cd2ff                 jmp charout
   525                          
   526                          dispModeIndY:
   527  8274 a928                   lda #'('
   528  8276 20d2ff                 jsr charout
   529  8279 a924                   lda #'$'
   530  827b 20d2ff                 jsr charout
   531  827e a001                   ldy #1
   532  8280 b1fb                   lda (ptr1),y
   533  8282 202983                 jsr disphexbyte
   534  8285 a929                   lda #')'
   535  8287 20d2ff                 jsr charout
   536  828a a92c                   lda #','
   537  828c 20d2ff                 jsr charout
   538  828f a959                   lda #'Y'
   539  8291 4cd2ff                 jmp charout
   540                          
   541                          dispModeRel:
   542  8294 a924                   lda #'$'
   543  8296 20d2ff                 jsr charout
   544  8299 18                     clc
   545  829a a5fb                   lda ptr1
   546  829c 6902                   adc #2
   547  829e 8526                   sta ptr3
   548  82a0 a5fc                   lda ptr1+1
   549  82a2 6900                   adc #0
   550  82a4 8527                   sta ptr3+1
   551  82a6 a001                   ldy #1
   552  82a8 b1fb                   lda (ptr1),y
   553  82aa 1014                   bpl +
   554                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   555  82ac 49ff                   eor #$FF ; inverse
   556  82ae 18                     clc
   557  82af 6901                   adc #1 ; complete getting absolute value from two's complement
   558  82b1 85ff                   sta tmp
   559  82b3 38                     sec
   560  82b4 a526                   lda ptr3
   561  82b6 e5ff                   sbc tmp
   562  82b8 8526                   sta ptr3
   563  82ba b00d                   bcs ++
   564  82bc c627                   dec ptr3+1
   565  82be 9009                   bcc ++
   566  82c0 18                 +   clc ; simple case of adding
   567  82c1 6526                   adc ptr3
   568  82c3 8526                   sta ptr3
   569  82c5 9002                   bcc ++
   570  82c7 e627                   inc ptr3+1
   571  82c9 a526               ++  lda ptr3
   572  82cb a627                   ldx ptr3+1
   573  82cd 4c2383                 jmp disphexword
   574                          
   575                          dispModeZPX:
   576  82d0 204882                 jsr dispModeZP
   577  82d3 a92c                   lda #','
   578  82d5 20d2ff                 jsr charout
   579  82d8 a958                   lda #'X'
   580  82da 4cd2ff                 jmp charout
   581                          
   582                          dispModeZPY:
   583  82dd 204882                 jsr dispModeZP
   584  82e0 a92c                   lda #','
   585  82e2 20d2ff                 jsr charout
   586  82e5 a959                   lda #'Y'
   587  82e7 4cd2ff                 jmp charout
   588                          
   589                          dispModeAbs:
   590  82ea a924                   lda #'$'
   591  82ec 20d2ff                 jsr charout
   592  82ef a001                   ldy #1
   593  82f1 b1fb                   lda (ptr1),y
   594  82f3 48                     pha
   595  82f4 c8                     iny
   596  82f5 b1fb                   lda (ptr1),y
   597  82f7 aa                     tax
   598  82f8 68                     pla
   599  82f9 4c2383                 jmp disphexword
   600                          
   601                          dispModeAbsX:
   602  82fc 20ea82                 jsr dispModeAbs
   603  82ff a92c                   lda #','
   604  8301 20d2ff                 jsr charout
   605  8304 a958                   lda #'X'
   606  8306 4cd2ff                 jmp charout
   607                          
   608                          dispModeAbsY:
   609  8309 20ea82                 jsr dispModeAbs
   610  830c a92c                   lda #','
   611  830e 20d2ff                 jsr charout
   612  8311 a959                   lda #'Y'
   613  8313 4cd2ff                 jmp charout
   614                          
   615                          dispModeInd:
   616  8316 a928                   lda #'('
   617  8318 20d2ff                 jsr charout
   618  831b 20ea82                 jsr dispModeAbs
   619  831e a929                   lda #')'
   620  8320 4cd2ff                 jmp charout
   621                          
   622                          disphexword: ; .A low, .X high, 0000..FFFF
   623  8323 48                     pha
   624  8324 8a                     txa
   625  8325 202983                 jsr disphexbyte
   626  8328 68                     pla
   627                              ;fall through to call again
   628                          
   629                          disphexbyte: ; .A 00..FF
   630  8329 48                     pha
   631  832a 4a                     lsr
   632  832b 4a                     lsr
   633  832c 4a                     lsr
   634  832d 4a                     lsr
   635  832e 203283                 jsr disphexnybble
   636  8331 68                     pla
   637                              ;fall through to call again
   638                          
   639                          disphexnybble: ; .A 0..F
   640  8332 290f                   and #$0F
   641  8334 0930                   ora #$30
   642  8336 c93a                   cmp #$3A
   643  8338 9002                   bcc +
   644  833a 6906                   adc #$06
   645  833c 4cd2ff             +   jmp charout
   646                          
   647                          inputhexword: ; C set if fails
   648  833f a900                   lda #0
   649  8341 85fb                   sta ptr1
   650  8343 85fc                   sta ptr1+1
   651                          
   652  8345 a904                   lda #4 ; word is at most 4 nybbles
   653  8347 85a3                   sta count
   654  8349 208183             --  jsr inputhexnybble
   655  834c b012                   bcs +
   656                          
   657                              ; shift nibble up
   658  834e 0a                     asl
   659  834f 0a                     asl
   660  8350 0a                     asl
   661  8351 0a                     asl
   662                          
   663  8352 a204                   ldx #4 ; 4 bits rotated into word
   664  8354 2a                 -   rol
   665  8355 26fb                   rol ptr1
   666  8357 26fc                   rol ptr1+1
   667  8359 ca                     dex
   668  835a d0f8                   bne - ; repeat bits
   669                          
   670  835c c6a3                   dec count
   671  835e d0e9                   bne -- ; repeat nybbles
   672                          
   673  8360 a5a3               +   lda count
   674  8362 c904                   cmp #4 ; set C if 4, otherwise clear
   675  8364 60                     rts
   676                          
   677                          inputhexbyte:
   678  8365 208183                 jsr inputhexnybble
   679  8368 b016                   bcs ++
   680  836a 85ff                   sta tmp
   681  836c 208183                 jsr inputhexnybble
   682  836f 9005                   bcc +
   683  8371 18                     clc ; allow single digit as byte
   684  8372 a5ff                   lda tmp
   685  8374 900a                   bcc ++
   686  8376 06ff               +   asl tmp
   687  8378 06ff                   asl tmp
   688  837a 06ff                   asl tmp
   689  837c 06ff                   asl tmp
   690  837e 05ff                   ora tmp ; necessary to assemble the two nybbles
   691  8380 60                 ++  rts
   692                          
   693                          inputhexnybble:
   694  8381 b90002                 lda $0200,y
   695  8384 297f                   and #$7F
   696  8386 38                     sec
   697  8387 e930                   sbc #$30
   698  8389 9012                   bcc ++
   699  838b c90a                   cmp #10
   700  838d 900c                   bcc +
   701  838f e907                   sbc #7
   702  8391 900a                   bcc ++
   703  8393 c90a                   cmp #10
   704  8395 9006                   bcc ++
   705  8397 c910                   cmp #16
   706  8399 b002                   bcs ++
   707  839b c8                 +   iny
   708  839c 60                     rts
   709  839d 38                 ++  sec
   710  839e 60                     rts
   711                          
   712                          strout:
   713  839f 8526                   sta ptr3
   714  83a1 8627                   stx ptr3+1
   715                          strout2:    
   716  83a3 a000                   ldy #0
   717  83a5 b126               -   lda (ptr3),y
   718  83a7 f006                   beq +
   719  83a9 20d2ff                 jsr charout
   720  83ac c8                     iny
   721  83ad d0f6                   bne -
   722  83af 98                 +   tya
   723  83b0 38                     sec
   724  83b1 6526                   adc ptr3
   725  83b3 8526                   sta ptr3
   726  83b5 9002                   bcc +
   727  83b7 e627                   inc ptr3+1
   728  83b9 60                 +   rts
   729                          
   730                          inputline:
   731                          !ifdef C64SCREEN {
   732  83ba 4c6480                 jmp inputlinec64
   733                          } else {
   734                              ldy #0
   735                          --  sty count
   736                          -   jsr getkey
   737                              beq -
   738                              ldy count
   739                          !ifdef MINIMUM {
   740                              cmp #8 ; backspace
   741                          } else {
   742                              cmp #20
   743                          }
   744                              bne +
   745                              cpy #0
   746                              beq -
   747                              dey
   748                          !if NEEDECHO = 1 {    
   749                              jsr charout
   750                          }
   751                              jmp --
   752                          +   cmp #13
   753                              beq +
   754                              cmp #' '
   755                              bcc -
   756                              cmp #128
   757                              bcs -
   758                          +
   759                          !if NEEDECHO = 1 {    
   760                              jsr charout
   761                          }
   762                              sta inputbuf,y
   763                              iny
   764                              cmp #13
   765                              bne --
   766                              rts
   767                          }
   768                          
   769                          parseline:
   770  83bd c001                   cpy #1
   771  83bf d003                   bne +
   772                          -
   773                          !ifdef C64SCREEN {   
   774  83c1 4cf28a                 jmp newline
   775                          } else {
   776                              rts
   777                          }
   778  83c4 88                 +   dey
   779  83c5 84a4                   sty len
   780                              ; skip whitespace
   781                              ; check for address, put in ptr1
   782                              ; or check for dot, then require address put in ptr2
   783                              ; or check for ?, and optional parameter, execute help
   784                              ; check for whitespace
   785                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   786                              ; check for string, store at start of inputbuf
   787                              ; check for drive number
   788                              ; check for whitespace
   789                              ; check command ":rda?mls", execute command
   790  83c7 a000                   ldy #0
   791  83c9 204b8a                 jsr skipspaces
   792  83cc c4a4                   cpy len
   793  83ce f0f1                   beq -
   794  83d0 20018a                 jsr chkcontinuedis
   795  83d3 d003                   bne +
   796  83d5 20258a                 jsr executedisassemble ; note won't return
   797  83d8 20138a             +   jsr chkcontinueasm
   798  83db d003                   bne +
   799  83dd 203986                 jsr continueassemble ; note won't return
   800  83e0 205a8a             +   jsr chkdot
   801  83e3 d003                   bne +
   802  83e5 4ccc84                 jmp executedot
   803  83e8 20658a             +   jsr chkhelp
   804  83eb d003                   bne +
   805  83ed 4cd684                 jmp executehelp
   806                          +
   807                          !ifndef MINIMUM {
   808  83f0 201780                 jsr chkextrac64 ; check syntax only available on C64
   809  83f3 b014                   bcs + ; error if C set
   810  83f5 f005                   beq ++ ; consumed if Z set, skip next test(s)
   811                          }    
   812  83f7 20958a                 jsr chkhexaddr1
   813  83fa d003                   bne error
   814  83fc 4c0284             ++  jmp executeaddr1
   815                          error:
   816  83ff 4c348a                 jmp reporterr
   817                          
   818                          executeaddr1:
   819  8402 c4a4                   cpy len
   820  8404 d003                   bne +
   821  8406 4c5b84                 jmp executedisplay1
   822  8409 205a8a             +   jsr chkdot
   823  840c d00f                   bne +
   824  840e c4a4                   cpy len
   825  8410 f021                   beq executepagedisplay
   826  8412 20b58a                 jsr chkhexaddr2
   827  8415 d0e8                   bne error
   828  8417 18                     clc
   829  8418 66a7                   ror flag
   830  841a 4c4b84                 jmp executeaddr12
   831  841d 204b8a             +   jsr skipspaces
   832  8420 20708a                 jsr chkcolon
   833  8423 d003                   bne +
   834  8425 4caa84                 jmp executemodify
   835  8428 20d68a             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   836                          !ifdef MINIMUM {
   837                              jmp reportnotimplemented
   838                          } else {
   839  842b 208c80                 jsr chkfilename
   840  842e d0cf                   bne error
   841  8430 4cd384                 jmp executeloadfilename
   842                          }
   843                          
   844                          executepagedisplay:
   845  8433 a5fb                   lda ptr1
   846  8435 18                     clc
   847                          !ifdef MINIMUM {
   848                              adc #$5f
   849                          } else {
   850  8436 69b7                   adc #$b7
   851                          }
   852  8438 85fd                   sta ptr2
   853  843a a5fc                   lda ptr1+1
   854                          !ifdef MINIMUM {
   855                              adc #$01
   856                          } else {
   857  843c 6900                   adc #$00
   858                          }
   859  843e 85fe                   sta ptr2+1
   860  8440 9006                   bcc +
   861  8442 a9ff                   lda #$ff
   862  8444 85fd                   sta ptr2
   863  8446 85fe                   sta ptr2+1
   864  8448 38                 +   sec
   865  8449 66a7                   ror flag
   866                              ; fall through to executeaddr12
   867                          
   868                          executeaddr12:
   869  844b c4a4                   cpy len
   870  844d d003                   bne +
   871  844f 4c6384                 jmp executedisplay12
   872                          !ifndef MINIMUM { // any C64
   873  8452 20bb80             +   jsr check_execute_save
   874  8455 f003                   beq ++
   875                          }
   876  8457 4c2d8a             +   jmp reportnotimplemented
   877  845a 60                 ++  rts
   878                          
   879                          executedisplay1:
   880  845b a5fb                   lda ptr1
   881  845d 85fd                   sta ptr2
   882  845f a5fc                   lda ptr1+1
   883  8461 85fe                   sta ptr2+1
   884                              ; fall through executedisplay12
   885                          
   886                          executedisplay12:
   887  8463 a9ff                   lda #$ff
   888  8465 85a3                   sta count
   889  8467 e6a3               -   inc count
   890  8469 a5a3                   lda count
   891                          !ifdef MINIMUM {    
   892                              and #$0f
   893                          } else {
   894  846b 2907                   and #$07
   895                          }
   896  846d d016                   bne +
   897  846f a90d                   lda #13
   898  8471 20d2ff                 jsr charout
   899  8474 a5fb                   lda ptr1
   900  8476 a6fc                   ldx ptr1+1
   901  8478 202383                 jsr disphexword
   902  847b a93a                   lda #':'
   903  847d 20d2ff                 jsr charout
   904  8480 a920                   lda #' '
   905  8482 20d2ff                 jsr charout
   906  8485 a000               +   ldy #0
   907  8487 b1fb                   lda (ptr1),y
   908  8489 202983                 jsr disphexbyte
   909  848c a920                   lda #' '
   910  848e 20d2ff                 jsr charout
   911  8491 e6fb                   inc ptr1
   912  8493 d004                   bne +
   913  8495 e6fc                   inc ptr1+1
   914  8497 f00e                   beq ++
   915  8499 207c81             +   jsr compareptrs
   916  849c 90c9                   bcc -
   917  849e f0c7                   beq -
   918  84a0 24a7                   bit flag
   919  84a2 1003                   bpl ++
   920                          !ifdef C64SCREEN {
   921  84a4 4c5380                 jmp display_page_displaymemory
   922                          }
   923  84a7 4cf28a             ++  jmp newline
   924                          
   925                          executemodify:
   926  84aa 204b8a                 jsr skipspaces
   927  84ad c4a4                   cpy len
   928  84af f018                   beq ++
   929  84b1 207b8a                 jsr chkhexbyteofsequence
   930  84b4 f003                   beq +
   931  84b6 4cff83                 jmp error
   932  84b9 84ff               +   sty tmp
   933  84bb a000                   ldy #0
   934  84bd 91fb                   sta (ptr1),y
   935  84bf e6fb                   inc ptr1
   936  84c1 d002                   bne +
   937  84c3 e6fc                   inc ptr1+1
   938  84c5 a4ff               +   ldy tmp
   939  84c7 d0e1                   bne executemodify
   940  84c9 4cf28a             ++  jmp newline
   941                          
   942                          executedot:
   943  84cc c4a4                   cpy len
   944  84ce d003                   bne +
   945  84d0 4c3384                 jmp executepagedisplay
   946                          
   947                          executeloadfilename:
   948                          executeaddr1cmd:
   949  84d3 4c2d8a             +   jmp reportnotimplemented
   950                          
   951                          executehelp:
   952                          !ifdef C64SCREEN {
   953  84d6 20f28a                 jsr newline
   954                          }
   955  84d9 c4a4                   cpy len
   956  84db d003                   bne +
   957  84dd 4cfe84                 jmp displayhelp
   958  84e0 204b8a             +   jsr skipspaces
   959  84e3 201685                 jsr chkhelpinstructions
   960  84e6 d003                   bne +
   961  84e8 4c4585                 jmp displayinstructions
   962  84eb 202385             +   jsr chkhelpmodes
   963  84ee d003                   bne +
   964  84f0 4c5c85                 jmp displaymodes
   965  84f3 207389             +   jsr chkinstruction
   966  84f6 d003                   bne +
   967  84f8 4c0c86                 jmp executehelpinstruction
   968  84fb 4c2d8a             +   jmp reportnotimplemented
   969                          
   970                          displayhelp:
   971  84fe a95c                   lda #<generalhelp
   972  8500 a28f                   ldx #>generalhelp
   973  8502 209f83                 jsr strout
   974  8505 a9cb                   lda #<generalhelp2
   975  8507 a28f                   ldx #>generalhelp2
   976  8509 209f83                 jsr strout
   977                          !ifndef MINIMUM { // any C64
   978  850c 203e80                 jsr display_extra_help
   979                          }
   980  850f a9db                   lda #<firsthelp
   981  8511 a28e                   ldx #>firsthelp
   982  8513 4c9f83                 jmp strout
   983                          
   984                          chkhelpinstructions:
   985  8516 b90002                 lda inputbuf, y
   986  8519 c941                   cmp #'A'
   987  851b d005                   bne +
   988  851d b90102                 lda inputbuf+1, y
   989  8520 c90d                   cmp #13
   990                              ; no need to increment y if found, done parsing line
   991  8522 60                 +   rts
   992                          
   993                          chkhelpmodes:
   994  8523 a9b2                   lda #<modes_keyword
   995  8525 a290                   ldx #>modes_keyword
   996                              ; fall through to chkkeyword
   997                          
   998                          chkkeyword:
   999  8527 84a3                   sty count
  1000  8529 8526                   sta ptr3
  1001  852b 8627                   stx ptr3+1
  1002  852d a6a3                   ldx count
  1003  852f a000                   ldy #0
  1004  8531 bd0002             -   lda inputbuf, x
  1005  8534 d126                   cmp (ptr3),y
  1006  8536 d008                   bne +
  1007  8538 e8                     inx
  1008  8539 c8                     iny
  1009  853a e4a4                   cpx len
  1010  853c d0f3                   bne -
  1011  853e b126                   lda (ptr3),y ; matched if end of string, will set Z
  1012  8540 08                 +   php ; save Z
  1013  8541 a4a3                   ldy count
  1014  8543 28                     plp ; restore Z
  1015  8544 60                     rts
  1016                          
  1017                          displayinstructions:
  1018  8545 a038                   ldy #ninst
  1019  8547 a200                   ldx #0
  1020  8549 8a                 -   txa
  1021  854a 48                     pha
  1022  854b 20c781                 jsr dispinst
  1023  854e a920                   lda #' '
  1024  8550 20d2ff                 jsr charout
  1025  8553 68                     pla
  1026  8554 aa                     tax
  1027  8555 e8                     inx
  1028  8556 88                     dey
  1029  8557 d0f0                   bne -
  1030  8559 4cf28a                 jmp newline
  1031                          
  1032                          displaymodes:
  1033  855c 38                     sec
  1034  855d a900                   lda #0
  1035  855f 48                 -   pha
  1036  8560 aa                     tax
  1037  8561 bdb98b                 lda mode_sorted, x
  1038  8564 207185                 jsr dispmode
  1039  8567 68                     pla
  1040  8568 18                     clc
  1041  8569 6901                   adc #1
  1042  856b c90d                   cmp #nmodes
  1043  856d 90f0                   bcc -
  1044  856f 18                     clc
  1045  8570 60                     rts
  1046                          
  1047                          dispmode:
  1048  8571 c90d                   cmp #nmodes
  1049  8573 b008                   bcs +
  1050  8575 8524                   sta mode
  1051  8577 20b985                 jsr disp_modename_and_example
  1052  857a 4c7e85                 jmp dispmodeinstructions
  1053  857d 60                 +   rts
  1054                          
  1055                          dispmodeinstructions:
  1056                          !ifdef C64SCREEN {
  1057                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1058  857e a524                   lda mode
  1059  8580 c903                   cmp #3
  1060  8582 d005                   bne +
  1061  8584 a920                   lda #' '
  1062  8586 4cd2ff                 jmp charout
  1063                          }
  1064                              ; display instructions with this mode
  1065  8589 a000               +   ldy #0
  1066  858b 8423               --  sty inidx
  1067  858d a200                   ldx #0
  1068  858f 86ff               -   stx tmp
  1069  8591 a523                   lda inidx
  1070  8593 dd4f8d                 cmp instidx, x
  1071  8596 d014                   bne ++
  1072  8598 bde68d                 lda modeidx, x
  1073  859b c524                   cmp mode
  1074  859d d00d                   bne ++
  1075  859f a920                   lda #' '
  1076  85a1 20d2ff                 jsr charout
  1077  85a4 bd4f8d                 lda instidx, x
  1078  85a7 20c781                 jsr dispinst
  1079  85aa a6ff                   ldx tmp
  1080  85ac e8                 ++  inx
  1081  85ad e097                   cpx #nopcodes
  1082  85af 90de                   bcc -
  1083  85b1 c8                     iny
  1084  85b2 c038                   cpy #ninst
  1085  85b4 d0d5                   bne --
  1086  85b6 4cf28a                 jmp newline
  1087                          
  1088                          disp_modename_and_example:
  1089  85b9 0a                     asl
  1090  85ba aa                     tax
  1091  85bb bd9e8c                 lda modes, x
  1092  85be 48                     pha
  1093  85bf bd9f8c                 lda modes+1, x
  1094  85c2 aa                     tax
  1095                          !ifdef C64SCREEN {
  1096  85c3 a912                   lda #18
  1097  85c5 20d2ff                 jsr charout
  1098                          }    
  1099  85c8 68                     pla
  1100  85c9 209f83                 jsr strout
  1101  85cc a920                   lda #' '
  1102  85ce 20d2ff                 jsr charout
  1103  85d1 20a383                 jsr strout2
  1104                          !ifdef C64SCREEN {    
  1105  85d4 a992                   lda #146
  1106  85d6 20d2ff                 jsr charout
  1107                          }   
  1108  85d9 60                     rts
  1109                          
  1110                          disp_modename_instruction_example:
  1111  85da 0a                     asl
  1112  85db aa                     tax
  1113  85dc bd9e8c                 lda modes, x
  1114  85df 48                     pha
  1115  85e0 bd9f8c                 lda modes+1, x
  1116  85e3 aa                     tax
  1117  85e4 68                     pla
  1118  85e5 209f83                 jsr strout ; mode name
  1119  85e8 a526                   lda ptr3
  1120  85ea 48                     pha
  1121  85eb a527                   lda ptr3+1
  1122  85ed 48                     pha
  1123  85ee a93a                   lda #':'
  1124  85f0 20d2ff                 jsr charout
  1125  85f3 a920                   lda #' '
  1126  85f5 20d2ff                 jsr charout
  1127  85f8 a523                   lda inidx
  1128  85fa 20c781                 jsr dispinst ; instruction
  1129  85fd a920                   lda #' '
  1130  85ff 20d2ff                 jsr charout
  1131  8602 68                     pla
  1132  8603 8527                   sta ptr3+1
  1133  8605 68                     pla
  1134  8606 8526                   sta ptr3
  1135  8608 20a383                 jsr strout2 ; example
  1136  860b 60                     rts
  1137                          
  1138                          
  1139                          executehelpinstruction:
  1140  860c a000                   ldy #0
  1141  860e 8422               -   sty opidx
  1142  8610 b94f8d                 lda instidx, y
  1143  8613 c523                   cmp inidx
  1144  8615 d01a                   bne +
  1145  8617 b9e68d                 lda modeidx, y
  1146  861a 8524                   sta mode
  1147  861c a622                   ldx opidx
  1148  861e bdb88c                 lda opcodes, x
  1149  8621 202983                 jsr disphexbyte
  1150  8624 a920                   lda #' '
  1151  8626 20d2ff                 jsr charout
  1152  8629 a524                   lda mode
  1153  862b 20da85                 jsr disp_modename_instruction_example
  1154  862e 20f28a                 jsr newline
  1155  8631 a422               +   ldy opidx
  1156  8633 c8                     iny
  1157  8634 c097                   cpy #nopcodes
  1158  8636 90d6                   bcc -
  1159  8638 60                     rts
  1160                          
  1161                          continueassemble:
  1162                          !ifdef C64SCREEN {   
  1163  8639 207280                 jsr continueassemblec64
  1164                          }
  1165                              ; continue...
  1166                          
  1167                          executeassemble:
  1168  863c 68                     pla ; remove low byte return address
  1169  863d 68                     pla ; return high byte return address
  1170                          !ifdef C64SCREEN {    
  1171  863e a914                   lda #20
  1172  8640 20d2ff                 jsr charout
  1173  8643 20d2ff                 jsr charout
  1174                          } else {
  1175                              lda ptr1
  1176                              ldx ptr1+1
  1177                              jsr disphexword
  1178                              lda #' '
  1179                              jsr charout
  1180                          }
  1181                              ; save current pointer
  1182  8646 a5fb               --  lda ptr1
  1183  8648 a6fc                   ldx ptr1+1
  1184  864a 8526                   sta ptr3
  1185  864c 8627                   stx ptr3+1
  1186  864e 20ba83                 jsr inputline
  1187  8651 c001                   cpy #1
  1188  8653 f048                   beq ++
  1189  8655 88                     dey
  1190  8656 84a4                   sty len
  1191  8658 a000                   ldy #0
  1192  865a 204b8a                 jsr skipspaces
  1193  865d c4a4                   cpy len
  1194  865f f03c                   beq ++
  1195                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1196                              ;jsr skipspaces
  1197  8661 207389                 jsr chkinstruction
  1198  8664 f00b                   beq +
  1199  8666 a526               -   lda ptr3
  1200  8668 85fb                   sta ptr1
  1201  866a a527                   lda ptr3+1
  1202  866c 85fc                   sta ptr1+1
  1203  866e 4cff83                 jmp error
  1204  8671 20c786             +   jsr chkaddressing
  1205  8674 d0f0                   bne -
  1206  8676 20a489                 jsr find_inst_and_mode
  1207  8679 d0eb                   bne -
  1208  867b 20a086                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1209  867e 18                     clc
  1210  867f a525                   lda size
  1211  8681 6526                   adc ptr3
  1212  8683 85fb                   sta ptr1
  1213  8685 a527                   lda ptr3+1
  1214  8687 6900                   adc #0
  1215  8689 85fc                   sta ptr1+1
  1216                          !ifdef C64SCREEN {    
  1217  868b 20f28a                 jsr newline
  1218                          }
  1219  868e a5fb                   lda ptr1
  1220  8690 a6fc                   ldx ptr1+1
  1221  8692 202383                 jsr disphexword
  1222  8695 a920                   lda #' '
  1223  8697 20d2ff                 jsr charout
  1224  869a 4c4686                 jmp --
  1225                          ++  
  1226                          !ifdef C64SCREEN {
  1227  869d 4cf28a                 jmp newline
  1228                          } else {
  1229                              rts
  1230                          }
  1231                          
  1232                          store_assembly:
  1233  86a0 a622                   ldx opidx
  1234  86a2 bdb88c                 lda opcodes, x
  1235  86a5 a000                   ldy #0
  1236  86a7 9126                   sta (ptr3), y
  1237  86a9 c8                     iny
  1238  86aa a625                   ldx size
  1239  86ac e001                   cpx #1
  1240  86ae f016                   beq ++
  1241  86b0 e002               +   cpx #2
  1242  86b2 d005                   bne +
  1243  86b4 a5a6                   lda tmp2
  1244  86b6 9126                   sta (ptr3), y
  1245  86b8 60                     rts
  1246  86b9 e003               +   cpx #3
  1247  86bb d009                   bne ++
  1248  86bd a5fb                   lda ptr1
  1249  86bf 9126                   sta (ptr3), y
  1250  86c1 c8                     iny
  1251  86c2 a5fc                   lda ptr1+1
  1252  86c4 9126                   sta (ptr3), y
  1253  86c6 60                 ++  rts
  1254                          
  1255                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1256  86c7 204b8a                 jsr skipspaces
  1257  86ca a200                   ldx #0
  1258  86cc 8624                   stx mode
  1259  86ce 202987                 jsr chkaccumulator
  1260  86d1 f051                   beq +
  1261  86d3 e624                   inc mode
  1262  86d5 c4a4                   cpy len ; chknone
  1263  86d7 f04b                   beq +
  1264  86d9 e624                   inc mode
  1265  86db 204d87                 jsr chkimmediate
  1266  86de f044                   beq +
  1267  86e0 e624                   inc mode
  1268  86e2 207187                 jsr chkindirectx
  1269  86e5 f03d                   beq +
  1270  86e7 e624                   inc mode
  1271  86e9 20b687                 jsr chkindirecty
  1272  86ec f036                   beq +
  1273  86ee e624                   inc mode
  1274  86f0 20fb87                 jsr chkrelative
  1275  86f3 f02f                   beq +
  1276  86f5 e624                   inc mode
  1277  86f7 205688                 jsr chkzeropage
  1278  86fa f028                   beq +
  1279  86fc e624                   inc mode
  1280  86fe 206f88                 jsr chkzeropagex
  1281  8701 f021                   beq +
  1282  8703 e624                   inc mode
  1283  8705 209e88                 jsr chkzeropagey
  1284  8708 f01a                   beq +
  1285  870a e624                   inc mode
  1286  870c 20cd88                 jsr chkabsolute
  1287  870f f013                   beq +
  1288  8711 e624                   inc mode
  1289  8713 20e688                 jsr chkabsolutex
  1290  8716 f00c                   beq +
  1291  8718 e624                   inc mode
  1292  871a 201589                 jsr chkabsolutey
  1293  871d f005                   beq +
  1294  871f e624                   inc mode
  1295  8721 204489                 jsr chkindirect
  1296  8724 08                 +   php ; save Z
  1297  8725 a524                   lda mode
  1298  8727 28                     plp ; restore Z 
  1299  8728 60                     rts
  1300                          
  1301                          chkaccumulator:
  1302  8729 c4a4                   cpy len
  1303  872b d013                   bne +
  1304  872d a523                   lda inidx
  1305  872f c902                   cmp #2 ; ASL
  1306  8731 f019                   beq ++
  1307  8733 c920                   cmp #32 ; LSR
  1308  8735 f015                   beq ++
  1309  8737 c927                   cmp #39 ; ROL
  1310  8739 f011                   beq ++
  1311  873b c928                   cmp #40 ; ROR
  1312  873d 4c4c87                 jmp ++
  1313  8740 b90002             +   lda inputbuf, y
  1314  8743 c941                   cmp #'A'
  1315  8745 d005                   bne ++
  1316  8747 b90102                 lda inputbuf+1,y
  1317  874a c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1318  874c 60                 ++  rts
  1319                          
  1320                          chkimmediate:
  1321  874d 84a5                   sty savepos
  1322  874f b90002                 lda inputbuf, y
  1323  8752 c923                   cmp #'#'
  1324  8754 d016                   bne ++
  1325  8756 c8                     iny
  1326  8757 204b8a                 jsr skipspaces
  1327  875a b90002                 lda inputbuf, y
  1328  875d c924                   cmp #'$'
  1329  875f d001                   bne +
  1330  8761 c8                     iny
  1331  8762 209e8a             +   jsr chkhexbyte
  1332  8765 d005                   bne ++
  1333  8767 c4a4               +   cpy len
  1334  8769 d001                   bne ++
  1335  876b 60                     rts
  1336  876c a4a5               ++  ldy savepos
  1337  876e a201                   ldx #1 ; Z false (NE)
  1338  8770 60                     rts
  1339                          
  1340                          chkindirectx:
  1341  8771 84a5                   sty savepos
  1342  8773 b90002                 lda inputbuf, y
  1343  8776 c928                   cmp #'('
  1344  8778 d037                   bne ++
  1345  877a c8                     iny
  1346  877b 204b8a                 jsr skipspaces
  1347  877e b90002                 lda inputbuf, y
  1348  8781 c924                   cmp #'$'
  1349  8783 d001                   bne +
  1350  8785 c8                     iny
  1351  8786 209e8a             +   jsr chkhexbyte
  1352  8789 d026                   bne ++
  1353  878b 204b8a                 jsr skipspaces
  1354  878e b90002                 lda inputbuf, y
  1355  8791 c92c                   cmp #','
  1356  8793 d01c                   bne ++
  1357  8795 c8                     iny
  1358  8796 204b8a                 jsr skipspaces
  1359  8799 b90002                 lda inputbuf, y
  1360  879c c958                   cmp #'X'
  1361  879e d011                   bne ++
  1362  87a0 c8                     iny
  1363  87a1 204b8a                 jsr skipspaces
  1364  87a4 b90002                 lda inputbuf, y
  1365  87a7 c929                   cmp #')'
  1366  87a9 d006                   bne ++
  1367  87ab c8                     iny
  1368  87ac c4a4                   cpy len
  1369  87ae d001                   bne ++
  1370  87b0 60                     rts
  1371  87b1 a4a5               ++  ldy savepos
  1372  87b3 a201                   ldx #1 ; Z false (NE)
  1373  87b5 60                     rts
  1374                          
  1375                          chkindirecty:
  1376  87b6 84a5                   sty savepos
  1377  87b8 b90002                 lda inputbuf, y
  1378  87bb c928                   cmp #'('
  1379  87bd d037                   bne ++
  1380  87bf c8                     iny
  1381  87c0 204b8a                 jsr skipspaces
  1382  87c3 b90002                 lda inputbuf, y
  1383  87c6 c924                   cmp #'$'
  1384  87c8 d001                   bne +
  1385  87ca c8                     iny
  1386  87cb 209e8a             +   jsr chkhexbyte
  1387  87ce d026                   bne ++
  1388  87d0 204b8a                 jsr skipspaces
  1389  87d3 b90002                 lda inputbuf, y
  1390  87d6 c929                   cmp #')'
  1391  87d8 d01c                   bne ++
  1392  87da c8                     iny
  1393  87db 204b8a                 jsr skipspaces
  1394  87de b90002                 lda inputbuf, y
  1395  87e1 c92c                   cmp #','
  1396  87e3 d011                   bne ++
  1397  87e5 c8                     iny
  1398  87e6 204b8a                 jsr skipspaces
  1399  87e9 b90002                 lda inputbuf, y
  1400  87ec c959                   cmp #'Y'
  1401  87ee d006                   bne ++
  1402  87f0 c8                     iny
  1403  87f1 c4a4                   cpy len
  1404  87f3 d001                   bne ++
  1405  87f5 60                     rts
  1406  87f6 a4a5               ++  ldy savepos
  1407  87f8 a201                   ldx #1 ; Z false (NE)
  1408  87fa 60                     rts
  1409                          
  1410                          chkrelative:
  1411  87fb 84a5                   sty savepos
  1412  87fd a623                   ldx inidx
  1413  87ff e006                   cpx #6 ; BIT
  1414  8801 f01e                   beq ++
  1415  8803 bdf78a                 lda inst0, x
  1416  8806 c942                   cmp #'B'
  1417  8808 d017                   bne ++
  1418  880a b90002                 lda inputbuf, y
  1419  880d c924                   cmp #'$'
  1420  880f d001                   bne +
  1421  8811 c8                     iny
  1422  8812 20958a             +   jsr chkhexword
  1423  8815 d00a                   bne ++
  1424  8817 c4a4                   cpy len
  1425  8819 d006                   bne ++
  1426  881b 202688                 jsr computeoffset
  1427  881e d001                   bne ++
  1428  8820 60                     rts ; Z true (EQ)
  1429  8821 a4a5               ++  ldy savepos
  1430  8823 a201                   ldx #1 ; Z false (NE)
  1431  8825 60                     rts
  1432                          
  1433                          computeoffset:
  1434                          ;   compute next address
  1435  8826 a527                   lda ptr3+1
  1436  8828 85fe                   sta ptr2+1
  1437  882a a526                   lda ptr3
  1438  882c 18                     clc
  1439  882d 6902                   adc #2
  1440  882f 85fd                   sta ptr2
  1441  8831 9002                   bcc +
  1442  8833 e6fe                   inc ptr2+1
  1443                          +  ; subtract argument
  1444  8835 38                     sec
  1445  8836 a5fb                   lda ptr1
  1446  8838 e5fd                   sbc ptr2
  1447  883a 85a6                   sta tmp2
  1448  883c a5fc                   lda ptr1+1
  1449  883e e5fe                   sbc ptr2+1
  1450  8840 f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1451  8842 c9ff                   cmp #$FF
  1452  8844 d00d                   bne failedoffset ; 0 and FF were only options so fail
  1453                              ; chkeck negative offset
  1454  8846 a5a6                   lda tmp2
  1455  8848 3006                   bmi successoffset ; branch if signed byte is negative
  1456  884a 1007                   bpl failedoffset ; otherwise fail
  1457                          chkoffsetto127:
  1458  884c a5a6                   lda tmp2
  1459  884e 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1460                          successoffset:    
  1461  8850 a900                   lda #0 ; Z true (EQ)
  1462  8852 60                     rts
  1463                          failedoffset:
  1464  8853 a901                   lda #1 ; Z false (NE)
  1465  8855 60                     rts
  1466                          
  1467                          chkzeropage:
  1468  8856 84a5                   sty savepos
  1469  8858 b90002                 lda inputbuf, y
  1470  885b c924                   cmp #'$'
  1471  885d d001                   bne +
  1472  885f c8                     iny
  1473  8860 209e8a             +   jsr chkhexbyte
  1474  8863 d005                   bne ++
  1475  8865 c4a4                   cpy len
  1476  8867 d001                   bne ++
  1477  8869 60                     rts ; Z true (EQ)
  1478  886a a4a5               ++  ldy savepos
  1479  886c a201                   ldx #1 ; Z false (NE)
  1480  886e 60                     rts
  1481                          
  1482                          chkzeropagex:
  1483  886f 84a5                   sty savepos
  1484  8871 b90002                 lda inputbuf, y
  1485  8874 c924                   cmp #'$'
  1486  8876 d001                   bne +
  1487  8878 c8                     iny
  1488  8879 209e8a             +   jsr chkhexbyte
  1489  887c d01b                   bne ++
  1490  887e 204b8a                 jsr skipspaces
  1491  8881 b90002                 lda inputbuf, y
  1492  8884 c92c                   cmp #','
  1493  8886 d011                   bne ++
  1494  8888 c8                     iny
  1495  8889 204b8a                 jsr skipspaces
  1496  888c b90002                 lda inputbuf, y
  1497  888f c958                   cmp #'X'
  1498  8891 d006                   bne ++
  1499  8893 c8                     iny
  1500  8894 c4a4                   cpy len
  1501  8896 d001                   bne ++
  1502  8898 60                     rts ; Z true (EQ)
  1503  8899 a4a5               ++  ldy savepos
  1504  889b a201                   ldx #1 ; Z false (NE)
  1505  889d 60                     rts
  1506                          
  1507                          chkzeropagey:
  1508  889e 84a5                   sty savepos
  1509  88a0 b90002                 lda inputbuf, y
  1510  88a3 c924                   cmp #'$'
  1511  88a5 d001                   bne +
  1512  88a7 c8                     iny
  1513  88a8 209e8a             +   jsr chkhexbyte
  1514  88ab d01b                   bne ++
  1515  88ad 204b8a                 jsr skipspaces
  1516  88b0 b90002                 lda inputbuf, y
  1517  88b3 c92c                   cmp #','
  1518  88b5 d011                   bne ++
  1519  88b7 c8                     iny
  1520  88b8 204b8a                 jsr skipspaces
  1521  88bb b90002                 lda inputbuf, y
  1522  88be c959                   cmp #'Y'
  1523  88c0 d006                   bne ++
  1524  88c2 c8                     iny
  1525  88c3 c4a4                   cpy len
  1526  88c5 d001                   bne ++
  1527  88c7 60                     rts ; Z true (EQ)
  1528  88c8 a4a5               ++  ldy savepos
  1529  88ca a201                   ldx #1 ; Z false (NE)
  1530  88cc 60                     rts
  1531                          
  1532                          chkabsolute:
  1533  88cd 84a5                   sty savepos
  1534  88cf b90002                 lda inputbuf, y
  1535  88d2 c924                   cmp #'$'
  1536  88d4 d001                   bne +
  1537  88d6 c8                     iny
  1538  88d7 20958a             +   jsr chkhexword
  1539  88da d005                   bne ++
  1540  88dc c4a4                   cpy len
  1541  88de d001                   bne ++
  1542  88e0 60                     rts ; Z true (EQ)
  1543  88e1 a4a5               ++  ldy savepos
  1544  88e3 a201                   ldx #1 ; Z false (NE)
  1545  88e5 60                     rts
  1546                          
  1547                          chkabsolutex:
  1548  88e6 84a5                   sty savepos
  1549  88e8 b90002                 lda inputbuf, y
  1550  88eb c924                   cmp #'$'
  1551  88ed d001                   bne +
  1552  88ef c8                     iny
  1553  88f0 20958a             +   jsr chkhexword
  1554  88f3 d01b                   bne ++
  1555  88f5 204b8a                 jsr skipspaces
  1556  88f8 b90002                 lda inputbuf, y
  1557  88fb c92c                   cmp #','
  1558  88fd d011                   bne ++
  1559  88ff c8                     iny
  1560  8900 204b8a                 jsr skipspaces
  1561  8903 b90002                 lda inputbuf, y
  1562  8906 c958                   cmp #'X'
  1563  8908 d006                   bne ++
  1564  890a c8                     iny
  1565  890b c4a4                   cpy len
  1566  890d d001                   bne ++
  1567  890f 60                     rts ; Z true (EQ)
  1568  8910 a4a5               ++  ldy savepos
  1569  8912 a201                   ldx #1 ; Z false (NE)
  1570  8914 60                     rts
  1571                          
  1572                          chkabsolutey:
  1573  8915 84a5                   sty savepos
  1574  8917 b90002                 lda inputbuf, y
  1575  891a c924                   cmp #'$'
  1576  891c d001                   bne +
  1577  891e c8                     iny
  1578  891f 20958a             +   jsr chkhexword
  1579  8922 d01b                   bne ++
  1580  8924 204b8a                 jsr skipspaces
  1581  8927 b90002                 lda inputbuf, y
  1582  892a c92c                   cmp #','
  1583  892c d011                   bne ++
  1584  892e c8                     iny
  1585  892f 204b8a                 jsr skipspaces
  1586  8932 b90002                 lda inputbuf, y
  1587  8935 c959                   cmp #'Y'
  1588  8937 d006                   bne ++
  1589  8939 c8                     iny
  1590  893a c4a4                   cpy len
  1591  893c d001                   bne ++
  1592  893e 60                     rts ; Z true (EQ)
  1593  893f a4a5               ++  ldy savepos
  1594  8941 a201                   ldx #1 ; Z false (NE)
  1595  8943 60                     rts
  1596                          
  1597                          chkindirect:
  1598  8944 84a5                   sty savepos
  1599  8946 b90002                 lda inputbuf, y
  1600  8949 c928                   cmp #'('
  1601  894b d021                   bne ++
  1602  894d c8                     iny
  1603  894e 204b8a                 jsr skipspaces
  1604  8951 b90002                 lda inputbuf, y
  1605  8954 c924                   cmp #'$'
  1606  8956 d001                   bne +
  1607  8958 c8                     iny
  1608  8959 20958a             +   jsr chkhexword
  1609  895c d010                   bne ++
  1610  895e 204b8a                 jsr skipspaces
  1611  8961 b90002                 lda inputbuf, y
  1612  8964 c929                   cmp #')'
  1613  8966 d006                   bne ++
  1614  8968 c8                     iny
  1615  8969 c4a4                   cpy len
  1616  896b d001                   bne ++
  1617  896d 60                     rts ; Z true (EQ)
  1618  896e a4a5               ++  ldy savepos
  1619  8970 a201                   ldx #1 ; Z false (NE)
  1620  8972 60                     rts
  1621                          
  1622                          chkinstruction:
  1623  8973 c4a4                   cpy len
  1624  8975 f02a                   beq ++
  1625  8977 84ff                   sty tmp
  1626  8979 a237                   ldx #(ninst-1)
  1627  897b b90002             -   lda inputbuf,y
  1628  897e ddf78a                 cmp inst0,x
  1629  8981 d019                   bne +
  1630  8983 c8                     iny
  1631  8984 b90002                 lda inputbuf,y
  1632  8987 dd2f8b                 cmp inst1,x
  1633  898a d010                   bne +
  1634  898c c8                     iny
  1635  898d b90002                 lda inputbuf,y
  1636  8990 dd678b                 cmp inst2,x
  1637  8993 d007                   bne +
  1638  8995 c8                     iny
  1639  8996 8a                     txa
  1640  8997 8523                   sta inidx
  1641  8999 a200                   ldx #0
  1642  899b 60                     rts
  1643  899c a4ff               +   ldy tmp
  1644  899e ca                     dex
  1645  899f 10da                   bpl -
  1646  89a1 a201               ++  ldx #1 ; Z false (NE)
  1647  89a3 60                     rts
  1648                          
  1649                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1650                              ; and allows mode promotion
  1651  89a4 20c889                 jsr find_inst_and_mode2
  1652  89a7 f01e                   beq ++
  1653  89a9 a524                   lda mode
  1654  89ab c906                   cmp #6
  1655  89ad 9018                   bcc ++
  1656  89af c90a                   cmp #10
  1657  89b1 b012                   bcs +
  1658  89b3 6903                   adc #3
  1659  89b5 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1660  89b7 20c889                 jsr find_inst_and_mode2 ; try again once
  1661  89ba d00b                   bne ++
  1662  89bc a5a6                   lda tmp2
  1663  89be 85fb                   sta ptr1
  1664  89c0 a900                   lda #0
  1665  89c2 85fc                   sta ptr1+1
  1666  89c4 60                     rts ; Z true (EQ)
  1667  89c5 a201               +   ldx #1 ; Z false (NE)
  1668  89c7 60                 ++  rts
  1669                          
  1670                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1671  89c8 a296                   ldx #nopcodes-1
  1672  89ca bd4f8d             -   lda instidx, x
  1673  89cd bce68d                 ldy modeidx, x
  1674  89d0 c523                   cmp inidx
  1675  89d2 d00c                   bne +
  1676  89d4 c424                   cpy mode
  1677  89d6 d008                   bne +
  1678  89d8 8622                   stx opidx
  1679  89da 20b081                 jsr getsize
  1680  89dd a200                   ldx #0 ; Z true (EQ)
  1681  89df 60                     rts
  1682  89e0 ca                 +   dex
  1683  89e1 e0ff                   cpx #$ff
  1684  89e3 d0e5                   bne -
  1685  89e5 a201                   ldx #1 ; Z false (NE)
  1686  89e7 60                     rts
  1687                          
  1688                          executerun:
  1689  89e8 68                     pla ; remove low byte return address
  1690  89e9 68                     pla ; return high byte return address
  1691  89ea 68                     pla ; again, we're really not returning
  1692  89eb 68                     pla ; again, we're really not returning
  1693  89ec 20f28a                 jsr newline
  1694  89ef 38                     sec
  1695  89f0 a5fb                   lda ptr1
  1696  89f2 e901                   sbc #1
  1697  89f4 85fb                   sta ptr1
  1698  89f6 b002                   bcs +
  1699  89f8 c6fc                   dec ptr1+1
  1700  89fa a5fc               +   lda ptr1+1
  1701  89fc 48                     pha
  1702  89fd a5fb                   lda ptr1
  1703  89ff 48                     pha
  1704  8a00 60                     rts
  1705                          
  1706                          chkcontinuedis:
  1707  8a01 b90002                 lda inputbuf,y
  1708  8a04 c944                   cmp #'D'
  1709  8a06 d00a                   bne +
  1710  8a08 b90102                 lda inputbuf+1,y
  1711  8a0b c90d                   cmp #13
  1712  8a0d d003                   bne +
  1713  8a0f c8                     iny
  1714  8a10 a200                   ldx #0 ; restore Z set
  1715  8a12 60                 +   rts
  1716                          
  1717                          chkcontinueasm:
  1718  8a13 b90002                 lda inputbuf,y
  1719  8a16 c941                   cmp #'A'
  1720  8a18 d00a                   bne +
  1721  8a1a b90102                 lda inputbuf+1,y
  1722  8a1d c90d                   cmp #13
  1723  8a1f d003                   bne +
  1724  8a21 c8                     iny
  1725  8a22 a200                   ldx #0 ; restore Z set
  1726  8a24 60                 +   rts
  1727                          
  1728                          executedisassemble:
  1729  8a25 68                     pla ; remove low byte return address
  1730  8a26 68                     pla ; return high byte return address
  1731  8a27 20f28a                 jsr newline
  1732  8a2a 4c5881                 jmp disassemble
  1733                          
  1734                          reportnotimplemented:
  1735  8a2d a94b                   lda #<notimplemented
  1736  8a2f a28f                   ldx #>notimplemented
  1737  8a31 4c9f83                 jmp strout
  1738                          
  1739                          reporterr:
  1740  8a34 c000                   cpy #0
  1741  8a36 f008                   beq +
  1742  8a38 a920                   lda #' '
  1743  8a3a 20d2ff             -   jsr charout
  1744  8a3d 88                     dey
  1745  8a3e d0fa                   bne -
  1746  8a40 a93f               +   lda #'?'
  1747  8a42 20d2ff                 jsr charout
  1748  8a45 a90d                   lda #13
  1749  8a47 20d2ff                 jsr charout
  1750  8a4a 60                     rts
  1751                          
  1752                          skipspaces:
  1753  8a4b b90002             -   lda inputbuf, y
  1754                          !ifndef MINIMUM {
  1755                              ; skip SHIFT-SPACES too on Commodore
  1756  8a4e c9a0                   cmp #$A0
  1757  8a50 f004                   beq +
  1758                          }
  1759  8a52 c920                   cmp #$20
  1760  8a54 d003                   bne ++
  1761  8a56 c8                 +   iny
  1762  8a57 d0f2                   bne -
  1763  8a59 60                 ++  rts
  1764                          
  1765                          chkdot:
  1766  8a5a b90002                 lda inputbuf, y
  1767  8a5d c92e                   cmp #'.'
  1768  8a5f d003                   bne +
  1769  8a61 c8                     iny
  1770  8a62 a900                   lda #0 ; Z true (EQ)
  1771  8a64 60                 +   rts
  1772                          
  1773                          chkhelp:
  1774  8a65 b90002                 lda inputbuf, y
  1775  8a68 c93f                   cmp #'?'
  1776  8a6a d003                   bne +
  1777  8a6c c8                     iny
  1778  8a6d a900                   lda #0 ; Z true (EQ)
  1779  8a6f 60                 +   rts
  1780                          
  1781                          chkcolon:
  1782  8a70 b90002                 lda inputbuf, y
  1783  8a73 c93a                   cmp #':'
  1784  8a75 d003                   bne +
  1785  8a77 c8                     iny
  1786  8a78 a900                   lda #0 ; Z true (EQ)
  1787  8a7a 60                 +   rts
  1788                          
  1789                          chkhexbyteofsequence:
  1790  8a7b 206583                 jsr inputhexbyte
  1791  8a7e 20988a                 jsr +
  1792  8a81 d011                   bne ++ ; Z false (NE) if failed checks
  1793  8a83 c4a4                   cpy len
  1794  8a85 f00d                   beq ++ ; Z true (EQ) if end of input
  1795  8a87 85ff                   sta tmp
  1796  8a89 b90002                 lda inputbuf,y
  1797  8a8c c920                   cmp #$20
  1798  8a8e d004                   bne ++ ; Z false (NE) if not space
  1799  8a90 a5ff                   lda tmp
  1800  8a92 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1801  8a94 60                 ++  rts
  1802                          
  1803                          chkhexword:
  1804                          chkhexaddr1:
  1805  8a95 203f83                 jsr inputhexword
  1806  8a98 a200               +   ldx #0 ; Z true (EQ)
  1807  8a9a 9001                   bcc +
  1808  8a9c e8                     inx ; Z false (NE)
  1809  8a9d 60                 +   rts
  1810                          
  1811                          chkhexbyte:
  1812  8a9e 98                     tya
  1813  8a9f 48                     pha ; save y
  1814  8aa0 206583                 jsr inputhexbyte
  1815  8aa3 b00d                   bcs +
  1816  8aa5 85a6                   sta tmp2
  1817  8aa7 208183                 jsr inputhexnybble
  1818  8aaa 9006                   bcc +
  1819  8aac 68                     pla ; throw away saved y
  1820  8aad a5a6                   lda tmp2
  1821  8aaf a200                   ldx #0 ; Z true (EQ)
  1822  8ab1 60                     rts
  1823  8ab2 68                 +   pla
  1824  8ab3 a8                     tay ; won't be zero, so Z false (NE)
  1825  8ab4 60                     rts    
  1826                          
  1827                          chkhexaddr2:
  1828  8ab5 a5fb                   lda ptr1
  1829  8ab7 48                     pha
  1830  8ab8 a5fc                   lda ptr1+1
  1831  8aba 48                     pha
  1832  8abb 20958a                 jsr chkhexaddr1
  1833  8abe f005                   beq +
  1834  8ac0 68                     pla
  1835  8ac1 68                     pla
  1836  8ac2 a901                   lda #1 ; Z false (NE)
  1837  8ac4 60                     rts
  1838  8ac5 a5fb               +   lda ptr1
  1839  8ac7 85fd                   sta ptr2
  1840  8ac9 a5fc                   lda ptr1+1
  1841  8acb 85fe                   sta ptr2+1
  1842  8acd 68                     pla
  1843  8ace 85fc                   sta ptr1+1
  1844  8ad0 68                     pla
  1845  8ad1 85fb                   sta ptr1
  1846  8ad3 a900                   lda #0 ; Z true (EQ)
  1847  8ad5 60                     rts    
  1848                          
  1849                          chkaddr1cmd:
  1850  8ad6 b90002                 lda inputbuf, y
  1851  8ad9 c941               +   cmp #'A'
  1852  8adb d004                   bne +
  1853  8add c8                     iny
  1854  8ade 4c3c86                 jmp executeassemble
  1855  8ae1 c944               +   cmp #'D'
  1856  8ae3 d004                   bne +
  1857  8ae5 c8                     iny
  1858  8ae6 4c258a                 jmp executedisassemble
  1859  8ae9 c952               +   cmp #'R'
  1860  8aeb d004                   bne +
  1861  8aed c8                     iny
  1862  8aee 4ce889                 jmp executerun
  1863  8af1 60                 +   rts
  1864                          
  1865                          newline:
  1866  8af2 a90d                   lda #13
  1867  8af4 4cd2ff                 jmp charout
  1868                          
  1869                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1870                          ;     jsr $ffd2
  1871                          ;     pha
  1872                          ; -   lda $d011
  1873                          ;     bpl -
  1874                          ; -   lda $d011
  1875                          ;     bmi -
  1876                          ; -   lda $d011
  1877                          ;     bpl -
  1878                          ; -   lda $d011
  1879                          ;     bmi -
  1880                          ;     pla
  1881                          ;     rts
  1882                          
  1883                          !ifdef MINIMUM {
  1884                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1885                          ;; MC6850
  1886                          UART_DATA=$FFF8
  1887                          UART_STCR=$FFF9
  1888                          
  1889                          UART_INIT:
  1890                          	ldx #0b00000111 ; 11=reset device
  1891                          	stx UART_STCR
  1892                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  1893                          	sta UART_STCR
  1894                          	rts
  1895                          UART_OUT:
  1896                          	pha
  1897                          -	lda UART_STCR
  1898                          	and #2
  1899                          	beq - ; branch if TDRE=0, not finished transmitting
  1900                          	pla
  1901                          	pha
  1902                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  1903                          	sta UART_DATA
  1904                          	pla
  1905                          	rts
  1906                          UART_IN:
  1907                          -	lda UART_STCR
  1908                          	and #1
  1909                          	beq - ; branch if TDRF=0, not received
  1910                          	lda UART_DATA
  1911                          	; software "CAPS LOCK" because wozmon expects only uppercase
  1912                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  1913                          	beq BREAK
  1914                              ; force lowercase alphabet to uppercase
  1915                              cmp #'a'
  1916                          	bcc +
  1917                          	cmp #'z'+1
  1918                          	bcs +
  1919                          	eor #$20
  1920                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  1921                           	rts
  1922                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  1923                          	pha ; save A
  1924                          	lda UART_STCR
  1925                          	lsr ; put rightmost bit in carry
  1926                          	pla ; restore A affects flags
  1927                          	ror ; move carry to left bit, right bit to carry
  1928                          	php ; push processor to save N
  1929                          	rol ; restore A affects flags
  1930                          	plp ; pull processor to restore N
  1931                          	rts
  1932                          
  1933                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1934                          ; Processor start and interrupts
  1935                          
  1936                          NMI: ; unused on minimum (no source of interrupt)
  1937                              rti
  1938                          
  1939                          IRQ:
  1940                              rti ; TODO implement BRK HANDLING in monitor
  1941                          
  1942                          BREAK:
  1943                              jmp RESET
  1944                          
  1945                          RESET:
  1946                              cld
  1947                              ldx #$00
  1948                              txs
  1949                              jsr JUART_INIT
  1950                              cli
  1951                              jmp start
  1952                          } ; !ifdef MINIMUM
  1953                          
  1954                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1955                          ; data
  1956                          
  1957                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  1958                          ninst = 56
  1959  8af7 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  1960  8b2f 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  1961  8b67 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  1962                          
  1963                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  1964                          mode_jmptable:
  1965  8b9f 3c82               !word dispModeAcc-1; 0 Accumulator 1
  1966  8ba1 4182               !word dispModeNone-1 ; 1 None 1
  1967  8ba3 4282               !word dispModeImm-1 ; 2 Immediate 2
  1968  8ba5 5382               !word dispModeIndX-1 ; 3 IndirectX 2
  1969  8ba7 7382               !word dispModeIndY-1 ; 4 IndirectY 2
  1970  8ba9 9382               !word dispModeRel-1 ; 5 Relative 2
  1971  8bab 4782               !word dispModeZP-1 ; 6 ZeroPage 2
  1972  8bad cf82               !word dispModeZPX-1 ; 7 ZeroPageX 2
  1973  8baf dc82               !word dispModeZPY-1 ; 8 ZeroPageY 2
  1974  8bb1 e982               !word dispModeAbs-1 ; 9 Absolute 3
  1975  8bb3 fb82               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  1976  8bb5 0883               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  1977  8bb7 1583               !word dispModeInd-1 ; 12 Indirect 3
  1978                          
  1979                          nmodes = 13
  1980                          
  1981                          mode_sorted:
  1982  8bb9 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  1983                          
  1984                          !ifdef MINIMUM {
  1985                          mode_0: !text "Accumulator", 0, "A", 0
  1986                          mode_1: !text "None", 0, 8, 0
  1987                          mode_2: !text "Immediate", 0, "#$12", 0
  1988                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  1989                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  1990                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  1991                          mode_6: !text "ZeroPage", 0, "$12", 0
  1992                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  1993                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  1994                          mode_9: !text "Absolute", 0, "$1234", 0
  1995                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  1996                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  1997                          mode_12: !text "Indirect", 0, "($1234)", 0
  1998                          } else {
  1999  8bc6 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2000  8bd4 4e4f4e45001400     mode_1: !text "NONE", 0, 20, 0
  2001  8bdb 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2002  8bea 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2003  8bfc 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2004  8c0e 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2005  8c2d 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2006  8c3a 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2007  8c4a 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2008  8c5a 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2009  8c69 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2010  8c7b 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2011  8c8d 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2012                          }
  2013                          
  2014                          modes: ; table for easily displaying each mode_example
  2015  8c9e c68b               !word mode_0
  2016  8ca0 d48b               !word mode_1
  2017  8ca2 db8b               !word mode_2
  2018  8ca4 ea8b               !word mode_3
  2019  8ca6 fc8b               !word mode_4
  2020  8ca8 0e8c               !word mode_5
  2021  8caa 2d8c               !word mode_6
  2022  8cac 3a8c               !word mode_7
  2023  8cae 4a8c               !word mode_8
  2024  8cb0 5a8c               !word mode_9
  2025  8cb2 698c               !word mode_10
  2026  8cb4 7b8c               !word mode_11
  2027  8cb6 8d8c               !word mode_12
  2028                          
  2029                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2030                          nopcodes = 151
  2031  8cb8 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2032  8d4f 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2033  8de6 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2034                          
  2035                          copyright 
  2036                          ;                  1         2         3         4
  2037                          ;         1234567890123456789012345678901234567890
  2038  8e7d 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2039                          !ifdef C64TERMINAL {
  2040                              !text 13, "(TERMINAL VERSION)"
  2041                          }
  2042  8e9d 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2043  8ec3 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2044  8eda 00                 !text 0
  2045                          
  2046                          firsthelp
  2047  8edb 0d3f202020202020...!text 13, "?       (SYNTAX)"
  2048  8eec 0d3f204120202020...!text 13, "? A     (LIST 6502 INSTRUCTIONS)"
  2049  8f0d 0d3f204144432020...!text 13, "? ADC   (/ADC/ ADDRESSING MODES)"
  2050  8f2e 0d3f204d4f444520...!text 13, "? MODE  (ADDRESSING MODES)"
  2051                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2052  8f49 0d00               !text 13, 0
  2053                          
  2054  8f4b 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2055                          
  2056                          generalhelp
  2057  8f5c 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2058  8f82 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2059  8fa7 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2060  8fca 00                 !text 0
  2061                          generalhelp2
  2062  8fcb 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2063  8ff3 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2064  900f 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2065  902f 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2066  9051 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2067  9076 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2068  9092 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2069  90b1 00                 !text 0
  2070                          
  2071  90b2 4d4f444500         modes_keyword !text "MODE", 0
  2072                          
  2073                          !ifdef MINIMUM {
  2074                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2075                          ; JUMP table for some stability
  2076                          * = $FFEE
  2077                          JUART_INIT: JMP UART_INIT
  2078                          JUART_OUT: JMP UART_OUT
  2079                          JUART_IN: JMP UART_IN
  2080                          JUART_CHK: JMP UART_CHK
  2081                          
  2082                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2083                          ; 6502 vectors 
  2084                          * = $fffa
  2085                              !word NMI
  2086                              !word RESET
  2087                              !word IRQ
  2088                          } else { // C64
  2089                              !if * > $a000 {
  2090                                  !error "code/data overran $a000"
  2091                              }
  2092                          }
  2093                          
  2094                          finish = *
