
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGETS:                              *        <<<
     7                          ;; >>>       ** (1)  C64 8000-9FFF screen editor                *        <<<
     8                          ;; >>>       ** (2)  C64 8000-9FFF terminal edition             *        <<<
     9                          ;; >>>       ** (3)  6502+MC6850 minimum system                 *        <<<
    10                          ;; >>>       *   56K(RAM),8K(ROM), 2 bytes IO for MC6850 UART   *        <<<
    11                          ;; >>>       ****************************************************        <<<
    12                          ;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          ;; MIT License
    15                          ;;
    16                          ;; Copyright (c) 2024 David R. Van Wagner
    17                          ;; davevw.com
    18                          ;;
    19                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    20                          ;; of this software and associated documentation files (the "Software"), to deal
    21                          ;; in the Software without restriction, including without limitation the rights
    22                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    23                          ;; copies of the Software, and to permit persons to whom the Software is
    24                          ;; furnished to do so, subject to the following conditions:
    25                          ;;
    26                          ;; The above copyright notice and this permission notice shall be included in all
    27                          ;; copies or substantial portions of the Software.
    28                          ;;
    29                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    30                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    31                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    32                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    33                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    34                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    35                          ;; SOFTWARE.
    36                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                          
    40                          ; Important! define exactly ONE target (set in build.sh)
    41                          ;C64SCREEN = 1
    42                          ;C64TERMINAL = 1
    43                          ;MINIMUM = 1
    44                          
    45                          ; options (set in build.sh)
    46                          ;NEEDECHO = 0
    47                          
    48                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                          
    50                          ;; _
    51                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    52                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    53                          ;; 1000 (display memory at $1000)
    54                          ;; 1000.2000 (display memory range $1000 to $2000)
    55                          ;; 1000. (display next screenful of memory starting at $1000)
    56                          ;; . (display next screenful of memory)
    57                          ;; 1000 r (JMP $1000)
    58                          ;; 1000: 01 02 03 (modify memory)
    59                          ;; (NEW SYNTAX)
    60                          ;; 1000 d (disassemble starting at address, for screenful)
    61                          ;; d (continue disassembling from last address)
    62                          ;; 1000 a (assemble starting at, interactive until empty line) 
    63                          ;; x (exit monitor -- C64 only)
    64                          ;; ? (commands help)
    65                          ;; ? a (list instructions available)
    66                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    67                          ;; ? mode (show addressing modes example syntax for 6502)
    68                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    69                          ;; (FUTURE SYNTAX, not implemented)
    70                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    71                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    72                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    73                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    74                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    75                          ;; .A: 00 (change register, replace A with X, Y, SP, S, PC, SR, P, N, V, B, D, I, Z, C as appropriate, colon is optional)
    76                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    77                          ;;
    78                          ;; (INTERACTIVE ASSEMBLER)
    79                          ;; 1000 _
    80                          ;;      ADC #$12
    81                          ;; 1000 69 12    ADC #$12
    82                          ;; 1002 _
    83                          ;;      JSR $1234
    84                          ;; 1002 20 34 12 JSR $1234
    85                          ;; 1005 _
    86                          ;;      RTS
    87                          ;; 1005 60       RTS
    88                          ;; 1006 _
    89                          ;;      XYZ
    90                          ;;      XYZ ?
    91                          ;; 1006 _
    92                          ;; _
    93                          ;;
    94                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    95                          ;; and can cursor up to revise, 
    96                          ;;
    97                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    98                          ;;
    99                          
   100                          ; global
   101                          inputbuf=$0200
   102                          
   103                          
   104                          ; kernal/system calls
   105                          
   106                          !ifdef MINIMUM {
   107                          charout=JUART_OUT
   108                          getkey=JUART_IN
   109                          }
   110                          
   111                          !ifdef C64SCREEN {
   112                          setlfs=$ffba
   113                          setnam=$ffbd
   114                          charin=$ffcf ; screen editor
   115                          charout=$ffd2
   116                          fsave =$ffd8
   117                          getkey=$ffe4
   118                          }
   119                          
   120                          !ifdef C64TERMINAL {
   121                          setlfs=$ffba
   122                          setnam=$ffbd
   123                          charout=$ffd2
   124                          getkey=$ffe4
   125                          fsave =$ffd8
   126                          }
   127                          
   128                          ; zeropage
   129                          !ifdef MINIMUM {
   130                          opidx=$f0
   131                          inidx=$f1
   132                          mode=$f2
   133                          size=$f3
   134                          ptr3=$f4 ; and $f5
   135                          count=$f6
   136                          len=$f7
   137                          savepos=$f8
   138                          tmp2=$f9
   139                          flag=$fa
   140                          ptr1=$fb ; and $fc
   141                          ptr2=$fd ; and $fe
   142                          tmp=$ff
   143                          } else {
   144                          ptr1=$fb ; and $fc
   145                          ptr2=$fd ; and $fe
   146                          tmp=$ff
   147                          opidx=$22
   148                          inidx=$23
   149                          mode=$24
   150                          size=$25
   151                          ptr3=$26 ; and $27
   152                          count=$a3
   153                          len=$a4
   154                          savepos=$a5
   155                          tmp2=$a6
   156                          flag=$a7
   157                          banksel=$02
   158                          drive=$a8
   159                          }
   160                          
   161                          !ifdef MINIMUM {
   162                          * = $e000
   163                          } else { // any C64
   164                          * = $8000
   165                          }
   166                          
   167                          start:
   168  8000 a912                   lda #<copyright
   169  8002 a28f                   ldx #>copyright
   170  8004 206a83                 jsr strout
   171  8007 a970                   lda #<firsthelp
   172  8009 a28f                   ldx #>firsthelp
   173  800b 206a83                 jsr strout
   174  800e 4cd88a                 jmp save_regs_and_stack
   175                          
   176                          input_loop:
   177  8011 208583                 jsr inputline
   178  8014 208883                 jsr parseline
   179  8017 4c1180                 jmp input_loop
   180                          
   181                          !ifndef MINIMUM {
   182                          ; C64 only
   183                          chkextrac64:
   184  801a 202680                 jsr chkexit
   185  801d d003                   bne +
   186  801f 4c3a80                 jmp execute_exit
   187  8022 18                 +   clc ; no error
   188  8023 a201                   ldx #1 ; Z false - not consumed
   189  8025 60                     rts
   190                          
   191                          chkexit:
   192  8026 b90002                 lda inputbuf, y
   193  8029 c958                   cmp #'X'
   194  802b d008                   bne +
   195  802d c8                     iny
   196  802e c4a4                   cpy len ; validate no extra characters
   197  8030 f003                   beq +
   198  8032 4c3680                 jmp extra_error
   199  8035 60                 +   rts
   200                          
   201                          extra_error:
   202                              ; pop local return address
   203  8036 68                     pla
   204  8037 68                     pla
   205  8038 38                     sec ; error
   206  8039 60                     rts
   207                          
   208                          execute_exit:
   209                              ; pop monitor return addresses, so only original caller is left
   210  803a 68                     pla
   211  803b 68                     pla
   212  803c 68                     pla
   213  803d 68                     pla
   214  803e 68                     pla
   215  803f 68                     pla
   216  8040 60                     rts
   217                          
   218                          display_extra_help:
   219  8041 a984                   lda #<extra_help
   220  8043 a28f                   ldx #>extra_help
   221  8045 4c6a83                 jmp strout
   222                          
   223                          !ifdef C64SCREEN {
   224                          display_page_disassemble:
   225  8048 a5fb                   lda ptr1
   226  804a a6fc                   ldx ptr1+1
   227  804c 20ee82                 jsr disphexword
   228  804f a9c2                   lda #<page_disassemble
   229  8051 a28f                   ldx #>page_disassemble
   230  8053 4c6a83                 jmp strout
   231                          
   232                          display_page_displaymemory:
   233  8056 20ce8a                 jsr newline
   234  8059 a5fb                   lda ptr1
   235  805b a6fc                   ldx ptr1+1
   236  805d 20ee82                 jsr disphexword
   237  8060 a9c9                   lda #<page_displaymemory
   238  8062 a28f                   ldx #>page_displaymemory
   239  8064 4c6a83                 jmp strout
   240                          
   241                          inputlinec64:
   242  8067 a000                   ldy #0
   243  8069 20cfff             -   jsr charin
   244  806c 990002                 sta inputbuf,y
   245  806f c8                     iny
   246  8070 c90d                   cmp #13
   247  8072 d0f5                   bne -
   248  8074 60                     rts
   249                          
   250                          continueassemblec64:
   251  8075 a914                   lda #20
   252  8077 20d2ff                 jsr charout
   253  807a 20d2ff                 jsr charout
   254  807d a5fb                   lda ptr1
   255  807f a6fc                   ldx ptr1+1
   256  8081 20ee82                 jsr disphexword
   257  8084 a920                   lda #' '
   258  8086 20d2ff                 jsr charout
   259  8089 20d2ff                 jsr charout
   260  808c 4cd2ff                 jmp charout
   261                          }
   262                          
   263                          chkfilename:
   264  808f 20278a                 jsr skipspaces
   265  8092 84ff                   sty tmp
   266  8094 b90002                 lda inputbuf, y
   267  8097 c922                   cmp #34 ; double quote
   268  8099 d022                   bne ++
   269  809b c8                 -   iny
   270  809c b90002                 lda inputbuf, y
   271  809f c90d                   cmp #13
   272  80a1 d004                   bne +
   273  80a3 a4ff                   ldy tmp
   274  80a5 d016                   bne ++
   275  80a7 c922               +   cmp #34 ; double quote
   276  80a9 d0f0                   bne -
   277  80ab 98                     tya ; index of ending double quotes
   278  80ac 48                     pha ; save
   279  80ad 18                     clc ; will subtract one more
   280  80ae e5ff                   sbc tmp ; subtract index of first quote, have filename length
   281  80b0 a6ff                   ldx tmp
   282  80b2 e8                     inx ; low address of filename
   283  80b3 a002                   ldy #>inputbuf ; high address of filename
   284  80b5 20bdff                 jsr setnam
   285  80b8 68                     pla
   286  80b9 a8                     tay
   287  80ba c8                     iny ; advance past ending double quotes
   288  80bb a900                   lda #0 ; set Z true
   289  80bd 60                 ++  rts
   290                          
   291                          check_execute_save:
   292  80be 208f80             +   jsr chkfilename
   293  80c1 f006                   beq +
   294  80c3 20108a                 jsr reporterr
   295  80c6 a201                   ldx #1 ; set Z false
   296  80c8 60                     rts
   297  80c9 20d780             +   jsr chkoptionaldrive
   298  80cc 20eb80                 jsr chksave
   299  80cf d005                   bne +
   300  80d1 20f480                 jsr executesave
   301  80d4 a200                   ldx #0 ; set Z true
   302  80d6 60                 +   rts
   303                          
   304                          chkoptionaldrive:
   305  80d7 a908                   lda #8
   306  80d9 85a8                   sta drive
   307  80db 20278a                 jsr skipspaces
   308  80de 207a8a                 jsr chkhexbyte
   309  80e1 d007                   bne +
   310  80e3 85a8                   sta drive
   311  80e5 20278a                 jsr skipspaces
   312  80e8 a900                   lda #0 ; set Z true
   313  80ea 60                 +   rts
   314                          
   315                          chksave:
   316  80eb 20278a                 jsr skipspaces
   317  80ee b90002                 lda inputbuf, y
   318  80f1 c953                   cmp #'S'
   319  80f3 60                     rts
   320                          
   321                          executesave:
   322  80f4 20ce8a                 jsr newline
   323  80f7 a9c0                   lda #$c0 ; KERNAL control and error messages
   324  80f9 859d                   sta $9d ; set messages to be displayed
   325  80fb a901                   lda #1
   326  80fd a6a8                   ldx drive
   327  80ff a00f                   ldy #15
   328  8101 20baff                 jsr setlfs
   329  8104 a9fb                   lda #ptr1
   330  8106 a6fd                   ldx ptr2
   331  8108 a4fe                   ldy ptr2+1
   332  810a 20d8ff                 jsr fsave
   333  810d 4cce8a                 jmp newline
   334                          }
   335                          
   336                          ; test: ; all the addressing modes here for testing disassembly
   337                          ;     nop
   338                          ;     lda $1234
   339                          ;     lda $1234,x
   340                          ;     lda $1234,y
   341                          ;     asl
   342                          ;     lda #$12
   343                          ;     lda ($12,x)
   344                          ;     lda ($12),y
   345                          ;     jmp ($1234)
   346                          ; -   bne -
   347                          ;     lda $12
   348                          ;     lda $12,x
   349                          ;     ldx $12,y
   350                          ;     !byte $FF ; unknown
   351                          
   352                          disassemble:
   353  8110 a917                   lda #23
   354  8112 85a3                   sta count
   355  8114 a000               -   ldy #0
   356  8116 b1fb                   lda (ptr1),y
   357  8118 203f81                 jsr find_opcode
   358  811b 20a281                 jsr disp_current
   359  811e a525                   lda size
   360  8120 1002                   bpl +
   361  8122 a901                   lda #1
   362  8124 18                 +   clc
   363  8125 65fb                   adc ptr1
   364  8127 85fb                   sta ptr1
   365  8129 9002                   bcc +
   366  812b e6fc                   inc ptr1+1
   367  812d c6a3               +   dec count
   368  812f d0e3                   bne -
   369                          !ifdef C64SCREEN {
   370  8131 4c4880                 jmp display_page_disassemble
   371                          } else {    
   372                              rts
   373                          }
   374                          
   375                          compareptrs:
   376  8134 a5fc                   lda ptr1+1
   377  8136 c5fe                   cmp ptr2+1
   378  8138 d004                   bne +
   379  813a a5fb                   lda ptr1
   380  813c c5fd                   cmp ptr2
   381  813e 60                 +   rts
   382                          
   383                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   384                          ; and properties updated in ZP globals size,inidx,opidx,mode
   385  813f a097                   ldy #nopcodes
   386  8141 a296                   ldx #nopcodes-1
   387  8143 dd4d8d             -   cmp opcodes,x
   388  8146 f00f                   beq +
   389  8148 ca                     dex
   390  8149 88                     dey
   391  814a d0f7                   bne -
   392  814c 18                     clc
   393  814d a901                   lda #1
   394  814f 8525                   sta size
   395  8151 a9ff                   lda #$FF
   396  8153 aa                     tax
   397  8154 a8                     tay
   398  8155 900a                   bcc ++
   399  8157 bde48d             +   lda instidx, x
   400  815a bc7b8e                 ldy modeidx, x
   401  815d 206881                 jsr getsize
   402  8160 38                     sec
   403  8161 8523               ++  sta inidx
   404  8163 8622                   stx opidx
   405  8165 8424                   sty mode
   406  8167 60                     rts
   407                          
   408                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   409                              ; result returned in size
   410  8168 48                     pha
   411  8169 a901                   lda #1
   412  816b 8525                   sta size
   413  816d 68                     pla
   414  816e c002                   cpy #2 // Immediate
   415  8170 9008                   bcc +
   416  8172 e625                   inc size
   417  8174 c009                   cpy #9 // Absolute
   418  8176 9002                   bcc +
   419  8178 e625                   inc size
   420  817a 60                 +   rts
   421                          
   422                          disp_opcode: ; .A opcode byte
   423  817b 203f81                 jsr find_opcode
   424  817e 8a                     txa
   425                              ; fall through to display instruction
   426                          
   427                          dispinst: ; .A instruction index 0..55, note modifies A and X
   428  817f aa                     tax
   429  8180 e038                   cpx #ninst
   430  8182 b012                   bcs +
   431  8184 bd8c8b                 lda inst0, x
   432  8187 20d2ff                 jsr charout
   433  818a bdc48b                 lda inst1, x
   434  818d 20d2ff                 jsr charout
   435  8190 bdfc8b                 lda inst2, x
   436  8193 4cd2ff                 jmp charout
   437  8196 a93f               +   lda #'?'
   438  8198 20d2ff                 jsr charout
   439  819b 20d2ff                 jsr charout
   440  819e 20d2ff                 jsr charout
   441  81a1 60                     rts
   442                          
   443                          disp_current:
   444  81a2 a5fb                   lda ptr1
   445  81a4 a6fc                   ldx ptr1+1
   446  81a6 20ee82                 jsr disphexword
   447  81a9 a920                   lda #$20
   448  81ab 20d2ff                 jsr charout
   449  81ae a000                   ldy #0
   450  81b0 a625                   ldx size
   451  81b2 b1fb               -   lda (ptr1),y
   452  81b4 20f482                 jsr disphexbyte
   453  81b7 a920                   lda #$20
   454  81b9 20d2ff                 jsr charout
   455  81bc c8                     iny
   456  81bd ca                     dex
   457  81be d0f2                   bne -
   458  81c0 c003               -   cpy #3
   459  81c2 f00e                   beq +
   460  81c4 a920                   lda #$20
   461  81c6 20d2ff                 jsr charout
   462  81c9 20d2ff                 jsr charout
   463  81cc 20d2ff                 jsr charout
   464  81cf c8                     iny
   465  81d0 d0ee                   bne -
   466  81d2 a523               +   lda inidx
   467  81d4 207f81                 jsr dispinst
   468  81d7 a920                   lda #$20
   469  81d9 20d2ff                 jsr charout
   470  81dc 20e481                 jsr disp_mode
   471  81df a90d                   lda #13
   472  81e1 4cd2ff                 jmp charout
   473                          
   474                          disp_mode
   475  81e4 a524                   lda mode
   476  81e6 c90d                   cmp #13
   477  81e8 b00a                   bcs +
   478  81ea 0a                     asl
   479  81eb aa                     tax
   480  81ec bd358c                 lda mode_jmptable+1,x
   481  81ef 48                     pha
   482  81f0 bd348c                 lda mode_jmptable,x
   483  81f3 48                     pha
   484  81f4 60                 +   rts
   485                          
   486                          dispModeAcc:
   487  81f5 a941                   lda #'A'
   488  81f7 4cd2ff                 jmp charout
   489                          
   490                          dispModeNone:
   491  81fa 60                     rts
   492                          
   493                          dispModeImm:
   494  81fb a923                   lda #'#'
   495  81fd 20d2ff                 jsr charout
   496                          dispModeZP:
   497  8200 a924                   lda #'$'
   498  8202 20d2ff                 jsr charout
   499  8205 a001                   ldy #1
   500  8207 b1fb                   lda (ptr1),y
   501  8209 4cf482                 jmp disphexbyte
   502                          
   503                          dispModeIndX:
   504  820c a928                   lda #'('
   505  820e 20d2ff                 jsr charout
   506  8211 a924                   lda #'$'
   507  8213 20d2ff                 jsr charout
   508  8216 a001                   ldy #1
   509  8218 b1fb                   lda (ptr1),y
   510  821a 20f482                 jsr disphexbyte
   511  821d a92c                   lda #','
   512  821f 20d2ff                 jsr charout
   513  8222 a958                   lda #'X'
   514  8224 20d2ff                 jsr charout
   515  8227 a929                   lda #')'
   516  8229 4cd2ff                 jmp charout
   517                          
   518                          dispModeIndY:
   519  822c a928                   lda #'('
   520  822e 20d2ff                 jsr charout
   521  8231 a924                   lda #'$'
   522  8233 20d2ff                 jsr charout
   523  8236 a001                   ldy #1
   524  8238 b1fb                   lda (ptr1),y
   525  823a 20f482                 jsr disphexbyte
   526  823d a929                   lda #')'
   527  823f 20d2ff                 jsr charout
   528  8242 a92c                   lda #','
   529  8244 20d2ff                 jsr charout
   530  8247 a959                   lda #'Y'
   531  8249 4cd2ff                 jmp charout
   532                          
   533                          dispModeRel:
   534  824c a924                   lda #'$'
   535  824e 20d2ff                 jsr charout
   536  8251 18                     clc
   537  8252 a5fb                   lda ptr1
   538  8254 6902                   adc #2
   539  8256 8526                   sta ptr3
   540  8258 a5fc                   lda ptr1+1
   541  825a 6900                   adc #0
   542  825c 8527                   sta ptr3+1
   543  825e a001                   ldy #1
   544  8260 b1fb                   lda (ptr1),y
   545  8262 1014                   bpl +
   546                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   547  8264 49ff                   eor #$FF ; inverse
   548  8266 18                     clc
   549  8267 6901                   adc #1 ; complete getting absolute value from two's complement
   550  8269 85ff                   sta tmp
   551  826b 38                     sec
   552  826c a526                   lda ptr3
   553  826e e5ff                   sbc tmp
   554  8270 8526                   sta ptr3
   555  8272 b00d                   bcs ++
   556  8274 c627                   dec ptr3+1
   557  8276 9009                   bcc ++
   558  8278 18                 +   clc ; simple case of adding
   559  8279 6526                   adc ptr3
   560  827b 8526                   sta ptr3
   561  827d 9002                   bcc ++
   562  827f e627                   inc ptr3+1
   563  8281 a526               ++  lda ptr3
   564  8283 a627                   ldx ptr3+1
   565  8285 4cee82                 jmp disphexword
   566                          
   567                          dispModeZPX:
   568  8288 200082                 jsr dispModeZP
   569  828b a92c                   lda #','
   570  828d 20d2ff                 jsr charout
   571  8290 a958                   lda #'X'
   572  8292 4cd2ff                 jmp charout
   573                          
   574                          dispModeZPY:
   575  8295 200082                 jsr dispModeZP
   576  8298 a92c                   lda #','
   577  829a 20d2ff                 jsr charout
   578  829d a959                   lda #'Y'
   579  829f 4cd2ff                 jmp charout
   580                          
   581                          dispModeAbs:
   582  82a2 a924                   lda #'$'
   583  82a4 20d2ff                 jsr charout
   584  82a7 a001                   ldy #1
   585  82a9 b1fb                   lda (ptr1),y
   586  82ab 48                     pha
   587  82ac c8                     iny
   588  82ad b1fb                   lda (ptr1),y
   589  82af aa                     tax
   590  82b0 68                     pla
   591  82b1 4cee82                 jmp disphexword
   592                          
   593                          dispModeAbsX:
   594  82b4 20a282                 jsr dispModeAbs
   595  82b7 a92c                   lda #','
   596  82b9 20d2ff                 jsr charout
   597  82bc a958                   lda #'X'
   598  82be 4cd2ff                 jmp charout
   599                          
   600                          dispModeAbsY:
   601  82c1 20a282                 jsr dispModeAbs
   602  82c4 a92c                   lda #','
   603  82c6 20d2ff                 jsr charout
   604  82c9 a959                   lda #'Y'
   605  82cb 4cd2ff                 jmp charout
   606                          
   607                          dispModeInd:
   608  82ce a928                   lda #'('
   609  82d0 20d2ff                 jsr charout
   610  82d3 20a282                 jsr dispModeAbs
   611  82d6 a929                   lda #')'
   612  82d8 4cd2ff                 jmp charout
   613                          
   614                          dispbinbyte: ; .A 00..FF
   615  82db a208                   ldx #8
   616  82dd 85ff                   sta tmp
   617  82df a930               -   lda #'0'
   618  82e1 26ff                   rol tmp
   619  82e3 9002                   bcc +
   620  82e5 a931                   lda #'1'
   621  82e7 20d2ff             +   jsr charout
   622  82ea ca                     dex
   623  82eb d0f2                   bne -
   624  82ed 60                     rts
   625                          
   626                          disphexword: ; .A low, .X high, 0000..FFFF
   627  82ee 48                     pha
   628  82ef 8a                     txa
   629  82f0 20f482                 jsr disphexbyte
   630  82f3 68                     pla
   631                              ;fall through to call again
   632                          
   633                          disphexbyte: ; .A 00..FF
   634  82f4 48                     pha
   635  82f5 4a                     lsr
   636  82f6 4a                     lsr
   637  82f7 4a                     lsr
   638  82f8 4a                     lsr
   639  82f9 20fd82                 jsr disphexnybble
   640  82fc 68                     pla
   641                              ;fall through to call again
   642                          
   643                          disphexnybble: ; .A 0..F
   644  82fd 290f                   and #$0F
   645  82ff 0930                   ora #$30
   646  8301 c93a                   cmp #$3A
   647  8303 9002                   bcc +
   648  8305 6906                   adc #$06
   649  8307 4cd2ff             +   jmp charout
   650                          
   651                          inputhexword: ; C set if fails
   652  830a a900                   lda #0
   653  830c 85fb                   sta ptr1
   654  830e 85fc                   sta ptr1+1
   655                          
   656  8310 a904                   lda #4 ; word is at most 4 nybbles
   657  8312 85a3                   sta count
   658  8314 204c83             --  jsr inputhexnybble
   659  8317 b012                   bcs +
   660                          
   661                              ; shift nibble up
   662  8319 0a                     asl
   663  831a 0a                     asl
   664  831b 0a                     asl
   665  831c 0a                     asl
   666                          
   667  831d a204                   ldx #4 ; 4 bits rotated into word
   668  831f 2a                 -   rol
   669  8320 26fb                   rol ptr1
   670  8322 26fc                   rol ptr1+1
   671  8324 ca                     dex
   672  8325 d0f8                   bne - ; repeat bits
   673                          
   674  8327 c6a3                   dec count
   675  8329 d0e9                   bne -- ; repeat nybbles
   676                          
   677  832b a5a3               +   lda count
   678  832d c904                   cmp #4 ; set C if 4, otherwise clear
   679  832f 60                     rts
   680                          
   681                          inputhexbyte:
   682  8330 204c83                 jsr inputhexnybble
   683  8333 b016                   bcs ++
   684  8335 85ff                   sta tmp
   685  8337 204c83                 jsr inputhexnybble
   686  833a 9005                   bcc +
   687  833c 18                     clc ; allow single digit as byte
   688  833d a5ff                   lda tmp
   689  833f 900a                   bcc ++
   690  8341 06ff               +   asl tmp
   691  8343 06ff                   asl tmp
   692  8345 06ff                   asl tmp
   693  8347 06ff                   asl tmp
   694  8349 05ff                   ora tmp ; necessary to assemble the two nybbles
   695  834b 60                 ++  rts
   696                          
   697                          inputhexnybble:
   698  834c b90002                 lda $0200,y
   699  834f 297f                   and #$7F
   700  8351 38                     sec
   701  8352 e930                   sbc #$30
   702  8354 9012                   bcc ++
   703  8356 c90a                   cmp #10
   704  8358 900c                   bcc +
   705  835a e907                   sbc #7
   706  835c 900a                   bcc ++
   707  835e c90a                   cmp #10
   708  8360 9006                   bcc ++
   709  8362 c910                   cmp #16
   710  8364 b002                   bcs ++
   711  8366 c8                 +   iny
   712  8367 60                     rts
   713  8368 38                 ++  sec
   714  8369 60                     rts
   715                          
   716                          strout:
   717  836a 8526                   sta ptr3
   718  836c 8627                   stx ptr3+1
   719                          strout2:    
   720  836e a000                   ldy #0
   721  8370 b126               -   lda (ptr3),y
   722  8372 f006                   beq +
   723  8374 20d2ff                 jsr charout
   724  8377 c8                     iny
   725  8378 d0f6                   bne -
   726  837a 98                 +   tya
   727  837b 38                     sec
   728  837c 6526                   adc ptr3
   729  837e 8526                   sta ptr3
   730  8380 9002                   bcc +
   731  8382 e627                   inc ptr3+1
   732  8384 60                 +   rts
   733                          
   734                          inputline:
   735                          !ifdef C64SCREEN {
   736  8385 4c6780                 jmp inputlinec64
   737                          } else {
   738                              ldy #0
   739                          --  sty count
   740                          -   jsr getkey
   741                              beq -
   742                              ldy count
   743                          !ifdef MINIMUM {
   744                              cmp #8 ; backspace
   745                          } else {
   746                              cmp #20
   747                          }
   748                              bne +
   749                              cpy #0
   750                              beq -
   751                              dey
   752                          !if NEEDECHO = 1 {    
   753                              jsr charout
   754                          }
   755                              jmp --
   756                          +   cmp #13
   757                              beq +
   758                              cmp #' '
   759                              bcc -
   760                              cmp #128
   761                              bcs -
   762                          +
   763                          !if NEEDECHO = 1 {    
   764                              jsr charout
   765                          }
   766                              sta inputbuf,y
   767                              iny
   768                              cmp #13
   769                              bne --
   770                              rts
   771                          }
   772                          
   773                          parseline:
   774  8388 c001                   cpy #1
   775  838a d003                   bne +
   776                          -
   777                          !ifdef C64SCREEN {   
   778  838c 4cce8a                 jmp newline
   779                          } else {
   780                              rts
   781                          }
   782  838f 88                 +   dey
   783  8390 84a4                   sty len
   784                              ; skip whitespace
   785                              ; check for address, put in ptr1
   786                              ; or check for dot, then require address put in ptr2
   787                              ; or check for ?, and optional parameter, execute help
   788                              ; check for whitespace
   789                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   790                              ; check for string, store at start of inputbuf
   791                              ; check for drive number
   792                              ; check for whitespace
   793                              ; check command ":rda?mls", execute command
   794  8392 a000                   ldy #0
   795  8394 20278a                 jsr skipspaces
   796  8397 c4a4                   cpy len
   797  8399 f0f1                   beq -
   798  839b 20dd89                 jsr chkcontinuedis
   799  839e d003                   bne +
   800  83a0 20018a                 jsr executedisassemble ; note won't return
   801  83a3 20ef89             +   jsr chkcontinueasm
   802  83a6 d003                   bne +
   803  83a8 201586                 jsr continueassemble ; note won't return
   804  83ab 20368a             +   jsr chkdot
   805  83ae d003                   bne +
   806  83b0 4c9784                 jmp executedot
   807  83b3 20418a             +   jsr chkhelp
   808  83b6 d003                   bne +
   809  83b8 4ca184                 jmp executehelp
   810                          +
   811                          !ifndef MINIMUM {
   812  83bb 201a80                 jsr chkextrac64 ; check syntax only available on C64
   813  83be b014                   bcs + ; error if C set
   814  83c0 f005                   beq ++ ; consumed if Z set, skip next test(s)
   815                          }    
   816  83c2 20718a                 jsr chkhexaddr1
   817  83c5 d003                   bne error
   818  83c7 4ccd83             ++  jmp executeaddr1
   819                          error:
   820  83ca 4c108a                 jmp reporterr
   821                          
   822                          executeaddr1:
   823  83cd c4a4                   cpy len
   824  83cf d003                   bne +
   825  83d1 4c2684                 jmp executedisplay1
   826  83d4 20368a             +   jsr chkdot
   827  83d7 d00f                   bne +
   828  83d9 c4a4                   cpy len
   829  83db f021                   beq executepagedisplay
   830  83dd 20918a                 jsr chkhexaddr2
   831  83e0 d0e8                   bne error
   832  83e2 18                     clc
   833  83e3 66a7                   ror flag
   834  83e5 4c1684                 jmp executeaddr12
   835  83e8 20278a             +   jsr skipspaces
   836  83eb 204c8a                 jsr chkcolon
   837  83ee d003                   bne +
   838  83f0 4c7584                 jmp executemodify
   839  83f3 20b28a             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   840                          !ifdef MINIMUM {
   841                              jmp reportnotimplemented
   842                          } else {
   843  83f6 208f80                 jsr chkfilename
   844  83f9 d0cf                   bne error
   845  83fb 4c9e84                 jmp executeloadfilename
   846                          }
   847                          
   848                          executepagedisplay:
   849  83fe a5fb                   lda ptr1
   850  8400 18                     clc
   851                          !ifdef MINIMUM {
   852                              adc #$5f
   853                          } else {
   854  8401 69b7                   adc #$b7
   855                          }
   856  8403 85fd                   sta ptr2
   857  8405 a5fc                   lda ptr1+1
   858                          !ifdef MINIMUM {
   859                              adc #$01
   860                          } else {
   861  8407 6900                   adc #$00
   862                          }
   863  8409 85fe                   sta ptr2+1
   864  840b 9006                   bcc +
   865  840d a9ff                   lda #$ff
   866  840f 85fd                   sta ptr2
   867  8411 85fe                   sta ptr2+1
   868  8413 38                 +   sec
   869  8414 66a7                   ror flag
   870                              ; fall through to executeaddr12
   871                          
   872                          executeaddr12:
   873  8416 c4a4                   cpy len
   874  8418 d003                   bne +
   875  841a 4c2e84                 jmp executedisplay12
   876                          !ifndef MINIMUM { // any C64
   877  841d 20be80             +   jsr check_execute_save
   878  8420 f003                   beq ++
   879                          }
   880  8422 4c098a             +   jmp reportnotimplemented
   881  8425 60                 ++  rts
   882                          
   883                          executedisplay1:
   884  8426 a5fb                   lda ptr1
   885  8428 85fd                   sta ptr2
   886  842a a5fc                   lda ptr1+1
   887  842c 85fe                   sta ptr2+1
   888                              ; fall through executedisplay12
   889                          
   890                          executedisplay12:
   891  842e a9ff                   lda #$ff
   892  8430 85a3                   sta count
   893  8432 e6a3               -   inc count
   894  8434 a5a3                   lda count
   895                          !ifdef MINIMUM {    
   896                              and #$0f
   897                          } else {
   898  8436 2907                   and #$07
   899                          }
   900  8438 d016                   bne +
   901  843a a90d                   lda #13
   902  843c 20d2ff                 jsr charout
   903  843f a5fb                   lda ptr1
   904  8441 a6fc                   ldx ptr1+1
   905  8443 20ee82                 jsr disphexword
   906  8446 a93a                   lda #':'
   907  8448 20d2ff                 jsr charout
   908  844b a920                   lda #' '
   909  844d 20d2ff                 jsr charout
   910  8450 a000               +   ldy #0
   911  8452 b1fb                   lda (ptr1),y
   912  8454 20f482                 jsr disphexbyte
   913  8457 a920                   lda #' '
   914  8459 20d2ff                 jsr charout
   915  845c e6fb                   inc ptr1
   916  845e d004                   bne +
   917  8460 e6fc                   inc ptr1+1
   918  8462 f00e                   beq ++
   919  8464 203481             +   jsr compareptrs
   920  8467 90c9                   bcc -
   921  8469 f0c7                   beq -
   922  846b 24a7                   bit flag
   923  846d 1003                   bpl ++
   924                          !ifdef C64SCREEN {
   925  846f 4c5680                 jmp display_page_displaymemory
   926                          }
   927  8472 4cce8a             ++  jmp newline
   928                          
   929                          executemodify:
   930  8475 20278a                 jsr skipspaces
   931  8478 c4a4                   cpy len
   932  847a f018                   beq ++
   933  847c 20578a                 jsr chkhexbyteofsequence
   934  847f f003                   beq +
   935  8481 4cca83                 jmp error
   936  8484 84ff               +   sty tmp
   937  8486 a000                   ldy #0
   938  8488 91fb                   sta (ptr1),y
   939  848a e6fb                   inc ptr1
   940  848c d002                   bne +
   941  848e e6fc                   inc ptr1+1
   942  8490 a4ff               +   ldy tmp
   943  8492 d0e1                   bne executemodify
   944  8494 4cce8a             ++  jmp newline
   945                          
   946                          executedot:
   947  8497 c4a4                   cpy len
   948  8499 d003                   bne +
   949  849b 4cfe83                 jmp executepagedisplay
   950                          
   951                          executeloadfilename:
   952                          executeaddr1cmd:
   953  849e 4c098a             +   jmp reportnotimplemented
   954                          
   955                          executehelp:
   956                          !ifdef C64SCREEN {
   957  84a1 20ce8a                 jsr newline
   958                          }
   959  84a4 c4a4                   cpy len
   960  84a6 d003                   bne +
   961  84a8 4cd184                 jmp displayhelp
   962  84ab 20278a             +   jsr skipspaces
   963  84ae 20e584                 jsr chkhelpinstructions
   964  84b1 d003                   bne +
   965  84b3 4c2185                 jmp displayinstructions
   966  84b6 20ff84             +   jsr chkhelpmodes
   967  84b9 d003                   bne +
   968  84bb 4c3885                 jmp displaymodes
   969  84be 204f89             +   jsr chkinstruction
   970  84c1 d003                   bne +
   971  84c3 4ce885                 jmp executehelpinstruction
   972  84c6 20f284             +   jsr chkhelpregisters
   973  84c9 d003                   bne +
   974  84cb 4c248b                 jmp execute_display_registers
   975  84ce 4c098a             +   jmp reportnotimplemented
   976                          
   977                          displayhelp:
   978  84d1 a9e1                   lda #<generalhelp
   979  84d3 a28f                   ldx #>generalhelp
   980  84d5 206a83                 jsr strout
   981  84d8 a9d6                   lda #<generalhelp2
   982  84da a290                   ldx #>generalhelp2
   983  84dc 206a83                 jsr strout
   984                          !ifndef MINIMUM { // any C64
   985  84df 204180                 jsr display_extra_help
   986                          }
   987  84e2 4cce8a                 jmp newline
   988                          
   989                          chkhelpinstructions:
   990  84e5 b90002                 lda inputbuf, y
   991  84e8 c941                   cmp #'A'
   992  84ea d005                   bne +
   993  84ec b90102                 lda inputbuf+1, y
   994  84ef c90d                   cmp #13
   995                              ; no need to increment y if found, done parsing line
   996  84f1 60                 +   rts
   997                          
   998                          chkhelpregisters:
   999  84f2 b90002                 lda inputbuf, y
  1000  84f5 c92e                   cmp #'.'
  1001  84f7 d005                   bne +
  1002  84f9 b90102                 lda inputbuf+1, y
  1003  84fc c90d                   cmp #13
  1004  84fe 60                 +   rts
  1005                          
  1006                          chkhelpmodes:
  1007  84ff a9c0                   lda #<modes_keyword
  1008  8501 a291                   ldx #>modes_keyword
  1009                              ; fall through to chkkeyword
  1010                          
  1011                          chkkeyword:
  1012  8503 84a3                   sty count
  1013  8505 8526                   sta ptr3
  1014  8507 8627                   stx ptr3+1
  1015  8509 a6a3                   ldx count
  1016  850b a000                   ldy #0
  1017  850d bd0002             -   lda inputbuf, x
  1018  8510 d126                   cmp (ptr3),y
  1019  8512 d008                   bne +
  1020  8514 e8                     inx
  1021  8515 c8                     iny
  1022  8516 e4a4                   cpx len
  1023  8518 d0f3                   bne -
  1024  851a b126                   lda (ptr3),y ; matched if end of string, will set Z
  1025  851c 08                 +   php ; save Z
  1026  851d a4a3                   ldy count
  1027  851f 28                     plp ; restore Z
  1028  8520 60                     rts
  1029                          
  1030                          displayinstructions:
  1031  8521 a038                   ldy #ninst
  1032  8523 a200                   ldx #0
  1033  8525 8a                 -   txa
  1034  8526 48                     pha
  1035  8527 207f81                 jsr dispinst
  1036  852a a920                   lda #' '
  1037  852c 20d2ff                 jsr charout
  1038  852f 68                     pla
  1039  8530 aa                     tax
  1040  8531 e8                     inx
  1041  8532 88                     dey
  1042  8533 d0f0                   bne -
  1043  8535 4cce8a                 jmp newline
  1044                          
  1045                          displaymodes:
  1046  8538 38                     sec
  1047  8539 a900                   lda #0
  1048  853b 48                 -   pha
  1049  853c aa                     tax
  1050  853d bd4e8c                 lda mode_sorted, x
  1051  8540 204d85                 jsr dispmode
  1052  8543 68                     pla
  1053  8544 18                     clc
  1054  8545 6901                   adc #1
  1055  8547 c90d                   cmp #nmodes
  1056  8549 90f0                   bcc -
  1057  854b 18                     clc
  1058  854c 60                     rts
  1059                          
  1060                          dispmode:
  1061  854d c90d                   cmp #nmodes
  1062  854f b008                   bcs +
  1063  8551 8524                   sta mode
  1064  8553 209585                 jsr disp_modename_and_example
  1065  8556 4c5a85                 jmp dispmodeinstructions
  1066  8559 60                 +   rts
  1067                          
  1068                          dispmodeinstructions:
  1069                          !ifdef C64SCREEN {
  1070                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1071  855a a524                   lda mode
  1072  855c c903                   cmp #3
  1073  855e d005                   bne +
  1074  8560 a920                   lda #' '
  1075  8562 4cd2ff                 jmp charout
  1076                          }
  1077                              ; display instructions with this mode
  1078  8565 a000               +   ldy #0
  1079  8567 8423               --  sty inidx
  1080  8569 a200                   ldx #0
  1081  856b 86ff               -   stx tmp
  1082  856d a523                   lda inidx
  1083  856f dde48d                 cmp instidx, x
  1084  8572 d014                   bne ++
  1085  8574 bd7b8e                 lda modeidx, x
  1086  8577 c524                   cmp mode
  1087  8579 d00d                   bne ++
  1088  857b a920                   lda #' '
  1089  857d 20d2ff                 jsr charout
  1090  8580 bde48d                 lda instidx, x
  1091  8583 207f81                 jsr dispinst
  1092  8586 a6ff                   ldx tmp
  1093  8588 e8                 ++  inx
  1094  8589 e097                   cpx #nopcodes
  1095  858b 90de                   bcc -
  1096  858d c8                     iny
  1097  858e c038                   cpy #ninst
  1098  8590 d0d5                   bne --
  1099  8592 4cce8a                 jmp newline
  1100                          
  1101                          disp_modename_and_example:
  1102  8595 0a                     asl
  1103  8596 aa                     tax
  1104  8597 bd338d                 lda modes, x
  1105  859a 48                     pha
  1106  859b bd348d                 lda modes+1, x
  1107  859e aa                     tax
  1108                          !ifdef C64SCREEN {
  1109  859f a912                   lda #18
  1110  85a1 20d2ff                 jsr charout
  1111                          }    
  1112  85a4 68                     pla
  1113  85a5 206a83                 jsr strout
  1114  85a8 a920                   lda #' '
  1115  85aa 20d2ff                 jsr charout
  1116  85ad 206e83                 jsr strout2
  1117                          !ifdef C64SCREEN {    
  1118  85b0 a992                   lda #146
  1119  85b2 20d2ff                 jsr charout
  1120                          }   
  1121  85b5 60                     rts
  1122                          
  1123                          disp_modename_instruction_example:
  1124  85b6 0a                     asl
  1125  85b7 aa                     tax
  1126  85b8 bd338d                 lda modes, x
  1127  85bb 48                     pha
  1128  85bc bd348d                 lda modes+1, x
  1129  85bf aa                     tax
  1130  85c0 68                     pla
  1131  85c1 206a83                 jsr strout ; mode name
  1132  85c4 a526                   lda ptr3
  1133  85c6 48                     pha
  1134  85c7 a527                   lda ptr3+1
  1135  85c9 48                     pha
  1136  85ca a93a                   lda #':'
  1137  85cc 20d2ff                 jsr charout
  1138  85cf a920                   lda #' '
  1139  85d1 20d2ff                 jsr charout
  1140  85d4 a523                   lda inidx
  1141  85d6 207f81                 jsr dispinst ; instruction
  1142  85d9 a920                   lda #' '
  1143  85db 20d2ff                 jsr charout
  1144  85de 68                     pla
  1145  85df 8527                   sta ptr3+1
  1146  85e1 68                     pla
  1147  85e2 8526                   sta ptr3
  1148  85e4 206e83                 jsr strout2 ; example
  1149  85e7 60                     rts
  1150                          
  1151                          
  1152                          executehelpinstruction:
  1153  85e8 a000                   ldy #0
  1154  85ea 8422               -   sty opidx
  1155  85ec b9e48d                 lda instidx, y
  1156  85ef c523                   cmp inidx
  1157  85f1 d01a                   bne +
  1158  85f3 b97b8e                 lda modeidx, y
  1159  85f6 8524                   sta mode
  1160  85f8 a622                   ldx opidx
  1161  85fa bd4d8d                 lda opcodes, x
  1162  85fd 20f482                 jsr disphexbyte
  1163  8600 a920                   lda #' '
  1164  8602 20d2ff                 jsr charout
  1165  8605 a524                   lda mode
  1166  8607 20b685                 jsr disp_modename_instruction_example
  1167  860a 20ce8a                 jsr newline
  1168  860d a422               +   ldy opidx
  1169  860f c8                     iny
  1170  8610 c097                   cpy #nopcodes
  1171  8612 90d6                   bcc -
  1172  8614 60                     rts
  1173                          
  1174                          continueassemble:
  1175                          !ifdef C64SCREEN {   
  1176  8615 207580                 jsr continueassemblec64
  1177                          }
  1178                              ; continue...
  1179                          
  1180                          executeassemble:
  1181  8618 68                     pla ; remove low byte return address
  1182  8619 68                     pla ; return high byte return address
  1183                          !ifdef C64SCREEN {    
  1184  861a a914                   lda #20
  1185  861c 20d2ff                 jsr charout
  1186  861f 20d2ff                 jsr charout
  1187                          } else {
  1188                              lda ptr1
  1189                              ldx ptr1+1
  1190                              jsr disphexword
  1191                              lda #' '
  1192                              jsr charout
  1193                          }
  1194                              ; save current pointer
  1195  8622 a5fb               --  lda ptr1
  1196  8624 a6fc                   ldx ptr1+1
  1197  8626 8526                   sta ptr3
  1198  8628 8627                   stx ptr3+1
  1199  862a 208583                 jsr inputline
  1200  862d c001                   cpy #1
  1201  862f f048                   beq ++
  1202  8631 88                     dey
  1203  8632 84a4                   sty len
  1204  8634 a000                   ldy #0
  1205  8636 20278a                 jsr skipspaces
  1206  8639 c4a4                   cpy len
  1207  863b f03c                   beq ++
  1208                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1209                              ;jsr skipspaces
  1210  863d 204f89                 jsr chkinstruction
  1211  8640 f00b                   beq +
  1212  8642 a526               -   lda ptr3
  1213  8644 85fb                   sta ptr1
  1214  8646 a527                   lda ptr3+1
  1215  8648 85fc                   sta ptr1+1
  1216  864a 4cca83                 jmp error
  1217  864d 20a386             +   jsr chkaddressing
  1218  8650 d0f0                   bne -
  1219  8652 208089                 jsr find_inst_and_mode
  1220  8655 d0eb                   bne -
  1221  8657 207c86                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1222  865a 18                     clc
  1223  865b a525                   lda size
  1224  865d 6526                   adc ptr3
  1225  865f 85fb                   sta ptr1
  1226  8661 a527                   lda ptr3+1
  1227  8663 6900                   adc #0
  1228  8665 85fc                   sta ptr1+1
  1229                          !ifdef C64SCREEN {    
  1230  8667 20ce8a                 jsr newline
  1231                          }
  1232  866a a5fb                   lda ptr1
  1233  866c a6fc                   ldx ptr1+1
  1234  866e 20ee82                 jsr disphexword
  1235  8671 a920                   lda #' '
  1236  8673 20d2ff                 jsr charout
  1237  8676 4c2286                 jmp --
  1238                          ++  
  1239                          !ifdef C64SCREEN {
  1240  8679 4cce8a                 jmp newline
  1241                          } else {
  1242                              rts
  1243                          }
  1244                          
  1245                          store_assembly:
  1246  867c a622                   ldx opidx
  1247  867e bd4d8d                 lda opcodes, x
  1248  8681 a000                   ldy #0
  1249  8683 9126                   sta (ptr3), y
  1250  8685 c8                     iny
  1251  8686 a625                   ldx size
  1252  8688 e001                   cpx #1
  1253  868a f016                   beq ++
  1254  868c e002               +   cpx #2
  1255  868e d005                   bne +
  1256  8690 a5a6                   lda tmp2
  1257  8692 9126                   sta (ptr3), y
  1258  8694 60                     rts
  1259  8695 e003               +   cpx #3
  1260  8697 d009                   bne ++
  1261  8699 a5fb                   lda ptr1
  1262  869b 9126                   sta (ptr3), y
  1263  869d c8                     iny
  1264  869e a5fc                   lda ptr1+1
  1265  86a0 9126                   sta (ptr3), y
  1266  86a2 60                 ++  rts
  1267                          
  1268                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1269  86a3 20278a                 jsr skipspaces
  1270  86a6 a200                   ldx #0
  1271  86a8 8624                   stx mode
  1272  86aa 200587                 jsr chkaccumulator
  1273  86ad f051                   beq +
  1274  86af e624                   inc mode
  1275  86b1 c4a4                   cpy len ; chknone
  1276  86b3 f04b                   beq +
  1277  86b5 e624                   inc mode
  1278  86b7 202987                 jsr chkimmediate
  1279  86ba f044                   beq +
  1280  86bc e624                   inc mode
  1281  86be 204d87                 jsr chkindirectx
  1282  86c1 f03d                   beq +
  1283  86c3 e624                   inc mode
  1284  86c5 209287                 jsr chkindirecty
  1285  86c8 f036                   beq +
  1286  86ca e624                   inc mode
  1287  86cc 20d787                 jsr chkrelative
  1288  86cf f02f                   beq +
  1289  86d1 e624                   inc mode
  1290  86d3 203288                 jsr chkzeropage
  1291  86d6 f028                   beq +
  1292  86d8 e624                   inc mode
  1293  86da 204b88                 jsr chkzeropagex
  1294  86dd f021                   beq +
  1295  86df e624                   inc mode
  1296  86e1 207a88                 jsr chkzeropagey
  1297  86e4 f01a                   beq +
  1298  86e6 e624                   inc mode
  1299  86e8 20a988                 jsr chkabsolute
  1300  86eb f013                   beq +
  1301  86ed e624                   inc mode
  1302  86ef 20c288                 jsr chkabsolutex
  1303  86f2 f00c                   beq +
  1304  86f4 e624                   inc mode
  1305  86f6 20f188                 jsr chkabsolutey
  1306  86f9 f005                   beq +
  1307  86fb e624                   inc mode
  1308  86fd 202089                 jsr chkindirect
  1309  8700 08                 +   php ; save Z
  1310  8701 a524                   lda mode
  1311  8703 28                     plp ; restore Z 
  1312  8704 60                     rts
  1313                          
  1314                          chkaccumulator:
  1315  8705 c4a4                   cpy len
  1316  8707 d013                   bne +
  1317  8709 a523                   lda inidx
  1318  870b c902                   cmp #2 ; ASL
  1319  870d f019                   beq ++
  1320  870f c920                   cmp #32 ; LSR
  1321  8711 f015                   beq ++
  1322  8713 c927                   cmp #39 ; ROL
  1323  8715 f011                   beq ++
  1324  8717 c928                   cmp #40 ; ROR
  1325  8719 4c2887                 jmp ++
  1326  871c b90002             +   lda inputbuf, y
  1327  871f c941                   cmp #'A'
  1328  8721 d005                   bne ++
  1329  8723 b90102                 lda inputbuf+1,y
  1330  8726 c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1331  8728 60                 ++  rts
  1332                          
  1333                          chkimmediate:
  1334  8729 84a5                   sty savepos
  1335  872b b90002                 lda inputbuf, y
  1336  872e c923                   cmp #'#'
  1337  8730 d016                   bne ++
  1338  8732 c8                     iny
  1339  8733 20278a                 jsr skipspaces
  1340  8736 b90002                 lda inputbuf, y
  1341  8739 c924                   cmp #'$'
  1342  873b d001                   bne +
  1343  873d c8                     iny
  1344  873e 207a8a             +   jsr chkhexbyte
  1345  8741 d005                   bne ++
  1346  8743 c4a4               +   cpy len
  1347  8745 d001                   bne ++
  1348  8747 60                     rts
  1349  8748 a4a5               ++  ldy savepos
  1350  874a a201                   ldx #1 ; Z false (NE)
  1351  874c 60                     rts
  1352                          
  1353                          chkindirectx:
  1354  874d 84a5                   sty savepos
  1355  874f b90002                 lda inputbuf, y
  1356  8752 c928                   cmp #'('
  1357  8754 d037                   bne ++
  1358  8756 c8                     iny
  1359  8757 20278a                 jsr skipspaces
  1360  875a b90002                 lda inputbuf, y
  1361  875d c924                   cmp #'$'
  1362  875f d001                   bne +
  1363  8761 c8                     iny
  1364  8762 207a8a             +   jsr chkhexbyte
  1365  8765 d026                   bne ++
  1366  8767 20278a                 jsr skipspaces
  1367  876a b90002                 lda inputbuf, y
  1368  876d c92c                   cmp #','
  1369  876f d01c                   bne ++
  1370  8771 c8                     iny
  1371  8772 20278a                 jsr skipspaces
  1372  8775 b90002                 lda inputbuf, y
  1373  8778 c958                   cmp #'X'
  1374  877a d011                   bne ++
  1375  877c c8                     iny
  1376  877d 20278a                 jsr skipspaces
  1377  8780 b90002                 lda inputbuf, y
  1378  8783 c929                   cmp #')'
  1379  8785 d006                   bne ++
  1380  8787 c8                     iny
  1381  8788 c4a4                   cpy len
  1382  878a d001                   bne ++
  1383  878c 60                     rts
  1384  878d a4a5               ++  ldy savepos
  1385  878f a201                   ldx #1 ; Z false (NE)
  1386  8791 60                     rts
  1387                          
  1388                          chkindirecty:
  1389  8792 84a5                   sty savepos
  1390  8794 b90002                 lda inputbuf, y
  1391  8797 c928                   cmp #'('
  1392  8799 d037                   bne ++
  1393  879b c8                     iny
  1394  879c 20278a                 jsr skipspaces
  1395  879f b90002                 lda inputbuf, y
  1396  87a2 c924                   cmp #'$'
  1397  87a4 d001                   bne +
  1398  87a6 c8                     iny
  1399  87a7 207a8a             +   jsr chkhexbyte
  1400  87aa d026                   bne ++
  1401  87ac 20278a                 jsr skipspaces
  1402  87af b90002                 lda inputbuf, y
  1403  87b2 c929                   cmp #')'
  1404  87b4 d01c                   bne ++
  1405  87b6 c8                     iny
  1406  87b7 20278a                 jsr skipspaces
  1407  87ba b90002                 lda inputbuf, y
  1408  87bd c92c                   cmp #','
  1409  87bf d011                   bne ++
  1410  87c1 c8                     iny
  1411  87c2 20278a                 jsr skipspaces
  1412  87c5 b90002                 lda inputbuf, y
  1413  87c8 c959                   cmp #'Y'
  1414  87ca d006                   bne ++
  1415  87cc c8                     iny
  1416  87cd c4a4                   cpy len
  1417  87cf d001                   bne ++
  1418  87d1 60                     rts
  1419  87d2 a4a5               ++  ldy savepos
  1420  87d4 a201                   ldx #1 ; Z false (NE)
  1421  87d6 60                     rts
  1422                          
  1423                          chkrelative:
  1424  87d7 84a5                   sty savepos
  1425  87d9 a623                   ldx inidx
  1426  87db e006                   cpx #6 ; BIT
  1427  87dd f01e                   beq ++
  1428  87df bd8c8b                 lda inst0, x
  1429  87e2 c942                   cmp #'B'
  1430  87e4 d017                   bne ++
  1431  87e6 b90002                 lda inputbuf, y
  1432  87e9 c924                   cmp #'$'
  1433  87eb d001                   bne +
  1434  87ed c8                     iny
  1435  87ee 20718a             +   jsr chkhexword
  1436  87f1 d00a                   bne ++
  1437  87f3 c4a4                   cpy len
  1438  87f5 d006                   bne ++
  1439  87f7 200288                 jsr computeoffset
  1440  87fa d001                   bne ++
  1441  87fc 60                     rts ; Z true (EQ)
  1442  87fd a4a5               ++  ldy savepos
  1443  87ff a201                   ldx #1 ; Z false (NE)
  1444  8801 60                     rts
  1445                          
  1446                          computeoffset:
  1447                          ;   compute next address
  1448  8802 a527                   lda ptr3+1
  1449  8804 85fe                   sta ptr2+1
  1450  8806 a526                   lda ptr3
  1451  8808 18                     clc
  1452  8809 6902                   adc #2
  1453  880b 85fd                   sta ptr2
  1454  880d 9002                   bcc +
  1455  880f e6fe                   inc ptr2+1
  1456                          +  ; subtract argument
  1457  8811 38                     sec
  1458  8812 a5fb                   lda ptr1
  1459  8814 e5fd                   sbc ptr2
  1460  8816 85a6                   sta tmp2
  1461  8818 a5fc                   lda ptr1+1
  1462  881a e5fe                   sbc ptr2+1
  1463  881c f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1464  881e c9ff                   cmp #$FF
  1465  8820 d00d                   bne failedoffset ; 0 and FF were only options so fail
  1466                              ; chkeck negative offset
  1467  8822 a5a6                   lda tmp2
  1468  8824 3006                   bmi successoffset ; branch if signed byte is negative
  1469  8826 1007                   bpl failedoffset ; otherwise fail
  1470                          chkoffsetto127:
  1471  8828 a5a6                   lda tmp2
  1472  882a 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1473                          successoffset:    
  1474  882c a900                   lda #0 ; Z true (EQ)
  1475  882e 60                     rts
  1476                          failedoffset:
  1477  882f a901                   lda #1 ; Z false (NE)
  1478  8831 60                     rts
  1479                          
  1480                          chkzeropage:
  1481  8832 84a5                   sty savepos
  1482  8834 b90002                 lda inputbuf, y
  1483  8837 c924                   cmp #'$'
  1484  8839 d001                   bne +
  1485  883b c8                     iny
  1486  883c 207a8a             +   jsr chkhexbyte
  1487  883f d005                   bne ++
  1488  8841 c4a4                   cpy len
  1489  8843 d001                   bne ++
  1490  8845 60                     rts ; Z true (EQ)
  1491  8846 a4a5               ++  ldy savepos
  1492  8848 a201                   ldx #1 ; Z false (NE)
  1493  884a 60                     rts
  1494                          
  1495                          chkzeropagex:
  1496  884b 84a5                   sty savepos
  1497  884d b90002                 lda inputbuf, y
  1498  8850 c924                   cmp #'$'
  1499  8852 d001                   bne +
  1500  8854 c8                     iny
  1501  8855 207a8a             +   jsr chkhexbyte
  1502  8858 d01b                   bne ++
  1503  885a 20278a                 jsr skipspaces
  1504  885d b90002                 lda inputbuf, y
  1505  8860 c92c                   cmp #','
  1506  8862 d011                   bne ++
  1507  8864 c8                     iny
  1508  8865 20278a                 jsr skipspaces
  1509  8868 b90002                 lda inputbuf, y
  1510  886b c958                   cmp #'X'
  1511  886d d006                   bne ++
  1512  886f c8                     iny
  1513  8870 c4a4                   cpy len
  1514  8872 d001                   bne ++
  1515  8874 60                     rts ; Z true (EQ)
  1516  8875 a4a5               ++  ldy savepos
  1517  8877 a201                   ldx #1 ; Z false (NE)
  1518  8879 60                     rts
  1519                          
  1520                          chkzeropagey:
  1521  887a 84a5                   sty savepos
  1522  887c b90002                 lda inputbuf, y
  1523  887f c924                   cmp #'$'
  1524  8881 d001                   bne +
  1525  8883 c8                     iny
  1526  8884 207a8a             +   jsr chkhexbyte
  1527  8887 d01b                   bne ++
  1528  8889 20278a                 jsr skipspaces
  1529  888c b90002                 lda inputbuf, y
  1530  888f c92c                   cmp #','
  1531  8891 d011                   bne ++
  1532  8893 c8                     iny
  1533  8894 20278a                 jsr skipspaces
  1534  8897 b90002                 lda inputbuf, y
  1535  889a c959                   cmp #'Y'
  1536  889c d006                   bne ++
  1537  889e c8                     iny
  1538  889f c4a4                   cpy len
  1539  88a1 d001                   bne ++
  1540  88a3 60                     rts ; Z true (EQ)
  1541  88a4 a4a5               ++  ldy savepos
  1542  88a6 a201                   ldx #1 ; Z false (NE)
  1543  88a8 60                     rts
  1544                          
  1545                          chkabsolute:
  1546  88a9 84a5                   sty savepos
  1547  88ab b90002                 lda inputbuf, y
  1548  88ae c924                   cmp #'$'
  1549  88b0 d001                   bne +
  1550  88b2 c8                     iny
  1551  88b3 20718a             +   jsr chkhexword
  1552  88b6 d005                   bne ++
  1553  88b8 c4a4                   cpy len
  1554  88ba d001                   bne ++
  1555  88bc 60                     rts ; Z true (EQ)
  1556  88bd a4a5               ++  ldy savepos
  1557  88bf a201                   ldx #1 ; Z false (NE)
  1558  88c1 60                     rts
  1559                          
  1560                          chkabsolutex:
  1561  88c2 84a5                   sty savepos
  1562  88c4 b90002                 lda inputbuf, y
  1563  88c7 c924                   cmp #'$'
  1564  88c9 d001                   bne +
  1565  88cb c8                     iny
  1566  88cc 20718a             +   jsr chkhexword
  1567  88cf d01b                   bne ++
  1568  88d1 20278a                 jsr skipspaces
  1569  88d4 b90002                 lda inputbuf, y
  1570  88d7 c92c                   cmp #','
  1571  88d9 d011                   bne ++
  1572  88db c8                     iny
  1573  88dc 20278a                 jsr skipspaces
  1574  88df b90002                 lda inputbuf, y
  1575  88e2 c958                   cmp #'X'
  1576  88e4 d006                   bne ++
  1577  88e6 c8                     iny
  1578  88e7 c4a4                   cpy len
  1579  88e9 d001                   bne ++
  1580  88eb 60                     rts ; Z true (EQ)
  1581  88ec a4a5               ++  ldy savepos
  1582  88ee a201                   ldx #1 ; Z false (NE)
  1583  88f0 60                     rts
  1584                          
  1585                          chkabsolutey:
  1586  88f1 84a5                   sty savepos
  1587  88f3 b90002                 lda inputbuf, y
  1588  88f6 c924                   cmp #'$'
  1589  88f8 d001                   bne +
  1590  88fa c8                     iny
  1591  88fb 20718a             +   jsr chkhexword
  1592  88fe d01b                   bne ++
  1593  8900 20278a                 jsr skipspaces
  1594  8903 b90002                 lda inputbuf, y
  1595  8906 c92c                   cmp #','
  1596  8908 d011                   bne ++
  1597  890a c8                     iny
  1598  890b 20278a                 jsr skipspaces
  1599  890e b90002                 lda inputbuf, y
  1600  8911 c959                   cmp #'Y'
  1601  8913 d006                   bne ++
  1602  8915 c8                     iny
  1603  8916 c4a4                   cpy len
  1604  8918 d001                   bne ++
  1605  891a 60                     rts ; Z true (EQ)
  1606  891b a4a5               ++  ldy savepos
  1607  891d a201                   ldx #1 ; Z false (NE)
  1608  891f 60                     rts
  1609                          
  1610                          chkindirect:
  1611  8920 84a5                   sty savepos
  1612  8922 b90002                 lda inputbuf, y
  1613  8925 c928                   cmp #'('
  1614  8927 d021                   bne ++
  1615  8929 c8                     iny
  1616  892a 20278a                 jsr skipspaces
  1617  892d b90002                 lda inputbuf, y
  1618  8930 c924                   cmp #'$'
  1619  8932 d001                   bne +
  1620  8934 c8                     iny
  1621  8935 20718a             +   jsr chkhexword
  1622  8938 d010                   bne ++
  1623  893a 20278a                 jsr skipspaces
  1624  893d b90002                 lda inputbuf, y
  1625  8940 c929                   cmp #')'
  1626  8942 d006                   bne ++
  1627  8944 c8                     iny
  1628  8945 c4a4                   cpy len
  1629  8947 d001                   bne ++
  1630  8949 60                     rts ; Z true (EQ)
  1631  894a a4a5               ++  ldy savepos
  1632  894c a201                   ldx #1 ; Z false (NE)
  1633  894e 60                     rts
  1634                          
  1635                          chkinstruction:
  1636  894f c4a4                   cpy len
  1637  8951 f02a                   beq ++
  1638  8953 84ff                   sty tmp
  1639  8955 a237                   ldx #(ninst-1)
  1640  8957 b90002             -   lda inputbuf,y
  1641  895a dd8c8b                 cmp inst0,x
  1642  895d d019                   bne +
  1643  895f c8                     iny
  1644  8960 b90002                 lda inputbuf,y
  1645  8963 ddc48b                 cmp inst1,x
  1646  8966 d010                   bne +
  1647  8968 c8                     iny
  1648  8969 b90002                 lda inputbuf,y
  1649  896c ddfc8b                 cmp inst2,x
  1650  896f d007                   bne +
  1651  8971 c8                     iny
  1652  8972 8a                     txa
  1653  8973 8523                   sta inidx
  1654  8975 a200                   ldx #0
  1655  8977 60                     rts
  1656  8978 a4ff               +   ldy tmp
  1657  897a ca                     dex
  1658  897b 10da                   bpl -
  1659  897d a201               ++  ldx #1 ; Z false (NE)
  1660  897f 60                     rts
  1661                          
  1662                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1663                              ; and allows mode promotion
  1664  8980 20a489                 jsr find_inst_and_mode2
  1665  8983 f01e                   beq ++
  1666  8985 a524                   lda mode
  1667  8987 c906                   cmp #6
  1668  8989 9018                   bcc ++
  1669  898b c90a                   cmp #10
  1670  898d b012                   bcs +
  1671  898f 6903                   adc #3
  1672  8991 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1673  8993 20a489                 jsr find_inst_and_mode2 ; try again once
  1674  8996 d00b                   bne ++
  1675  8998 a5a6                   lda tmp2
  1676  899a 85fb                   sta ptr1
  1677  899c a900                   lda #0
  1678  899e 85fc                   sta ptr1+1
  1679  89a0 60                     rts ; Z true (EQ)
  1680  89a1 a201               +   ldx #1 ; Z false (NE)
  1681  89a3 60                 ++  rts
  1682                          
  1683                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1684  89a4 a296                   ldx #nopcodes-1
  1685  89a6 bde48d             -   lda instidx, x
  1686  89a9 bc7b8e                 ldy modeidx, x
  1687  89ac c523                   cmp inidx
  1688  89ae d00c                   bne +
  1689  89b0 c424                   cpy mode
  1690  89b2 d008                   bne +
  1691  89b4 8622                   stx opidx
  1692  89b6 206881                 jsr getsize
  1693  89b9 a200                   ldx #0 ; Z true (EQ)
  1694  89bb 60                     rts
  1695  89bc ca                 +   dex
  1696  89bd e0ff                   cpx #$ff
  1697  89bf d0e5                   bne -
  1698  89c1 a201                   ldx #1 ; Z false (NE)
  1699  89c3 60                     rts
  1700                          
  1701                          executerun:
  1702  89c4 68                     pla ; remove low byte return address
  1703  89c5 68                     pla ; return high byte return address
  1704  89c6 68                     pla ; again, we're really not returning
  1705  89c7 68                     pla ; again, we're really not returning
  1706  89c8 20ce8a                 jsr newline
  1707  89cb 38                     sec
  1708  89cc a5fb                   lda ptr1
  1709  89ce e901                   sbc #1
  1710  89d0 85fb                   sta ptr1
  1711  89d2 b002                   bcs +
  1712  89d4 c6fc                   dec ptr1+1
  1713  89d6 a5fc               +   lda ptr1+1
  1714  89d8 48                     pha
  1715  89d9 a5fb                   lda ptr1
  1716  89db 48                     pha
  1717  89dc 60                     rts
  1718                          
  1719                          chkcontinuedis:
  1720  89dd b90002                 lda inputbuf,y
  1721  89e0 c944                   cmp #'D'
  1722  89e2 d00a                   bne +
  1723  89e4 b90102                 lda inputbuf+1,y
  1724  89e7 c90d                   cmp #13
  1725  89e9 d003                   bne +
  1726  89eb c8                     iny
  1727  89ec a200                   ldx #0 ; restore Z set
  1728  89ee 60                 +   rts
  1729                          
  1730                          chkcontinueasm:
  1731  89ef b90002                 lda inputbuf,y
  1732  89f2 c941                   cmp #'A'
  1733  89f4 d00a                   bne +
  1734  89f6 b90102                 lda inputbuf+1,y
  1735  89f9 c90d                   cmp #13
  1736  89fb d003                   bne +
  1737  89fd c8                     iny
  1738  89fe a200                   ldx #0 ; restore Z set
  1739  8a00 60                 +   rts
  1740                          
  1741                          executedisassemble:
  1742  8a01 68                     pla ; remove low byte return address
  1743  8a02 68                     pla ; return high byte return address
  1744  8a03 20ce8a                 jsr newline
  1745  8a06 4c1081                 jmp disassemble
  1746                          
  1747                          reportnotimplemented:
  1748  8a09 a9d0                   lda #<notimplemented
  1749  8a0b a28f                   ldx #>notimplemented
  1750  8a0d 4c6a83                 jmp strout
  1751                          
  1752                          reporterr:
  1753  8a10 c000                   cpy #0
  1754  8a12 f008                   beq +
  1755  8a14 a920                   lda #' '
  1756  8a16 20d2ff             -   jsr charout
  1757  8a19 88                     dey
  1758  8a1a d0fa                   bne -
  1759  8a1c a93f               +   lda #'?'
  1760  8a1e 20d2ff                 jsr charout
  1761  8a21 a90d                   lda #13
  1762  8a23 20d2ff                 jsr charout
  1763  8a26 60                     rts
  1764                          
  1765                          skipspaces:
  1766  8a27 b90002             -   lda inputbuf, y
  1767                          !ifndef MINIMUM {
  1768                              ; skip SHIFT-SPACES too on Commodore
  1769  8a2a c9a0                   cmp #$A0
  1770  8a2c f004                   beq +
  1771                          }
  1772  8a2e c920                   cmp #$20
  1773  8a30 d003                   bne ++
  1774  8a32 c8                 +   iny
  1775  8a33 d0f2                   bne -
  1776  8a35 60                 ++  rts
  1777                          
  1778                          chkdot:
  1779  8a36 b90002                 lda inputbuf, y
  1780  8a39 c92e                   cmp #'.'
  1781  8a3b d003                   bne +
  1782  8a3d c8                     iny
  1783  8a3e a900                   lda #0 ; Z true (EQ)
  1784  8a40 60                 +   rts
  1785                          
  1786                          chkhelp:
  1787  8a41 b90002                 lda inputbuf, y
  1788  8a44 c93f                   cmp #'?'
  1789  8a46 d003                   bne +
  1790  8a48 c8                     iny
  1791  8a49 a900                   lda #0 ; Z true (EQ)
  1792  8a4b 60                 +   rts
  1793                          
  1794                          chkcolon:
  1795  8a4c b90002                 lda inputbuf, y
  1796  8a4f c93a                   cmp #':'
  1797  8a51 d003                   bne +
  1798  8a53 c8                     iny
  1799  8a54 a900                   lda #0 ; Z true (EQ)
  1800  8a56 60                 +   rts
  1801                          
  1802                          chkhexbyteofsequence:
  1803  8a57 203083                 jsr inputhexbyte
  1804  8a5a 20748a                 jsr +
  1805  8a5d d011                   bne ++ ; Z false (NE) if failed checks
  1806  8a5f c4a4                   cpy len
  1807  8a61 f00d                   beq ++ ; Z true (EQ) if end of input
  1808  8a63 85ff                   sta tmp
  1809  8a65 b90002                 lda inputbuf,y
  1810  8a68 c920                   cmp #$20
  1811  8a6a d004                   bne ++ ; Z false (NE) if not space
  1812  8a6c a5ff                   lda tmp
  1813  8a6e a200                   ldx #0 ; Z true (EQ) is space delimeter
  1814  8a70 60                 ++  rts
  1815                          
  1816                          chkhexword:
  1817                          chkhexaddr1:
  1818  8a71 200a83                 jsr inputhexword
  1819  8a74 a200               +   ldx #0 ; Z true (EQ)
  1820  8a76 9001                   bcc +
  1821  8a78 e8                     inx ; Z false (NE)
  1822  8a79 60                 +   rts
  1823                          
  1824                          chkhexbyte:
  1825  8a7a 98                     tya
  1826  8a7b 48                     pha ; save y
  1827  8a7c 203083                 jsr inputhexbyte
  1828  8a7f b00d                   bcs +
  1829  8a81 85a6                   sta tmp2
  1830  8a83 204c83                 jsr inputhexnybble
  1831  8a86 9006                   bcc +
  1832  8a88 68                     pla ; throw away saved y
  1833  8a89 a5a6                   lda tmp2
  1834  8a8b a200                   ldx #0 ; Z true (EQ)
  1835  8a8d 60                     rts
  1836  8a8e 68                 +   pla
  1837  8a8f a8                     tay ; won't be zero, so Z false (NE)
  1838  8a90 60                     rts    
  1839                          
  1840                          chkhexaddr2:
  1841  8a91 a5fb                   lda ptr1
  1842  8a93 48                     pha
  1843  8a94 a5fc                   lda ptr1+1
  1844  8a96 48                     pha
  1845  8a97 20718a                 jsr chkhexaddr1
  1846  8a9a f005                   beq +
  1847  8a9c 68                     pla
  1848  8a9d 68                     pla
  1849  8a9e a901                   lda #1 ; Z false (NE)
  1850  8aa0 60                     rts
  1851  8aa1 a5fb               +   lda ptr1
  1852  8aa3 85fd                   sta ptr2
  1853  8aa5 a5fc                   lda ptr1+1
  1854  8aa7 85fe                   sta ptr2+1
  1855  8aa9 68                     pla
  1856  8aaa 85fc                   sta ptr1+1
  1857  8aac 68                     pla
  1858  8aad 85fb                   sta ptr1
  1859  8aaf a900                   lda #0 ; Z true (EQ)
  1860  8ab1 60                     rts    
  1861                          
  1862                          chkaddr1cmd:
  1863  8ab2 b90002                 lda inputbuf, y
  1864  8ab5 c941               +   cmp #'A'
  1865  8ab7 d004                   bne +
  1866  8ab9 c8                     iny
  1867  8aba 4c1886                 jmp executeassemble
  1868  8abd c944               +   cmp #'D'
  1869  8abf d004                   bne +
  1870  8ac1 c8                     iny
  1871  8ac2 4c018a                 jmp executedisassemble
  1872  8ac5 c952               +   cmp #'R'
  1873  8ac7 d004                   bne +
  1874  8ac9 c8                     iny
  1875  8aca 4cc489                 jmp executerun
  1876  8acd 60                 +   rts
  1877                          
  1878                          newline:
  1879  8ace a90d                   lda #13
  1880  8ad0 4cd2ff                 jmp charout
  1881                          
  1882                          space:
  1883  8ad3 a920                   lda #32
  1884  8ad5 4cd2ff                 jmp charout
  1885                          
  1886                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1887                          ;     jsr $ffd2
  1888                          ;     pha
  1889                          ; -   lda $d011
  1890                          ;     bpl -
  1891                          ; -   lda $d011
  1892                          ;     bmi -
  1893                          ; -   lda $d011
  1894                          ;     bpl -
  1895                          ; -   lda $d011
  1896                          ;     bmi -
  1897                          ;     pla
  1898                          ;     rts
  1899                          
  1900                          save_regs_and_stack:
  1901                          
  1902                          ; save registers
  1903  8ad8 8de291             sta registerA
  1904  8adb 8ee391             stx registerX
  1905  8ade 8ce491             sty registerY
  1906                          
  1907                          ; detect N/Z flags without affecting stack
  1908  8ae1 3010               bmi +
  1909  8ae3 f007               beq p_pl_eq
  1910                          
  1911  8ae5 a900               lda #$00 ;p_pl_ne
  1912  8ae7 8de691             sta registerSR
  1913  8aea f015               beq ++
  1914                          
  1915                          p_pl_eq:
  1916  8aec a902               lda #$02
  1917  8aee 8de691             sta registerSR
  1918  8af1 100e               bpl ++ 
  1919                          
  1920  8af3 f007               + beq p_mi_eq
  1921  8af5 a980               lda #$80 ;p_mi_ne
  1922  8af7 8de691             sta registerSR
  1923  8afa 3005               bmi ++
  1924                          
  1925                          p_mi_eq:
  1926  8afc a982               lda #$82
  1927  8afe 8de691             sta registerSR
  1928                          
  1929                          ; save SP register, affects N/Z
  1930  8b01 ba                 ++tsx
  1931  8b02 8ee591             stx registerSP
  1932                          
  1933                          ; save stack, affects N/Z
  1934  8b05 a200               ldx #0
  1935  8b07 bd0001             -lda $100,x
  1936  8b0a 9de991             sta savestack,x
  1937  8b0d e8                 inx
  1938  8b0e d0f7               bne -
  1939                          
  1940                          ; save flags, combining unaffected ones with saved N/Z
  1941  8b10 08                 php
  1942  8b11 68                 pla
  1943  8b12 297d               and #$7d
  1944  8b14 0de691             ora registerSR
  1945  8b17 8de691             sta registerSR
  1946                          
  1947                          ; restore stack byte affected
  1948  8b1a aa                 tax
  1949  8b1b bde991             lda savestack,x
  1950  8b1e 9d0001             sta $100,x
  1951                          
  1952  8b21 4c268b             jmp +
  1953                          
  1954                          execute_display_registers:
  1955  8b24 68                 pla ; remove return address
  1956  8b25 68                 pla
  1957                          +
  1958  8b26 202c8b             jsr display_registers
  1959  8b29 4c1180             jmp input_loop
  1960                          
  1961                          ; PC   NV-BDIZC .A .X .Y .S
  1962                          ; 1234 10111011 01 02 03 FF
  1963                          display_registers:
  1964  8b2c a9c5                   lda #<reg_header
  1965  8b2e a291                   ldx #>reg_header
  1966  8b30 206a83                 jsr strout
  1967  8b33 ade791                 lda registerPC
  1968  8b36 aee891                 ldx registerPC+1
  1969  8b39 20ee82                 jsr disphexword
  1970  8b3c 20d38a                 jsr space
  1971  8b3f ade691                 lda registerSR
  1972  8b42 20db82                 jsr dispbinbyte
  1973  8b45 20d38a                 jsr space
  1974  8b48 ade291                 lda registerA
  1975  8b4b 20f482                 jsr disphexbyte
  1976  8b4e 20d38a                 jsr space
  1977  8b51 ade391                 lda registerX
  1978  8b54 20f482                 jsr disphexbyte
  1979  8b57 20d38a                 jsr space
  1980  8b5a ade491                 lda registerY
  1981  8b5d 20f482                 jsr disphexbyte
  1982  8b60 20d38a                 jsr space
  1983  8b63 ade591                 lda registerSP
  1984  8b66 20f482                 jsr disphexbyte
  1985  8b69 4cce8a                 jmp newline
  1986                          
  1987                          loadregs_go:
  1988  8b6c a000                   ldy #0
  1989  8b6e b9e991             -   lda savestack,y
  1990  8b71 990001                 sta $100,y
  1991  8b74 c8                     iny
  1992  8b75 d0f7                   bne -
  1993  8b77 aee591                 ldx registerSP
  1994  8b7a 9a                     txs
  1995  8b7b ade691                 lda registerSR
  1996  8b7e 48                     pha
  1997  8b7f ade291                 lda registerA
  1998  8b82 aee391                 ldx registerX
  1999  8b85 ace491                 ldy registerY
  2000  8b88 28                     plp
  2001  8b89 6ce791                 jmp (registerPC)
  2002                          
  2003                          !ifdef MINIMUM {
  2004                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2005                          ;; MC6850
  2006                          UART_DATA=$FFF8
  2007                          UART_STCR=$FFF9
  2008                          
  2009                          UART_INIT:
  2010                          	ldx #0b00000111 ; 11=reset device
  2011                          	stx UART_STCR
  2012                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  2013                          	sta UART_STCR
  2014                          	rts
  2015                          UART_OUT:
  2016                          	pha
  2017                          -	lda UART_STCR
  2018                          	and #2
  2019                          	beq - ; branch if TDRE=0, not finished transmitting
  2020                          	pla
  2021                          	pha
  2022                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  2023                          	sta UART_DATA
  2024                          	pla
  2025                          	rts
  2026                          UART_IN:
  2027                          -	lda UART_STCR
  2028                          	and #1
  2029                          	beq - ; branch if TDRF=0, not received
  2030                          	lda UART_DATA
  2031                          	; software "CAPS LOCK" because wozmon expects only uppercase
  2032                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  2033                          	beq BREAK
  2034                              ; force lowercase alphabet to uppercase
  2035                              cmp #'a'
  2036                          	bcc +
  2037                          	cmp #'z'+1
  2038                          	bcs +
  2039                          	eor #$20
  2040                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  2041                           	rts
  2042                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  2043                          	pha ; save A
  2044                          	lda UART_STCR
  2045                          	lsr ; put rightmost bit in carry
  2046                          	pla ; restore A affects flags
  2047                          	ror ; move carry to left bit, right bit to carry
  2048                          	php ; push processor to save N
  2049                          	rol ; restore A affects flags
  2050                          	plp ; pull processor to restore N
  2051                          	rts
  2052                          
  2053                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2054                          ; Processor start and interrupts
  2055                          
  2056                          NMI: ; unused on minimum (no source of interrupt)
  2057                              rti
  2058                          
  2059                          IRQ:
  2060                              rti ; TODO implement BRK HANDLING in monitor
  2061                          
  2062                          BREAK:
  2063                              jmp RESET
  2064                          
  2065                          RESET:
  2066                              cld
  2067                              ldx #$00
  2068                              txs
  2069                              jsr JUART_INIT
  2070                              cli
  2071                              jmp start
  2072                          } ; !ifdef MINIMUM
  2073                          
  2074                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2075                          ; data
  2076                          
  2077                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  2078                          ninst = 56
  2079  8b8c 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  2080  8bc4 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  2081  8bfc 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  2082                          
  2083                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  2084                          mode_jmptable:
  2085  8c34 f481               !word dispModeAcc-1; 0 Accumulator 1
  2086  8c36 f981               !word dispModeNone-1 ; 1 None 1
  2087  8c38 fa81               !word dispModeImm-1 ; 2 Immediate 2
  2088  8c3a 0b82               !word dispModeIndX-1 ; 3 IndirectX 2
  2089  8c3c 2b82               !word dispModeIndY-1 ; 4 IndirectY 2
  2090  8c3e 4b82               !word dispModeRel-1 ; 5 Relative 2
  2091  8c40 ff81               !word dispModeZP-1 ; 6 ZeroPage 2
  2092  8c42 8782               !word dispModeZPX-1 ; 7 ZeroPageX 2
  2093  8c44 9482               !word dispModeZPY-1 ; 8 ZeroPageY 2
  2094  8c46 a182               !word dispModeAbs-1 ; 9 Absolute 3
  2095  8c48 b382               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  2096  8c4a c082               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  2097  8c4c cd82               !word dispModeInd-1 ; 12 Indirect 3
  2098                          
  2099                          nmodes = 13
  2100                          
  2101                          mode_sorted:
  2102  8c4e 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  2103                          
  2104                          !ifdef MINIMUM {
  2105                          mode_0: !text "Accumulator", 0, "A", 0
  2106                          mode_1: !text "None", 0, 8, 0
  2107                          mode_2: !text "Immediate", 0, "#$12", 0
  2108                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  2109                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  2110                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  2111                          mode_6: !text "ZeroPage", 0, "$12", 0
  2112                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  2113                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  2114                          mode_9: !text "Absolute", 0, "$1234", 0
  2115                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  2116                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  2117                          mode_12: !text "Indirect", 0, "($1234)", 0
  2118                          } else {
  2119  8c5b 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2120  8c69 4e4f4e45001400     mode_1: !text "NONE", 0, 20, 0
  2121  8c70 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2122  8c7f 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2123  8c91 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2124  8ca3 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2125  8cc2 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2126  8ccf 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2127  8cdf 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2128  8cef 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2129  8cfe 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2130  8d10 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2131  8d22 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2132                          }
  2133                          
  2134                          modes: ; table for easily displaying each mode_example
  2135  8d33 5b8c               !word mode_0
  2136  8d35 698c               !word mode_1
  2137  8d37 708c               !word mode_2
  2138  8d39 7f8c               !word mode_3
  2139  8d3b 918c               !word mode_4
  2140  8d3d a38c               !word mode_5
  2141  8d3f c28c               !word mode_6
  2142  8d41 cf8c               !word mode_7
  2143  8d43 df8c               !word mode_8
  2144  8d45 ef8c               !word mode_9
  2145  8d47 fe8c               !word mode_10
  2146  8d49 108d               !word mode_11
  2147  8d4b 228d               !word mode_12
  2148                          
  2149                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2150                          nopcodes = 151
  2151  8d4d 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2152  8de4 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2153  8e7b 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2154                          
  2155                          copyright 
  2156                          ;                  1         2         3         4
  2157                          ;         1234567890123456789012345678901234567890
  2158  8f12 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2159                          !ifdef C64TERMINAL {
  2160                              !text 13, "(TERMINAL VERSION)"
  2161                          }
  2162  8f32 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2163  8f58 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2164  8f6f 00                 !text 0
  2165                          
  2166                          firsthelp
  2167                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2168  8f70 0d0d               !text 13, 13
  2169  8f72 54595045203f2046...!text "TYPE ? FOR HELP"
  2170  8f81 0d0d00             !text 13, 13, 0
  2171                          
  2172                          !ifndef MINIMUM {
  2173                          ; C64 only
  2174                          extra_help:
  2175  8f84 5820202020202020...    !text "X           (EXIT MONITOR)", 13
  2176  8f9f 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S  (SAVE)", 13
  2177  8fc1 00                     !text 0
  2178                          
  2179                          !ifdef C64SCREEN {
  2180  8fc2 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  2181  8fc9 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  2182                          }
  2183                          
  2184                          }
  2185                          
  2186  8fd0 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2187                          
  2188                          generalhelp
  2189  8fe1 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2190  9007 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2191  902c 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2192  904f 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2193  9077 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2194  9093 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2195  90b3 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2196  90d5 00                 !text 0
  2197                          generalhelp2
  2198  90d6 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2199  90fb 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2200  9117 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2201  9136 3f20412020202020...!text "? A         (LIST 6502 INSTRUCTIONS)", 13
  2202  915b 3f20414443202020...!text "? ADC       (/ADC/ ADDRESSING MODES)", 13
  2203  9180 3f204d4f44452020...!text "? MODE      (ADDRESSING MODES)", 13
  2204  919f 3f2e202020202020...!text "?.          (DISPLAY REGISTERS)", 13
  2205  91bf 00                 !text 0
  2206                          
  2207  91c0 4d4f444500         modes_keyword !text "MODE", 0
  2208                          
  2209  91c5 2050432020204e56...reg_header !text " PC   NV-BDIZC .A .X .Y .S", 13, '.', 0
  2210                          
  2211                          !ifdef MINIMUM {
  2212                          registerA = $def9
  2213                          registerX = $defa
  2214                          registerY = $defb
  2215                          registerSP = $defc
  2216                          registerSR = $defd
  2217                          registerPC = $defe;/f
  2218                          savestack = $df00
  2219                          } else {
  2220  91e2 00                 registerA !byte 0
  2221  91e3 00                 registerX !byte 0
  2222  91e4 00                 registerY !byte 0
  2223  91e5 00                 registerSP !byte 0
  2224  91e6 00                 registerSR !byte 0
  2225  91e7 0000               registerPC !word 0
  2226                          savestack ; 256 bytes
  2227  91e9 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2228  91f9 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2229  9209 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2230  9219 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2231  9229 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2232  9239 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2233  9249 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2234  9259 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2235  9269 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2236  9279 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2237  9289 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2238  9299 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2239  92a9 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2240  92b9 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2241  92c9 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2242  92d9 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2243                          }
  2244                          
  2245                          !ifdef MINIMUM {
  2246                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2247                          ; JUMP table for some stability
  2248                          * = $FFEE
  2249                          JUART_INIT: JMP UART_INIT
  2250                          JUART_OUT: JMP UART_OUT
  2251                          JUART_IN: JMP UART_IN
  2252                          JUART_CHK: JMP UART_CHK
  2253                          
  2254                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2255                          ; 6502 vectors 
  2256                          * = $fffa
  2257                              !word NMI
  2258                              !word RESET
  2259                              !word IRQ
  2260                          } else { // C64
  2261                              !if * > $a000 {
  2262                                  !error "code/data overran $a000"
  2263                              }
  2264                          }
  2265                          
  2266                          finish = *
