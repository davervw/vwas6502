
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGET  C64 and...                    *        <<<
     7                          ;; >>>       ** INCLUDES VERSION FOR 6502+MC6850 minimum system *        <<<
     8                          ;; >>>       *   60K(RAM),4K(ROM), 2 bytes IO for MC6850 UART   *        <<<
     9                          ;; >>>       ****************************************************        <<<
    10                          ;;
    11                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    12                          ;; MIT License
    13                          ;;
    14                          ;; Copyright (c) 2024 David R. Van Wagner
    15                          ;; davevw.com
    16                          ;;
    17                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    18                          ;; of this software and associated documentation files (the "Software"), to deal
    19                          ;; in the Software without restriction, including without limitation the rights
    20                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    21                          ;; copies of the Software, and to permit persons to whom the Software is
    22                          ;; furnished to do so, subject to the following conditions:
    23                          ;;
    24                          ;; The above copyright notice and this permission notice shall be included in all
    25                          ;; copies or substantial portions of the Software.
    26                          ;;
    27                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    28                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    29                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    30                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    31                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    32                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    33                          ;; SOFTWARE.
    34                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    35                          
    36                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ; Important! define exactly ONE target (set in build.sh)
    39                          ;C64SCREEN = 1
    40                          ;C64TERMINAL = 1
    41                          ;MINIMUM = 1
    42                          
    43                          ; options (set in build.sh)
    44                          ;NEEDECHO = 0
    45                          
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;; _
    49                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    50                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    51                          ;; 1000 (display memory at $1000)
    52                          ;; 1000.2000 (display memory range $1000 to $2000)
    53                          ;; 1000. (display next screenful of memory starting at $1000)
    54                          ;; . (display next screenful of memory)
    55                          ;; 1000 r (JMP $1000)
    56                          ;; 1000: 01 02 03 (modify memory)
    57                          ;; (NEW SYNTAX)
    58                          ;; 1000 d (disassemble starting at address, for screenful)
    59                          ;; d (continue disassembling from last address)
    60                          ;; 1000 a (assemble starting at, interactive until empty line) 
    61                          ;; x (exit monitor -- C64 only)
    62                          ;; ? (commands help)
    63                          ;; ? a (list instructions available)
    64                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    65                          ;; ? mode (show addressing modes example syntax for 6502)
    66                          ;; (FUTURE SYNTAX, not implemented)
    67                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    68                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    69                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    70                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    71                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    72                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    73                          ;; 1000.2000 "filename" 08 save (save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, can abbreviate to s)
    74                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    75                          ;;
    76                          ;; (INTERACTIVE ASSEMBLER)
    77                          ;; 1000 _
    78                          ;;      ADC #$12
    79                          ;; 1000 69 12    ADC #$12
    80                          ;; 1002 _
    81                          ;;      JSR $1234
    82                          ;; 1002 20 34 12 JSR $1234
    83                          ;; 1005 _
    84                          ;;      RTS
    85                          ;; 1005 60       RTS
    86                          ;; 1006 _
    87                          ;;      XYZ
    88                          ;;      XYZ ?
    89                          ;; 1006 _
    90                          ;; _
    91                          ;;
    92                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    93                          ;; and can cursor up to revise, 
    94                          ;;
    95                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    96                          ;;
    97                          
    98                          ; global
    99                          inputbuf=$0200
   100                          
   101                          
   102                          ; kernal/system calls
   103                          
   104                          !ifdef MINIMUM {
   105                          charout=JUART_OUT
   106                          getkey=JUART_IN
   107                          }
   108                          
   109                          !ifdef C64SCREEN {
   110                          charin=$ffcf ; screen editor
   111                          charout=$ffd2
   112                          getkey=$ffe4
   113                          }
   114                          
   115                          !ifdef C64TERMINAL {
   116                          charout=$ffd2
   117                          getkey=$ffe4
   118                          }
   119                          
   120                          ; zeropage
   121                          !ifdef MINIMUM {
   122                          opidx=$f0
   123                          inidx=$f1
   124                          mode=$f2
   125                          size=$f3
   126                          ptr3=$f4 ; and $f5
   127                          count=$f6
   128                          len=$f7
   129                          savepos=$f8
   130                          tmp2=$f9
   131                          flag=$fa
   132                          ptr1=$fb ; and $fc
   133                          ptr2=$fd ; and $fe
   134                          tmp=$ff
   135                          } else {
   136                          ptr1=$fb ; and $fc
   137                          ptr2=$fd ; and $fe
   138                          tmp=$ff
   139                          opidx=$22
   140                          inidx=$23
   141                          mode=$24
   142                          size=$25
   143                          ptr3=$26 ; and $27
   144                          count=$a3
   145                          len=$a4
   146                          savepos=$a5
   147                          tmp2=$a6
   148                          flag=$a7
   149                          banksel=$02
   150                          }
   151                          
   152                          !ifdef MINIMUM {
   153                          *=$f000
   154                          } else {
   155                          *=$bc00 ; use some extra RAM under C64 BASIC ROM for more code
   156                          }
   157                          
   158                          ; ************************************************************************************
   159                          ; **** skip over next section, and see ** start ** below for beginning of program ****
   160                          ; ************************************************************************************
   161                          
   162                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   163                          
   164                          !ifndef MINIMUM {
   165                          ; C64 only
   166                          ; THIS CODE IS IN RAM UNDER BASIC ROM SO USE EXTRA CARE AS RUNNING IN THIS DIFFERENT MEMORY CONFIGURATION
   167                          ; REQUIRES ENTRY WHILE RAM IS ACCESSIBLE (SEE SETBANK) BUT ROM IS INACCESSIBLE
   168                          
   169                          chkextrac64:
   170  bc00 200cbc                 jsr chkexit
   171  bc03 d003                   bne +
   172  bc05 4c20bc                 jmp execute_exit
   173  bc08 18                 +   clc ; no error
   174  bc09 a201                   ldx #1 ; Z false - not consumed
   175  bc0b 60                     rts
   176                          
   177                          chkexit:
   178  bc0c b90002                 lda inputbuf, y
   179  bc0f c958                   cmp #'X'
   180  bc11 d008                   bne +
   181  bc13 c8                     iny
   182  bc14 c4a4                   cpy len ; validate no extra characters
   183  bc16 f003                   beq +
   184  bc18 4c1cbc                 jmp extra_error
   185  bc1b 60                 +   rts
   186                          
   187                          extra_error:
   188                              ; pop local return address
   189  bc1c 68                     pla
   190  bc1d 68                     pla
   191  bc1e 38                     sec ; error
   192  bc1f 60                     rts
   193                          
   194                          execute_exit:
   195                              ; pop monitor return addresses, so only original caller is left
   196  bc20 68                     pla
   197  bc21 68                     pla
   198  bc22 68                     pla
   199  bc23 68                     pla
   200  bc24 68                     pla
   201  bc25 68                     pla
   202  bc26 a907                   lda #7
   203  bc28 4cb2cf                 jmp setbank
   204                          
   205                          display_extra_help:
   206  bc2b a979                   lda #<extra_help
   207  bc2d a2bc                   ldx #>extra_help
   208  bc2f 4c62c2                 jmp strout
   209                          
   210                          !ifdef C64SCREEN {
   211                          display_page_disassemble:
   212  bc32 a5fb                   lda ptr1
   213  bc34 a6fc                   ldx ptr1+1
   214  bc36 20e6c1                 jsr disphexword
   215  bc39 a995                   lda #<page_disassemble
   216  bc3b a2bc                   ldx #>page_disassemble
   217  bc3d 4c62c2                 jmp strout
   218                          
   219                          display_page_displaymemory:
   220  bc40 20dcc9                 jsr newline
   221  bc43 a5fb                   lda ptr1
   222  bc45 a6fc                   ldx ptr1+1
   223  bc47 20e6c1                 jsr disphexword
   224  bc4a a99c                   lda #<page_displaymemory
   225  bc4c a2bc                   ldx #>page_displaymemory
   226  bc4e 4c62c2                 jmp strout
   227                          
   228                          inputlinec64:
   229  bc51 a000                   ldy #0
   230  bc53 20cfff             -   jsr charin
   231  bc56 990002                 sta inputbuf,y
   232  bc59 c8                     iny
   233  bc5a c90d                   cmp #13
   234  bc5c d0f5                   bne -
   235  bc5e 60                     rts
   236                          
   237                          continueassemblec64:
   238  bc5f a914                   lda #20
   239  bc61 20d2ff                 jsr charout
   240  bc64 20d2ff                 jsr charout
   241  bc67 a5fb                   lda ptr1
   242  bc69 a6fc                   ldx ptr1+1
   243  bc6b 20e6c1                 jsr disphexword
   244  bc6e a920                   lda #' '
   245  bc70 20d2ff                 jsr charout
   246  bc73 20d2ff                 jsr charout
   247  bc76 4cd2ff                 jmp charout
   248                          }
   249                          
   250                          extra_help:
   251  bc79 5820202020202020...    !text "X           (EXIT MONITOR)", 13
   252  bc94 00                     !text 0
   253                          
   254                          !ifdef C64SCREEN {
   255  bc95 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
   256  bc9c 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
   257                          }
   258                          
   259                          *=$c000 ; switch to section of RAM always accessible for start...
   260                          }
   261                          
   262                          ;; end C64 part
   263                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   264                          
   265                          start:
   266  c000 a966                   lda #<copyright
   267  c002 a2cd                   ldx #>copyright
   268  c004 2062c2                 jsr strout
   269  c007 a9c4                   lda #<firsthelp
   270  c009 a2cd                   ldx #>firsthelp
   271  c00b 2062c2                 jsr strout
   272  c00e 207dc2             -   jsr inputline
   273  c011 2084c2                 jsr parseline
   274  c014 4c0ec0                 jmp -
   275                          
   276                          ; test: ; all the addressing modes here for testing disassembly
   277                          ;     nop
   278                          ;     lda $1234
   279                          ;     lda $1234,x
   280                          ;     lda $1234,y
   281                          ;     asl
   282                          ;     lda #$12
   283                          ;     lda ($12,x)
   284                          ;     lda ($12),y
   285                          ;     jmp ($1234)
   286                          ; -   bne -
   287                          ;     lda $12
   288                          ;     lda $12,x
   289                          ;     ldx $12,y
   290                          ;     !byte $FF ; unknown
   291                          
   292                          disassemble:
   293  c017 a917                   lda #23
   294  c019 85a3                   sta count
   295  c01b a000               -   ldy #0
   296  c01d b1fb                   lda (ptr1),y
   297  c01f 204ac0                 jsr find_opcode
   298  c022 20adc0                 jsr disp_current
   299  c025 a525                   lda size
   300  c027 1002                   bpl +
   301  c029 a901                   lda #1
   302  c02b 18                 +   clc
   303  c02c 65fb                   adc ptr1
   304  c02e 85fb                   sta ptr1
   305  c030 9002                   bcc +
   306  c032 e6fc                   inc ptr1+1
   307  c034 c6a3               +   dec count
   308  c036 d0e3                   bne -
   309                          !ifdef C64SCREEN {
   310  c038 a932                   lda #<display_page_disassemble
   311  c03a a2bc                   ldx #>display_page_disassemble
   312  c03c 20a0cf                 jsr callbank6
   313                          } else {    
   314                              rts
   315                          }
   316                          
   317                          compareptrs:
   318  c03f a5fc                   lda ptr1+1
   319  c041 c5fe                   cmp ptr2+1
   320  c043 d004                   bne +
   321  c045 a5fb                   lda ptr1
   322  c047 c5fd                   cmp ptr2
   323  c049 60                 +   rts
   324                          
   325                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   326                          ; and properties updated in ZP globals size,inidx,opidx,mode
   327  c04a a097                   ldy #nopcodes
   328  c04c a296                   ldx #nopcodes-1
   329  c04e dda1cb             -   cmp opcodes,x
   330  c051 f00f                   beq +
   331  c053 ca                     dex
   332  c054 88                     dey
   333  c055 d0f7                   bne -
   334  c057 18                     clc
   335  c058 a901                   lda #1
   336  c05a 8525                   sta size
   337  c05c a9ff                   lda #$FF
   338  c05e aa                     tax
   339  c05f a8                     tay
   340  c060 900a                   bcc ++
   341  c062 bd38cc             +   lda instidx, x
   342  c065 bccfcc                 ldy modeidx, x
   343  c068 2073c0                 jsr getsize
   344  c06b 38                     sec
   345  c06c 8523               ++  sta inidx
   346  c06e 8622                   stx opidx
   347  c070 8424                   sty mode
   348  c072 60                     rts
   349                          
   350                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   351                              ; result returned in size
   352  c073 48                     pha
   353  c074 a901                   lda #1
   354  c076 8525                   sta size
   355  c078 68                     pla
   356  c079 c002                   cpy #2 // Immediate
   357  c07b 9008                   bcc +
   358  c07d e625                   inc size
   359  c07f c009                   cpy #9 // Absolute
   360  c081 9002                   bcc +
   361  c083 e625                   inc size
   362  c085 60                 +   rts
   363                          
   364                          disp_opcode: ; .A opcode byte
   365  c086 204ac0                 jsr find_opcode
   366  c089 8a                     txa
   367                              ; fall through to display instruction
   368                          
   369                          dispinst: ; .A instruction index 0..55, note modifies A and X
   370  c08a aa                     tax
   371  c08b e038                   cpx #ninst
   372  c08d b012                   bcs +
   373  c08f bde1c9                 lda inst0, x
   374  c092 20d2ff                 jsr charout
   375  c095 bd19ca                 lda inst1, x
   376  c098 20d2ff                 jsr charout
   377  c09b bd51ca                 lda inst2, x
   378  c09e 4cd2ff                 jmp charout
   379  c0a1 a93f               +   lda #'?'
   380  c0a3 20d2ff                 jsr charout
   381  c0a6 20d2ff                 jsr charout
   382  c0a9 20d2ff                 jsr charout
   383  c0ac 60                     rts
   384                          
   385                          disp_current:
   386  c0ad a5fb                   lda ptr1
   387  c0af a6fc                   ldx ptr1+1
   388  c0b1 20e6c1                 jsr disphexword
   389  c0b4 a920                   lda #$20
   390  c0b6 20d2ff                 jsr charout
   391  c0b9 a000                   ldy #0
   392  c0bb a625                   ldx size
   393  c0bd b1fb               -   lda (ptr1),y
   394  c0bf 20ecc1                 jsr disphexbyte
   395  c0c2 a920                   lda #$20
   396  c0c4 20d2ff                 jsr charout
   397  c0c7 c8                     iny
   398  c0c8 ca                     dex
   399  c0c9 d0f2                   bne -
   400  c0cb c003               -   cpy #3
   401  c0cd f00e                   beq +
   402  c0cf a920                   lda #$20
   403  c0d1 20d2ff                 jsr charout
   404  c0d4 20d2ff                 jsr charout
   405  c0d7 20d2ff                 jsr charout
   406  c0da c8                     iny
   407  c0db d0ee                   bne -
   408  c0dd a523               +   lda inidx
   409  c0df 208ac0                 jsr dispinst
   410  c0e2 a920                   lda #$20
   411  c0e4 20d2ff                 jsr charout
   412  c0e7 20efc0                 jsr disp_mode
   413  c0ea a90d                   lda #13
   414  c0ec 4cd2ff                 jmp charout
   415                          
   416                          disp_mode
   417  c0ef a524                   lda mode
   418  c0f1 c90d                   cmp #13
   419  c0f3 b00a                   bcs +
   420  c0f5 0a                     asl
   421  c0f6 aa                     tax
   422  c0f7 bd8aca                 lda mode_jmptable+1,x
   423  c0fa 48                     pha
   424  c0fb bd89ca                 lda mode_jmptable,x
   425  c0fe 48                     pha
   426  c0ff 60                 +   rts
   427                          
   428                          dispModeAcc:
   429  c100 a941                   lda #'A'
   430  c102 4cd2ff                 jmp charout
   431                          
   432                          dispModeNone:
   433  c105 60                     rts
   434                          
   435                          dispModeImm:
   436  c106 a923                   lda #'#'
   437  c108 20d2ff                 jsr charout
   438                          dispModeZP:
   439  c10b a924                   lda #'$'
   440  c10d 20d2ff                 jsr charout
   441  c110 a001                   ldy #1
   442  c112 b1fb                   lda (ptr1),y
   443  c114 4cecc1                 jmp disphexbyte
   444                          
   445                          dispModeIndX:
   446  c117 a928                   lda #'('
   447  c119 20d2ff                 jsr charout
   448  c11c a924                   lda #'$'
   449  c11e 20d2ff                 jsr charout
   450  c121 a001                   ldy #1
   451  c123 b1fb                   lda (ptr1),y
   452  c125 20ecc1                 jsr disphexbyte
   453  c128 a92c                   lda #','
   454  c12a 20d2ff                 jsr charout
   455  c12d a958                   lda #'X'
   456  c12f 20d2ff                 jsr charout
   457  c132 a929                   lda #')'
   458  c134 4cd2ff                 jmp charout
   459                          
   460                          dispModeIndY:
   461  c137 a928                   lda #'('
   462  c139 20d2ff                 jsr charout
   463  c13c a924                   lda #'$'
   464  c13e 20d2ff                 jsr charout
   465  c141 a001                   ldy #1
   466  c143 b1fb                   lda (ptr1),y
   467  c145 20ecc1                 jsr disphexbyte
   468  c148 a929                   lda #')'
   469  c14a 20d2ff                 jsr charout
   470  c14d a92c                   lda #','
   471  c14f 20d2ff                 jsr charout
   472  c152 a959                   lda #'Y'
   473  c154 4cd2ff                 jmp charout
   474                          
   475                          dispModeRel:
   476  c157 a924                   lda #'$'
   477  c159 20d2ff                 jsr charout
   478  c15c 18                     clc
   479  c15d a5fb                   lda ptr1
   480  c15f 6902                   adc #2
   481  c161 8526                   sta ptr3
   482  c163 a5fc                   lda ptr1+1
   483  c165 6900                   adc #0
   484  c167 8527                   sta ptr3+1
   485  c169 a001                   ldy #1
   486  c16b b1fb                   lda (ptr1),y
   487  c16d 1014                   bpl +
   488                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   489  c16f 49ff                   eor #$FF ; inverse
   490  c171 18                     clc
   491  c172 6901                   adc #1 ; complete getting absolute value from two's complement
   492  c174 85ff                   sta tmp
   493  c176 38                     sec
   494  c177 a526                   lda ptr3
   495  c179 e5ff                   sbc tmp
   496  c17b 8526                   sta ptr3
   497  c17d b00d                   bcs ++
   498  c17f c627                   dec ptr3+1
   499  c181 9009                   bcc ++
   500  c183 18                 +   clc ; simple case of adding
   501  c184 6526                   adc ptr3
   502  c186 8526                   sta ptr3
   503  c188 9002                   bcc ++
   504  c18a e627                   inc ptr3+1
   505  c18c a526               ++  lda ptr3
   506  c18e a627                   ldx ptr3+1
   507  c190 4ce6c1                 jmp disphexword
   508                          
   509                          dispModeZPX:
   510  c193 200bc1                 jsr dispModeZP
   511  c196 a92c                   lda #','
   512  c198 20d2ff                 jsr charout
   513  c19b a958                   lda #'X'
   514  c19d 4cd2ff                 jmp charout
   515                          
   516                          dispModeZPY:
   517  c1a0 200bc1                 jsr dispModeZP
   518  c1a3 a92c                   lda #','
   519  c1a5 20d2ff                 jsr charout
   520  c1a8 a959                   lda #'Y'
   521  c1aa 4cd2ff                 jmp charout
   522                          
   523                          dispModeAbs:
   524  c1ad a924                   lda #'$'
   525  c1af 20d2ff                 jsr charout
   526  c1b2 a001                   ldy #1
   527  c1b4 b1fb                   lda (ptr1),y
   528  c1b6 48                     pha
   529  c1b7 c8                     iny
   530  c1b8 b1fb                   lda (ptr1),y
   531  c1ba aa                     tax
   532  c1bb 68                     pla
   533  c1bc 4ce6c1                 jmp disphexword
   534                          
   535                          dispModeAbsX:
   536  c1bf 20adc1                 jsr dispModeAbs
   537  c1c2 a92c                   lda #','
   538  c1c4 20d2ff                 jsr charout
   539  c1c7 a958                   lda #'X'
   540  c1c9 4cd2ff                 jmp charout
   541                          
   542                          dispModeAbsY:
   543  c1cc 20adc1                 jsr dispModeAbs
   544  c1cf a92c                   lda #','
   545  c1d1 20d2ff                 jsr charout
   546  c1d4 a959                   lda #'Y'
   547  c1d6 4cd2ff                 jmp charout
   548                          
   549                          dispModeInd:
   550  c1d9 a928                   lda #'('
   551  c1db 20d2ff                 jsr charout
   552  c1de 20adc1                 jsr dispModeAbs
   553  c1e1 a929                   lda #')'
   554  c1e3 4cd2ff                 jmp charout
   555                          
   556                          disphexword: ; .A low, .X high, 0000..FFFF
   557  c1e6 48                     pha
   558  c1e7 8a                     txa
   559  c1e8 20ecc1                 jsr disphexbyte
   560  c1eb 68                     pla
   561                              ;fall through to call again
   562                          
   563                          disphexbyte: ; .A 00..FF
   564  c1ec 48                     pha
   565  c1ed 4a                     lsr
   566  c1ee 4a                     lsr
   567  c1ef 4a                     lsr
   568  c1f0 4a                     lsr
   569  c1f1 20f5c1                 jsr disphexnybble
   570  c1f4 68                     pla
   571                              ;fall through to call again
   572                          
   573                          disphexnybble: ; .A 0..F
   574  c1f5 290f                   and #$0F
   575  c1f7 0930                   ora #$30
   576  c1f9 c93a                   cmp #$3A
   577  c1fb 9002                   bcc +
   578  c1fd 6906                   adc #$06
   579  c1ff 4cd2ff             +   jmp charout
   580                          
   581                          inputhexword: ; C set if fails
   582  c202 a900                   lda #0
   583  c204 85fb                   sta ptr1
   584  c206 85fc                   sta ptr1+1
   585                          
   586  c208 a904                   lda #4 ; word is at most 4 nybbles
   587  c20a 85a3                   sta count
   588  c20c 2044c2             --  jsr inputhexnybble
   589  c20f b012                   bcs +
   590                          
   591                              ; shift nibble up
   592  c211 0a                     asl
   593  c212 0a                     asl
   594  c213 0a                     asl
   595  c214 0a                     asl
   596                          
   597  c215 a204                   ldx #4 ; 4 bits rotated into word
   598  c217 2a                 -   rol
   599  c218 26fb                   rol ptr1
   600  c21a 26fc                   rol ptr1+1
   601  c21c ca                     dex
   602  c21d d0f8                   bne - ; repeat bits
   603                          
   604  c21f c6a3                   dec count
   605  c221 d0e9                   bne -- ; repeat nybbles
   606                          
   607  c223 a5a3               +   lda count
   608  c225 c904                   cmp #4 ; set C if 4, otherwise clear
   609  c227 60                     rts
   610                          
   611                          inputhexbyte:
   612  c228 2044c2                 jsr inputhexnybble
   613  c22b b016                   bcs ++
   614  c22d 85ff                   sta tmp
   615  c22f 2044c2                 jsr inputhexnybble
   616  c232 9005                   bcc +
   617  c234 18                     clc ; allow single digit as byte
   618  c235 a5ff                   lda tmp
   619  c237 900a                   bcc ++
   620  c239 06ff               +   asl tmp
   621  c23b 06ff                   asl tmp
   622  c23d 06ff                   asl tmp
   623  c23f 06ff                   asl tmp
   624  c241 05ff                   ora tmp ; necessary to assemble the two nybbles
   625  c243 60                 ++  rts
   626                          
   627                          inputhexnybble:
   628  c244 b90002                 lda $0200,y
   629  c247 297f                   and #$7F
   630  c249 38                     sec
   631  c24a e930                   sbc #$30
   632  c24c 9012                   bcc ++
   633  c24e c90a                   cmp #10
   634  c250 900c                   bcc +
   635  c252 e907                   sbc #7
   636  c254 900a                   bcc ++
   637  c256 c90a                   cmp #10
   638  c258 9006                   bcc ++
   639  c25a c910                   cmp #16
   640  c25c b002                   bcs ++
   641  c25e c8                 +   iny
   642  c25f 60                     rts
   643  c260 38                 ++  sec
   644  c261 60                     rts
   645                          
   646                          strout:
   647  c262 8526                   sta ptr3
   648  c264 8627                   stx ptr3+1
   649                          strout2:    
   650  c266 a000                   ldy #0
   651  c268 b126               -   lda (ptr3),y
   652  c26a f006                   beq +
   653  c26c 20d2ff                 jsr charout
   654  c26f c8                     iny
   655  c270 d0f6                   bne -
   656  c272 98                 +   tya
   657  c273 38                     sec
   658  c274 6526                   adc ptr3
   659  c276 8526                   sta ptr3
   660  c278 9002                   bcc +
   661  c27a e627                   inc ptr3+1
   662  c27c 60                 +   rts
   663                          
   664                          inputline:
   665                          !ifdef C64SCREEN {
   666  c27d a951                   lda #<inputlinec64
   667  c27f a2bc                   ldx #>inputlinec64
   668  c281 4ca0cf                 jmp callbank6
   669                          } else {
   670                              ldy #0
   671                          --  sty count
   672                          -   jsr getkey
   673                              beq -
   674                              ldy count
   675                          !ifdef MINIMUM {
   676                              cmp #8 ; backspace
   677                          } else {
   678                              cmp #20
   679                          }
   680                              bne +
   681                              cpy #0
   682                              beq -
   683                              dey
   684                          !if NEEDECHO = 1 {    
   685                              jsr charout
   686                          }
   687                              jmp --
   688                          +   cmp #13
   689                              beq +
   690                              cmp #' '
   691                              bcc -
   692                              cmp #128
   693                              bcs -
   694                          +
   695                          !if NEEDECHO = 1 {    
   696                              jsr charout
   697                          }
   698                              sta inputbuf,y
   699                              iny
   700                              cmp #13
   701                              bne --
   702                              rts
   703                          }
   704                          
   705                          parseline:
   706  c284 c001                   cpy #1
   707  c286 d003                   bne +
   708                          -
   709                          !ifdef C64SCREEN {   
   710  c288 4cdcc9                 jmp newline
   711                          } else {
   712                              rts
   713                          }
   714  c28b 88                 +   dey
   715  c28c 84a4                   sty len
   716                              ; skip whitespace
   717                              ; check for address, put in ptr1
   718                              ; or check for dot, then require address put in ptr2
   719                              ; or check for ?, and optional parameter, execute help
   720                              ; check for whitespace
   721                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   722                              ; check for string, store at start of inputbuf
   723                              ; check for drive number
   724                              ; check for whitespace
   725                              ; check command ":rda?mls", execute command
   726  c28e a000                   ldy #0
   727  c290 201fc9                 jsr skipspaces
   728  c293 c4a4                   cpy len
   729  c295 f0f1                   beq -
   730  c297 20d5c8                 jsr chkcontinuedis
   731  c29a d003                   bne +
   732  c29c 20f9c8                 jsr executedisassemble ; note won't return
   733  c29f 20e7c8             +   jsr chkcontinueasm
   734  c2a2 d003                   bne +
   735  c2a4 2009c5                 jsr continueassemble ; note won't return
   736  c2a7 202ac9             +   jsr chkdot
   737  c2aa d003                   bne +
   738  c2ac 4c98c3                 jmp executedot
   739  c2af 2035c9             +   jsr chkhelp
   740  c2b2 d003                   bne +
   741  c2b4 4ca2c3                 jmp executehelp
   742                          +
   743                          !ifndef MINIMUM {
   744  c2b7 20c9c2                 jsr bank6_chkextrac64 ; check syntax only available on C64
   745  c2ba b01b                   bcs + ; error if C set
   746  c2bc f005                   beq ++ ; consumed if Z set, skip next test(s)
   747                          }    
   748  c2be 207fc9                 jsr chkhexaddr1
   749  c2c1 d003                   bne error
   750  c2c3 4cd0c2             ++  jmp executeaddr1
   751                          error:
   752  c2c6 4c08c9                 jmp reporterr
   753                          
   754                          !ifndef MINIMUM {
   755                          bank6_chkextrac64:
   756  c2c9 a900                   lda #<chkextrac64
   757  c2cb a2bc                   ldx #>chkextrac64
   758  c2cd 4ca0cf                 jmp callbank6
   759                          }
   760                          
   761                          executeaddr1:
   762  c2d0 c4a4                   cpy len
   763  c2d2 d003                   bne +
   764  c2d4 4c23c3                 jmp executedisplay1
   765  c2d7 202ac9             +   jsr chkdot
   766  c2da d00f                   bne +
   767  c2dc c4a4                   cpy len
   768  c2de f021                   beq executepagedisplay
   769  c2e0 209fc9                 jsr chkhexaddr2
   770  c2e3 d0e1                   bne error
   771  c2e5 18                     clc
   772  c2e6 66a7                   ror flag
   773  c2e8 4c19c3                 jmp executeaddr12
   774  c2eb 201fc9             +   jsr skipspaces
   775  c2ee 2040c9                 jsr chkcolon
   776  c2f1 d003                   bne +
   777  c2f3 4c76c3                 jmp executemodify
   778  c2f6 20c0c9             +   jsr chkaddr1cmd ; rda, will not return here if cmd
   779  c2f9 204bc9                 jsr chkfilename
   780  c2fc d0c8                   bne error
   781  c2fe 4c9fc3                 jmp executeloadfilename
   782                          
   783                          executepagedisplay:
   784  c301 a5fb                   lda ptr1
   785  c303 18                     clc
   786                          !ifdef MINIMUM {
   787                              adc #$5f
   788                          } else {
   789  c304 69b7                   adc #$b7
   790                          }
   791  c306 85fd                   sta ptr2
   792  c308 a5fc                   lda ptr1+1
   793                          !ifdef MINIMUM {
   794                              adc #$01
   795                          } else {
   796  c30a 6900                   adc #$00
   797                          }
   798  c30c 85fe                   sta ptr2+1
   799  c30e 9006                   bcc +
   800  c310 a9ff                   lda #$ff
   801  c312 85fd                   sta ptr2
   802  c314 85fe                   sta ptr2+1
   803  c316 38                 +   sec
   804  c317 66a7                   ror flag
   805                              ; fall through to executeaddr12
   806                          
   807                          executeaddr12:
   808  c319 c4a4                   cpy len
   809  c31b d003                   bne +
   810  c31d 4c2bc3                 jmp executedisplay12
   811  c320 4c01c9             +   jmp reportnotimplemented
   812                          
   813                          executedisplay1:
   814  c323 a5fb                   lda ptr1
   815  c325 85fd                   sta ptr2
   816  c327 a5fc                   lda ptr1+1
   817  c329 85fe                   sta ptr2+1
   818                              ; fall through executedisplay12
   819                          
   820                          executedisplay12:
   821  c32b a9ff                   lda #$ff
   822  c32d 85a3                   sta count
   823  c32f e6a3               -   inc count
   824  c331 a5a3                   lda count
   825                          !ifdef MINIMUM {    
   826                              and #$0f
   827                          } else {
   828  c333 2907                   and #$07
   829                          }
   830  c335 d016                   bne +
   831  c337 a90d                   lda #13
   832  c339 20d2ff                 jsr charout
   833  c33c a5fb                   lda ptr1
   834  c33e a6fc                   ldx ptr1+1
   835  c340 20e6c1                 jsr disphexword
   836  c343 a93a                   lda #':'
   837  c345 20d2ff                 jsr charout
   838  c348 a920                   lda #' '
   839  c34a 20d2ff                 jsr charout
   840  c34d a000               +   ldy #0
   841  c34f b1fb                   lda (ptr1),y
   842  c351 20ecc1                 jsr disphexbyte
   843  c354 a920                   lda #' '
   844  c356 20d2ff                 jsr charout
   845  c359 e6fb                   inc ptr1
   846  c35b d004                   bne +
   847  c35d e6fc                   inc ptr1+1
   848  c35f f012                   beq ++
   849  c361 203fc0             +   jsr compareptrs
   850  c364 90c9                   bcc -
   851  c366 f0c7                   beq -
   852  c368 24a7                   bit flag
   853  c36a 1007                   bpl ++
   854                          !ifdef C64SCREEN {
   855  c36c a940                   lda #<display_page_displaymemory
   856  c36e a2bc                   ldx #>display_page_displaymemory
   857  c370 4ca0cf                 jmp callbank6
   858                          }
   859  c373 4cdcc9             ++  jmp newline
   860                          
   861                          executemodify:
   862  c376 201fc9                 jsr skipspaces
   863  c379 c4a4                   cpy len
   864  c37b f018                   beq ++
   865  c37d 2065c9                 jsr chkhexbyteofsequence
   866  c380 f003                   beq +
   867  c382 4cc6c2                 jmp error
   868  c385 84ff               +   sty tmp
   869  c387 a000                   ldy #0
   870  c389 91fb                   sta (ptr1),y
   871  c38b e6fb                   inc ptr1
   872  c38d d002                   bne +
   873  c38f e6fc                   inc ptr1+1
   874  c391 a4ff               +   ldy tmp
   875  c393 d0e1                   bne executemodify
   876  c395 4cdcc9             ++  jmp newline
   877                          
   878                          executedot:
   879  c398 c4a4                   cpy len
   880  c39a d003                   bne +
   881  c39c 4c01c3                 jmp executepagedisplay
   882                          
   883                          executeloadfilename:
   884                          executeaddr1cmd:
   885  c39f 4c01c9             +   jmp reportnotimplemented
   886                          
   887                          executehelp:
   888                          !ifdef C64SCREEN {
   889  c3a2 20dcc9                 jsr newline
   890                          }
   891  c3a5 c4a4                   cpy len
   892  c3a7 d003                   bne +
   893  c3a9 4ccac3                 jmp displayhelp
   894  c3ac 201fc9             +   jsr skipspaces
   895  c3af 20e6c3                 jsr chkhelpinstructions
   896  c3b2 d003                   bne +
   897  c3b4 4c15c4                 jmp displayinstructions
   898  c3b7 20f3c3             +   jsr chkhelpmodes
   899  c3ba d003                   bne +
   900  c3bc 4c2cc4                 jmp displaymodes
   901  c3bf 2047c8             +   jsr chkinstruction
   902  c3c2 d003                   bne +
   903  c3c4 4cdcc4                 jmp executehelpinstruction
   904  c3c7 4c01c9             +   jmp reportnotimplemented
   905                          
   906                          displayhelp:
   907  c3ca a945                   lda #<generalhelp
   908  c3cc a2ce                   ldx #>generalhelp
   909  c3ce 2062c2                 jsr strout
   910  c3d1 a9b4                   lda #<generalhelp2
   911  c3d3 a2ce                   ldx #>generalhelp2
   912  c3d5 2062c2                 jsr strout
   913                          !ifndef MINIMUM {
   914  c3d8 a92b                   lda #<display_extra_help
   915  c3da a2bc                   ldx #>display_extra_help
   916  c3dc 20a0cf                 jsr callbank6
   917                          }
   918  c3df a9c4                   lda #<firsthelp
   919  c3e1 a2cd                   ldx #>firsthelp
   920  c3e3 4c62c2                 jmp strout
   921                          
   922                          chkhelpinstructions:
   923  c3e6 b90002                 lda inputbuf, y
   924  c3e9 c941                   cmp #'A'
   925  c3eb d005                   bne +
   926  c3ed b90102                 lda inputbuf+1, y
   927  c3f0 c90d                   cmp #13
   928                              ; no need to increment y if found, done parsing line
   929  c3f2 60                 +   rts
   930                          
   931                          chkhelpmodes:
   932  c3f3 a99b                   lda #<modes_keyword
   933  c3f5 a2cf                   ldx #>modes_keyword
   934                              ; fall through to chkkeyword
   935                          
   936                          chkkeyword:
   937  c3f7 84a3                   sty count
   938  c3f9 8526                   sta ptr3
   939  c3fb 8627                   stx ptr3+1
   940  c3fd a6a3                   ldx count
   941  c3ff a000                   ldy #0
   942  c401 bd0002             -   lda inputbuf, x
   943  c404 d126                   cmp (ptr3),y
   944  c406 d008                   bne +
   945  c408 e8                     inx
   946  c409 c8                     iny
   947  c40a e4a4                   cpx len
   948  c40c d0f3                   bne -
   949  c40e b126                   lda (ptr3),y ; matched if end of string, will set Z
   950  c410 08                 +   php ; save Z
   951  c411 a4a3                   ldy count
   952  c413 28                     plp ; restore Z
   953  c414 60                     rts
   954                          
   955                          displayinstructions:
   956  c415 a038                   ldy #ninst
   957  c417 a200                   ldx #0
   958  c419 8a                 -   txa
   959  c41a 48                     pha
   960  c41b 208ac0                 jsr dispinst
   961  c41e a920                   lda #' '
   962  c420 20d2ff                 jsr charout
   963  c423 68                     pla
   964  c424 aa                     tax
   965  c425 e8                     inx
   966  c426 88                     dey
   967  c427 d0f0                   bne -
   968  c429 4cdcc9                 jmp newline
   969                          
   970                          displaymodes:
   971  c42c 38                     sec
   972  c42d a900                   lda #0
   973  c42f 48                 -   pha
   974  c430 aa                     tax
   975  c431 bda3ca                 lda mode_sorted, x
   976  c434 2041c4                 jsr dispmode
   977  c437 68                     pla
   978  c438 18                     clc
   979  c439 6901                   adc #1
   980  c43b c90d                   cmp #nmodes
   981  c43d 90f0                   bcc -
   982  c43f 18                     clc
   983  c440 60                     rts
   984                          
   985                          dispmode:
   986  c441 c90d                   cmp #nmodes
   987  c443 b008                   bcs +
   988  c445 8524                   sta mode
   989  c447 2089c4                 jsr disp_modename_and_example
   990  c44a 4c4ec4                 jmp dispmodeinstructions
   991  c44d 60                 +   rts
   992                          
   993                          dispmodeinstructions:
   994                          !ifdef C64SCREEN {
   995                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
   996  c44e a524                   lda mode
   997  c450 c903                   cmp #3
   998  c452 d005                   bne +
   999  c454 a920                   lda #' '
  1000  c456 4cd2ff                 jmp charout
  1001                          }
  1002                              ; display instructions with this mode
  1003  c459 a000               +   ldy #0
  1004  c45b 8423               --  sty inidx
  1005  c45d a200                   ldx #0
  1006  c45f 86ff               -   stx tmp
  1007  c461 a523                   lda inidx
  1008  c463 dd38cc                 cmp instidx, x
  1009  c466 d014                   bne ++
  1010  c468 bdcfcc                 lda modeidx, x
  1011  c46b c524                   cmp mode
  1012  c46d d00d                   bne ++
  1013  c46f a920                   lda #' '
  1014  c471 20d2ff                 jsr charout
  1015  c474 bd38cc                 lda instidx, x
  1016  c477 208ac0                 jsr dispinst
  1017  c47a a6ff                   ldx tmp
  1018  c47c e8                 ++  inx
  1019  c47d e097                   cpx #nopcodes
  1020  c47f 90de                   bcc -
  1021  c481 c8                     iny
  1022  c482 c038                   cpy #ninst
  1023  c484 d0d5                   bne --
  1024  c486 4cdcc9                 jmp newline
  1025                          
  1026                          disp_modename_and_example:
  1027  c489 0a                     asl
  1028  c48a aa                     tax
  1029  c48b bd87cb                 lda modes, x
  1030  c48e 48                     pha
  1031  c48f bd88cb                 lda modes+1, x
  1032  c492 aa                     tax
  1033                          !ifdef C64SCREEN {
  1034  c493 a912                   lda #18
  1035  c495 20d2ff                 jsr charout
  1036                          }    
  1037  c498 68                     pla
  1038  c499 2062c2                 jsr strout
  1039  c49c a920                   lda #' '
  1040  c49e 20d2ff                 jsr charout
  1041  c4a1 2066c2                 jsr strout2
  1042                          !ifdef C64SCREEN {    
  1043  c4a4 a992                   lda #146
  1044  c4a6 20d2ff                 jsr charout
  1045                          }   
  1046  c4a9 60                     rts
  1047                          
  1048                          disp_modename_instruction_example:
  1049  c4aa 0a                     asl
  1050  c4ab aa                     tax
  1051  c4ac bd87cb                 lda modes, x
  1052  c4af 48                     pha
  1053  c4b0 bd88cb                 lda modes+1, x
  1054  c4b3 aa                     tax
  1055  c4b4 68                     pla
  1056  c4b5 2062c2                 jsr strout ; mode name
  1057  c4b8 a526                   lda ptr3
  1058  c4ba 48                     pha
  1059  c4bb a527                   lda ptr3+1
  1060  c4bd 48                     pha
  1061  c4be a93a                   lda #':'
  1062  c4c0 20d2ff                 jsr charout
  1063  c4c3 a920                   lda #' '
  1064  c4c5 20d2ff                 jsr charout
  1065  c4c8 a523                   lda inidx
  1066  c4ca 208ac0                 jsr dispinst ; instruction
  1067  c4cd a920                   lda #' '
  1068  c4cf 20d2ff                 jsr charout
  1069  c4d2 68                     pla
  1070  c4d3 8527                   sta ptr3+1
  1071  c4d5 68                     pla
  1072  c4d6 8526                   sta ptr3
  1073  c4d8 2066c2                 jsr strout2 ; example
  1074  c4db 60                     rts
  1075                          
  1076                          
  1077                          executehelpinstruction:
  1078  c4dc a000                   ldy #0
  1079  c4de 8422               -   sty opidx
  1080  c4e0 b938cc                 lda instidx, y
  1081  c4e3 c523                   cmp inidx
  1082  c4e5 d01a                   bne +
  1083  c4e7 b9cfcc                 lda modeidx, y
  1084  c4ea 8524                   sta mode
  1085  c4ec a622                   ldx opidx
  1086  c4ee bda1cb                 lda opcodes, x
  1087  c4f1 20ecc1                 jsr disphexbyte
  1088  c4f4 a920                   lda #' '
  1089  c4f6 20d2ff                 jsr charout
  1090  c4f9 a524                   lda mode
  1091  c4fb 20aac4                 jsr disp_modename_instruction_example
  1092  c4fe 20dcc9                 jsr newline
  1093  c501 a422               +   ldy opidx
  1094  c503 c8                     iny
  1095  c504 c097                   cpy #nopcodes
  1096  c506 90d6                   bcc -
  1097  c508 60                     rts
  1098                          
  1099                          continueassemble:
  1100                          !ifdef C64SCREEN {   
  1101  c509 a95f                   lda #<continueassemblec64
  1102  c50b a2bc                   ldx #>continueassemblec64
  1103  c50d 20a0cf                 jsr callbank6
  1104                          }
  1105                              ; continue...
  1106                          
  1107                          executeassemble:
  1108  c510 68                     pla ; remove low byte return address
  1109  c511 68                     pla ; return high byte return address
  1110                          !ifdef C64SCREEN {    
  1111  c512 a914                   lda #20
  1112  c514 20d2ff                 jsr charout
  1113  c517 20d2ff                 jsr charout
  1114                          } else {
  1115                              lda ptr1
  1116                              ldx ptr1+1
  1117                              jsr disphexword
  1118                              lda #' '
  1119                              jsr charout
  1120                          }
  1121                              ; save current pointer
  1122  c51a a5fb               --  lda ptr1
  1123  c51c a6fc                   ldx ptr1+1
  1124  c51e 8526                   sta ptr3
  1125  c520 8627                   stx ptr3+1
  1126  c522 207dc2                 jsr inputline
  1127  c525 c001                   cpy #1
  1128  c527 f048                   beq ++
  1129  c529 88                     dey
  1130  c52a 84a4                   sty len
  1131  c52c a000                   ldy #0
  1132  c52e 201fc9                 jsr skipspaces
  1133  c531 c4a4                   cpy len
  1134  c533 f03c                   beq ++
  1135                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1136                              ;jsr skipspaces
  1137  c535 2047c8                 jsr chkinstruction
  1138  c538 f00b                   beq +
  1139  c53a a526               -   lda ptr3
  1140  c53c 85fb                   sta ptr1
  1141  c53e a527                   lda ptr3+1
  1142  c540 85fc                   sta ptr1+1
  1143  c542 4cc6c2                 jmp error
  1144  c545 209bc5             +   jsr chkaddressing
  1145  c548 d0f0                   bne -
  1146  c54a 2078c8                 jsr find_inst_and_mode
  1147  c54d d0eb                   bne -
  1148  c54f 2074c5                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1149  c552 18                     clc
  1150  c553 a525                   lda size
  1151  c555 6526                   adc ptr3
  1152  c557 85fb                   sta ptr1
  1153  c559 a527                   lda ptr3+1
  1154  c55b 6900                   adc #0
  1155  c55d 85fc                   sta ptr1+1
  1156                          !ifdef C64SCREEN {    
  1157  c55f 20dcc9                 jsr newline
  1158                          }
  1159  c562 a5fb                   lda ptr1
  1160  c564 a6fc                   ldx ptr1+1
  1161  c566 20e6c1                 jsr disphexword
  1162  c569 a920                   lda #' '
  1163  c56b 20d2ff                 jsr charout
  1164  c56e 4c1ac5                 jmp --
  1165                          ++  
  1166                          !ifdef C64SCREEN {
  1167  c571 4cdcc9                 jmp newline
  1168                          } else {
  1169                              rts
  1170                          }
  1171                          
  1172                          store_assembly:
  1173  c574 a622                   ldx opidx
  1174  c576 bda1cb                 lda opcodes, x
  1175  c579 a000                   ldy #0
  1176  c57b 9126                   sta (ptr3), y
  1177  c57d c8                     iny
  1178  c57e a625                   ldx size
  1179  c580 e001                   cpx #1
  1180  c582 f016                   beq ++
  1181  c584 e002               +   cpx #2
  1182  c586 d005                   bne +
  1183  c588 a5a6                   lda tmp2
  1184  c58a 9126                   sta (ptr3), y
  1185  c58c 60                     rts
  1186  c58d e003               +   cpx #3
  1187  c58f d009                   bne ++
  1188  c591 a5fb                   lda ptr1
  1189  c593 9126                   sta (ptr3), y
  1190  c595 c8                     iny
  1191  c596 a5fc                   lda ptr1+1
  1192  c598 9126                   sta (ptr3), y
  1193  c59a 60                 ++  rts
  1194                          
  1195                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1196  c59b 201fc9                 jsr skipspaces
  1197  c59e a200                   ldx #0
  1198  c5a0 8624                   stx mode
  1199  c5a2 20fdc5                 jsr chkaccumulator
  1200  c5a5 f051                   beq +
  1201  c5a7 e624                   inc mode
  1202  c5a9 c4a4                   cpy len ; chknone
  1203  c5ab f04b                   beq +
  1204  c5ad e624                   inc mode
  1205  c5af 2021c6                 jsr chkimmediate
  1206  c5b2 f044                   beq +
  1207  c5b4 e624                   inc mode
  1208  c5b6 2045c6                 jsr chkindirectx
  1209  c5b9 f03d                   beq +
  1210  c5bb e624                   inc mode
  1211  c5bd 208ac6                 jsr chkindirecty
  1212  c5c0 f036                   beq +
  1213  c5c2 e624                   inc mode
  1214  c5c4 20cfc6                 jsr chkrelative
  1215  c5c7 f02f                   beq +
  1216  c5c9 e624                   inc mode
  1217  c5cb 202ac7                 jsr chkzeropage
  1218  c5ce f028                   beq +
  1219  c5d0 e624                   inc mode
  1220  c5d2 2043c7                 jsr chkzeropagex
  1221  c5d5 f021                   beq +
  1222  c5d7 e624                   inc mode
  1223  c5d9 2072c7                 jsr chkzeropagey
  1224  c5dc f01a                   beq +
  1225  c5de e624                   inc mode
  1226  c5e0 20a1c7                 jsr chkabsolute
  1227  c5e3 f013                   beq +
  1228  c5e5 e624                   inc mode
  1229  c5e7 20bac7                 jsr chkabsolutex
  1230  c5ea f00c                   beq +
  1231  c5ec e624                   inc mode
  1232  c5ee 20e9c7                 jsr chkabsolutey
  1233  c5f1 f005                   beq +
  1234  c5f3 e624                   inc mode
  1235  c5f5 2018c8                 jsr chkindirect
  1236  c5f8 08                 +   php ; save Z
  1237  c5f9 a524                   lda mode
  1238  c5fb 28                     plp ; restore Z 
  1239  c5fc 60                     rts
  1240                          
  1241                          chkaccumulator:
  1242  c5fd c4a4                   cpy len
  1243  c5ff d013                   bne +
  1244  c601 a523                   lda inidx
  1245  c603 c902                   cmp #2 ; ASL
  1246  c605 f019                   beq ++
  1247  c607 c920                   cmp #32 ; LSR
  1248  c609 f015                   beq ++
  1249  c60b c927                   cmp #39 ; ROL
  1250  c60d f011                   beq ++
  1251  c60f c928                   cmp #40 ; ROR
  1252  c611 4c20c6                 jmp ++
  1253  c614 b90002             +   lda inputbuf, y
  1254  c617 c941                   cmp #'A'
  1255  c619 d005                   bne ++
  1256  c61b b90102                 lda inputbuf+1,y
  1257  c61e c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1258  c620 60                 ++  rts
  1259                          
  1260                          chkimmediate:
  1261  c621 84a5                   sty savepos
  1262  c623 b90002                 lda inputbuf, y
  1263  c626 c923                   cmp #'#'
  1264  c628 d016                   bne ++
  1265  c62a c8                     iny
  1266  c62b 201fc9                 jsr skipspaces
  1267  c62e b90002                 lda inputbuf, y
  1268  c631 c924                   cmp #'$'
  1269  c633 d001                   bne +
  1270  c635 c8                     iny
  1271  c636 2088c9             +   jsr chkhexbyte
  1272  c639 d005                   bne ++
  1273  c63b c4a4               +   cpy len
  1274  c63d d001                   bne ++
  1275  c63f 60                     rts
  1276  c640 a4a5               ++  ldy savepos
  1277  c642 a201                   ldx #1 ; Z false (NE)
  1278  c644 60                     rts
  1279                          
  1280                          chkindirectx:
  1281  c645 84a5                   sty savepos
  1282  c647 b90002                 lda inputbuf, y
  1283  c64a c928                   cmp #'('
  1284  c64c d037                   bne ++
  1285  c64e c8                     iny
  1286  c64f 201fc9                 jsr skipspaces
  1287  c652 b90002                 lda inputbuf, y
  1288  c655 c924                   cmp #'$'
  1289  c657 d001                   bne +
  1290  c659 c8                     iny
  1291  c65a 2088c9             +   jsr chkhexbyte
  1292  c65d d026                   bne ++
  1293  c65f 201fc9                 jsr skipspaces
  1294  c662 b90002                 lda inputbuf, y
  1295  c665 c92c                   cmp #','
  1296  c667 d01c                   bne ++
  1297  c669 c8                     iny
  1298  c66a 201fc9                 jsr skipspaces
  1299  c66d b90002                 lda inputbuf, y
  1300  c670 c958                   cmp #'X'
  1301  c672 d011                   bne ++
  1302  c674 c8                     iny
  1303  c675 201fc9                 jsr skipspaces
  1304  c678 b90002                 lda inputbuf, y
  1305  c67b c929                   cmp #')'
  1306  c67d d006                   bne ++
  1307  c67f c8                     iny
  1308  c680 c4a4                   cpy len
  1309  c682 d001                   bne ++
  1310  c684 60                     rts
  1311  c685 a4a5               ++  ldy savepos
  1312  c687 a201                   ldx #1 ; Z false (NE)
  1313  c689 60                     rts
  1314                          
  1315                          chkindirecty:
  1316  c68a 84a5                   sty savepos
  1317  c68c b90002                 lda inputbuf, y
  1318  c68f c928                   cmp #'('
  1319  c691 d037                   bne ++
  1320  c693 c8                     iny
  1321  c694 201fc9                 jsr skipspaces
  1322  c697 b90002                 lda inputbuf, y
  1323  c69a c924                   cmp #'$'
  1324  c69c d001                   bne +
  1325  c69e c8                     iny
  1326  c69f 2088c9             +   jsr chkhexbyte
  1327  c6a2 d026                   bne ++
  1328  c6a4 201fc9                 jsr skipspaces
  1329  c6a7 b90002                 lda inputbuf, y
  1330  c6aa c929                   cmp #')'
  1331  c6ac d01c                   bne ++
  1332  c6ae c8                     iny
  1333  c6af 201fc9                 jsr skipspaces
  1334  c6b2 b90002                 lda inputbuf, y
  1335  c6b5 c92c                   cmp #','
  1336  c6b7 d011                   bne ++
  1337  c6b9 c8                     iny
  1338  c6ba 201fc9                 jsr skipspaces
  1339  c6bd b90002                 lda inputbuf, y
  1340  c6c0 c959                   cmp #'Y'
  1341  c6c2 d006                   bne ++
  1342  c6c4 c8                     iny
  1343  c6c5 c4a4                   cpy len
  1344  c6c7 d001                   bne ++
  1345  c6c9 60                     rts
  1346  c6ca a4a5               ++  ldy savepos
  1347  c6cc a201                   ldx #1 ; Z false (NE)
  1348  c6ce 60                     rts
  1349                          
  1350                          chkrelative:
  1351  c6cf 84a5                   sty savepos
  1352  c6d1 a623                   ldx inidx
  1353  c6d3 e006                   cpx #6 ; BIT
  1354  c6d5 f01e                   beq ++
  1355  c6d7 bde1c9                 lda inst0, x
  1356  c6da c942                   cmp #'B'
  1357  c6dc d017                   bne ++
  1358  c6de b90002                 lda inputbuf, y
  1359  c6e1 c924                   cmp #'$'
  1360  c6e3 d001                   bne +
  1361  c6e5 c8                     iny
  1362  c6e6 207fc9             +   jsr chkhexword
  1363  c6e9 d00a                   bne ++
  1364  c6eb c4a4                   cpy len
  1365  c6ed d006                   bne ++
  1366  c6ef 20fac6                 jsr computeoffset
  1367  c6f2 d001                   bne ++
  1368  c6f4 60                     rts ; Z true (EQ)
  1369  c6f5 a4a5               ++  ldy savepos
  1370  c6f7 a201                   ldx #1 ; Z false (NE)
  1371  c6f9 60                     rts
  1372                          
  1373                          computeoffset:
  1374                          ;   compute next address
  1375  c6fa a527                   lda ptr3+1
  1376  c6fc 85fe                   sta ptr2+1
  1377  c6fe a526                   lda ptr3
  1378  c700 18                     clc
  1379  c701 6902                   adc #2
  1380  c703 85fd                   sta ptr2
  1381  c705 9002                   bcc +
  1382  c707 e6fe                   inc ptr2+1
  1383                          +  ; subtract argument
  1384  c709 38                     sec
  1385  c70a a5fb                   lda ptr1
  1386  c70c e5fd                   sbc ptr2
  1387  c70e 85a6                   sta tmp2
  1388  c710 a5fc                   lda ptr1+1
  1389  c712 e5fe                   sbc ptr2+1
  1390  c714 f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1391  c716 c9ff                   cmp #$FF
  1392  c718 d00d                   bne failedoffset ; 0 and FF were only options so fail
  1393                              ; chkeck negative offset
  1394  c71a a5a6                   lda tmp2
  1395  c71c 3006                   bmi successoffset ; branch if signed byte is negative
  1396  c71e 1007                   bpl failedoffset ; otherwise fail
  1397                          chkoffsetto127:
  1398  c720 a5a6                   lda tmp2
  1399  c722 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1400                          successoffset:    
  1401  c724 a900                   lda #0 ; Z true (EQ)
  1402  c726 60                     rts
  1403                          failedoffset:
  1404  c727 a901                   lda #1 ; Z false (NE)
  1405  c729 60                     rts
  1406                          
  1407                          chkzeropage:
  1408  c72a 84a5                   sty savepos
  1409  c72c b90002                 lda inputbuf, y
  1410  c72f c924                   cmp #'$'
  1411  c731 d001                   bne +
  1412  c733 c8                     iny
  1413  c734 2088c9             +   jsr chkhexbyte
  1414  c737 d005                   bne ++
  1415  c739 c4a4                   cpy len
  1416  c73b d001                   bne ++
  1417  c73d 60                     rts ; Z true (EQ)
  1418  c73e a4a5               ++  ldy savepos
  1419  c740 a201                   ldx #1 ; Z false (NE)
  1420  c742 60                     rts
  1421                          
  1422                          chkzeropagex:
  1423  c743 84a5                   sty savepos
  1424  c745 b90002                 lda inputbuf, y
  1425  c748 c924                   cmp #'$'
  1426  c74a d001                   bne +
  1427  c74c c8                     iny
  1428  c74d 2088c9             +   jsr chkhexbyte
  1429  c750 d01b                   bne ++
  1430  c752 201fc9                 jsr skipspaces
  1431  c755 b90002                 lda inputbuf, y
  1432  c758 c92c                   cmp #','
  1433  c75a d011                   bne ++
  1434  c75c c8                     iny
  1435  c75d 201fc9                 jsr skipspaces
  1436  c760 b90002                 lda inputbuf, y
  1437  c763 c958                   cmp #'X'
  1438  c765 d006                   bne ++
  1439  c767 c8                     iny
  1440  c768 c4a4                   cpy len
  1441  c76a d001                   bne ++
  1442  c76c 60                     rts ; Z true (EQ)
  1443  c76d a4a5               ++  ldy savepos
  1444  c76f a201                   ldx #1 ; Z false (NE)
  1445  c771 60                     rts
  1446                          
  1447                          chkzeropagey:
  1448  c772 84a5                   sty savepos
  1449  c774 b90002                 lda inputbuf, y
  1450  c777 c924                   cmp #'$'
  1451  c779 d001                   bne +
  1452  c77b c8                     iny
  1453  c77c 2088c9             +   jsr chkhexbyte
  1454  c77f d01b                   bne ++
  1455  c781 201fc9                 jsr skipspaces
  1456  c784 b90002                 lda inputbuf, y
  1457  c787 c92c                   cmp #','
  1458  c789 d011                   bne ++
  1459  c78b c8                     iny
  1460  c78c 201fc9                 jsr skipspaces
  1461  c78f b90002                 lda inputbuf, y
  1462  c792 c959                   cmp #'Y'
  1463  c794 d006                   bne ++
  1464  c796 c8                     iny
  1465  c797 c4a4                   cpy len
  1466  c799 d001                   bne ++
  1467  c79b 60                     rts ; Z true (EQ)
  1468  c79c a4a5               ++  ldy savepos
  1469  c79e a201                   ldx #1 ; Z false (NE)
  1470  c7a0 60                     rts
  1471                          
  1472                          chkabsolute:
  1473  c7a1 84a5                   sty savepos
  1474  c7a3 b90002                 lda inputbuf, y
  1475  c7a6 c924                   cmp #'$'
  1476  c7a8 d001                   bne +
  1477  c7aa c8                     iny
  1478  c7ab 207fc9             +   jsr chkhexword
  1479  c7ae d005                   bne ++
  1480  c7b0 c4a4                   cpy len
  1481  c7b2 d001                   bne ++
  1482  c7b4 60                     rts ; Z true (EQ)
  1483  c7b5 a4a5               ++  ldy savepos
  1484  c7b7 a201                   ldx #1 ; Z false (NE)
  1485  c7b9 60                     rts
  1486                          
  1487                          chkabsolutex:
  1488  c7ba 84a5                   sty savepos
  1489  c7bc b90002                 lda inputbuf, y
  1490  c7bf c924                   cmp #'$'
  1491  c7c1 d001                   bne +
  1492  c7c3 c8                     iny
  1493  c7c4 207fc9             +   jsr chkhexword
  1494  c7c7 d01b                   bne ++
  1495  c7c9 201fc9                 jsr skipspaces
  1496  c7cc b90002                 lda inputbuf, y
  1497  c7cf c92c                   cmp #','
  1498  c7d1 d011                   bne ++
  1499  c7d3 c8                     iny
  1500  c7d4 201fc9                 jsr skipspaces
  1501  c7d7 b90002                 lda inputbuf, y
  1502  c7da c958                   cmp #'X'
  1503  c7dc d006                   bne ++
  1504  c7de c8                     iny
  1505  c7df c4a4                   cpy len
  1506  c7e1 d001                   bne ++
  1507  c7e3 60                     rts ; Z true (EQ)
  1508  c7e4 a4a5               ++  ldy savepos
  1509  c7e6 a201                   ldx #1 ; Z false (NE)
  1510  c7e8 60                     rts
  1511                          
  1512                          chkabsolutey:
  1513  c7e9 84a5                   sty savepos
  1514  c7eb b90002                 lda inputbuf, y
  1515  c7ee c924                   cmp #'$'
  1516  c7f0 d001                   bne +
  1517  c7f2 c8                     iny
  1518  c7f3 207fc9             +   jsr chkhexword
  1519  c7f6 d01b                   bne ++
  1520  c7f8 201fc9                 jsr skipspaces
  1521  c7fb b90002                 lda inputbuf, y
  1522  c7fe c92c                   cmp #','
  1523  c800 d011                   bne ++
  1524  c802 c8                     iny
  1525  c803 201fc9                 jsr skipspaces
  1526  c806 b90002                 lda inputbuf, y
  1527  c809 c959                   cmp #'Y'
  1528  c80b d006                   bne ++
  1529  c80d c8                     iny
  1530  c80e c4a4                   cpy len
  1531  c810 d001                   bne ++
  1532  c812 60                     rts ; Z true (EQ)
  1533  c813 a4a5               ++  ldy savepos
  1534  c815 a201                   ldx #1 ; Z false (NE)
  1535  c817 60                     rts
  1536                          
  1537                          chkindirect:
  1538  c818 84a5                   sty savepos
  1539  c81a b90002                 lda inputbuf, y
  1540  c81d c928                   cmp #'('
  1541  c81f d021                   bne ++
  1542  c821 c8                     iny
  1543  c822 201fc9                 jsr skipspaces
  1544  c825 b90002                 lda inputbuf, y
  1545  c828 c924                   cmp #'$'
  1546  c82a d001                   bne +
  1547  c82c c8                     iny
  1548  c82d 207fc9             +   jsr chkhexword
  1549  c830 d010                   bne ++
  1550  c832 201fc9                 jsr skipspaces
  1551  c835 b90002                 lda inputbuf, y
  1552  c838 c929                   cmp #')'
  1553  c83a d006                   bne ++
  1554  c83c c8                     iny
  1555  c83d c4a4                   cpy len
  1556  c83f d001                   bne ++
  1557  c841 60                     rts ; Z true (EQ)
  1558  c842 a4a5               ++  ldy savepos
  1559  c844 a201                   ldx #1 ; Z false (NE)
  1560  c846 60                     rts
  1561                          
  1562                          chkinstruction:
  1563  c847 c4a4                   cpy len
  1564  c849 f02a                   beq ++
  1565  c84b 84ff                   sty tmp
  1566  c84d a237                   ldx #(ninst-1)
  1567  c84f b90002             -   lda inputbuf,y
  1568  c852 dde1c9                 cmp inst0,x
  1569  c855 d019                   bne +
  1570  c857 c8                     iny
  1571  c858 b90002                 lda inputbuf,y
  1572  c85b dd19ca                 cmp inst1,x
  1573  c85e d010                   bne +
  1574  c860 c8                     iny
  1575  c861 b90002                 lda inputbuf,y
  1576  c864 dd51ca                 cmp inst2,x
  1577  c867 d007                   bne +
  1578  c869 c8                     iny
  1579  c86a 8a                     txa
  1580  c86b 8523                   sta inidx
  1581  c86d a200                   ldx #0
  1582  c86f 60                     rts
  1583  c870 a4ff               +   ldy tmp
  1584  c872 ca                     dex
  1585  c873 10da                   bpl -
  1586  c875 a201               ++  ldx #1 ; Z false (NE)
  1587  c877 60                     rts
  1588                          
  1589                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1590                              ; and allows mode promotion
  1591  c878 209cc8                 jsr find_inst_and_mode2
  1592  c87b f01e                   beq ++
  1593  c87d a524                   lda mode
  1594  c87f c906                   cmp #6
  1595  c881 9018                   bcc ++
  1596  c883 c90a                   cmp #10
  1597  c885 b012                   bcs +
  1598  c887 6903                   adc #3
  1599  c889 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1600  c88b 209cc8                 jsr find_inst_and_mode2 ; try again once
  1601  c88e d00b                   bne ++
  1602  c890 a5a6                   lda tmp2
  1603  c892 85fb                   sta ptr1
  1604  c894 a900                   lda #0
  1605  c896 85fc                   sta ptr1+1
  1606  c898 60                     rts ; Z true (EQ)
  1607  c899 a201               +   ldx #1 ; Z false (NE)
  1608  c89b 60                 ++  rts
  1609                          
  1610                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1611  c89c a296                   ldx #nopcodes-1
  1612  c89e bd38cc             -   lda instidx, x
  1613  c8a1 bccfcc                 ldy modeidx, x
  1614  c8a4 c523                   cmp inidx
  1615  c8a6 d00c                   bne +
  1616  c8a8 c424                   cpy mode
  1617  c8aa d008                   bne +
  1618  c8ac 8622                   stx opidx
  1619  c8ae 2073c0                 jsr getsize
  1620  c8b1 a200                   ldx #0 ; Z true (EQ)
  1621  c8b3 60                     rts
  1622  c8b4 ca                 +   dex
  1623  c8b5 e0ff                   cpx #$ff
  1624  c8b7 d0e5                   bne -
  1625  c8b9 a201                   ldx #1 ; Z false (NE)
  1626  c8bb 60                     rts
  1627                          
  1628                          executerun:
  1629  c8bc 68                     pla ; remove low byte return address
  1630  c8bd 68                     pla ; return high byte return address
  1631  c8be 68                     pla ; again, we're really not returning
  1632  c8bf 68                     pla ; again, we're really not returning
  1633  c8c0 20dcc9                 jsr newline
  1634  c8c3 38                     sec
  1635  c8c4 a5fb                   lda ptr1
  1636  c8c6 e901                   sbc #1
  1637  c8c8 85fb                   sta ptr1
  1638  c8ca b002                   bcs +
  1639  c8cc c6fc                   dec ptr1+1
  1640  c8ce a5fc               +   lda ptr1+1
  1641  c8d0 48                     pha
  1642  c8d1 a5fb                   lda ptr1
  1643  c8d3 48                     pha
  1644  c8d4 60                     rts
  1645                          
  1646                          chkcontinuedis:
  1647  c8d5 b90002                 lda inputbuf,y
  1648  c8d8 c944                   cmp #'D'
  1649  c8da d00a                   bne +
  1650  c8dc b90102                 lda inputbuf+1,y
  1651  c8df c90d                   cmp #13
  1652  c8e1 d003                   bne +
  1653  c8e3 c8                     iny
  1654  c8e4 a200                   ldx #0 ; restore Z set
  1655  c8e6 60                 +   rts
  1656                          
  1657                          chkcontinueasm:
  1658  c8e7 b90002                 lda inputbuf,y
  1659  c8ea c941                   cmp #'A'
  1660  c8ec d00a                   bne +
  1661  c8ee b90102                 lda inputbuf+1,y
  1662  c8f1 c90d                   cmp #13
  1663  c8f3 d003                   bne +
  1664  c8f5 c8                     iny
  1665  c8f6 a200                   ldx #0 ; restore Z set
  1666  c8f8 60                 +   rts
  1667                          
  1668                          executedisassemble:
  1669  c8f9 68                     pla ; remove low byte return address
  1670  c8fa 68                     pla ; return high byte return address
  1671  c8fb 20dcc9                 jsr newline
  1672  c8fe 4c17c0                 jmp disassemble
  1673                          
  1674                          reportnotimplemented:
  1675  c901 a934                   lda #<notimplemented
  1676  c903 a2ce                   ldx #>notimplemented
  1677  c905 4c62c2                 jmp strout
  1678                          
  1679                          reporterr:
  1680  c908 c000                   cpy #0
  1681  c90a f008                   beq +
  1682  c90c a920                   lda #' '
  1683  c90e 20d2ff             -   jsr charout
  1684  c911 88                     dey
  1685  c912 d0fa                   bne -
  1686  c914 a93f               +   lda #'?'
  1687  c916 20d2ff                 jsr charout
  1688  c919 a90d                   lda #13
  1689  c91b 20d2ff                 jsr charout
  1690  c91e 60                     rts
  1691                          
  1692                          skipspaces:
  1693  c91f b90002             -   lda inputbuf, y
  1694  c922 c920                   cmp #$20
  1695  c924 d003                   bne +
  1696  c926 c8                     iny
  1697  c927 d0f6                   bne -
  1698  c929 60                 +   rts
  1699                          
  1700                          chkdot:
  1701  c92a b90002                 lda inputbuf, y
  1702  c92d c92e                   cmp #'.'
  1703  c92f d003                   bne +
  1704  c931 c8                     iny
  1705  c932 a900                   lda #0 ; Z true (EQ)
  1706  c934 60                 +   rts
  1707                          
  1708                          chkhelp:
  1709  c935 b90002                 lda inputbuf, y
  1710  c938 c93f                   cmp #'?'
  1711  c93a d003                   bne +
  1712  c93c c8                     iny
  1713  c93d a900                   lda #0 ; Z true (EQ)
  1714  c93f 60                 +   rts
  1715                          
  1716                          chkcolon:
  1717  c940 b90002                 lda inputbuf, y
  1718  c943 c93a                   cmp #':'
  1719  c945 d003                   bne +
  1720  c947 c8                     iny
  1721  c948 a900                   lda #0 ; Z true (EQ)
  1722  c94a 60                 +   rts
  1723                          
  1724                          chkfilename:
  1725  c94b 84ff                   sty tmp
  1726  c94d b90002                 lda inputbuf, y
  1727  c950 c922                   cmp #34
  1728  c952 d010                   bne ++
  1729  c954 c8                 -   iny
  1730  c955 b90002                 lda inputbuf, y
  1731  c958 c90d                   cmp #13
  1732  c95a d004                   bne +
  1733  c95c a4ff                   ldy tmp
  1734  c95e d004                   bne ++
  1735  c960 c922               +   cmp #34
  1736  c962 d0f0                   bne -
  1737  c964 60                 ++  rts
  1738                          
  1739                          chkhexbyteofsequence:
  1740  c965 2028c2                 jsr inputhexbyte
  1741  c968 2082c9                 jsr +
  1742  c96b d011                   bne ++ ; Z false (NE) if failed checks
  1743  c96d c4a4                   cpy len
  1744  c96f f00d                   beq ++ ; Z true (EQ) if end of input
  1745  c971 85ff                   sta tmp
  1746  c973 b90002                 lda inputbuf,y
  1747  c976 c920                   cmp #$20
  1748  c978 d004                   bne ++ ; Z false (NE) if not space
  1749  c97a a5ff                   lda tmp
  1750  c97c a200                   ldx #0 ; Z true (EQ) is space delimeter
  1751  c97e 60                 ++  rts
  1752                          
  1753                          chkhexword:
  1754                          chkhexaddr1:
  1755  c97f 2002c2                 jsr inputhexword
  1756  c982 a200               +   ldx #0 ; Z true (EQ)
  1757  c984 9001                   bcc +
  1758  c986 e8                     inx ; Z false (NE)
  1759  c987 60                 +   rts
  1760                          
  1761                          chkhexbyte:
  1762  c988 98                     tya
  1763  c989 48                     pha ; save y
  1764  c98a 2028c2                 jsr inputhexbyte
  1765  c98d b00d                   bcs +
  1766  c98f 85a6                   sta tmp2
  1767  c991 2044c2                 jsr inputhexnybble
  1768  c994 9006                   bcc +
  1769  c996 68                     pla ; throw away saved y
  1770  c997 a5a6                   lda tmp2
  1771  c999 a200                   ldx #0 ; Z true (EQ)
  1772  c99b 60                     rts
  1773  c99c 68                 +   pla
  1774  c99d a8                     tay ; won't be zero, so Z false (NE)
  1775  c99e 60                     rts    
  1776                          
  1777                          chkhexaddr2:
  1778  c99f a5fb                   lda ptr1
  1779  c9a1 48                     pha
  1780  c9a2 a5fc                   lda ptr1+1
  1781  c9a4 48                     pha
  1782  c9a5 207fc9                 jsr chkhexaddr1
  1783  c9a8 f005                   beq +
  1784  c9aa 68                     pla
  1785  c9ab 68                     pla
  1786  c9ac a901                   lda #1 ; Z false (NE)
  1787  c9ae 60                     rts
  1788  c9af a5fb               +   lda ptr1
  1789  c9b1 85fd                   sta ptr2
  1790  c9b3 a5fc                   lda ptr1+1
  1791  c9b5 85fe                   sta ptr2+1
  1792  c9b7 68                     pla
  1793  c9b8 85fc                   sta ptr1+1
  1794  c9ba 68                     pla
  1795  c9bb 85fb                   sta ptr1
  1796  c9bd a900                   lda #0 ; Z true (EQ)
  1797  c9bf 60                     rts    
  1798                          
  1799                          chkaddr1cmd:
  1800  c9c0 b90002                 lda inputbuf, y
  1801  c9c3 c941               +   cmp #'A'
  1802  c9c5 d004                   bne +
  1803  c9c7 c8                     iny
  1804  c9c8 4c10c5                 jmp executeassemble
  1805  c9cb c944               +   cmp #'D'
  1806  c9cd d004                   bne +
  1807  c9cf c8                     iny
  1808  c9d0 4cf9c8                 jmp executedisassemble
  1809  c9d3 c952               +   cmp #'R'
  1810  c9d5 d004                   bne +
  1811  c9d7 c8                     iny
  1812  c9d8 4cbcc8                 jmp executerun
  1813  c9db 60                 +   rts
  1814                          
  1815                          newline:
  1816  c9dc a90d                   lda #13
  1817  c9de 4cd2ff                 jmp charout
  1818                          
  1819                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1820                          ;     jsr $ffd2
  1821                          ;     pha
  1822                          ; -   lda $d011
  1823                          ;     bpl -
  1824                          ; -   lda $d011
  1825                          ;     bmi -
  1826                          ; -   lda $d011
  1827                          ;     bpl -
  1828                          ; -   lda $d011
  1829                          ;     bmi -
  1830                          ;     pla
  1831                          ;     rts
  1832                          
  1833                          !ifdef MINIMUM {
  1834                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1835                          ;; MC6850
  1836                          UART_DATA=$FFF8
  1837                          UART_STCR=$FFF9
  1838                          
  1839                          UART_INIT:
  1840                          	ldx #0b00000111 ; 11=reset device
  1841                          	stx UART_STCR
  1842                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  1843                          	sta UART_STCR
  1844                          	rts
  1845                          UART_OUT:
  1846                          	pha
  1847                          -	lda UART_STCR
  1848                          	and #2
  1849                          	beq - ; branch if TDRE=0, not finished transmitting
  1850                          	pla
  1851                          	pha
  1852                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  1853                          	sta UART_DATA
  1854                          	pla
  1855                          	rts
  1856                          UART_IN:
  1857                          -	lda UART_STCR
  1858                          	and #1
  1859                          	beq - ; branch if TDRF=0, not received
  1860                          	lda UART_DATA
  1861                          	; software "CAPS LOCK" because wozmon expects only uppercase
  1862                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  1863                          	beq BREAK
  1864                              ; force lowercase alphabet to uppercase
  1865                              cmp #'a'
  1866                          	bcc +
  1867                          	cmp #'z'+1
  1868                          	bcs +
  1869                          	eor #$20
  1870                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  1871                           	rts
  1872                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  1873                          	pha ; save A
  1874                          	lda UART_STCR
  1875                          	lsr ; put rightmost bit in carry
  1876                          	pla ; restore A affects flags
  1877                          	ror ; move carry to left bit, right bit to carry
  1878                          	php ; push processor to save N
  1879                          	rol ; restore A affects flags
  1880                          	plp ; pull processor to restore N
  1881                          	rts
  1882                          
  1883                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1884                          ; Processor start and interrupts
  1885                          
  1886                          NMI: ; unused on minimum (no source of interrupt)
  1887                              rti
  1888                          
  1889                          IRQ:
  1890                              rti ; TODO implement BRK HANDLING in monitor
  1891                          
  1892                          BREAK:
  1893                              jmp RESET
  1894                          
  1895                          RESET:
  1896                              cld
  1897                              ldx #$00
  1898                              txs
  1899                              jsr JUART_INIT
  1900                              cli
  1901                              jmp start
  1902                          } ; !ifdef MINIMUM
  1903                          
  1904                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1905                          ; data
  1906                          
  1907                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  1908                          ninst = 56
  1909  c9e1 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  1910  ca19 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  1911  ca51 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  1912                          
  1913                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  1914                          mode_jmptable:
  1915  ca89 ffc0               !word dispModeAcc-1; 0 Accumulator 1
  1916  ca8b 04c1               !word dispModeNone-1 ; 1 None 1
  1917  ca8d 05c1               !word dispModeImm-1 ; 2 Immediate 2
  1918  ca8f 16c1               !word dispModeIndX-1 ; 3 IndirectX 2
  1919  ca91 36c1               !word dispModeIndY-1 ; 4 IndirectY 2
  1920  ca93 56c1               !word dispModeRel-1 ; 5 Relative 2
  1921  ca95 0ac1               !word dispModeZP-1 ; 6 ZeroPage 2
  1922  ca97 92c1               !word dispModeZPX-1 ; 7 ZeroPageX 2
  1923  ca99 9fc1               !word dispModeZPY-1 ; 8 ZeroPageY 2
  1924  ca9b acc1               !word dispModeAbs-1 ; 9 Absolute 3
  1925  ca9d bec1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  1926  ca9f cbc1               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  1927  caa1 d8c1               !word dispModeInd-1 ; 12 Indirect 3
  1928                          
  1929                          nmodes = 13
  1930                          
  1931                          mode_sorted:
  1932  caa3 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  1933                          
  1934                          !ifdef MINIMUM {
  1935                          mode_0: !text "Accumulator", 0, "A", 0
  1936                          mode_1: !text "None", 0, "", 0
  1937                          mode_2: !text "Immediate", 0, "#$12", 0
  1938                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  1939                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  1940                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  1941                          mode_6: !text "ZeroPage", 0, "$12", 0
  1942                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  1943                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  1944                          mode_9: !text "Absolute", 0, "$1234", 0
  1945                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  1946                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  1947                          mode_12: !text "Indirect", 0, "($1234)", 0
  1948                          } else {
  1949  cab0 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  1950  cabe 4e4f4e450000       mode_1: !text "NONE", 0, "", 0
  1951  cac4 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  1952  cad3 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  1953  cae5 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  1954  caf7 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  1955  cb16 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  1956  cb23 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  1957  cb33 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  1958  cb43 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  1959  cb52 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  1960  cb64 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  1961  cb76 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  1962                          }
  1963                          
  1964                          modes: ; table for easily displaying each mode_example
  1965  cb87 b0ca               !word mode_0
  1966  cb89 beca               !word mode_1
  1967  cb8b c4ca               !word mode_2
  1968  cb8d d3ca               !word mode_3
  1969  cb8f e5ca               !word mode_4
  1970  cb91 f7ca               !word mode_5
  1971  cb93 16cb               !word mode_6
  1972  cb95 23cb               !word mode_7
  1973  cb97 33cb               !word mode_8
  1974  cb99 43cb               !word mode_9
  1975  cb9b 52cb               !word mode_10
  1976  cb9d 64cb               !word mode_11
  1977  cb9f 76cb               !word mode_12
  1978                          
  1979                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  1980                          nopcodes = 151
  1981  cba1 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  1982  cc38 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  1983  cccf 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  1984                          
  1985                          copyright 
  1986                          ;                  1         2         3         4
  1987                          ;         1234567890123456789012345678901234567890
  1988  cd66 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  1989                          !ifdef C64TERMINAL {
  1990                              !text 13, "(TERMINAL VERSION)"
  1991                          }
  1992  cd86 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  1993  cdac 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  1994  cdc3 00                 !text 0
  1995                          
  1996                          firsthelp
  1997  cdc4 0d3f202020202020...!text 13, "?       (SYNTAX)"
  1998  cdd5 0d3f204120202020...!text 13, "? A     (LIST 6502 INSTRUCTIONS)"
  1999  cdf6 0d3f204144432020...!text 13, "? ADC   (/ADC/ ADDRESSING MODES)"
  2000  ce17 0d3f204d4f444520...!text 13, "? MODE  (ADDRESSING MODES)"
  2001                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2002  ce32 0d00               !text 13, 0
  2003                          
  2004  ce34 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2005                          
  2006                          generalhelp
  2007  ce45 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2008  ce6b 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2009  ce90 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2010  ceb3 00                 !text 0
  2011                          generalhelp2
  2012  ceb4 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2013  cedc 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2014  cef8 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2015  cf18 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2016  cf3a 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2017  cf5f 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2018  cf7b 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2019  cf9a 00                 !text 0
  2020                          
  2021  cf9b 4d4f444500         modes_keyword !text "MODE", 0
  2022                          
  2023                          !ifndef MINIMUM { ; any C64
  2024                          callbank6:
  2025  cfa0 8daccf                 sta calladdr+1
  2026  cfa3 8eadcf                 stx calladdr+2
  2027  cfa6 a906                   lda #6 ; RAM under BASIC, otherwise similar to normal memory configuration
  2028  cfa8 20b2cf                 jsr setbank
  2029  cfab 200000             calladdr: jsr $0000
  2030  cfae 08                     php ; save return status
  2031  cfaf a907                   lda #7 ; normal memory configuration
  2032  cfb1 28                     plp ; restore return status
  2033                              ; fall through setbank
  2034                          setbank:
  2035  cfb2 08                     php ; save possible return status
  2036  cfb3 8502                   sta banksel
  2037  cfb5 a501                   lda $01
  2038  cfb7 29f8                   and #$f8 ; mask out bits 0,1,2
  2039  cfb9 0502                   ora banksel
  2040  cfbb 8501                   sta $01
  2041  cfbd 28                     plp ; restore possible return status
  2042  cfbe 60                     rts
  2043                          
  2044                              !if * > $d000 {
  2045                                  !error "code/data overran $d000"
  2046                              }
  2047                          
  2048                          }
  2049                          
  2050                          !ifdef MINIMUM {
  2051                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2052                          ; JUMP table for some stability
  2053                          * = $FFEE
  2054                          JUART_INIT: JMP UART_INIT
  2055                          JUART_OUT: JMP UART_OUT
  2056                          JUART_IN: JMP UART_IN
  2057                          JUART_CHK: JMP UART_CHK
  2058                          
  2059                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2060                          ; 6502 vectors 
  2061                          * = $fffa
  2062                              !word NMI
  2063                              !word RESET
  2064                              !word IRQ
  2065                          }
  2066                          
  2067                          finish = *
