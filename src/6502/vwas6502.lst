
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGETS:                              *        <<<
     7                          ;; >>>       ** (1)  C64 8000-9FFF screen editor                *        <<<
     8                          ;; >>>       ** (2)  C64 8000-9FFF terminal edition             *        <<<
     9                          ;; >>>       ** (3)  6502+MC6850 minimum system                 *        <<<
    10                          ;; >>>       *   56K(RAM),8K(ROM), 2 bytes IO for MC6850 UART   *        <<<
    11                          ;; >>>       ****************************************************        <<<
    12                          ;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          ;; MIT License
    15                          ;;
    16                          ;; Copyright (c) 2024 David R. Van Wagner
    17                          ;; davevw.com
    18                          ;;
    19                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    20                          ;; of this software and associated documentation files (the "Software"), to deal
    21                          ;; in the Software without restriction, including without limitation the rights
    22                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    23                          ;; copies of the Software, and to permit persons to whom the Software is
    24                          ;; furnished to do so, subject to the following conditions:
    25                          ;;
    26                          ;; The above copyright notice and this permission notice shall be included in all
    27                          ;; copies or substantial portions of the Software.
    28                          ;;
    29                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    30                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    31                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    32                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    33                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    34                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    35                          ;; SOFTWARE.
    36                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                          
    40                          ; Important! define exactly ONE target (set in build.sh)
    41                          ;C64SCREEN = 1
    42                          ;C64TERMINAL = 1
    43                          ;MINIMUM = 1
    44                          
    45                          ; options (set in build.sh)
    46                          ;NEEDECHO = 0
    47                          
    48                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                          
    50                          ;; _
    51                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    52                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    53                          ;; 1000 (display memory at $1000)
    54                          ;; 1000.2000 (display memory range $1000 to $2000)
    55                          ;; 1000. (display next screenful of memory starting at $1000)
    56                          ;; . (display next screenful of memory)
    57                          ;; 1000 r (JMP $1000)
    58                          ;; 1000: 01 02 03 (modify memory)
    59                          ;; (NEW SYNTAX)
    60                          ;; 1000 d (disassemble starting at address, for screenful)
    61                          ;; d (continue disassembling from last address)
    62                          ;; 1000 a (assemble starting at, interactive until empty line) 
    63                          ;; x (exit monitor -- C64 only)
    64                          ;; ? (commands help)
    65                          ;; ? a (list instructions available)
    66                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    67                          ;; ? mode (show addressing modes example syntax for 6502)
    68                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    69                          ;; (FUTURE SYNTAX, not implemented)
    70                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    71                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    72                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    73                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    74                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    75                          ;; .A: 00 (change register, replace A with X, Y, SP, S, PC, SR, P, N, V, B, D, I, Z, C as appropriate, colon is optional)
    76                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    77                          ;;
    78                          ;; (INTERACTIVE ASSEMBLER)
    79                          ;; 1000 _
    80                          ;;      ADC #$12
    81                          ;; 1000 69 12    ADC #$12
    82                          ;; 1002 _
    83                          ;;      JSR $1234
    84                          ;; 1002 20 34 12 JSR $1234
    85                          ;; 1005 _
    86                          ;;      RTS
    87                          ;; 1005 60       RTS
    88                          ;; 1006 _
    89                          ;;      XYZ
    90                          ;;      XYZ ?
    91                          ;; 1006 _
    92                          ;; _
    93                          ;;
    94                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    95                          ;; and can cursor up to revise, 
    96                          ;;
    97                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    98                          ;;
    99                          
   100                          ; global
   101                          inputbuf=$0200
   102                          
   103                          
   104                          ; kernal/system calls
   105                          
   106                          !ifdef MINIMUM {
   107                          charout=JUART_OUT
   108                          getkey=JUART_IN
   109                          }
   110                          
   111                          !ifdef C64SCREEN {
   112                          setlfs=$ffba
   113                          setnam=$ffbd
   114                          charin=$ffcf ; screen editor
   115                          charout=$ffd2
   116                          fsave =$ffd8
   117                          getkey=$ffe4
   118                          }
   119                          
   120                          !ifdef C64TERMINAL {
   121                          setlfs=$ffba
   122                          setnam=$ffbd
   123                          charout=$ffd2
   124                          getkey=$ffe4
   125                          fsave =$ffd8
   126                          }
   127                          
   128                          ; zeropage
   129                          !ifdef MINIMUM {
   130                          opidx=$f0
   131                          inidx=$f1
   132                          mode=$f2
   133                          size=$f3
   134                          ptr3=$f4 ; and $f5
   135                          count=$f6
   136                          len=$f7
   137                          savepos=$f8
   138                          tmp2=$f9
   139                          flag=$fa
   140                          ptr1=$fb ; and $fc
   141                          ptr2=$fd ; and $fe
   142                          tmp=$ff
   143                          } else {
   144                          opidx=$22
   145                          inidx=$23
   146                          mode=$24
   147                          size=$25
   148                          ptr3=$26 ; and $27
   149                          count=$a3
   150                          len=$a4
   151                          savepos=$a5
   152                          tmp2=$a6
   153                          flag=$a7
   154                          ptr1=$fb ; and $fc
   155                          ptr2=$fd ; and $fe
   156                          tmp=$ff
   157                          }
   158                          
   159                          !ifdef MINIMUM {
   160                          * = $e000
   161                          } else { // any C64
   162                          * = $8000
   163  8000 ad1603                 lda $316
   164  8003 ae1703                 ldx $317
   165  8006 e08b                   cpx #>brk64
   166  8008 f010                   beq start
   167  800a 8d3492                 sta savebrkvector
   168  800d 8e3592                 stx savebrkvector+1
   169  8010 a9b8                   lda #<brk64
   170  8012 a28b                   ldx #>brk64
   171  8014 8d1603                 sta $316
   172  8017 8e1703                 stx $317
   173                          }
   174                          
   175                          start:
   176  801a a965                   lda #<copyright
   177  801c a28f                   ldx #>copyright
   178  801e 209383                 jsr strout
   179  8021 a9c3                   lda #<firsthelp
   180  8023 a28f                   ldx #>firsthelp
   181  8025 209383                 jsr strout
   182  8028 4c018b                 jmp save_regs_and_stack
   183                          
   184                          input_loop:
   185  802b 20ae83                 jsr inputline
   186  802e 20b183                 jsr parseline
   187  8031 4c2b80                 jmp input_loop
   188                          
   189                          !ifndef MINIMUM {
   190                          ; C64 only
   191                          chkextrac64:
   192  8034 204080                 jsr chkexit
   193  8037 d003                   bne +
   194  8039 4c5480                 jmp execute_exit
   195  803c 18                 +   clc ; no error
   196  803d a201                   ldx #1 ; Z false - not consumed
   197  803f 60                     rts
   198                          
   199                          chkexit:
   200  8040 b90002                 lda inputbuf, y
   201  8043 c958                   cmp #'X'
   202  8045 d008                   bne +
   203  8047 c8                     iny
   204  8048 c4a4                   cpy len ; validate no extra characters
   205  804a f003                   beq +
   206  804c 4c5080                 jmp extra_error
   207  804f 60                 +   rts
   208                          
   209                          extra_error:
   210                              ; pop local return address
   211  8050 68                     pla
   212  8051 68                     pla
   213  8052 38                     sec ; error
   214  8053 60                     rts
   215                          
   216                          execute_exit:
   217  8054 ad3492                 lda savebrkvector
   218  8057 ae3592                 ldx savebrkvector+1
   219  805a 8d1603                 sta $316
   220  805d 8e1703                 stx $317
   221                              ; pop monitor return addresses, so only original caller is left
   222  8060 68                     pla
   223  8061 68                     pla
   224  8062 68                     pla
   225  8063 68                     pla
   226  8064 68                     pla
   227  8065 68                     pla
   228  8066 60                     rts
   229                          
   230                          display_extra_help:
   231  8067 a9d6                   lda #<extra_help
   232  8069 a28f                   ldx #>extra_help
   233  806b 4c9383                 jmp strout
   234                          
   235                          !ifdef C64SCREEN {
   236                          display_page_disassemble:
   237  806e a5fb                   lda ptr1
   238  8070 a6fc                   ldx ptr1+1
   239  8072 201783                 jsr disphexword
   240  8075 a914                   lda #<page_disassemble
   241  8077 a290                   ldx #>page_disassemble
   242  8079 4c9383                 jmp strout
   243                          
   244                          display_page_displaymemory:
   245  807c 20f78a                 jsr newline
   246  807f a5fb                   lda ptr1
   247  8081 a6fc                   ldx ptr1+1
   248  8083 201783                 jsr disphexword
   249  8086 a91b                   lda #<page_displaymemory
   250  8088 a290                   ldx #>page_displaymemory
   251  808a 4c9383                 jmp strout
   252                          
   253                          inputlinec64:
   254  808d a000                   ldy #0
   255  808f 20cfff             -   jsr charin
   256  8092 990002                 sta inputbuf,y
   257  8095 c8                     iny
   258  8096 c90d                   cmp #13
   259  8098 d0f5                   bne -
   260  809a 60                     rts
   261                          
   262                          continueassemblec64:
   263  809b a914                   lda #20
   264  809d 20d2ff                 jsr charout
   265  80a0 20d2ff                 jsr charout
   266  80a3 a5fb                   lda ptr1
   267  80a5 a6fc                   ldx ptr1+1
   268  80a7 201783                 jsr disphexword
   269  80aa a920                   lda #' '
   270  80ac 20d2ff                 jsr charout
   271  80af 20d2ff                 jsr charout
   272  80b2 4cd2ff                 jmp charout
   273                          }
   274                          
   275                          chkfilename:
   276  80b5 20508a                 jsr skipspaces
   277  80b8 84ff                   sty tmp
   278  80ba b90002                 lda inputbuf, y
   279  80bd c922                   cmp #34 ; double quote
   280  80bf d022                   bne ++
   281  80c1 c8                 -   iny
   282  80c2 b90002                 lda inputbuf, y
   283  80c5 c90d                   cmp #13
   284  80c7 d004                   bne +
   285  80c9 a4ff                   ldy tmp
   286  80cb d016                   bne ++
   287  80cd c922               +   cmp #34 ; double quote
   288  80cf d0f0                   bne -
   289  80d1 98                     tya ; index of ending double quotes
   290  80d2 48                     pha ; save
   291  80d3 18                     clc ; will subtract one more
   292  80d4 e5ff                   sbc tmp ; subtract index of first quote, have filename length
   293  80d6 a6ff                   ldx tmp
   294  80d8 e8                     inx ; low address of filename
   295  80d9 a002                   ldy #>inputbuf ; high address of filename
   296  80db 20bdff                 jsr setnam
   297  80de 68                     pla
   298  80df a8                     tay
   299  80e0 c8                     iny ; advance past ending double quotes
   300  80e1 a900                   lda #0 ; set Z true
   301  80e3 60                 ++  rts
   302                          
   303                          check_execute_save:
   304  80e4 20b580             +   jsr chkfilename
   305  80e7 f006                   beq +
   306  80e9 20398a                 jsr reporterr
   307  80ec a201                   ldx #1 ; set Z false
   308  80ee 60                     rts
   309  80ef 20fd80             +   jsr chkoptionaldrive
   310  80f2 201381                 jsr chksave
   311  80f5 d005                   bne +
   312  80f7 201c81                 jsr executesave
   313  80fa a200                   ldx #0 ; set Z true
   314  80fc 60                 +   rts
   315                          
   316                          chkoptionaldrive:
   317  80fd a908                   lda #8
   318  80ff 8d3692                 sta drive
   319  8102 20508a                 jsr skipspaces
   320  8105 20a38a                 jsr chkhexbyte
   321  8108 d008                   bne +
   322  810a 8d3692                 sta drive
   323  810d 20508a                 jsr skipspaces
   324  8110 a900                   lda #0 ; set Z true
   325  8112 60                 +   rts
   326                          
   327                          chksave:
   328  8113 20508a                 jsr skipspaces
   329  8116 b90002                 lda inputbuf, y
   330  8119 c953                   cmp #'S'
   331  811b 60                     rts
   332                          
   333                          executesave:
   334  811c 20f78a                 jsr newline
   335  811f a9c0                   lda #$c0 ; KERNAL control and error messages
   336  8121 859d                   sta $9d ; set messages to be displayed
   337  8123 a901                   lda #1
   338  8125 ae3692                 ldx drive
   339  8128 a00f                   ldy #15
   340  812a 20baff                 jsr setlfs
   341  812d a9fb                   lda #ptr1
   342  812f a6fd                   ldx ptr2
   343  8131 a4fe                   ldy ptr2+1
   344  8133 20d8ff                 jsr fsave
   345  8136 4cf78a                 jmp newline
   346                          }
   347                          
   348                          ; test: ; all the addressing modes here for testing disassembly
   349                          ;     nop
   350                          ;     lda $1234
   351                          ;     lda $1234,x
   352                          ;     lda $1234,y
   353                          ;     asl
   354                          ;     lda #$12
   355                          ;     lda ($12,x)
   356                          ;     lda ($12),y
   357                          ;     jmp ($1234)
   358                          ; -   bne -
   359                          ;     lda $12
   360                          ;     lda $12,x
   361                          ;     ldx $12,y
   362                          ;     !byte $FF ; unknown
   363                          
   364                          disassemble:
   365  8139 a917                   lda #23
   366  813b 85a3                   sta count
   367  813d a000               -   ldy #0
   368  813f b1fb                   lda (ptr1),y
   369  8141 206881                 jsr find_opcode
   370  8144 20cb81                 jsr disp_current
   371  8147 a525                   lda size
   372  8149 1002                   bpl +
   373  814b a901                   lda #1
   374  814d 18                 +   clc
   375  814e 65fb                   adc ptr1
   376  8150 85fb                   sta ptr1
   377  8152 9002                   bcc +
   378  8154 e6fc                   inc ptr1+1
   379  8156 c6a3               +   dec count
   380  8158 d0e3                   bne -
   381                          !ifdef C64SCREEN {
   382  815a 4c6e80                 jmp display_page_disassemble
   383                          } else {    
   384                              rts
   385                          }
   386                          
   387                          compareptrs:
   388  815d a5fc                   lda ptr1+1
   389  815f c5fe                   cmp ptr2+1
   390  8161 d004                   bne +
   391  8163 a5fb                   lda ptr1
   392  8165 c5fd                   cmp ptr2
   393  8167 60                 +   rts
   394                          
   395                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   396                          ; and properties updated in ZP globals size,inidx,opidx,mode
   397  8168 a097                   ldy #nopcodes
   398  816a a296                   ldx #nopcodes-1
   399  816c dda08d             -   cmp opcodes,x
   400  816f f00f                   beq +
   401  8171 ca                     dex
   402  8172 88                     dey
   403  8173 d0f7                   bne -
   404  8175 18                     clc
   405  8176 a901                   lda #1
   406  8178 8525                   sta size
   407  817a a9ff                   lda #$FF
   408  817c aa                     tax
   409  817d a8                     tay
   410  817e 900a                   bcc ++
   411  8180 bd378e             +   lda instidx, x
   412  8183 bcce8e                 ldy modeidx, x
   413  8186 209181                 jsr getsize
   414  8189 38                     sec
   415  818a 8523               ++  sta inidx
   416  818c 8622                   stx opidx
   417  818e 8424                   sty mode
   418  8190 60                     rts
   419                          
   420                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   421                              ; result returned in size
   422  8191 48                     pha
   423  8192 a901                   lda #1
   424  8194 8525                   sta size
   425  8196 68                     pla
   426  8197 c002                   cpy #2 // Immediate
   427  8199 9008                   bcc +
   428  819b e625                   inc size
   429  819d c009                   cpy #9 // Absolute
   430  819f 9002                   bcc +
   431  81a1 e625                   inc size
   432  81a3 60                 +   rts
   433                          
   434                          disp_opcode: ; .A opcode byte
   435  81a4 206881                 jsr find_opcode
   436  81a7 8a                     txa
   437                              ; fall through to display instruction
   438                          
   439                          dispinst: ; .A instruction index 0..55, note modifies A and X
   440  81a8 aa                     tax
   441  81a9 e038                   cpx #ninst
   442  81ab b012                   bcs +
   443  81ad bddf8b                 lda inst0, x
   444  81b0 20d2ff                 jsr charout
   445  81b3 bd178c                 lda inst1, x
   446  81b6 20d2ff                 jsr charout
   447  81b9 bd4f8c                 lda inst2, x
   448  81bc 4cd2ff                 jmp charout
   449  81bf a93f               +   lda #'?'
   450  81c1 20d2ff                 jsr charout
   451  81c4 20d2ff                 jsr charout
   452  81c7 20d2ff                 jsr charout
   453  81ca 60                     rts
   454                          
   455                          disp_current:
   456  81cb a5fb                   lda ptr1
   457  81cd a6fc                   ldx ptr1+1
   458  81cf 201783                 jsr disphexword
   459  81d2 a920                   lda #$20
   460  81d4 20d2ff                 jsr charout
   461  81d7 a000                   ldy #0
   462  81d9 a625                   ldx size
   463  81db b1fb               -   lda (ptr1),y
   464  81dd 201d83                 jsr disphexbyte
   465  81e0 a920                   lda #$20
   466  81e2 20d2ff                 jsr charout
   467  81e5 c8                     iny
   468  81e6 ca                     dex
   469  81e7 d0f2                   bne -
   470  81e9 c003               -   cpy #3
   471  81eb f00e                   beq +
   472  81ed a920                   lda #$20
   473  81ef 20d2ff                 jsr charout
   474  81f2 20d2ff                 jsr charout
   475  81f5 20d2ff                 jsr charout
   476  81f8 c8                     iny
   477  81f9 d0ee                   bne -
   478  81fb a523               +   lda inidx
   479  81fd 20a881                 jsr dispinst
   480  8200 a920                   lda #$20
   481  8202 20d2ff                 jsr charout
   482  8205 200d82                 jsr disp_mode
   483  8208 a90d                   lda #13
   484  820a 4cd2ff                 jmp charout
   485                          
   486                          disp_mode
   487  820d a524                   lda mode
   488  820f c90d                   cmp #13
   489  8211 b00a                   bcs +
   490  8213 0a                     asl
   491  8214 aa                     tax
   492  8215 bd888c                 lda mode_jmptable+1,x
   493  8218 48                     pha
   494  8219 bd878c                 lda mode_jmptable,x
   495  821c 48                     pha
   496  821d 60                 +   rts
   497                          
   498                          dispModeAcc:
   499  821e a941                   lda #'A'
   500  8220 4cd2ff                 jmp charout
   501                          
   502                          dispModeNone:
   503  8223 60                     rts
   504                          
   505                          dispModeImm:
   506  8224 a923                   lda #'#'
   507  8226 20d2ff                 jsr charout
   508                          dispModeZP:
   509  8229 a924                   lda #'$'
   510  822b 20d2ff                 jsr charout
   511  822e a001                   ldy #1
   512  8230 b1fb                   lda (ptr1),y
   513  8232 4c1d83                 jmp disphexbyte
   514                          
   515                          dispModeIndX:
   516  8235 a928                   lda #'('
   517  8237 20d2ff                 jsr charout
   518  823a a924                   lda #'$'
   519  823c 20d2ff                 jsr charout
   520  823f a001                   ldy #1
   521  8241 b1fb                   lda (ptr1),y
   522  8243 201d83                 jsr disphexbyte
   523  8246 a92c                   lda #','
   524  8248 20d2ff                 jsr charout
   525  824b a958                   lda #'X'
   526  824d 20d2ff                 jsr charout
   527  8250 a929                   lda #')'
   528  8252 4cd2ff                 jmp charout
   529                          
   530                          dispModeIndY:
   531  8255 a928                   lda #'('
   532  8257 20d2ff                 jsr charout
   533  825a a924                   lda #'$'
   534  825c 20d2ff                 jsr charout
   535  825f a001                   ldy #1
   536  8261 b1fb                   lda (ptr1),y
   537  8263 201d83                 jsr disphexbyte
   538  8266 a929                   lda #')'
   539  8268 20d2ff                 jsr charout
   540  826b a92c                   lda #','
   541  826d 20d2ff                 jsr charout
   542  8270 a959                   lda #'Y'
   543  8272 4cd2ff                 jmp charout
   544                          
   545                          dispModeRel:
   546  8275 a924                   lda #'$'
   547  8277 20d2ff                 jsr charout
   548  827a 18                     clc
   549  827b a5fb                   lda ptr1
   550  827d 6902                   adc #2
   551  827f 8526                   sta ptr3
   552  8281 a5fc                   lda ptr1+1
   553  8283 6900                   adc #0
   554  8285 8527                   sta ptr3+1
   555  8287 a001                   ldy #1
   556  8289 b1fb                   lda (ptr1),y
   557  828b 1014                   bpl +
   558                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   559  828d 49ff                   eor #$FF ; inverse
   560  828f 18                     clc
   561  8290 6901                   adc #1 ; complete getting absolute value from two's complement
   562  8292 85ff                   sta tmp
   563  8294 38                     sec
   564  8295 a526                   lda ptr3
   565  8297 e5ff                   sbc tmp
   566  8299 8526                   sta ptr3
   567  829b b00d                   bcs ++
   568  829d c627                   dec ptr3+1
   569  829f 9009                   bcc ++
   570  82a1 18                 +   clc ; simple case of adding
   571  82a2 6526                   adc ptr3
   572  82a4 8526                   sta ptr3
   573  82a6 9002                   bcc ++
   574  82a8 e627                   inc ptr3+1
   575  82aa a526               ++  lda ptr3
   576  82ac a627                   ldx ptr3+1
   577  82ae 4c1783                 jmp disphexword
   578                          
   579                          dispModeZPX:
   580  82b1 202982                 jsr dispModeZP
   581  82b4 a92c                   lda #','
   582  82b6 20d2ff                 jsr charout
   583  82b9 a958                   lda #'X'
   584  82bb 4cd2ff                 jmp charout
   585                          
   586                          dispModeZPY:
   587  82be 202982                 jsr dispModeZP
   588  82c1 a92c                   lda #','
   589  82c3 20d2ff                 jsr charout
   590  82c6 a959                   lda #'Y'
   591  82c8 4cd2ff                 jmp charout
   592                          
   593                          dispModeAbs:
   594  82cb a924                   lda #'$'
   595  82cd 20d2ff                 jsr charout
   596  82d0 a001                   ldy #1
   597  82d2 b1fb                   lda (ptr1),y
   598  82d4 48                     pha
   599  82d5 c8                     iny
   600  82d6 b1fb                   lda (ptr1),y
   601  82d8 aa                     tax
   602  82d9 68                     pla
   603  82da 4c1783                 jmp disphexword
   604                          
   605                          dispModeAbsX:
   606  82dd 20cb82                 jsr dispModeAbs
   607  82e0 a92c                   lda #','
   608  82e2 20d2ff                 jsr charout
   609  82e5 a958                   lda #'X'
   610  82e7 4cd2ff                 jmp charout
   611                          
   612                          dispModeAbsY:
   613  82ea 20cb82                 jsr dispModeAbs
   614  82ed a92c                   lda #','
   615  82ef 20d2ff                 jsr charout
   616  82f2 a959                   lda #'Y'
   617  82f4 4cd2ff                 jmp charout
   618                          
   619                          dispModeInd:
   620  82f7 a928                   lda #'('
   621  82f9 20d2ff                 jsr charout
   622  82fc 20cb82                 jsr dispModeAbs
   623  82ff a929                   lda #')'
   624  8301 4cd2ff                 jmp charout
   625                          
   626                          dispbinbyte: ; .A 00..FF
   627  8304 a208                   ldx #8
   628  8306 85ff                   sta tmp
   629  8308 a930               -   lda #'0'
   630  830a 26ff                   rol tmp
   631  830c 9002                   bcc +
   632  830e a931                   lda #'1'
   633  8310 20d2ff             +   jsr charout
   634  8313 ca                     dex
   635  8314 d0f2                   bne -
   636  8316 60                     rts
   637                          
   638                          disphexword: ; .A low, .X high, 0000..FFFF
   639  8317 48                     pha
   640  8318 8a                     txa
   641  8319 201d83                 jsr disphexbyte
   642  831c 68                     pla
   643                              ;fall through to call again
   644                          
   645                          disphexbyte: ; .A 00..FF
   646  831d 48                     pha
   647  831e 4a                     lsr
   648  831f 4a                     lsr
   649  8320 4a                     lsr
   650  8321 4a                     lsr
   651  8322 202683                 jsr disphexnybble
   652  8325 68                     pla
   653                              ;fall through to call again
   654                          
   655                          disphexnybble: ; .A 0..F
   656  8326 290f                   and #$0F
   657  8328 0930                   ora #$30
   658  832a c93a                   cmp #$3A
   659  832c 9002                   bcc +
   660  832e 6906                   adc #$06
   661  8330 4cd2ff             +   jmp charout
   662                          
   663                          inputhexword: ; C set if fails
   664  8333 a900                   lda #0
   665  8335 85fb                   sta ptr1
   666  8337 85fc                   sta ptr1+1
   667                          
   668  8339 a904                   lda #4 ; word is at most 4 nybbles
   669  833b 85a3                   sta count
   670  833d 207583             --  jsr inputhexnybble
   671  8340 b012                   bcs +
   672                          
   673                              ; shift nibble up
   674  8342 0a                     asl
   675  8343 0a                     asl
   676  8344 0a                     asl
   677  8345 0a                     asl
   678                          
   679  8346 a204                   ldx #4 ; 4 bits rotated into word
   680  8348 2a                 -   rol
   681  8349 26fb                   rol ptr1
   682  834b 26fc                   rol ptr1+1
   683  834d ca                     dex
   684  834e d0f8                   bne - ; repeat bits
   685                          
   686  8350 c6a3                   dec count
   687  8352 d0e9                   bne -- ; repeat nybbles
   688                          
   689  8354 a5a3               +   lda count
   690  8356 c904                   cmp #4 ; set C if 4, otherwise clear
   691  8358 60                     rts
   692                          
   693                          inputhexbyte:
   694  8359 207583                 jsr inputhexnybble
   695  835c b016                   bcs ++
   696  835e 85ff                   sta tmp
   697  8360 207583                 jsr inputhexnybble
   698  8363 9005                   bcc +
   699  8365 18                     clc ; allow single digit as byte
   700  8366 a5ff                   lda tmp
   701  8368 900a                   bcc ++
   702  836a 06ff               +   asl tmp
   703  836c 06ff                   asl tmp
   704  836e 06ff                   asl tmp
   705  8370 06ff                   asl tmp
   706  8372 05ff                   ora tmp ; necessary to assemble the two nybbles
   707  8374 60                 ++  rts
   708                          
   709                          inputhexnybble:
   710  8375 b90002                 lda $0200,y
   711  8378 297f                   and #$7F
   712  837a 38                     sec
   713  837b e930                   sbc #$30
   714  837d 9012                   bcc ++
   715  837f c90a                   cmp #10
   716  8381 900c                   bcc +
   717  8383 e907                   sbc #7
   718  8385 900a                   bcc ++
   719  8387 c90a                   cmp #10
   720  8389 9006                   bcc ++
   721  838b c910                   cmp #16
   722  838d b002                   bcs ++
   723  838f c8                 +   iny
   724  8390 60                     rts
   725  8391 38                 ++  sec
   726  8392 60                     rts
   727                          
   728                          strout:
   729  8393 8526                   sta ptr3
   730  8395 8627                   stx ptr3+1
   731                          strout2:    
   732  8397 a000                   ldy #0
   733  8399 b126               -   lda (ptr3),y
   734  839b f006                   beq +
   735  839d 20d2ff                 jsr charout
   736  83a0 c8                     iny
   737  83a1 d0f6                   bne -
   738  83a3 98                 +   tya
   739  83a4 38                     sec
   740  83a5 6526                   adc ptr3
   741  83a7 8526                   sta ptr3
   742  83a9 9002                   bcc +
   743  83ab e627                   inc ptr3+1
   744  83ad 60                 +   rts
   745                          
   746                          inputline:
   747                          !ifdef C64SCREEN {
   748  83ae 4c8d80                 jmp inputlinec64
   749                          } else {
   750                              ldy #0
   751                          --  sty count
   752                          -   jsr getkey
   753                              beq -
   754                              ldy count
   755                          !ifdef MINIMUM {
   756                              cmp #8 ; backspace
   757                          } else {
   758                              cmp #20
   759                          }
   760                              bne +
   761                              cpy #0
   762                              beq -
   763                              dey
   764                          !if NEEDECHO = 1 {    
   765                              jsr charout
   766                          }
   767                              jmp --
   768                          +   cmp #13
   769                              beq +
   770                              cmp #' '
   771                              bcc -
   772                              cmp #128
   773                              bcs -
   774                          +
   775                          !if NEEDECHO = 1 {    
   776                              jsr charout
   777                          }
   778                              sta inputbuf,y
   779                              iny
   780                              cmp #13
   781                              bne --
   782                              rts
   783                          }
   784                          
   785                          parseline:
   786  83b1 c001                   cpy #1
   787  83b3 d003                   bne +
   788                          -
   789                          !ifdef C64SCREEN {   
   790  83b5 4cf78a                 jmp newline
   791                          } else {
   792                              rts
   793                          }
   794  83b8 88                 +   dey
   795  83b9 84a4                   sty len
   796                              ; skip whitespace
   797                              ; check for address, put in ptr1
   798                              ; or check for dot, then require address put in ptr2
   799                              ; or check for ?, and optional parameter, execute help
   800                              ; check for whitespace
   801                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   802                              ; check for string, store at start of inputbuf
   803                              ; check for drive number
   804                              ; check for whitespace
   805                              ; check command ":rda?mls", execute command
   806  83bb a000                   ldy #0
   807  83bd 20508a                 jsr skipspaces
   808  83c0 c4a4                   cpy len
   809  83c2 f0f1                   beq -
   810  83c4 20068a                 jsr chkcontinuedis
   811  83c7 d003                   bne +
   812  83c9 202a8a                 jsr executedisassemble ; note won't return
   813  83cc 20188a             +   jsr chkcontinueasm
   814  83cf d003                   bne +
   815  83d1 203e86                 jsr continueassemble ; note won't return
   816  83d4 205f8a             +   jsr chkdot
   817  83d7 d003                   bne +
   818  83d9 4cc084                 jmp executedot
   819  83dc 206a8a             +   jsr chkhelp
   820  83df d003                   bne +
   821  83e1 4cca84                 jmp executehelp
   822                          +
   823                          !ifndef MINIMUM {
   824  83e4 203480                 jsr chkextrac64 ; check syntax only available on C64
   825  83e7 b014                   bcs + ; error if C set
   826  83e9 f005                   beq ++ ; consumed if Z set, skip next test(s)
   827                          }    
   828  83eb 209a8a                 jsr chkhexaddr1
   829  83ee d003                   bne error
   830  83f0 4cf683             ++  jmp executeaddr1
   831                          error:
   832  83f3 4c398a                 jmp reporterr
   833                          
   834                          executeaddr1:
   835  83f6 c4a4                   cpy len
   836  83f8 d003                   bne +
   837  83fa 4c4f84                 jmp executedisplay1
   838  83fd 205f8a             +   jsr chkdot
   839  8400 d00f                   bne +
   840  8402 c4a4                   cpy len
   841  8404 f021                   beq executepagedisplay
   842  8406 20ba8a                 jsr chkhexaddr2
   843  8409 d0e8                   bne error
   844  840b 18                     clc
   845  840c 66a7                   ror flag
   846  840e 4c3f84                 jmp executeaddr12
   847  8411 20508a             +   jsr skipspaces
   848  8414 20758a                 jsr chkcolon
   849  8417 d003                   bne +
   850  8419 4c9e84                 jmp executemodify
   851  841c 20db8a             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   852                          !ifdef MINIMUM {
   853                              jmp reportnotimplemented
   854                          } else {
   855  841f 20b580                 jsr chkfilename
   856  8422 d0cf                   bne error
   857  8424 4cc784                 jmp executeloadfilename
   858                          }
   859                          
   860                          executepagedisplay:
   861  8427 a5fb                   lda ptr1
   862  8429 18                     clc
   863                          !ifdef MINIMUM {
   864                              adc #$5f
   865                          } else {
   866  842a 69b7                   adc #$b7
   867                          }
   868  842c 85fd                   sta ptr2
   869  842e a5fc                   lda ptr1+1
   870                          !ifdef MINIMUM {
   871                              adc #$01
   872                          } else {
   873  8430 6900                   adc #$00
   874                          }
   875  8432 85fe                   sta ptr2+1
   876  8434 9006                   bcc +
   877  8436 a9ff                   lda #$ff
   878  8438 85fd                   sta ptr2
   879  843a 85fe                   sta ptr2+1
   880  843c 38                 +   sec
   881  843d 66a7                   ror flag
   882                              ; fall through to executeaddr12
   883                          
   884                          executeaddr12:
   885  843f c4a4                   cpy len
   886  8441 d003                   bne +
   887  8443 4c5784                 jmp executedisplay12
   888                          !ifndef MINIMUM { // any C64
   889  8446 20e480             +   jsr check_execute_save
   890  8449 f003                   beq ++
   891                          }
   892  844b 4c328a             +   jmp reportnotimplemented
   893  844e 60                 ++  rts
   894                          
   895                          executedisplay1:
   896  844f a5fb                   lda ptr1
   897  8451 85fd                   sta ptr2
   898  8453 a5fc                   lda ptr1+1
   899  8455 85fe                   sta ptr2+1
   900                              ; fall through executedisplay12
   901                          
   902                          executedisplay12:
   903  8457 a9ff                   lda #$ff
   904  8459 85a3                   sta count
   905  845b e6a3               -   inc count
   906  845d a5a3                   lda count
   907                          !ifdef MINIMUM {    
   908                              and #$0f
   909                          } else {
   910  845f 2907                   and #$07
   911                          }
   912  8461 d016                   bne +
   913  8463 a90d                   lda #13
   914  8465 20d2ff                 jsr charout
   915  8468 a5fb                   lda ptr1
   916  846a a6fc                   ldx ptr1+1
   917  846c 201783                 jsr disphexword
   918  846f a93a                   lda #':'
   919  8471 20d2ff                 jsr charout
   920  8474 a920                   lda #' '
   921  8476 20d2ff                 jsr charout
   922  8479 a000               +   ldy #0
   923  847b b1fb                   lda (ptr1),y
   924  847d 201d83                 jsr disphexbyte
   925  8480 a920                   lda #' '
   926  8482 20d2ff                 jsr charout
   927  8485 e6fb                   inc ptr1
   928  8487 d004                   bne +
   929  8489 e6fc                   inc ptr1+1
   930  848b f00e                   beq ++
   931  848d 205d81             +   jsr compareptrs
   932  8490 90c9                   bcc -
   933  8492 f0c7                   beq -
   934  8494 24a7                   bit flag
   935  8496 1003                   bpl ++
   936                          !ifdef C64SCREEN {
   937  8498 4c7c80                 jmp display_page_displaymemory
   938                          }
   939  849b 4cf78a             ++  jmp newline
   940                          
   941                          executemodify:
   942  849e 20508a                 jsr skipspaces
   943  84a1 c4a4                   cpy len
   944  84a3 f018                   beq ++
   945  84a5 20808a                 jsr chkhexbyteofsequence
   946  84a8 f003                   beq +
   947  84aa 4cf383                 jmp error
   948  84ad 84ff               +   sty tmp
   949  84af a000                   ldy #0
   950  84b1 91fb                   sta (ptr1),y
   951  84b3 e6fb                   inc ptr1
   952  84b5 d002                   bne +
   953  84b7 e6fc                   inc ptr1+1
   954  84b9 a4ff               +   ldy tmp
   955  84bb d0e1                   bne executemodify
   956  84bd 4cf78a             ++  jmp newline
   957                          
   958                          executedot:
   959  84c0 c4a4                   cpy len
   960  84c2 d003                   bne +
   961  84c4 4c2784                 jmp executepagedisplay
   962                          
   963                          executeloadfilename:
   964                          executeaddr1cmd:
   965  84c7 4c328a             +   jmp reportnotimplemented
   966                          
   967                          executehelp:
   968                          !ifdef C64SCREEN {
   969  84ca 20f78a                 jsr newline
   970                          }
   971  84cd c4a4                   cpy len
   972  84cf d003                   bne +
   973  84d1 4cfa84                 jmp displayhelp
   974  84d4 20508a             +   jsr skipspaces
   975  84d7 200e85                 jsr chkhelpinstructions
   976  84da d003                   bne +
   977  84dc 4c4a85                 jmp displayinstructions
   978  84df 202885             +   jsr chkhelpmodes
   979  84e2 d003                   bne +
   980  84e4 4c6185                 jmp displaymodes
   981  84e7 207889             +   jsr chkinstruction
   982  84ea d003                   bne +
   983  84ec 4c1186                 jmp executehelpinstruction
   984  84ef 201b85             +   jsr chkhelpregisters
   985  84f2 d003                   bne +
   986  84f4 4c4d8b                 jmp execute_display_registers
   987  84f7 4c328a             +   jmp reportnotimplemented
   988                          
   989                          displayhelp:
   990  84fa a933                   lda #<generalhelp
   991  84fc a290                   ldx #>generalhelp
   992  84fe 209383                 jsr strout
   993  8501 a928                   lda #<generalhelp2
   994  8503 a291                   ldx #>generalhelp2
   995  8505 209383                 jsr strout
   996                          !ifndef MINIMUM { // any C64
   997  8508 206780                 jsr display_extra_help
   998                          }
   999  850b 4cf78a                 jmp newline
  1000                          
  1001                          chkhelpinstructions:
  1002  850e b90002                 lda inputbuf, y
  1003  8511 c941                   cmp #'A'
  1004  8513 d005                   bne +
  1005  8515 b90102                 lda inputbuf+1, y
  1006  8518 c90d                   cmp #13
  1007                              ; no need to increment y if found, done parsing line
  1008  851a 60                 +   rts
  1009                          
  1010                          chkhelpregisters:
  1011  851b b90002                 lda inputbuf, y
  1012  851e c92e                   cmp #'.'
  1013  8520 d005                   bne +
  1014  8522 b90102                 lda inputbuf+1, y
  1015  8525 c90d                   cmp #13
  1016  8527 60                 +   rts
  1017                          
  1018                          chkhelpmodes:
  1019  8528 a912                   lda #<modes_keyword
  1020  852a a292                   ldx #>modes_keyword
  1021                              ; fall through to chkkeyword
  1022                          
  1023                          chkkeyword:
  1024  852c 84a3                   sty count
  1025  852e 8526                   sta ptr3
  1026  8530 8627                   stx ptr3+1
  1027  8532 a6a3                   ldx count
  1028  8534 a000                   ldy #0
  1029  8536 bd0002             -   lda inputbuf, x
  1030  8539 d126                   cmp (ptr3),y
  1031  853b d008                   bne +
  1032  853d e8                     inx
  1033  853e c8                     iny
  1034  853f e4a4                   cpx len
  1035  8541 d0f3                   bne -
  1036  8543 b126                   lda (ptr3),y ; matched if end of string, will set Z
  1037  8545 08                 +   php ; save Z
  1038  8546 a4a3                   ldy count
  1039  8548 28                     plp ; restore Z
  1040  8549 60                     rts
  1041                          
  1042                          displayinstructions:
  1043  854a a038                   ldy #ninst
  1044  854c a200                   ldx #0
  1045  854e 8a                 -   txa
  1046  854f 48                     pha
  1047  8550 20a881                 jsr dispinst
  1048  8553 a920                   lda #' '
  1049  8555 20d2ff                 jsr charout
  1050  8558 68                     pla
  1051  8559 aa                     tax
  1052  855a e8                     inx
  1053  855b 88                     dey
  1054  855c d0f0                   bne -
  1055  855e 4cf78a                 jmp newline
  1056                          
  1057                          displaymodes:
  1058  8561 38                     sec
  1059  8562 a900                   lda #0
  1060  8564 48                 -   pha
  1061  8565 aa                     tax
  1062  8566 bda18c                 lda mode_sorted, x
  1063  8569 207685                 jsr dispmode
  1064  856c 68                     pla
  1065  856d 18                     clc
  1066  856e 6901                   adc #1
  1067  8570 c90d                   cmp #nmodes
  1068  8572 90f0                   bcc -
  1069  8574 18                     clc
  1070  8575 60                     rts
  1071                          
  1072                          dispmode:
  1073  8576 c90d                   cmp #nmodes
  1074  8578 b008                   bcs +
  1075  857a 8524                   sta mode
  1076  857c 20be85                 jsr disp_modename_and_example
  1077  857f 4c8385                 jmp dispmodeinstructions
  1078  8582 60                 +   rts
  1079                          
  1080                          dispmodeinstructions:
  1081                          !ifdef C64SCREEN {
  1082                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1083  8583 a524                   lda mode
  1084  8585 c903                   cmp #3
  1085  8587 d005                   bne +
  1086  8589 a920                   lda #' '
  1087  858b 4cd2ff                 jmp charout
  1088                          }
  1089                              ; display instructions with this mode
  1090  858e a000               +   ldy #0
  1091  8590 8423               --  sty inidx
  1092  8592 a200                   ldx #0
  1093  8594 86ff               -   stx tmp
  1094  8596 a523                   lda inidx
  1095  8598 dd378e                 cmp instidx, x
  1096  859b d014                   bne ++
  1097  859d bdce8e                 lda modeidx, x
  1098  85a0 c524                   cmp mode
  1099  85a2 d00d                   bne ++
  1100  85a4 a920                   lda #' '
  1101  85a6 20d2ff                 jsr charout
  1102  85a9 bd378e                 lda instidx, x
  1103  85ac 20a881                 jsr dispinst
  1104  85af a6ff                   ldx tmp
  1105  85b1 e8                 ++  inx
  1106  85b2 e097                   cpx #nopcodes
  1107  85b4 90de                   bcc -
  1108  85b6 c8                     iny
  1109  85b7 c038                   cpy #ninst
  1110  85b9 d0d5                   bne --
  1111  85bb 4cf78a                 jmp newline
  1112                          
  1113                          disp_modename_and_example:
  1114  85be 0a                     asl
  1115  85bf aa                     tax
  1116  85c0 bd868d                 lda modes, x
  1117  85c3 48                     pha
  1118  85c4 bd878d                 lda modes+1, x
  1119  85c7 aa                     tax
  1120                          !ifdef C64SCREEN {
  1121  85c8 a912                   lda #18
  1122  85ca 20d2ff                 jsr charout
  1123                          }    
  1124  85cd 68                     pla
  1125  85ce 209383                 jsr strout
  1126  85d1 a920                   lda #' '
  1127  85d3 20d2ff                 jsr charout
  1128  85d6 209783                 jsr strout2
  1129                          !ifdef C64SCREEN {    
  1130  85d9 a992                   lda #146
  1131  85db 20d2ff                 jsr charout
  1132                          }   
  1133  85de 60                     rts
  1134                          
  1135                          disp_modename_instruction_example:
  1136  85df 0a                     asl
  1137  85e0 aa                     tax
  1138  85e1 bd868d                 lda modes, x
  1139  85e4 48                     pha
  1140  85e5 bd878d                 lda modes+1, x
  1141  85e8 aa                     tax
  1142  85e9 68                     pla
  1143  85ea 209383                 jsr strout ; mode name
  1144  85ed a526                   lda ptr3
  1145  85ef 48                     pha
  1146  85f0 a527                   lda ptr3+1
  1147  85f2 48                     pha
  1148  85f3 a93a                   lda #':'
  1149  85f5 20d2ff                 jsr charout
  1150  85f8 a920                   lda #' '
  1151  85fa 20d2ff                 jsr charout
  1152  85fd a523                   lda inidx
  1153  85ff 20a881                 jsr dispinst ; instruction
  1154  8602 a920                   lda #' '
  1155  8604 20d2ff                 jsr charout
  1156  8607 68                     pla
  1157  8608 8527                   sta ptr3+1
  1158  860a 68                     pla
  1159  860b 8526                   sta ptr3
  1160  860d 209783                 jsr strout2 ; example
  1161  8610 60                     rts
  1162                          
  1163                          
  1164                          executehelpinstruction:
  1165  8611 a000                   ldy #0
  1166  8613 8422               -   sty opidx
  1167  8615 b9378e                 lda instidx, y
  1168  8618 c523                   cmp inidx
  1169  861a d01a                   bne +
  1170  861c b9ce8e                 lda modeidx, y
  1171  861f 8524                   sta mode
  1172  8621 a622                   ldx opidx
  1173  8623 bda08d                 lda opcodes, x
  1174  8626 201d83                 jsr disphexbyte
  1175  8629 a920                   lda #' '
  1176  862b 20d2ff                 jsr charout
  1177  862e a524                   lda mode
  1178  8630 20df85                 jsr disp_modename_instruction_example
  1179  8633 20f78a                 jsr newline
  1180  8636 a422               +   ldy opidx
  1181  8638 c8                     iny
  1182  8639 c097                   cpy #nopcodes
  1183  863b 90d6                   bcc -
  1184  863d 60                     rts
  1185                          
  1186                          continueassemble:
  1187                          !ifdef C64SCREEN {   
  1188  863e 209b80                 jsr continueassemblec64
  1189                          }
  1190                              ; continue...
  1191                          
  1192                          executeassemble:
  1193  8641 68                     pla ; remove low byte return address
  1194  8642 68                     pla ; return high byte return address
  1195                          !ifdef C64SCREEN {    
  1196  8643 a914                   lda #20
  1197  8645 20d2ff                 jsr charout
  1198  8648 20d2ff                 jsr charout
  1199                          } else {
  1200                              lda ptr1
  1201                              ldx ptr1+1
  1202                              jsr disphexword
  1203                              lda #' '
  1204                              jsr charout
  1205                          }
  1206                              ; save current pointer
  1207  864b a5fb               --  lda ptr1
  1208  864d a6fc                   ldx ptr1+1
  1209  864f 8526                   sta ptr3
  1210  8651 8627                   stx ptr3+1
  1211  8653 20ae83                 jsr inputline
  1212  8656 c001                   cpy #1
  1213  8658 f048                   beq ++
  1214  865a 88                     dey
  1215  865b 84a4                   sty len
  1216  865d a000                   ldy #0
  1217  865f 20508a                 jsr skipspaces
  1218  8662 c4a4                   cpy len
  1219  8664 f03c                   beq ++
  1220                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1221                              ;jsr skipspaces
  1222  8666 207889                 jsr chkinstruction
  1223  8669 f00b                   beq +
  1224  866b a526               -   lda ptr3
  1225  866d 85fb                   sta ptr1
  1226  866f a527                   lda ptr3+1
  1227  8671 85fc                   sta ptr1+1
  1228  8673 4cf383                 jmp error
  1229  8676 20cc86             +   jsr chkaddressing
  1230  8679 d0f0                   bne -
  1231  867b 20a989                 jsr find_inst_and_mode
  1232  867e d0eb                   bne -
  1233  8680 20a586                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1234  8683 18                     clc
  1235  8684 a525                   lda size
  1236  8686 6526                   adc ptr3
  1237  8688 85fb                   sta ptr1
  1238  868a a527                   lda ptr3+1
  1239  868c 6900                   adc #0
  1240  868e 85fc                   sta ptr1+1
  1241                          !ifdef C64SCREEN {    
  1242  8690 20f78a                 jsr newline
  1243                          }
  1244  8693 a5fb                   lda ptr1
  1245  8695 a6fc                   ldx ptr1+1
  1246  8697 201783                 jsr disphexword
  1247  869a a920                   lda #' '
  1248  869c 20d2ff                 jsr charout
  1249  869f 4c4b86                 jmp --
  1250                          ++  
  1251                          !ifdef C64SCREEN {
  1252  86a2 4cf78a                 jmp newline
  1253                          } else {
  1254                              rts
  1255                          }
  1256                          
  1257                          store_assembly:
  1258  86a5 a622                   ldx opidx
  1259  86a7 bda08d                 lda opcodes, x
  1260  86aa a000                   ldy #0
  1261  86ac 9126                   sta (ptr3), y
  1262  86ae c8                     iny
  1263  86af a625                   ldx size
  1264  86b1 e001                   cpx #1
  1265  86b3 f016                   beq ++
  1266  86b5 e002               +   cpx #2
  1267  86b7 d005                   bne +
  1268  86b9 a5a6                   lda tmp2
  1269  86bb 9126                   sta (ptr3), y
  1270  86bd 60                     rts
  1271  86be e003               +   cpx #3
  1272  86c0 d009                   bne ++
  1273  86c2 a5fb                   lda ptr1
  1274  86c4 9126                   sta (ptr3), y
  1275  86c6 c8                     iny
  1276  86c7 a5fc                   lda ptr1+1
  1277  86c9 9126                   sta (ptr3), y
  1278  86cb 60                 ++  rts
  1279                          
  1280                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1281  86cc 20508a                 jsr skipspaces
  1282  86cf a200                   ldx #0
  1283  86d1 8624                   stx mode
  1284  86d3 202e87                 jsr chkaccumulator
  1285  86d6 f051                   beq +
  1286  86d8 e624                   inc mode
  1287  86da c4a4                   cpy len ; chknone
  1288  86dc f04b                   beq +
  1289  86de e624                   inc mode
  1290  86e0 205287                 jsr chkimmediate
  1291  86e3 f044                   beq +
  1292  86e5 e624                   inc mode
  1293  86e7 207687                 jsr chkindirectx
  1294  86ea f03d                   beq +
  1295  86ec e624                   inc mode
  1296  86ee 20bb87                 jsr chkindirecty
  1297  86f1 f036                   beq +
  1298  86f3 e624                   inc mode
  1299  86f5 200088                 jsr chkrelative
  1300  86f8 f02f                   beq +
  1301  86fa e624                   inc mode
  1302  86fc 205b88                 jsr chkzeropage
  1303  86ff f028                   beq +
  1304  8701 e624                   inc mode
  1305  8703 207488                 jsr chkzeropagex
  1306  8706 f021                   beq +
  1307  8708 e624                   inc mode
  1308  870a 20a388                 jsr chkzeropagey
  1309  870d f01a                   beq +
  1310  870f e624                   inc mode
  1311  8711 20d288                 jsr chkabsolute
  1312  8714 f013                   beq +
  1313  8716 e624                   inc mode
  1314  8718 20eb88                 jsr chkabsolutex
  1315  871b f00c                   beq +
  1316  871d e624                   inc mode
  1317  871f 201a89                 jsr chkabsolutey
  1318  8722 f005                   beq +
  1319  8724 e624                   inc mode
  1320  8726 204989                 jsr chkindirect
  1321  8729 08                 +   php ; save Z
  1322  872a a524                   lda mode
  1323  872c 28                     plp ; restore Z 
  1324  872d 60                     rts
  1325                          
  1326                          chkaccumulator:
  1327  872e c4a4                   cpy len
  1328  8730 d013                   bne +
  1329  8732 a523                   lda inidx
  1330  8734 c902                   cmp #2 ; ASL
  1331  8736 f019                   beq ++
  1332  8738 c920                   cmp #32 ; LSR
  1333  873a f015                   beq ++
  1334  873c c927                   cmp #39 ; ROL
  1335  873e f011                   beq ++
  1336  8740 c928                   cmp #40 ; ROR
  1337  8742 4c5187                 jmp ++
  1338  8745 b90002             +   lda inputbuf, y
  1339  8748 c941                   cmp #'A'
  1340  874a d005                   bne ++
  1341  874c b90102                 lda inputbuf+1,y
  1342  874f c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1343  8751 60                 ++  rts
  1344                          
  1345                          chkimmediate:
  1346  8752 84a5                   sty savepos
  1347  8754 b90002                 lda inputbuf, y
  1348  8757 c923                   cmp #'#'
  1349  8759 d016                   bne ++
  1350  875b c8                     iny
  1351  875c 20508a                 jsr skipspaces
  1352  875f b90002                 lda inputbuf, y
  1353  8762 c924                   cmp #'$'
  1354  8764 d001                   bne +
  1355  8766 c8                     iny
  1356  8767 20a38a             +   jsr chkhexbyte
  1357  876a d005                   bne ++
  1358  876c c4a4               +   cpy len
  1359  876e d001                   bne ++
  1360  8770 60                     rts
  1361  8771 a4a5               ++  ldy savepos
  1362  8773 a201                   ldx #1 ; Z false (NE)
  1363  8775 60                     rts
  1364                          
  1365                          chkindirectx:
  1366  8776 84a5                   sty savepos
  1367  8778 b90002                 lda inputbuf, y
  1368  877b c928                   cmp #'('
  1369  877d d037                   bne ++
  1370  877f c8                     iny
  1371  8780 20508a                 jsr skipspaces
  1372  8783 b90002                 lda inputbuf, y
  1373  8786 c924                   cmp #'$'
  1374  8788 d001                   bne +
  1375  878a c8                     iny
  1376  878b 20a38a             +   jsr chkhexbyte
  1377  878e d026                   bne ++
  1378  8790 20508a                 jsr skipspaces
  1379  8793 b90002                 lda inputbuf, y
  1380  8796 c92c                   cmp #','
  1381  8798 d01c                   bne ++
  1382  879a c8                     iny
  1383  879b 20508a                 jsr skipspaces
  1384  879e b90002                 lda inputbuf, y
  1385  87a1 c958                   cmp #'X'
  1386  87a3 d011                   bne ++
  1387  87a5 c8                     iny
  1388  87a6 20508a                 jsr skipspaces
  1389  87a9 b90002                 lda inputbuf, y
  1390  87ac c929                   cmp #')'
  1391  87ae d006                   bne ++
  1392  87b0 c8                     iny
  1393  87b1 c4a4                   cpy len
  1394  87b3 d001                   bne ++
  1395  87b5 60                     rts
  1396  87b6 a4a5               ++  ldy savepos
  1397  87b8 a201                   ldx #1 ; Z false (NE)
  1398  87ba 60                     rts
  1399                          
  1400                          chkindirecty:
  1401  87bb 84a5                   sty savepos
  1402  87bd b90002                 lda inputbuf, y
  1403  87c0 c928                   cmp #'('
  1404  87c2 d037                   bne ++
  1405  87c4 c8                     iny
  1406  87c5 20508a                 jsr skipspaces
  1407  87c8 b90002                 lda inputbuf, y
  1408  87cb c924                   cmp #'$'
  1409  87cd d001                   bne +
  1410  87cf c8                     iny
  1411  87d0 20a38a             +   jsr chkhexbyte
  1412  87d3 d026                   bne ++
  1413  87d5 20508a                 jsr skipspaces
  1414  87d8 b90002                 lda inputbuf, y
  1415  87db c929                   cmp #')'
  1416  87dd d01c                   bne ++
  1417  87df c8                     iny
  1418  87e0 20508a                 jsr skipspaces
  1419  87e3 b90002                 lda inputbuf, y
  1420  87e6 c92c                   cmp #','
  1421  87e8 d011                   bne ++
  1422  87ea c8                     iny
  1423  87eb 20508a                 jsr skipspaces
  1424  87ee b90002                 lda inputbuf, y
  1425  87f1 c959                   cmp #'Y'
  1426  87f3 d006                   bne ++
  1427  87f5 c8                     iny
  1428  87f6 c4a4                   cpy len
  1429  87f8 d001                   bne ++
  1430  87fa 60                     rts
  1431  87fb a4a5               ++  ldy savepos
  1432  87fd a201                   ldx #1 ; Z false (NE)
  1433  87ff 60                     rts
  1434                          
  1435                          chkrelative:
  1436  8800 84a5                   sty savepos
  1437  8802 a623                   ldx inidx
  1438  8804 e006                   cpx #6 ; BIT
  1439  8806 f01e                   beq ++
  1440  8808 bddf8b                 lda inst0, x
  1441  880b c942                   cmp #'B'
  1442  880d d017                   bne ++
  1443  880f b90002                 lda inputbuf, y
  1444  8812 c924                   cmp #'$'
  1445  8814 d001                   bne +
  1446  8816 c8                     iny
  1447  8817 209a8a             +   jsr chkhexword
  1448  881a d00a                   bne ++
  1449  881c c4a4                   cpy len
  1450  881e d006                   bne ++
  1451  8820 202b88                 jsr computeoffset
  1452  8823 d001                   bne ++
  1453  8825 60                     rts ; Z true (EQ)
  1454  8826 a4a5               ++  ldy savepos
  1455  8828 a201                   ldx #1 ; Z false (NE)
  1456  882a 60                     rts
  1457                          
  1458                          computeoffset:
  1459                          ;   compute next address
  1460  882b a527                   lda ptr3+1
  1461  882d 85fe                   sta ptr2+1
  1462  882f a526                   lda ptr3
  1463  8831 18                     clc
  1464  8832 6902                   adc #2
  1465  8834 85fd                   sta ptr2
  1466  8836 9002                   bcc +
  1467  8838 e6fe                   inc ptr2+1
  1468                          +  ; subtract argument
  1469  883a 38                     sec
  1470  883b a5fb                   lda ptr1
  1471  883d e5fd                   sbc ptr2
  1472  883f 85a6                   sta tmp2
  1473  8841 a5fc                   lda ptr1+1
  1474  8843 e5fe                   sbc ptr2+1
  1475  8845 f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1476  8847 c9ff                   cmp #$FF
  1477  8849 d00d                   bne failedoffset ; 0 and FF were only options so fail
  1478                              ; chkeck negative offset
  1479  884b a5a6                   lda tmp2
  1480  884d 3006                   bmi successoffset ; branch if signed byte is negative
  1481  884f 1007                   bpl failedoffset ; otherwise fail
  1482                          chkoffsetto127:
  1483  8851 a5a6                   lda tmp2
  1484  8853 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1485                          successoffset:    
  1486  8855 a900                   lda #0 ; Z true (EQ)
  1487  8857 60                     rts
  1488                          failedoffset:
  1489  8858 a901                   lda #1 ; Z false (NE)
  1490  885a 60                     rts
  1491                          
  1492                          chkzeropage:
  1493  885b 84a5                   sty savepos
  1494  885d b90002                 lda inputbuf, y
  1495  8860 c924                   cmp #'$'
  1496  8862 d001                   bne +
  1497  8864 c8                     iny
  1498  8865 20a38a             +   jsr chkhexbyte
  1499  8868 d005                   bne ++
  1500  886a c4a4                   cpy len
  1501  886c d001                   bne ++
  1502  886e 60                     rts ; Z true (EQ)
  1503  886f a4a5               ++  ldy savepos
  1504  8871 a201                   ldx #1 ; Z false (NE)
  1505  8873 60                     rts
  1506                          
  1507                          chkzeropagex:
  1508  8874 84a5                   sty savepos
  1509  8876 b90002                 lda inputbuf, y
  1510  8879 c924                   cmp #'$'
  1511  887b d001                   bne +
  1512  887d c8                     iny
  1513  887e 20a38a             +   jsr chkhexbyte
  1514  8881 d01b                   bne ++
  1515  8883 20508a                 jsr skipspaces
  1516  8886 b90002                 lda inputbuf, y
  1517  8889 c92c                   cmp #','
  1518  888b d011                   bne ++
  1519  888d c8                     iny
  1520  888e 20508a                 jsr skipspaces
  1521  8891 b90002                 lda inputbuf, y
  1522  8894 c958                   cmp #'X'
  1523  8896 d006                   bne ++
  1524  8898 c8                     iny
  1525  8899 c4a4                   cpy len
  1526  889b d001                   bne ++
  1527  889d 60                     rts ; Z true (EQ)
  1528  889e a4a5               ++  ldy savepos
  1529  88a0 a201                   ldx #1 ; Z false (NE)
  1530  88a2 60                     rts
  1531                          
  1532                          chkzeropagey:
  1533  88a3 84a5                   sty savepos
  1534  88a5 b90002                 lda inputbuf, y
  1535  88a8 c924                   cmp #'$'
  1536  88aa d001                   bne +
  1537  88ac c8                     iny
  1538  88ad 20a38a             +   jsr chkhexbyte
  1539  88b0 d01b                   bne ++
  1540  88b2 20508a                 jsr skipspaces
  1541  88b5 b90002                 lda inputbuf, y
  1542  88b8 c92c                   cmp #','
  1543  88ba d011                   bne ++
  1544  88bc c8                     iny
  1545  88bd 20508a                 jsr skipspaces
  1546  88c0 b90002                 lda inputbuf, y
  1547  88c3 c959                   cmp #'Y'
  1548  88c5 d006                   bne ++
  1549  88c7 c8                     iny
  1550  88c8 c4a4                   cpy len
  1551  88ca d001                   bne ++
  1552  88cc 60                     rts ; Z true (EQ)
  1553  88cd a4a5               ++  ldy savepos
  1554  88cf a201                   ldx #1 ; Z false (NE)
  1555  88d1 60                     rts
  1556                          
  1557                          chkabsolute:
  1558  88d2 84a5                   sty savepos
  1559  88d4 b90002                 lda inputbuf, y
  1560  88d7 c924                   cmp #'$'
  1561  88d9 d001                   bne +
  1562  88db c8                     iny
  1563  88dc 209a8a             +   jsr chkhexword
  1564  88df d005                   bne ++
  1565  88e1 c4a4                   cpy len
  1566  88e3 d001                   bne ++
  1567  88e5 60                     rts ; Z true (EQ)
  1568  88e6 a4a5               ++  ldy savepos
  1569  88e8 a201                   ldx #1 ; Z false (NE)
  1570  88ea 60                     rts
  1571                          
  1572                          chkabsolutex:
  1573  88eb 84a5                   sty savepos
  1574  88ed b90002                 lda inputbuf, y
  1575  88f0 c924                   cmp #'$'
  1576  88f2 d001                   bne +
  1577  88f4 c8                     iny
  1578  88f5 209a8a             +   jsr chkhexword
  1579  88f8 d01b                   bne ++
  1580  88fa 20508a                 jsr skipspaces
  1581  88fd b90002                 lda inputbuf, y
  1582  8900 c92c                   cmp #','
  1583  8902 d011                   bne ++
  1584  8904 c8                     iny
  1585  8905 20508a                 jsr skipspaces
  1586  8908 b90002                 lda inputbuf, y
  1587  890b c958                   cmp #'X'
  1588  890d d006                   bne ++
  1589  890f c8                     iny
  1590  8910 c4a4                   cpy len
  1591  8912 d001                   bne ++
  1592  8914 60                     rts ; Z true (EQ)
  1593  8915 a4a5               ++  ldy savepos
  1594  8917 a201                   ldx #1 ; Z false (NE)
  1595  8919 60                     rts
  1596                          
  1597                          chkabsolutey:
  1598  891a 84a5                   sty savepos
  1599  891c b90002                 lda inputbuf, y
  1600  891f c924                   cmp #'$'
  1601  8921 d001                   bne +
  1602  8923 c8                     iny
  1603  8924 209a8a             +   jsr chkhexword
  1604  8927 d01b                   bne ++
  1605  8929 20508a                 jsr skipspaces
  1606  892c b90002                 lda inputbuf, y
  1607  892f c92c                   cmp #','
  1608  8931 d011                   bne ++
  1609  8933 c8                     iny
  1610  8934 20508a                 jsr skipspaces
  1611  8937 b90002                 lda inputbuf, y
  1612  893a c959                   cmp #'Y'
  1613  893c d006                   bne ++
  1614  893e c8                     iny
  1615  893f c4a4                   cpy len
  1616  8941 d001                   bne ++
  1617  8943 60                     rts ; Z true (EQ)
  1618  8944 a4a5               ++  ldy savepos
  1619  8946 a201                   ldx #1 ; Z false (NE)
  1620  8948 60                     rts
  1621                          
  1622                          chkindirect:
  1623  8949 84a5                   sty savepos
  1624  894b b90002                 lda inputbuf, y
  1625  894e c928                   cmp #'('
  1626  8950 d021                   bne ++
  1627  8952 c8                     iny
  1628  8953 20508a                 jsr skipspaces
  1629  8956 b90002                 lda inputbuf, y
  1630  8959 c924                   cmp #'$'
  1631  895b d001                   bne +
  1632  895d c8                     iny
  1633  895e 209a8a             +   jsr chkhexword
  1634  8961 d010                   bne ++
  1635  8963 20508a                 jsr skipspaces
  1636  8966 b90002                 lda inputbuf, y
  1637  8969 c929                   cmp #')'
  1638  896b d006                   bne ++
  1639  896d c8                     iny
  1640  896e c4a4                   cpy len
  1641  8970 d001                   bne ++
  1642  8972 60                     rts ; Z true (EQ)
  1643  8973 a4a5               ++  ldy savepos
  1644  8975 a201                   ldx #1 ; Z false (NE)
  1645  8977 60                     rts
  1646                          
  1647                          chkinstruction:
  1648  8978 c4a4                   cpy len
  1649  897a f02a                   beq ++
  1650  897c 84ff                   sty tmp
  1651  897e a237                   ldx #(ninst-1)
  1652  8980 b90002             -   lda inputbuf,y
  1653  8983 dddf8b                 cmp inst0,x
  1654  8986 d019                   bne +
  1655  8988 c8                     iny
  1656  8989 b90002                 lda inputbuf,y
  1657  898c dd178c                 cmp inst1,x
  1658  898f d010                   bne +
  1659  8991 c8                     iny
  1660  8992 b90002                 lda inputbuf,y
  1661  8995 dd4f8c                 cmp inst2,x
  1662  8998 d007                   bne +
  1663  899a c8                     iny
  1664  899b 8a                     txa
  1665  899c 8523                   sta inidx
  1666  899e a200                   ldx #0
  1667  89a0 60                     rts
  1668  89a1 a4ff               +   ldy tmp
  1669  89a3 ca                     dex
  1670  89a4 10da                   bpl -
  1671  89a6 a201               ++  ldx #1 ; Z false (NE)
  1672  89a8 60                     rts
  1673                          
  1674                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1675                              ; and allows mode promotion
  1676  89a9 20cd89                 jsr find_inst_and_mode2
  1677  89ac f01e                   beq ++
  1678  89ae a524                   lda mode
  1679  89b0 c906                   cmp #6
  1680  89b2 9018                   bcc ++
  1681  89b4 c90a                   cmp #10
  1682  89b6 b012                   bcs +
  1683  89b8 6903                   adc #3
  1684  89ba 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1685  89bc 20cd89                 jsr find_inst_and_mode2 ; try again once
  1686  89bf d00b                   bne ++
  1687  89c1 a5a6                   lda tmp2
  1688  89c3 85fb                   sta ptr1
  1689  89c5 a900                   lda #0
  1690  89c7 85fc                   sta ptr1+1
  1691  89c9 60                     rts ; Z true (EQ)
  1692  89ca a201               +   ldx #1 ; Z false (NE)
  1693  89cc 60                 ++  rts
  1694                          
  1695                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1696  89cd a296                   ldx #nopcodes-1
  1697  89cf bd378e             -   lda instidx, x
  1698  89d2 bcce8e                 ldy modeidx, x
  1699  89d5 c523                   cmp inidx
  1700  89d7 d00c                   bne +
  1701  89d9 c424                   cpy mode
  1702  89db d008                   bne +
  1703  89dd 8622                   stx opidx
  1704  89df 209181                 jsr getsize
  1705  89e2 a200                   ldx #0 ; Z true (EQ)
  1706  89e4 60                     rts
  1707  89e5 ca                 +   dex
  1708  89e6 e0ff                   cpx #$ff
  1709  89e8 d0e5                   bne -
  1710  89ea a201                   ldx #1 ; Z false (NE)
  1711  89ec 60                     rts
  1712                          
  1713                          executerun:
  1714  89ed 68                     pla ; remove low byte return address
  1715  89ee 68                     pla ; return high byte return address
  1716  89ef 68                     pla ; again, we're really not returning
  1717  89f0 68                     pla ; again, we're really not returning
  1718  89f1 20f78a                 jsr newline
  1719  89f4 38                     sec
  1720  89f5 a5fb                   lda ptr1
  1721  89f7 e901                   sbc #1
  1722  89f9 85fb                   sta ptr1
  1723  89fb b002                   bcs +
  1724  89fd c6fc                   dec ptr1+1
  1725  89ff a5fc               +   lda ptr1+1
  1726  8a01 48                     pha
  1727  8a02 a5fb                   lda ptr1
  1728  8a04 48                     pha
  1729  8a05 60                     rts
  1730                          
  1731                          chkcontinuedis:
  1732  8a06 b90002                 lda inputbuf,y
  1733  8a09 c944                   cmp #'D'
  1734  8a0b d00a                   bne +
  1735  8a0d b90102                 lda inputbuf+1,y
  1736  8a10 c90d                   cmp #13
  1737  8a12 d003                   bne +
  1738  8a14 c8                     iny
  1739  8a15 a200                   ldx #0 ; restore Z set
  1740  8a17 60                 +   rts
  1741                          
  1742                          chkcontinueasm:
  1743  8a18 b90002                 lda inputbuf,y
  1744  8a1b c941                   cmp #'A'
  1745  8a1d d00a                   bne +
  1746  8a1f b90102                 lda inputbuf+1,y
  1747  8a22 c90d                   cmp #13
  1748  8a24 d003                   bne +
  1749  8a26 c8                     iny
  1750  8a27 a200                   ldx #0 ; restore Z set
  1751  8a29 60                 +   rts
  1752                          
  1753                          executedisassemble:
  1754  8a2a 68                     pla ; remove low byte return address
  1755  8a2b 68                     pla ; return high byte return address
  1756  8a2c 20f78a                 jsr newline
  1757  8a2f 4c3981                 jmp disassemble
  1758                          
  1759                          reportnotimplemented:
  1760  8a32 a922                   lda #<notimplemented
  1761  8a34 a290                   ldx #>notimplemented
  1762  8a36 4c9383                 jmp strout
  1763                          
  1764                          reporterr:
  1765  8a39 c000                   cpy #0
  1766  8a3b f008                   beq +
  1767  8a3d a920                   lda #' '
  1768  8a3f 20d2ff             -   jsr charout
  1769  8a42 88                     dey
  1770  8a43 d0fa                   bne -
  1771  8a45 a93f               +   lda #'?'
  1772  8a47 20d2ff                 jsr charout
  1773  8a4a a90d                   lda #13
  1774  8a4c 20d2ff                 jsr charout
  1775  8a4f 60                     rts
  1776                          
  1777                          skipspaces:
  1778  8a50 b90002             -   lda inputbuf, y
  1779                          !ifndef MINIMUM {
  1780                              ; skip SHIFT-SPACES too on Commodore
  1781  8a53 c9a0                   cmp #$A0
  1782  8a55 f004                   beq +
  1783                          }
  1784  8a57 c920                   cmp #$20
  1785  8a59 d003                   bne ++
  1786  8a5b c8                 +   iny
  1787  8a5c d0f2                   bne -
  1788  8a5e 60                 ++  rts
  1789                          
  1790                          chkdot:
  1791  8a5f b90002                 lda inputbuf, y
  1792  8a62 c92e                   cmp #'.'
  1793  8a64 d003                   bne +
  1794  8a66 c8                     iny
  1795  8a67 a900                   lda #0 ; Z true (EQ)
  1796  8a69 60                 +   rts
  1797                          
  1798                          chkhelp:
  1799  8a6a b90002                 lda inputbuf, y
  1800  8a6d c93f                   cmp #'?'
  1801  8a6f d003                   bne +
  1802  8a71 c8                     iny
  1803  8a72 a900                   lda #0 ; Z true (EQ)
  1804  8a74 60                 +   rts
  1805                          
  1806                          chkcolon:
  1807  8a75 b90002                 lda inputbuf, y
  1808  8a78 c93a                   cmp #':'
  1809  8a7a d003                   bne +
  1810  8a7c c8                     iny
  1811  8a7d a900                   lda #0 ; Z true (EQ)
  1812  8a7f 60                 +   rts
  1813                          
  1814                          chkhexbyteofsequence:
  1815  8a80 205983                 jsr inputhexbyte
  1816  8a83 209d8a                 jsr +
  1817  8a86 d011                   bne ++ ; Z false (NE) if failed checks
  1818  8a88 c4a4                   cpy len
  1819  8a8a f00d                   beq ++ ; Z true (EQ) if end of input
  1820  8a8c 85ff                   sta tmp
  1821  8a8e b90002                 lda inputbuf,y
  1822  8a91 c920                   cmp #$20
  1823  8a93 d004                   bne ++ ; Z false (NE) if not space
  1824  8a95 a5ff                   lda tmp
  1825  8a97 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1826  8a99 60                 ++  rts
  1827                          
  1828                          chkhexword:
  1829                          chkhexaddr1:
  1830  8a9a 203383                 jsr inputhexword
  1831  8a9d a200               +   ldx #0 ; Z true (EQ)
  1832  8a9f 9001                   bcc +
  1833  8aa1 e8                     inx ; Z false (NE)
  1834  8aa2 60                 +   rts
  1835                          
  1836                          chkhexbyte:
  1837  8aa3 98                     tya
  1838  8aa4 48                     pha ; save y
  1839  8aa5 205983                 jsr inputhexbyte
  1840  8aa8 b00d                   bcs +
  1841  8aaa 85a6                   sta tmp2
  1842  8aac 207583                 jsr inputhexnybble
  1843  8aaf 9006                   bcc +
  1844  8ab1 68                     pla ; throw away saved y
  1845  8ab2 a5a6                   lda tmp2
  1846  8ab4 a200                   ldx #0 ; Z true (EQ)
  1847  8ab6 60                     rts
  1848  8ab7 68                 +   pla
  1849  8ab8 a8                     tay ; won't be zero, so Z false (NE)
  1850  8ab9 60                     rts    
  1851                          
  1852                          chkhexaddr2:
  1853  8aba a5fb                   lda ptr1
  1854  8abc 48                     pha
  1855  8abd a5fc                   lda ptr1+1
  1856  8abf 48                     pha
  1857  8ac0 209a8a                 jsr chkhexaddr1
  1858  8ac3 f005                   beq +
  1859  8ac5 68                     pla
  1860  8ac6 68                     pla
  1861  8ac7 a901                   lda #1 ; Z false (NE)
  1862  8ac9 60                     rts
  1863  8aca a5fb               +   lda ptr1
  1864  8acc 85fd                   sta ptr2
  1865  8ace a5fc                   lda ptr1+1
  1866  8ad0 85fe                   sta ptr2+1
  1867  8ad2 68                     pla
  1868  8ad3 85fc                   sta ptr1+1
  1869  8ad5 68                     pla
  1870  8ad6 85fb                   sta ptr1
  1871  8ad8 a900                   lda #0 ; Z true (EQ)
  1872  8ada 60                     rts    
  1873                          
  1874                          chkaddr1cmd:
  1875  8adb b90002                 lda inputbuf, y
  1876  8ade c941               +   cmp #'A'
  1877  8ae0 d004                   bne +
  1878  8ae2 c8                     iny
  1879  8ae3 4c4186                 jmp executeassemble
  1880  8ae6 c944               +   cmp #'D'
  1881  8ae8 d004                   bne +
  1882  8aea c8                     iny
  1883  8aeb 4c2a8a                 jmp executedisassemble
  1884  8aee c952               +   cmp #'R'
  1885  8af0 d004                   bne +
  1886  8af2 c8                     iny
  1887  8af3 4ced89                 jmp executerun
  1888  8af6 60                 +   rts
  1889                          
  1890                          newline:
  1891  8af7 a90d                   lda #13
  1892  8af9 4cd2ff                 jmp charout
  1893                          
  1894                          space:
  1895  8afc a920                   lda #32
  1896  8afe 4cd2ff                 jmp charout
  1897                          
  1898                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1899                          ;     jsr $ffd2
  1900                          ;     pha
  1901                          ; -   lda $d011
  1902                          ;     bpl -
  1903                          ; -   lda $d011
  1904                          ;     bmi -
  1905                          ; -   lda $d011
  1906                          ;     bpl -
  1907                          ; -   lda $d011
  1908                          ;     bmi -
  1909                          ;     pla
  1910                          ;     rts
  1911                          
  1912                          save_regs_and_stack:
  1913                          
  1914                          ; save registers
  1915  8b01 8d3792             sta registerA
  1916  8b04 8e3892             stx registerX
  1917  8b07 8c3992             sty registerY
  1918                          
  1919                          ; detect N/Z flags without affecting stack
  1920  8b0a 3010               bmi +
  1921  8b0c f007               beq p_pl_eq
  1922                          
  1923  8b0e a900               lda #$00 ;p_pl_ne
  1924  8b10 8d3b92             sta registerSR
  1925  8b13 f015               beq ++
  1926                          
  1927                          p_pl_eq:
  1928  8b15 a902               lda #$02
  1929  8b17 8d3b92             sta registerSR
  1930  8b1a 100e               bpl ++ 
  1931                          
  1932  8b1c f007               + beq p_mi_eq
  1933  8b1e a980               lda #$80 ;p_mi_ne
  1934  8b20 8d3b92             sta registerSR
  1935  8b23 3005               bmi ++
  1936                          
  1937                          p_mi_eq:
  1938  8b25 a982               lda #$82
  1939  8b27 8d3b92             sta registerSR
  1940                          
  1941                          ; save SP register, affects N/Z
  1942  8b2a ba                 ++tsx
  1943  8b2b 8e3a92             stx registerSP
  1944                          
  1945                          ; save stack, affects N/Z
  1946  8b2e a200               ldx #0
  1947  8b30 bd0001             -lda $100,x
  1948  8b33 9d3e92             sta savestack,x
  1949  8b36 e8                 inx
  1950  8b37 d0f7               bne -
  1951                          
  1952                          ; save flags, combining unaffected ones with saved N/Z
  1953  8b39 08                 php
  1954  8b3a 68                 pla
  1955  8b3b 297d               and #$7d
  1956  8b3d 0d3b92             ora registerSR
  1957  8b40 8d3b92             sta registerSR
  1958                          
  1959                          ; restore stack byte affected
  1960  8b43 aa                 tax
  1961  8b44 bd3e92             lda savestack,x
  1962  8b47 9d0001             sta $100,x
  1963                          
  1964  8b4a 4c4f8b             jmp +
  1965                          
  1966                          execute_display_registers:
  1967  8b4d 68                 pla ; remove return address
  1968  8b4e 68                 pla
  1969                          +
  1970  8b4f 20f78a             jsr newline
  1971  8b52 20588b             jsr display_registers
  1972  8b55 4c2b80             jmp input_loop
  1973                          
  1974                          ; PC   NV-BDIZC .A .X .Y .S
  1975                          ; 1234 10111011 01 02 03 FF
  1976                          display_registers:
  1977  8b58 a917                   lda #<reg_header
  1978  8b5a a292                   ldx #>reg_header
  1979  8b5c 209383                 jsr strout
  1980  8b5f ad3c92                 lda registerPC
  1981  8b62 ae3d92                 ldx registerPC+1
  1982  8b65 201783                 jsr disphexword
  1983  8b68 20fc8a                 jsr space
  1984  8b6b ad3b92                 lda registerSR
  1985  8b6e 200483                 jsr dispbinbyte
  1986  8b71 20fc8a                 jsr space
  1987  8b74 ad3792                 lda registerA
  1988  8b77 201d83                 jsr disphexbyte
  1989  8b7a 20fc8a                 jsr space
  1990  8b7d ad3892                 lda registerX
  1991  8b80 201d83                 jsr disphexbyte
  1992  8b83 20fc8a                 jsr space
  1993  8b86 ad3992                 lda registerY
  1994  8b89 201d83                 jsr disphexbyte
  1995  8b8c 20fc8a                 jsr space
  1996  8b8f ad3a92                 lda registerSP
  1997  8b92 201d83                 jsr disphexbyte
  1998  8b95 4cf78a                 jmp newline
  1999                          
  2000                          loadregs_go:
  2001  8b98 a000                   ldy #0
  2002  8b9a b93e92             -   lda savestack,y
  2003  8b9d 990001                 sta $100,y
  2004  8ba0 c8                     iny
  2005  8ba1 d0f7                   bne -
  2006  8ba3 ae3a92                 ldx registerSP
  2007  8ba6 9a                     txs
  2008  8ba7 ad3b92                 lda registerSR
  2009  8baa 48                     pha
  2010  8bab ad3792                 lda registerA
  2011  8bae ae3892                 ldx registerX
  2012  8bb1 ac3992                 ldy registerY
  2013  8bb4 28                     plp
  2014  8bb5 6c3c92                 jmp (registerPC)
  2015                          
  2016                          !ifdef MINIMUM {
  2017                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2018                          ;; MC6850
  2019                          UART_DATA=$FFF8
  2020                          UART_STCR=$FFF9
  2021                          
  2022                          UART_INIT:
  2023                          	ldx #0b00000111 ; 11=reset device
  2024                          	stx UART_STCR
  2025                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  2026                          	sta UART_STCR
  2027                          	rts
  2028                          UART_OUT:
  2029                          	pha
  2030                          -	lda UART_STCR
  2031                          	and #2
  2032                          	beq - ; branch if TDRE=0, not finished transmitting
  2033                          	pla
  2034                          	pha
  2035                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  2036                          	sta UART_DATA
  2037                          	pla
  2038                          	rts
  2039                          UART_IN:
  2040                          -	lda UART_STCR
  2041                          	and #1
  2042                          	beq - ; branch if TDRF=0, not received
  2043                          	lda UART_DATA
  2044                          	; software "CAPS LOCK" because wozmon expects only uppercase
  2045                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  2046                          	beq BREAK
  2047                              ; force lowercase alphabet to uppercase
  2048                              cmp #'a'
  2049                          	bcc +
  2050                          	cmp #'z'+1
  2051                          	bcs +
  2052                          	eor #$20
  2053                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  2054                           	rts
  2055                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  2056                          	pha ; save A
  2057                          	lda UART_STCR
  2058                          	lsr ; put rightmost bit in carry
  2059                          	pla ; restore A affects flags
  2060                          	ror ; move carry to left bit, right bit to carry
  2061                          	php ; push processor to save N
  2062                          	rol ; restore A affects flags
  2063                          	plp ; pull processor to restore N
  2064                          	rts
  2065                          
  2066                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2067                          ; Processor start and interrupts
  2068                          
  2069                          NMI: ; unused on minimum (no source of interrupt)
  2070                              rti
  2071                          
  2072                          IRQ:
  2073                              pha
  2074                              php
  2075                              pla
  2076                              and #$10
  2077                              beq ++ ; not break
  2078                          ;BREAK HANDLER
  2079                              pla
  2080                              sta registerA
  2081                              pla
  2082                              sta registerSR
  2083                              pla
  2084                              sec
  2085                              sbc #2
  2086                              sta registerPC
  2087                              pla
  2088                              sbc #0
  2089                              sta registerPC+1
  2090                              lda #>save_regs_and_stack
  2091                              pha
  2092                              lda #<save_regs_and_stack
  2093                              pha
  2094                              lda registerSR
  2095                              pha
  2096                              lda registerA
  2097                              pha
  2098                          ++  pla
  2099                              rti
  2100                          
  2101                          BREAK:
  2102                              jmp RESET
  2103                          
  2104                          RESET:
  2105                              cld
  2106                              ldx #$FF
  2107                              txs
  2108                              jsr JUART_INIT
  2109                              cli
  2110                              jmp start
  2111                          ; !ifdef MINIMUM
  2112                          } else { ; not MINIMUM
  2113                          brk64:
  2114  8bb8 68                     pla
  2115  8bb9 a8                     tay
  2116  8bba 68                     pla
  2117  8bbb aa                     tax
  2118  8bbc 68                     pla
  2119  8bbd 8d3792                 sta registerA
  2120  8bc0 68                     pla
  2121  8bc1 8d3b92                 sta registerSR
  2122  8bc4 68                     pla
  2123  8bc5 38                     sec
  2124  8bc6 e902                   sbc #2
  2125  8bc8 8d3c92                 sta registerPC
  2126  8bcb 68                     pla
  2127  8bcc e900                   sbc #0
  2128  8bce 8d3d92                 sta registerPC+1
  2129  8bd1 a98b                   lda #>save_regs_and_stack
  2130  8bd3 48                     pha
  2131  8bd4 a901                   lda #<save_regs_and_stack
  2132  8bd6 48                     pha
  2133  8bd7 ad3b92                 lda registerSR
  2134  8bda 48                     pha
  2135  8bdb ad3792                 lda registerA
  2136  8bde 40                     rti
  2137                          }
  2138                          
  2139                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2140                          ; data
  2141                          
  2142                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  2143                          ninst = 56
  2144  8bdf 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  2145  8c17 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  2146  8c4f 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  2147                          
  2148                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  2149                          mode_jmptable:
  2150  8c87 1d82               !word dispModeAcc-1; 0 Accumulator 1
  2151  8c89 2282               !word dispModeNone-1 ; 1 None 1
  2152  8c8b 2382               !word dispModeImm-1 ; 2 Immediate 2
  2153  8c8d 3482               !word dispModeIndX-1 ; 3 IndirectX 2
  2154  8c8f 5482               !word dispModeIndY-1 ; 4 IndirectY 2
  2155  8c91 7482               !word dispModeRel-1 ; 5 Relative 2
  2156  8c93 2882               !word dispModeZP-1 ; 6 ZeroPage 2
  2157  8c95 b082               !word dispModeZPX-1 ; 7 ZeroPageX 2
  2158  8c97 bd82               !word dispModeZPY-1 ; 8 ZeroPageY 2
  2159  8c99 ca82               !word dispModeAbs-1 ; 9 Absolute 3
  2160  8c9b dc82               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  2161  8c9d e982               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  2162  8c9f f682               !word dispModeInd-1 ; 12 Indirect 3
  2163                          
  2164                          nmodes = 13
  2165                          
  2166                          mode_sorted:
  2167  8ca1 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  2168                          
  2169                          !ifdef MINIMUM {
  2170                          mode_0: !text "Accumulator", 0, "A", 0
  2171                          mode_1: !text "None", 0, 8, 0
  2172                          mode_2: !text "Immediate", 0, "#$12", 0
  2173                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  2174                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  2175                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  2176                          mode_6: !text "ZeroPage", 0, "$12", 0
  2177                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  2178                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  2179                          mode_9: !text "Absolute", 0, "$1234", 0
  2180                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  2181                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  2182                          mode_12: !text "Indirect", 0, "($1234)", 0
  2183                          } else {
  2184  8cae 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2185  8cbc 4e4f4e45001400     mode_1: !text "NONE", 0, 20, 0
  2186  8cc3 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2187  8cd2 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2188  8ce4 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2189  8cf6 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2190  8d15 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2191  8d22 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2192  8d32 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2193  8d42 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2194  8d51 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2195  8d63 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2196  8d75 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2197                          }
  2198                          
  2199                          modes: ; table for easily displaying each mode_example
  2200  8d86 ae8c               !word mode_0
  2201  8d88 bc8c               !word mode_1
  2202  8d8a c38c               !word mode_2
  2203  8d8c d28c               !word mode_3
  2204  8d8e e48c               !word mode_4
  2205  8d90 f68c               !word mode_5
  2206  8d92 158d               !word mode_6
  2207  8d94 228d               !word mode_7
  2208  8d96 328d               !word mode_8
  2209  8d98 428d               !word mode_9
  2210  8d9a 518d               !word mode_10
  2211  8d9c 638d               !word mode_11
  2212  8d9e 758d               !word mode_12
  2213                          
  2214                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2215                          nopcodes = 151
  2216  8da0 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2217  8e37 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2218  8ece 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2219                          
  2220                          copyright 
  2221                          ;                  1         2         3         4
  2222                          ;         1234567890123456789012345678901234567890
  2223  8f65 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2224                          !ifdef C64TERMINAL {
  2225                              !text 13, "(TERMINAL VERSION)"
  2226                          }
  2227  8f85 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2228  8fab 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2229  8fc2 00                 !text 0
  2230                          
  2231                          firsthelp
  2232                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2233  8fc3 0d0d               !text 13, 13
  2234  8fc5 54595045203f2046...!text "TYPE ? FOR HELP"
  2235  8fd4 0d00               !text 13, 0
  2236                          
  2237                          !ifndef MINIMUM {
  2238                          ; C64 only
  2239                          extra_help:
  2240  8fd6 5820202020202020...    !text "X           (EXIT MONITOR)", 13
  2241  8ff1 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S  (SAVE)", 13
  2242  9013 00                     !text 0
  2243                          
  2244                          !ifdef C64SCREEN {
  2245  9014 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  2246  901b 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  2247                          }
  2248                          
  2249                          }
  2250                          
  2251  9022 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2252                          
  2253                          generalhelp
  2254  9033 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2255  9059 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2256  907e 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2257  90a1 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2258  90c9 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2259  90e5 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2260  9105 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2261  9127 00                 !text 0
  2262                          generalhelp2
  2263  9128 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2264  914d 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2265  9169 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2266  9188 3f20412020202020...!text "? A         (LIST 6502 INSTRUCTIONS)", 13
  2267  91ad 3f20414443202020...!text "? ADC       (/ADC/ ADDRESSING MODES)", 13
  2268  91d2 3f204d4f44452020...!text "? MODE      (ADDRESSING MODES)", 13
  2269  91f1 3f2e202020202020...!text "?.          (DISPLAY REGISTERS)", 13
  2270  9211 00                 !text 0
  2271                          
  2272  9212 4d4f444500         modes_keyword !text "MODE", 0
  2273                          
  2274  9217 2050432020204e56...reg_header !text " PC   NV-BDIZC .A .X .Y .S", 13, '.', 0
  2275                          
  2276                          !ifdef MINIMUM {
  2277                          registerA = $def9
  2278                          registerX = $defa
  2279                          registerY = $defb
  2280                          registerSP = $defc
  2281                          registerSR = $defd
  2282                          registerPC = $defe;/f
  2283                          savestack = $df00
  2284                          } else {
  2285  9234 0000               savebrkvector !word 0
  2286  9236 00                 drive !byte 0
  2287  9237 00                 registerA !byte 0
  2288  9238 00                 registerX !byte 0
  2289  9239 00                 registerY !byte 0
  2290  923a 00                 registerSP !byte 0
  2291  923b 00                 registerSR !byte 0
  2292  923c 0000               registerPC !word 0
  2293                          savestack ; 256 bytes
  2294  923e 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2295  924e 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2296  925e 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2297  926e 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2298  927e 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2299  928e 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2300  929e 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2301  92ae 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2302  92be 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2303  92ce 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2304  92de 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2305  92ee 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2306  92fe 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2307  930e 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2308  931e 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2309  932e 0000000000000000...!byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  2310                          }
  2311                          
  2312                          !ifdef MINIMUM {
  2313                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2314                          ; JUMP table for some stability
  2315                          * = $FFEE
  2316                          JUART_INIT: JMP UART_INIT
  2317                          JUART_OUT: JMP UART_OUT
  2318                          JUART_IN: JMP UART_IN
  2319                          JUART_CHK: JMP UART_CHK
  2320                          
  2321                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2322                          ; 6502 vectors 
  2323                          * = $fffa
  2324                              !word NMI
  2325                              !word RESET
  2326                              !word IRQ
  2327                          } else { // C64
  2328                              !if * > $a000 {
  2329                                  !error "code/data overran $a000"
  2330                              }
  2331                          }
  2332                          
  2333                          finish = *
