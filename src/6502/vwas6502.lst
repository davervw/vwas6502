
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<<
     5                          ;; >>>       ****************************************************        <<<
     6                          ;; >>>       **           TARGETS:                              *        <<<
     7                          ;; >>>       ** (1)  C64 8000-9FFF screen editor                *        <<<
     8                          ;; >>>       ** (2)  C64 8000-9FFF terminal edition             *        <<<
     9                          ;; >>>       ** (3)  6502+MC6850 E000-FFFF minimum system       *        <<<
    10                          ;; >>>       *   56K(RAM),8K(ROM), 2 bytes IO for MC6850 UART   *        <<<
    11                          ;; >>>       ****************************************************        <<<
    12                          ;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          ;; MIT License
    15                          ;;
    16                          ;; Copyright (c) 2024 David R. Van Wagner
    17                          ;; davevw.com
    18                          ;;
    19                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    20                          ;; of this software and associated documentation files (the "Software"), to deal
    21                          ;; in the Software without restriction, including without limitation the rights
    22                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    23                          ;; copies of the Software, and to permit persons to whom the Software is
    24                          ;; furnished to do so, subject to the following conditions:
    25                          ;;
    26                          ;; The above copyright notice and this permission notice shall be included in all
    27                          ;; copies or substantial portions of the Software.
    28                          ;;
    29                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    30                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    31                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    32                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    33                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    34                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    35                          ;; SOFTWARE.
    36                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                          
    40                          ; Important! define exactly ONE target (set in build.sh)
    41                          ;C64SCREEN = 1
    42                          ;C64TERMINAL = 1
    43                          ;MINIMUM = 1
    44                          
    45                          ; options (set in build.sh)
    46                          ;NEEDECHO = 0
    47                          
    48                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                          
    50                          ;; _
    51                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    52                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    53                          ;; 1000 (display memory at $1000)
    54                          ;; 1000.2000 (display memory range $1000 to $2000)
    55                          ;; 1000. (display next screenful of memory starting at $1000)
    56                          ;; . (display next screenful of memory)
    57                          ;; 1000 r (JMP $1000)
    58                          ;; 1000: 01 02 03 (modify memory)
    59                          ;; (NEW SYNTAX)
    60                          ;; 1000 d (disassemble starting at address, for screenful)
    61                          ;; d (continue disassembling from last address)
    62                          ;; 1000 a (assemble starting at, interactive until empty line)
    63                          ;; a (continue assembling from last address)
    64                          ;; r (run from PC)
    65                          ;; x (exit monitor -- C64 only)
    66                          ;; ? (commands help)
    67                          ;; ?a (list instructions available)
    68                          ;; ?adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    69                          ;; ?mode (show addressing modes example syntax for 6502)
    70                          ;; 1000 "filename" 08 l (load absolute, address optional, drive address is optional)
    71                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    72                          ;; .? (display registers in format .1234 10110000 01 02 03 f6)
    73                          ;; .1234 10110000 01 02 03 f6 (set registers PC FLAGS A X Y S)
    74                          ;; .A:00 (change register, replace A with X, Y, S, P as appropriate, use space or colon as separator)
    75                          ;; (FUTURE SYNTAX, not implemented)
    76                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    77                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    78                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    79                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    80                          ;;
    81                          ;; (INTERACTIVE ASSEMBLER)
    82                          ;; 1000 _
    83                          ;;      ADC #$12
    84                          ;; 1000 69 12    ADC #$12
    85                          ;; 1002 _
    86                          ;;      JSR $1234
    87                          ;; 1002 20 34 12 JSR $1234
    88                          ;; 1005 _
    89                          ;;      RTS
    90                          ;; 1005 60       RTS
    91                          ;; 1006 _
    92                          ;;      XYZ
    93                          ;;      XYZ ?
    94                          ;; 1006 _
    95                          ;; _
    96                          ;;
    97                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    98                          ;; and can cursor up to revise,
    99                          ;;
   100                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
   101                          ;;
   102                          
   103                          ; global
   104                          inputbuf=$0200
   105                          
   106                          
   107                          ; kernal/system calls
   108                          
   109                          !ifdef MINIMUM {
   110                          charout=JUART_OUT
   111                          getkey=JUART_IN
   112                          }
   113                          
   114                          !ifdef C64SCREEN {
   115                          setlfs=$ffba
   116                          setnam=$ffbd
   117                          charin=$ffcf ; screen editor
   118                          charout=$ffd2
   119                          fload =$ffd5
   120                          fsave =$ffd8
   121                          getkey=$ffe4
   122                          }
   123                          
   124                          !ifdef C64TERMINAL {
   125                          setlfs=$ffba
   126                          setnam=$ffbd
   127                          charout=$ffd2
   128                          getkey=$ffe4
   129                          fsave =$ffd8
   130                          }
   131                          
   132                          ; zeropage
   133                          !ifdef MINIMUM {
   134                          ptr1=$fc ; and $fd
   135                          ptr3=$fe ; and $ff
   136                          }
   137                          
   138                          !ifdef MINIMUM {
   139                          * = $e000
   140                          first:
   141                              jmp start
   142                          } else { // any C64
   143                          * = $8000
   144                          first:
   145  8000 4c2080                 jmp init64
   146                          }
   147                          
   148                          test: ; all the addressing modes here for testing disassembly
   149  8003 ea                     nop
   150  8004 ad3412                 lda $1234
   151  8007 bd3412                 lda $1234,x
   152  800a b93412                 lda $1234,y
   153  800d 0a                     asl
   154  800e a912                   lda #$12
   155  8010 a112                   lda ($12,x)
   156  8012 b112                   lda ($12),y
   157  8014 6c3412                 jmp ($1234)
   158  8017 d0fe               -   bne -
   159  8019 a512                   lda $12
   160  801b b512                   lda $12,x
   161  801d b612                   ldx $12,y
   162  801f ff                     !byte $FF ; unknown
   163                          
   164                          !ifndef MINIMUM {
   165                              ; any C64
   166                          init64:    
   167                              ; check if irq/brk vector installed
   168  8020 ad1603                 lda $316
   169  8023 ae1703                 ldx $317
   170  8026 e08e                   cpx #>brk64
   171  8028 f010                   beq +
   172  802a 8da695                 sta savebrkvector
   173  802d 8ea795                 stx savebrkvector+1
   174  8030 a99e                   lda #<brk64
   175  8032 a28e                   ldx #>brk64
   176  8034 8d1603                 sta $316
   177  8037 8e1703                 stx $317
   178  803a 207280             +   jsr install_nmi64
   179                              ; check if BASIC RAM limited to exclude monitor
   180  803d a538                   lda 56
   181  803f c980                   cmp #>first
   182  8041 f00a                   beq +
   183  8043 9008                   bcc +
   184  8045 a980                   lda #>first
   185  8047 8538                   sta 56
   186  8049 a900                   lda #0
   187  804b 8537                   sta 55
   188                          +   ; fall through to start
   189                          }
   190                          
   191                          start:
   192  804d d8                     cld
   193  804e 58                     cli
   194  804f a94c                   lda #<copyright
   195  8051 a292                   ldx #>copyright
   196  8053 209a84                 jsr strout
   197  8056 a9aa                   lda #<firsthelp
   198  8058 a292                   ldx #>firsthelp
   199  805a 209a84                 jsr strout
   200  805d a901                   lda #1
   201  805f b8                     clv
   202  8060 08                     php
   203  8061 a900                   lda #0
   204  8063 aa                     tax
   205  8064 a8                     tay
   206  8065 28                     plp
   207  8066 4cf28d                 jmp save_registers
   208                          
   209                          input_loop:
   210  8069 20bb84                 jsr inputline
   211  806c 20be84                 jsr parseline
   212  806f 4c6980                 jmp input_loop
   213                          
   214                          !ifndef MINIMUM {
   215                          ; C64 only
   216                          
   217                          install_nmi64:
   218                              ; check if nmi vector installed
   219  8072 ad1803                 lda $318
   220  8075 ae1903                 ldx $319
   221  8078 e08e                   cpx #>nmi64
   222  807a f010                   beq +
   223  807c 8da895                 sta savenmivector
   224  807f 8ea995                 stx savenmivector+1
   225  8082 a97f                   lda #<nmi64
   226  8084 a28e                   ldx #>nmi64
   227  8086 8d1803                 sta $318
   228  8089 8e1903                 stx $319
   229  808c 60                 +   rts
   230                          
   231                          uninstall_nmi64:
   232  808d ada895                 lda savenmivector
   233  8090 aea995                 ldx savenmivector+1
   234  8093 8d1803                 sta $318
   235  8096 8e1903                 stx $319
   236  8099 60                     rts
   237                          
   238                          chkextrac64:
   239  809a 20a680                 jsr chkexit
   240  809d d003                   bne +
   241  809f 4cbb80                 jmp execute_exit
   242  80a2 18                 +   clc ; no error
   243  80a3 a201                   ldx #1 ; Z false - not consumed
   244  80a5 60                     rts
   245                          
   246                          chkexit:
   247  80a6 b90002                 lda inputbuf, y
   248  80a9 c958                   cmp #'X'
   249  80ab d009                   bne +
   250  80ad c8                     iny
   251  80ae cc9f95                 cpy len ; validate no extra characters
   252  80b1 f003                   beq +
   253  80b3 4cb780                 jmp extra_error
   254  80b6 60                 +   rts
   255                          
   256                          extra_error:
   257                              ; pop local return address
   258  80b7 68                     pla
   259  80b8 68                     pla
   260  80b9 38                     sec ; error
   261  80ba 60                     rts
   262                          
   263                          execute_exit:
   264  80bb ada695                 lda savebrkvector
   265  80be aea795                 ldx savebrkvector+1
   266  80c1 8d1603                 sta $316
   267  80c4 8e1703                 stx $317
   268  80c7 208d80                 jsr uninstall_nmi64
   269                              ; pop monitor return addresses, so only original caller is left
   270  80ca 68                     pla
   271  80cb 68                     pla
   272  80cc 68                     pla
   273  80cd 68                     pla
   274  80ce 68                     pla
   275  80cf 68                     pla
   276  80d0 60                     rts
   277                          
   278                          display_extra_help:
   279  80d1 a9bd                   lda #<extra_help
   280  80d3 a292                   ldx #>extra_help
   281  80d5 4c9a84                 jmp strout
   282                          
   283                          !ifdef C64SCREEN {
   284                          display_page_disassemble:
   285  80d8 ad688e                 lda ptr1
   286  80db ae698e                 ldx ptr1+1
   287  80de 201084                 jsr disphexword
   288  80e1 a929                   lda #<page_disassemble
   289  80e3 a293                   ldx #>page_disassemble
   290  80e5 4c9a84                 jmp strout
   291                          
   292                          display_page_displaymemory:
   293  80e8 20e88d                 jsr newline
   294  80eb ad688e                 lda ptr1
   295  80ee ae698e                 ldx ptr1+1
   296  80f1 201084                 jsr disphexword
   297  80f4 a930                   lda #<page_displaymemory
   298  80f6 a293                   ldx #>page_displaymemory
   299  80f8 4c9a84                 jmp strout
   300                          
   301                          inputlinec64:
   302  80fb a000                   ldy #0
   303  80fd 20cfff             -   jsr charin
   304  8100 990002                 sta inputbuf,y
   305  8103 c8                     iny
   306  8104 c90d                   cmp #13
   307  8106 d0f5                   bne -
   308  8108 60                     rts
   309                          
   310                          continueassemblec64:
   311  8109 a914                   lda #20
   312  810b 20d2ff                 jsr charout
   313  810e 20d2ff                 jsr charout
   314  8111 ad688e                 lda ptr1
   315  8114 ae698e                 ldx ptr1+1
   316  8117 201084                 jsr disphexword
   317  811a a920                   lda #' '
   318  811c 20d2ff                 jsr charout
   319  811f 20d2ff                 jsr charout
   320  8122 4cd2ff                 jmp charout
   321                          }
   322                          
   323                          chkfilename:
   324  8125 20ef8c                 jsr skipspaces
   325  8128 8ca395                 sty tmp
   326  812b b90002                 lda inputbuf, y
   327  812e c922                   cmp #34 ; double quote
   328  8130 d025                   bne ++
   329  8132 c8                 -   iny
   330  8133 b90002                 lda inputbuf, y
   331  8136 c90d                   cmp #13
   332  8138 d005                   bne +
   333  813a aca395                 ldy tmp
   334  813d d018                   bne ++
   335  813f c922               +   cmp #34 ; double quote
   336  8141 d0ef                   bne -
   337  8143 98                     tya ; index of ending double quotes
   338  8144 48                     pha ; save
   339  8145 18                     clc ; will subtract one more
   340  8146 eda395                 sbc tmp ; subtract index of first quote, have filename length
   341  8149 aea395                 ldx tmp
   342  814c e8                     inx ; low address of filename
   343  814d a002                   ldy #>inputbuf ; high address of filename
   344  814f 20bdff                 jsr setnam
   345  8152 68                     pla
   346  8153 a8                     tay
   347  8154 c8                     iny ; advance past ending double quotes
   348  8155 a900                   lda #0 ; set Z true
   349  8157 60                 ++  rts
   350                          
   351                          check_execute_save:
   352  8158 202581             +   jsr chkfilename
   353  815b f006                   beq +
   354  815d 20c68c                 jsr reporterr
   355  8160 a201                   ldx #1 ; set Z false
   356  8162 60                     rts
   357  8163 208a81             +   jsr chkoptionaldrive
   358  8166 20a081                 jsr chksave
   359  8169 d005                   bne +
   360  816b 20b281                 jsr executesave
   361  816e a200                   ldx #0 ; set Z true
   362  8170 60                 +   rts
   363                          
   364                          check_execute_load:
   365  8171 202581             +   jsr chkfilename
   366  8174 f006                   beq +
   367  8176 20c68c                 jsr reporterr
   368  8179 a201                   ldx #1 ; set Z false
   369  817b 60                     rts
   370  817c 208a81             +   jsr chkoptionaldrive
   371  817f 20a981                 jsr chkload
   372  8182 d005                   bne +
   373  8184 20e781                 jsr executeload
   374  8187 a200                   ldx #0 ; set Z true
   375  8189 60                 +   rts
   376                          
   377                          chkoptionaldrive:
   378  818a a908                   lda #8
   379  818c 8daa95                 sta drive
   380  818f 20ef8c                 jsr skipspaces
   381  8192 20458d                 jsr chkhexbyte
   382  8195 d008                   bne +
   383  8197 8daa95                 sta drive
   384  819a 20ef8c                 jsr skipspaces
   385  819d a900                   lda #0 ; set Z true
   386  819f 60                 +   rts
   387                          
   388                          chksave:
   389  81a0 20ef8c                 jsr skipspaces
   390  81a3 b90002                 lda inputbuf, y
   391  81a6 c953                   cmp #'S'
   392  81a8 60                     rts
   393                          
   394                          chkload:
   395  81a9 20ef8c                 jsr skipspaces
   396  81ac b90002                 lda inputbuf, y
   397  81af c94c                   cmp #'L'
   398  81b1 60                     rts
   399                          
   400                          executesave:
   401  81b2 20e88d                 jsr newline
   402  81b5 a522                   lda $22
   403  81b7 48                     pha
   404  81b8 a523                   lda $23
   405  81ba 48                     pha
   406  81bb ad688e                 lda ptr1
   407  81be 8522                   sta $22
   408  81c0 ad698e                 lda ptr1+1
   409  81c3 8523                   sta $23
   410  81c5 a9c0                   lda #$c0 ; KERNAL control and error messages
   411  81c7 859d                   sta $9d ; set messages to be displayed
   412  81c9 a901                   lda #1
   413  81cb aeaa95                 ldx drive
   414  81ce a00f                   ldy #15
   415  81d0 20baff                 jsr setlfs
   416  81d3 a922                   lda #$22
   417  81d5 aea495                 ldx ptr2
   418  81d8 aca595                 ldy ptr2+1
   419  81db 20d8ff                 jsr fsave
   420  81de 68                     pla
   421  81df 8523                   sta $23
   422  81e1 68                     pla
   423  81e2 8522                   sta $22
   424  81e4 4ce88d                 jmp newline
   425                          
   426                          executeload:
   427  81e7 20e88d                 jsr newline
   428  81ea a9c0                   lda #$c0 ; KERNAL control and error messages
   429  81ec 859d                   sta $9d ; set messages to be displayed
   430  81ee a900                   lda #0 ; load
   431  81f0 aeaa95                 ldx drive
   432  81f3 a001                   ldy #1 ; force load at address
   433  81f5 20baff                 jsr setlfs
   434  81f8 ae688e                 ldx ptr1
   435  81fb ac698e                 ldy ptr1+1
   436  81fe 20d5ff                 jsr fload
   437  8201 4ce88d                 jmp newline
   438                          }
   439                          
   440                          disassemble:
   441  8204 a917                   lda #23
   442  8206 8d9e95                 sta count
   443  8209 a000               -   ldy #0
   444  820b 20578e                 jsr lda_at_ptr1_y
   445  820e 203e82                 jsr find_opcode
   446  8211 20a882                 jsr disp_current
   447  8214 ad9d95                 lda size
   448  8217 1002                   bpl +
   449  8219 a901                   lda #1
   450  821b 18                 +   clc
   451  821c 6d688e                 adc ptr1
   452  821f 8d688e                 sta ptr1
   453  8222 9003                   bcc +
   454  8224 ee698e                 inc ptr1+1
   455  8227 ce9e95             +   dec count
   456  822a d0dd                   bne -
   457                          !ifdef C64SCREEN {
   458  822c 4cd880                 jmp display_page_disassemble
   459                          } else {
   460                              rts
   461                          }
   462                          
   463                          compareptrs:
   464  822f ad698e                 lda ptr1+1
   465  8232 cda595                 cmp ptr2+1
   466  8235 d006                   bne +
   467  8237 ad688e                 lda ptr1
   468  823a cda495                 cmp ptr2
   469  823d 60                 +   rts
   470                          
   471                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   472                          ; and properties updated in ZP globals size,inidx,opidx,mode
   473  823e a097                   ldy #nopcodes
   474  8240 a296                   ldx #nopcodes-1
   475  8242 dd8790             -   cmp opcodes,x
   476  8245 f010                   beq +
   477  8247 ca                     dex
   478  8248 88                     dey
   479  8249 d0f7                   bne -
   480  824b 18                     clc
   481  824c a901                   lda #1
   482  824e 8d9d95                 sta size
   483  8251 a9ff                   lda #$FF
   484  8253 aa                     tax
   485  8254 a8                     tay
   486  8255 900a                   bcc ++
   487  8257 bd1e91             +   lda instidx, x
   488  825a bcb591                 ldy modeidx, x
   489  825d 206b82                 jsr getsize
   490  8260 38                     sec
   491  8261 8d9b95             ++  sta inidx
   492  8264 8e9a95                 stx opidx
   493  8267 8c9c95                 sty mode
   494  826a 60                     rts
   495                          
   496                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   497                              ; result returned in size
   498  826b 48                     pha
   499  826c a901                   lda #1
   500  826e 8d9d95                 sta size
   501  8271 68                     pla
   502  8272 c002                   cpy #2 // Immediate
   503  8274 900a                   bcc +
   504  8276 ee9d95                 inc size
   505  8279 c009                   cpy #9 // Absolute
   506  827b 9003                   bcc +
   507  827d ee9d95                 inc size
   508  8280 60                 +   rts
   509                          
   510                          disp_opcode: ; .A opcode byte
   511  8281 203e82                 jsr find_opcode
   512  8284 8a                     txa
   513                              ; fall through to display instruction
   514                          
   515                          dispinst: ; .A instruction index 0..55, note modifies A and X
   516  8285 aa                     tax
   517  8286 e038                   cpx #ninst
   518  8288 b012                   bcs +
   519  828a bdc68e                 lda inst0, x
   520  828d 20d2ff                 jsr charout
   521  8290 bdfe8e                 lda inst1, x
   522  8293 20d2ff                 jsr charout
   523  8296 bd368f                 lda inst2, x
   524  8299 4cd2ff                 jmp charout
   525  829c a93f               +   lda #'?'
   526  829e 20d2ff                 jsr charout
   527  82a1 20d2ff                 jsr charout
   528  82a4 20d2ff                 jsr charout
   529  82a7 60                     rts
   530                          
   531                          disp_current:
   532  82a8 ad688e                 lda ptr1
   533  82ab ae698e                 ldx ptr1+1
   534  82ae 201084                 jsr disphexword
   535  82b1 a920                   lda #$20
   536  82b3 20d2ff                 jsr charout
   537  82b6 a000                   ldy #0
   538  82b8 ae9d95                 ldx size
   539  82bb 20578e             -   jsr lda_at_ptr1_y
   540  82be 201684                 jsr disphexbyte
   541  82c1 a920                   lda #$20
   542  82c3 20d2ff                 jsr charout
   543  82c6 c8                     iny
   544  82c7 ca                     dex
   545  82c8 d0f1                   bne -
   546  82ca c003               -   cpy #3
   547  82cc f00e                   beq +
   548  82ce a920                   lda #$20
   549  82d0 20d2ff                 jsr charout
   550  82d3 20d2ff                 jsr charout
   551  82d6 20d2ff                 jsr charout
   552  82d9 c8                     iny
   553  82da d0ee                   bne -
   554  82dc ad9b95             +   lda inidx
   555  82df 208582                 jsr dispinst
   556  82e2 a920                   lda #$20
   557  82e4 20d2ff                 jsr charout
   558  82e7 20ef82                 jsr disp_mode
   559  82ea a90d                   lda #13
   560  82ec 4cd2ff                 jmp charout
   561                          
   562                          disp_mode
   563  82ef ad9c95                 lda mode
   564  82f2 c90d                   cmp #13
   565  82f4 b00a                   bcs +
   566  82f6 0a                     asl
   567  82f7 aa                     tax
   568  82f8 bd6f8f                 lda mode_jmptable+1,x
   569  82fb 48                     pha
   570  82fc bd6e8f                 lda mode_jmptable,x
   571  82ff 48                     pha
   572  8300 60                 +   rts
   573                          
   574                          dispModeAcc:
   575  8301 a941                   lda #'A'
   576  8303 4cd2ff                 jmp charout
   577                          
   578                          dispModeNone:
   579  8306 60                     rts
   580                          
   581                          dispModeImm:
   582  8307 a923                   lda #'#'
   583  8309 20d2ff                 jsr charout
   584                          dispModeZP:
   585  830c a924                   lda #'$'
   586  830e 20d2ff                 jsr charout
   587  8311 a001                   ldy #1
   588  8313 20578e                 jsr lda_at_ptr1_y
   589  8316 4c1684                 jmp disphexbyte
   590                          
   591                          dispModeIndX:
   592  8319 a928                   lda #'('
   593  831b 20d2ff                 jsr charout
   594  831e a924                   lda #'$'
   595  8320 20d2ff                 jsr charout
   596  8323 a001                   ldy #1
   597  8325 20578e                 jsr lda_at_ptr1_y
   598  8328 201684                 jsr disphexbyte
   599  832b a92c                   lda #','
   600  832d 20d2ff                 jsr charout
   601  8330 a958                   lda #'X'
   602  8332 20d2ff                 jsr charout
   603  8335 a929                   lda #')'
   604  8337 4cd2ff                 jmp charout
   605                          
   606                          dispModeIndY:
   607  833a a928                   lda #'('
   608  833c 20d2ff                 jsr charout
   609  833f a924                   lda #'$'
   610  8341 20d2ff                 jsr charout
   611  8344 a001                   ldy #1
   612  8346 20578e                 jsr lda_at_ptr1_y
   613  8349 201684                 jsr disphexbyte
   614  834c a929                   lda #')'
   615  834e 20d2ff                 jsr charout
   616  8351 a92c                   lda #','
   617  8353 20d2ff                 jsr charout
   618  8356 a959                   lda #'Y'
   619  8358 4cd2ff                 jmp charout
   620                          
   621                          dispModeRel:
   622  835b a924                   lda #'$'
   623  835d 20d2ff                 jsr charout
   624  8360 18                     clc
   625  8361 ad688e                 lda ptr1
   626  8364 6902                   adc #2
   627  8366 8d7c8e                 sta ptr3
   628  8369 ad698e                 lda ptr1+1
   629  836c 6900                   adc #0
   630  836e 8d7d8e                 sta ptr3+1
   631  8371 a001                   ldy #1
   632  8373 20578e                 jsr lda_at_ptr1_y
   633  8376 1019                   bpl +
   634                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   635  8378 49ff                   eor #$FF ; inverse
   636  837a 18                     clc
   637  837b 6901                   adc #1 ; complete getting absolute value from two's complement
   638  837d 8da395                 sta tmp
   639  8380 38                     sec
   640  8381 ad7c8e                 lda ptr3
   641  8384 eda395                 sbc tmp
   642  8387 8d7c8e                 sta ptr3
   643  838a b011                   bcs ++
   644  838c ce7d8e                 dec ptr3+1
   645  838f 900c                   bcc ++
   646  8391 18                 +   clc ; simple case of adding
   647  8392 6d7c8e                 adc ptr3
   648  8395 8d7c8e                 sta ptr3
   649  8398 9003                   bcc ++
   650  839a ee7d8e                 inc ptr3+1
   651  839d ad7c8e             ++  lda ptr3
   652  83a0 ae7d8e                 ldx ptr3+1
   653  83a3 4c1084                 jmp disphexword
   654                          
   655                          dispModeZPX:
   656  83a6 200c83                 jsr dispModeZP
   657  83a9 a92c                   lda #','
   658  83ab 20d2ff                 jsr charout
   659  83ae a958                   lda #'X'
   660  83b0 4cd2ff                 jmp charout
   661                          
   662                          dispModeZPY:
   663  83b3 200c83                 jsr dispModeZP
   664  83b6 a92c                   lda #','
   665  83b8 20d2ff                 jsr charout
   666  83bb a959                   lda #'Y'
   667  83bd 4cd2ff                 jmp charout
   668                          
   669                          dispModeAbs:
   670  83c0 a924                   lda #'$'
   671  83c2 20d2ff                 jsr charout
   672  83c5 a001                   ldy #1
   673  83c7 20578e                 jsr lda_at_ptr1_y
   674  83ca 48                     pha
   675  83cb c8                     iny
   676  83cc 20578e                 jsr lda_at_ptr1_y
   677  83cf aa                     tax
   678  83d0 68                     pla
   679  83d1 4c1084                 jmp disphexword
   680                          
   681                          dispModeAbsX:
   682  83d4 20c083                 jsr dispModeAbs
   683  83d7 a92c                   lda #','
   684  83d9 20d2ff                 jsr charout
   685  83dc a958                   lda #'X'
   686  83de 4cd2ff                 jmp charout
   687                          
   688                          dispModeAbsY:
   689  83e1 20c083                 jsr dispModeAbs
   690  83e4 a92c                   lda #','
   691  83e6 20d2ff                 jsr charout
   692  83e9 a959                   lda #'Y'
   693  83eb 4cd2ff                 jmp charout
   694                          
   695                          dispModeInd:
   696  83ee a928                   lda #'('
   697  83f0 20d2ff                 jsr charout
   698  83f3 20c083                 jsr dispModeAbs
   699  83f6 a929                   lda #')'
   700  83f8 4cd2ff                 jmp charout
   701                          
   702                          dispbinbyte: ; .A 00..FF
   703  83fb a208                   ldx #8
   704  83fd 8da395                 sta tmp
   705  8400 a930               -   lda #'0'
   706  8402 2ea395                 rol tmp
   707  8405 9002                   bcc +
   708  8407 a931                   lda #'1'
   709  8409 20d2ff             +   jsr charout
   710  840c ca                     dex
   711  840d d0f1                   bne -
   712  840f 60                     rts
   713                          
   714                          disphexword: ; .A low, .X high, 0000..FFFF
   715  8410 48                     pha
   716  8411 8a                     txa
   717  8412 201684                 jsr disphexbyte
   718  8415 68                     pla
   719                              ;fall through to call again
   720                          
   721                          disphexbyte: ; .A 00..FF
   722  8416 48                     pha
   723  8417 4a                     lsr
   724  8418 4a                     lsr
   725  8419 4a                     lsr
   726  841a 4a                     lsr
   727  841b 201f84                 jsr disphexnybble
   728  841e 68                     pla
   729                              ;fall through to call again
   730                          
   731                          disphexnybble: ; .A 0..F
   732  841f 290f                   and #$0F
   733  8421 0930                   ora #$30
   734  8423 c93a                   cmp #$3A
   735  8425 9002                   bcc +
   736  8427 6906                   adc #$06
   737  8429 4cd2ff             +   jmp charout
   738                          
   739                          inputhexword: ; C set if fails
   740  842c a900                   lda #0
   741  842e 8d688e                 sta ptr1
   742  8431 8d698e                 sta ptr1+1
   743                          
   744  8434 a904                   lda #4 ; word is at most 4 nybbles
   745  8436 8d9e95                 sta count
   746  8439 207c84             --  jsr inputhexnybble
   747  843c b015                   bcs +
   748                          
   749                              ; shift nibble up
   750  843e 0a                     asl
   751  843f 0a                     asl
   752  8440 0a                     asl
   753  8441 0a                     asl
   754                          
   755  8442 a204                   ldx #4 ; 4 bits rotated into word
   756  8444 2a                 -   rol
   757  8445 2e688e                 rol ptr1
   758  8448 2e698e                 rol ptr1+1
   759  844b ca                     dex
   760  844c d0f6                   bne - ; repeat bits
   761                          
   762  844e ce9e95                 dec count
   763  8451 d0e6                   bne -- ; repeat nybbles
   764                          
   765  8453 ad9e95             +   lda count
   766  8456 c904                   cmp #4 ; set C if 4, otherwise clear
   767  8458 60                     rts
   768                          
   769                          inputhexbyte:
   770  8459 207c84                 jsr inputhexnybble
   771  845c b01d                   bcs ++
   772  845e 8da395                 sta tmp
   773  8461 207c84                 jsr inputhexnybble
   774  8464 9006                   bcc +
   775  8466 18                     clc ; allow single digit as byte
   776  8467 ada395                 lda tmp
   777  846a 900f                   bcc ++
   778  846c 0ea395             +   asl tmp
   779  846f 0ea395                 asl tmp
   780  8472 0ea395                 asl tmp
   781  8475 0ea395                 asl tmp
   782  8478 0da395                 ora tmp ; necessary to assemble the two nybbles
   783  847b 60                 ++  rts
   784                          
   785                          inputhexnybble:
   786  847c b90002                 lda $0200,y
   787  847f 297f                   and #$7F
   788  8481 38                     sec
   789  8482 e930                   sbc #$30
   790  8484 9012                   bcc ++
   791  8486 c90a                   cmp #10
   792  8488 900c                   bcc +
   793  848a e907                   sbc #7
   794  848c 900a                   bcc ++
   795  848e c90a                   cmp #10
   796  8490 9006                   bcc ++
   797  8492 c910                   cmp #16
   798  8494 b002                   bcs ++
   799  8496 c8                 +   iny
   800  8497 60                     rts
   801  8498 38                 ++  sec
   802  8499 60                     rts
   803                          
   804                          strout:
   805  849a 8d7c8e                 sta ptr3
   806  849d 8e7d8e                 stx ptr3+1
   807                          strout2:
   808  84a0 a000                   ldy #0
   809  84a2 206b8e             -   jsr lda_at_ptr3_y
   810  84a5 f006                   beq +
   811  84a7 20d2ff                 jsr charout
   812  84aa c8                     iny
   813  84ab d0f5                   bne -
   814  84ad 98                 +   tya
   815  84ae 38                     sec
   816  84af 6d7c8e                 adc ptr3
   817  84b2 8d7c8e                 sta ptr3
   818  84b5 9003                   bcc +
   819  84b7 ee7d8e                 inc ptr3+1
   820  84ba 60                 +   rts
   821                          
   822                          inputline:
   823                          !ifdef C64SCREEN {
   824  84bb 4cfb80                 jmp inputlinec64
   825                          } else {
   826                              ldy #0
   827                          --  sty count
   828                          -   jsr getkey
   829                              beq -
   830                              ldy count
   831                          !ifdef MINIMUM {
   832                              cmp #8 ; backspace
   833                          } else {
   834                              cmp #20
   835                          }
   836                              bne +
   837                              cpy #0
   838                              beq -
   839                              dey
   840                          !if NEEDECHO = 1 {
   841                              jsr charout
   842                          }
   843                              jmp --
   844                          +   cmp #13
   845                              beq +
   846                              cmp #' '
   847                              bcc -
   848                              cmp #128
   849                              bcs -
   850                          +
   851                          !if NEEDECHO = 1 {
   852                              jsr charout
   853                          }
   854                              sta inputbuf,y
   855                              iny
   856                              cmp #13
   857                              bne --
   858                              rts
   859                          }
   860                          
   861                          parseline:
   862  84be c001                   cpy #1
   863  84c0 d003                   bne +
   864                          -
   865                          !ifdef C64SCREEN {
   866  84c2 4ce88d                 jmp newline
   867                          } else {
   868                              rts
   869                          }
   870  84c5 88                 +   dey
   871  84c6 8c9f95                 sty len
   872                              ; skip whitespace
   873                              ; check for address, put in ptr1
   874                              ; or check for dot, then require address put in ptr2
   875                              ; or check for ?, and optional parameter, execute help
   876                              ; check for whitespace
   877                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   878                              ; check for string, store at start of inputbuf
   879                              ; check for drive number
   880                              ; check for whitespace
   881                              ; check command ":rda?mls", execute command
   882  84c9 a000                   ldy #0
   883  84cb 20ef8c                 jsr skipspaces
   884  84ce cc9f95                 cpy len
   885  84d1 f0ef                   beq -
   886  84d3 20938c                 jsr chkcontinuedis
   887  84d6 d003                   bne +
   888  84d8 20b78c                 jsr executedisassemble ; note won't return
   889  84db 20a58c             +   jsr chkcontinueasm
   890  84de d003                   bne +
   891  84e0 206088                 jsr continueassemble ; note won't return
   892  84e3 200885             +   jsr chkexecutepc ; not won't return
   893  84e6 20fe8c                 jsr chkdot
   894  84e9 d003                   bne +
   895  84eb 4c0086                 jmp executedot
   896  84ee 20098d             +   jsr chkhelp
   897  84f1 d003                   bne +
   898  84f3 4cca86                 jmp executehelp
   899                          +
   900                          !ifndef MINIMUM {
   901  84f6 209a80                 jsr chkextrac64 ; check syntax only available on C64
   902  84f9 b01e                   bcs + ; error if C set
   903  84fb f005                   beq ++ ; consumed if Z set, skip next test(s)
   904                          }
   905  84fd 203c8d                 jsr chkhexaddr1
   906  8500 d003                   bne error
   907  8502 4c1a85             ++  jmp executeaddr1
   908                          error:
   909  8505 4cc68c                 jmp reporterr
   910                          
   911                          chkexecutepc:
   912  8508 b90002                 lda inputbuf, y
   913  850b c952                   cmp #'R'
   914  850d d00a                   bne +
   915  850f b90102                 lda inputbuf+1, y
   916  8512 c90d                   cmp #13
   917  8514 d003                   bne +
   918  8516 4c748c                 jmp executerun
   919  8519 60                 +   rts
   920                          
   921                          executeaddr1:
   922  851a cc9f95                 cpy len
   923  851d d003                   bne +
   924  851f 4c7c85                 jmp executedisplay1
   925  8522 20fe8c             +   jsr chkdot
   926  8525 d011                   bne +
   927  8527 cc9f95                 cpy len
   928  852a f020                   beq executepagedisplay
   929  852c 205e8d                 jsr chkhexaddr2
   930  852f d0d4                   bne error
   931  8531 18                     clc
   932  8532 6ea295                 ror flag
   933  8535 4c6b85                 jmp executeaddr12
   934  8538 20ef8c             +   jsr skipspaces
   935  853b 20148d                 jsr chkcolon
   936  853e d003                   bne +
   937  8540 4cd885                 jmp executemodify
   938  8543 20ab8d             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   939                          !ifdef MINIMUM {
   940                              jmp reportnotimplemented
   941                          } else {
   942  8546 207181                 jsr check_execute_load
   943  8549 d0ba                   bne error
   944  854b 60                     rts
   945                          }
   946                          
   947                          executepagedisplay:
   948  854c ad688e                 lda ptr1
   949  854f 18                     clc
   950                          !ifdef MINIMUM {
   951                              adc #$5f
   952                          } else {
   953  8550 69b7                   adc #$b7
   954                          }
   955  8552 8da495                 sta ptr2
   956  8555 ad698e                 lda ptr1+1
   957                          !ifdef MINIMUM {
   958                              adc #$01
   959                          } else {
   960  8558 6900                   adc #$00
   961                          }
   962  855a 8da595                 sta ptr2+1
   963  855d 9008                   bcc +
   964  855f a9ff                   lda #$ff
   965  8561 8da495                 sta ptr2
   966  8564 8da595                 sta ptr2+1
   967  8567 38                 +   sec
   968  8568 6ea295                 ror flag
   969                              ; fall through to executeaddr12
   970                          
   971                          executeaddr12:
   972  856b cc9f95                 cpy len
   973  856e d003                   bne +
   974  8570 4c8885                 jmp executedisplay12
   975                          !ifndef MINIMUM { // any C64
   976  8573 205881             +   jsr check_execute_save
   977  8576 f003                   beq ++
   978                          }
   979  8578 4cbf8c             +   jmp reportnotimplemented
   980  857b 60                 ++  rts
   981                          
   982                          executedisplay1:
   983  857c ad688e                 lda ptr1
   984  857f 8da495                 sta ptr2
   985  8582 ad698e                 lda ptr1+1
   986  8585 8da595                 sta ptr2+1
   987                              ; fall through executedisplay12
   988                          
   989                          executedisplay12:
   990  8588 a9ff                   lda #$ff
   991  858a 8d9e95                 sta count
   992  858d ee9e95             -   inc count
   993  8590 ad9e95                 lda count
   994                          !ifdef MINIMUM {
   995                              and #$0f
   996                          } else {
   997  8593 2907                   and #$07
   998                          }
   999  8595 d018                   bne +
  1000  8597 a90d                   lda #13
  1001  8599 20d2ff                 jsr charout
  1002  859c ad688e                 lda ptr1
  1003  859f ae698e                 ldx ptr1+1
  1004  85a2 201084                 jsr disphexword
  1005  85a5 a93a                   lda #':'
  1006  85a7 20d2ff                 jsr charout
  1007  85aa a920                   lda #' '
  1008  85ac 20d2ff                 jsr charout
  1009  85af a000               +   ldy #0
  1010  85b1 20578e                 jsr lda_at_ptr1_y
  1011  85b4 201684                 jsr disphexbyte
  1012  85b7 a920                   lda #' '
  1013  85b9 20d2ff                 jsr charout
  1014  85bc ee688e                 inc ptr1
  1015  85bf d005                   bne +
  1016  85c1 ee698e                 inc ptr1+1
  1017  85c4 f00f                   beq ++
  1018  85c6 202f82             +   jsr compareptrs
  1019  85c9 90c2                   bcc -
  1020  85cb f0c0                   beq -
  1021  85cd 2ca295                 bit flag
  1022  85d0 1003                   bpl ++
  1023                          !ifdef C64SCREEN {
  1024  85d2 4ce880                 jmp display_page_displaymemory
  1025                          }
  1026  85d5 4ce88d             ++  jmp newline
  1027                          
  1028                          executemodify:
  1029  85d8 20ef8c                 jsr skipspaces
  1030  85db cc9f95                 cpy len
  1031  85de f01d                   beq ++
  1032  85e0 201f8d                 jsr chkhexbyteofsequence
  1033  85e3 f003                   beq +
  1034  85e5 4c0585                 jmp error
  1035  85e8 8ca395             +   sty tmp
  1036  85eb a000                   ldy #0
  1037  85ed 20678e                 jsr sta_at_ptr1_y
  1038  85f0 ee688e                 inc ptr1
  1039  85f3 d003                   bne +
  1040  85f5 ee698e                 inc ptr1+1
  1041  85f8 aca395             +   ldy tmp
  1042  85fb d0db                   bne executemodify
  1043  85fd 4ce88d             ++  jmp newline
  1044                          
  1045                          executedot:
  1046  8600 cc9f95                 cpy len
  1047  8603 d003                   bne +
  1048  8605 4c4c85                 jmp executepagedisplay
  1049  8608 201086             +   jsr chkloadregister
  1050  860b d000                   bne +
  1051  860d 207086             +   jsr chkloadregisters
  1052                          
  1053                          chkloadregister:
  1054  8610 201a86                 jsr chkload_a_x_y_s_p
  1055  8613 206a86                 jsr chkload_pc
  1056  8616 206d86                 jsr chkload_n_v_b_d_i_z_c
  1057  8619 60                     rts
  1058                          
  1059                          chkload_a_x_y_s_p:
  1060  861a 8ca395                 sty tmp
  1061  861d b90002                 lda inputbuf, y
  1062  8620 a200                   ldx #0
  1063  8622 c941                   cmp #'A'
  1064  8624 f014                   beq +
  1065  8626 e8                     inx
  1066  8627 c958                   cmp #'X'
  1067  8629 f00f                   beq +
  1068  862b e8                     inx
  1069  862c c959                   cmp #'Y'
  1070  862e f00a                   beq +
  1071  8630 e8                     inx
  1072  8631 c953                   cmp #'S'
  1073  8633 f005                   beq +
  1074  8635 e8                     inx
  1075  8636 c950                   cmp #'P'
  1076  8638 d02c                   bne ++
  1077  863a c8                 +   iny
  1078  863b b90002                 lda inputbuf, y
  1079                          !ifndef MINIMUM {
  1080  863e c9a0                   cmp #$A0
  1081  8640 f008                   beq +
  1082                          }
  1083  8642 c920                   cmp #' '
  1084  8644 f004                   beq +
  1085  8646 c93a                   cmp #':'
  1086  8648 d01c                   bne ++
  1087  864a c8                 +   iny
  1088  864b 20ef8c                 jsr skipspaces
  1089  864e 8e9c95                 stx mode
  1090  8651 20458d                 jsr chkhexbyte
  1091  8654 d010                   bne ++
  1092  8656 ae9c95                 ldx mode
  1093  8659 9dab95                 sta registerA, x
  1094                          !ifndef MINIMUM {
  1095  865c 20e88d                 jsr newline
  1096                          }
  1097                              ; pop call stack so return to input_loop
  1098  865f 68                     pla
  1099  8660 68                     pla
  1100  8661 68                     pla
  1101  8662 68                     pla
  1102  8663 4c6986                 jmp +++
  1103  8666 aca395             ++  ldy tmp ; not Z (NE)
  1104  8669 60                 +++ rts
  1105                          
  1106                          chkload_pc:
  1107  866a a901                   lda #1 ; not Z (NE)
  1108  866c 60                     rts
  1109                          
  1110                          chkload_n_v_b_d_i_z_c:
  1111  866d a901                   lda #1 ; not Z (NE)
  1112  866f 60                     rts
  1113                          
  1114                          chkloadregisters:
  1115  8670 203c8d                 jsr chkhexword
  1116  8673 d054                   bne ++
  1117  8675 ad688e                 lda ptr1
  1118  8678 8db095                 sta registerPC
  1119  867b ad698e                 lda ptr1+1
  1120  867e 8db195                 sta registerPC+1
  1121  8681 20dd8c                 jsr chkspace
  1122  8684 d03c                   bne +
  1123  8686 20878d                 jsr chkbinbyte
  1124  8689 d037                   bne +
  1125  868b 8daf95                 sta registerSR
  1126  868e 20dd8c                 jsr chkspace
  1127  8691 d02f                   bne +
  1128  8693 20458d                 jsr chkhexbyte
  1129  8696 d02a                   bne +
  1130  8698 8dab95                 sta registerA
  1131  869b 20dd8c                 jsr chkspace
  1132  869e d022                   bne +
  1133  86a0 20458d                 jsr chkhexbyte
  1134  86a3 d01d                   bne +
  1135  86a5 8dac95                 sta registerX
  1136  86a8 20dd8c                 jsr chkspace
  1137  86ab d015                   bne +
  1138  86ad 20458d                 jsr chkhexbyte
  1139  86b0 d010                   bne +
  1140  86b2 8dad95                 sta registerY
  1141  86b5 20dd8c                 jsr chkspace
  1142  86b8 d008                   bne +
  1143  86ba 20458d                 jsr chkhexbyte
  1144  86bd d003                   bne +
  1145  86bf 8dae95                 sta registerSP
  1146                              ; don't return to executedot
  1147  86c2 68                 +   pla
  1148  86c3 68                     pla
  1149                          !ifdef C64SCREEN {
  1150  86c4 20e88d                 jsr newline
  1151                          }
  1152  86c7 a900                   lda #0 ; set Z
  1153  86c9 60                 ++  rts
  1154                          
  1155                          executehelp:
  1156                          !ifdef C64SCREEN {
  1157  86ca 20e88d                 jsr newline
  1158                          }
  1159  86cd cc9f95                 cpy len
  1160  86d0 d003                   bne +
  1161  86d2 4cfb86                 jmp displayhelp
  1162  86d5 20ef8c             +   jsr skipspaces
  1163  86d8 201687                 jsr chkhelpinstructions
  1164  86db d003                   bne +
  1165  86dd 4c5a87                 jmp displayinstructions
  1166  86e0 203087             +   jsr chkhelpmodes
  1167  86e3 d003                   bne +
  1168  86e5 4c7187                 jmp displaymodes
  1169  86e8 20f38b             +   jsr chkinstruction
  1170  86eb d003                   bne +
  1171  86ed 4c2d88                 jmp executehelpinstruction
  1172  86f0 202387             +   jsr chkhelpregisters
  1173  86f3 d003                   bne +
  1174  86f5 4c078e                 jmp execute_display_registers
  1175  86f8 4cbf8c             +   jmp reportnotimplemented
  1176                          
  1177                          displayhelp:
  1178  86fb a948                   lda #<generalhelp
  1179  86fd a293                   ldx #>generalhelp
  1180  86ff 209a84                 jsr strout
  1181  8702 a93d                   lda #<generalhelp2
  1182  8704 a294                   ldx #>generalhelp2
  1183  8706 209a84                 jsr strout
  1184  8709 a907                   lda #<generalhelp3
  1185  870b a295                   ldx #>generalhelp3
  1186  870d 209a84                 jsr strout
  1187                          !ifndef MINIMUM { // any C64
  1188  8710 20d180                 jsr display_extra_help
  1189                          }
  1190  8713 4ce88d                 jmp newline
  1191                          
  1192                          chkhelpinstructions:
  1193  8716 b90002                 lda inputbuf, y
  1194  8719 c941                   cmp #'A'
  1195  871b d005                   bne +
  1196  871d b90102                 lda inputbuf+1, y
  1197  8720 c90d                   cmp #13
  1198                              ; no need to increment y if found, done parsing line
  1199  8722 60                 +   rts
  1200                          
  1201                          chkhelpregisters:
  1202  8723 b90002                 lda inputbuf, y
  1203  8726 c92e                   cmp #'.'
  1204  8728 d005                   bne +
  1205  872a b90102                 lda inputbuf+1, y
  1206  872d c90d                   cmp #13
  1207  872f 60                 +   rts
  1208                          
  1209                          chkhelpmodes:
  1210  8730 a978                   lda #<modes_keyword
  1211  8732 a295                   ldx #>modes_keyword
  1212                              ; fall through to chkkeyword
  1213                          
  1214                          chkkeyword:
  1215  8734 8c9e95                 sty count
  1216  8737 8d7c8e                 sta ptr3
  1217  873a 8e7d8e                 stx ptr3+1
  1218  873d ae9e95                 ldx count
  1219  8740 a000                   ldy #0
  1220  8742 206b8e             -   jsr lda_at_ptr3_y
  1221  8745 dd0002                 cmp inputbuf, x
  1222  8748 d00a                   bne +
  1223  874a e8                     inx
  1224  874b c8                     iny
  1225  874c ec9f95                 cpx len
  1226  874f d0f1                   bne -
  1227  8751 206b8e                 jsr lda_at_ptr3_y ; matched if end of string, will set Z
  1228  8754 08                 +   php ; save Z
  1229  8755 ac9e95                 ldy count
  1230  8758 28                     plp ; restore Z
  1231  8759 60                     rts
  1232                          
  1233                          displayinstructions:
  1234  875a a038                   ldy #ninst
  1235  875c a200                   ldx #0
  1236  875e 8a                 -   txa
  1237  875f 48                     pha
  1238  8760 208582                 jsr dispinst
  1239  8763 a920                   lda #' '
  1240  8765 20d2ff                 jsr charout
  1241  8768 68                     pla
  1242  8769 aa                     tax
  1243  876a e8                     inx
  1244  876b 88                     dey
  1245  876c d0f0                   bne -
  1246  876e 4ce88d                 jmp newline
  1247                          
  1248                          displaymodes:
  1249  8771 38                     sec
  1250  8772 a900                   lda #0
  1251  8774 48                 -   pha
  1252  8775 aa                     tax
  1253  8776 bd888f                 lda mode_sorted, x
  1254  8779 208687                 jsr dispmode
  1255  877c 68                     pla
  1256  877d 18                     clc
  1257  877e 6901                   adc #1
  1258  8780 c90d                   cmp #nmodes
  1259  8782 90f0                   bcc -
  1260  8784 18                     clc
  1261  8785 60                     rts
  1262                          
  1263                          dispmode:
  1264  8786 c90d                   cmp #nmodes
  1265  8788 b009                   bcs +
  1266  878a 8d9c95                 sta mode
  1267  878d 20d587                 jsr disp_modename_and_example
  1268  8790 4c9487                 jmp dispmodeinstructions
  1269  8793 60                 +   rts
  1270                          
  1271                          dispmodeinstructions:
  1272                          !ifdef C64SCREEN {
  1273                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1274  8794 ad9c95                 lda mode
  1275  8797 c903                   cmp #3
  1276  8799 d005                   bne +
  1277  879b a920                   lda #' '
  1278  879d 4cd2ff                 jmp charout
  1279                          }
  1280                              ; display instructions with this mode
  1281  87a0 a000               +   ldy #0
  1282  87a2 8c9b95             --  sty inidx
  1283  87a5 a200                   ldx #0
  1284  87a7 8ea395             -   stx tmp
  1285  87aa ad9b95                 lda inidx
  1286  87ad dd1e91                 cmp instidx, x
  1287  87b0 d016                   bne ++
  1288  87b2 bdb591                 lda modeidx, x
  1289  87b5 cd9c95                 cmp mode
  1290  87b8 d00e                   bne ++
  1291  87ba a920                   lda #' '
  1292  87bc 20d2ff                 jsr charout
  1293  87bf bd1e91                 lda instidx, x
  1294  87c2 208582                 jsr dispinst
  1295  87c5 aea395                 ldx tmp
  1296  87c8 e8                 ++  inx
  1297  87c9 e097                   cpx #nopcodes
  1298  87cb 90da                   bcc -
  1299  87cd c8                     iny
  1300  87ce c038                   cpy #ninst
  1301  87d0 d0d0                   bne --
  1302  87d2 4ce88d                 jmp newline
  1303                          
  1304                          disp_modename_and_example:
  1305  87d5 0a                     asl
  1306  87d6 aa                     tax
  1307  87d7 bd6d90                 lda modes, x
  1308  87da 48                     pha
  1309  87db bd6e90                 lda modes+1, x
  1310  87de aa                     tax
  1311                          !ifdef C64SCREEN {
  1312  87df a912                   lda #18
  1313  87e1 20d2ff                 jsr charout
  1314                          }
  1315  87e4 68                     pla
  1316  87e5 209a84                 jsr strout
  1317  87e8 a920                   lda #' '
  1318  87ea 20d2ff                 jsr charout
  1319  87ed 20a084                 jsr strout2
  1320                          !ifdef C64SCREEN {
  1321  87f0 a992                   lda #146
  1322  87f2 20d2ff                 jsr charout
  1323                          }
  1324  87f5 60                     rts
  1325                          
  1326                          disp_modename_instruction_example:
  1327  87f6 0a                     asl
  1328  87f7 aa                     tax
  1329  87f8 bd6d90                 lda modes, x
  1330  87fb 48                     pha
  1331  87fc bd6e90                 lda modes+1, x
  1332  87ff aa                     tax
  1333  8800 68                     pla
  1334  8801 209a84                 jsr strout ; mode name
  1335  8804 ad7c8e                 lda ptr3
  1336  8807 48                     pha
  1337  8808 ad7d8e                 lda ptr3+1
  1338  880b 48                     pha
  1339  880c a93a                   lda #':'
  1340  880e 20d2ff                 jsr charout
  1341  8811 a920                   lda #' '
  1342  8813 20d2ff                 jsr charout
  1343  8816 ad9b95                 lda inidx
  1344  8819 208582                 jsr dispinst ; instruction
  1345  881c a920                   lda #' '
  1346  881e 20d2ff                 jsr charout
  1347  8821 68                     pla
  1348  8822 8d7d8e                 sta ptr3+1
  1349  8825 68                     pla
  1350  8826 8d7c8e                 sta ptr3
  1351  8829 20a084                 jsr strout2 ; example
  1352  882c 60                     rts
  1353                          
  1354                          
  1355                          executehelpinstruction:
  1356  882d a000                   ldy #0
  1357  882f 8c9a95             -   sty opidx
  1358  8832 b91e91                 lda instidx, y
  1359  8835 cd9b95                 cmp inidx
  1360  8838 d01d                   bne +
  1361  883a b9b591                 lda modeidx, y
  1362  883d 8d9c95                 sta mode
  1363  8840 ae9a95                 ldx opidx
  1364  8843 bd8790                 lda opcodes, x
  1365  8846 201684                 jsr disphexbyte
  1366  8849 a920                   lda #' '
  1367  884b 20d2ff                 jsr charout
  1368  884e ad9c95                 lda mode
  1369  8851 20f687                 jsr disp_modename_instruction_example
  1370  8854 20e88d                 jsr newline
  1371  8857 ac9a95             +   ldy opidx
  1372  885a c8                     iny
  1373  885b c097                   cpy #nopcodes
  1374  885d 90d0                   bcc -
  1375  885f 60                     rts
  1376                          
  1377                          continueassemble:
  1378                          !ifdef C64SCREEN {
  1379  8860 200981                 jsr continueassemblec64
  1380                          }
  1381                              ; continue...
  1382                          
  1383                          executeassemble:
  1384  8863 68                     pla ; remove low byte return address
  1385  8864 68                     pla ; return high byte return address
  1386                          !ifdef C64SCREEN {
  1387  8865 a914                   lda #20
  1388  8867 20d2ff                 jsr charout
  1389  886a 20d2ff                 jsr charout
  1390                          } else {
  1391                              lda ptr1
  1392                              ldx ptr1+1
  1393                              jsr disphexword
  1394                              lda #' '
  1395                              jsr charout
  1396                          }
  1397                              ; save current pointer
  1398  886d ad688e             --  lda ptr1
  1399  8870 ae698e                 ldx ptr1+1
  1400  8873 8d7c8e                 sta ptr3
  1401  8876 8e7d8e                 stx ptr3+1
  1402  8879 20bb84                 jsr inputline
  1403  887c c001                   cpy #1
  1404  887e f055                   beq ++
  1405  8880 88                     dey
  1406  8881 8c9f95                 sty len
  1407  8884 a000                   ldy #0
  1408  8886 20ef8c                 jsr skipspaces
  1409  8889 cc9f95                 cpy len
  1410  888c f047                   beq ++
  1411                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1412                              ;jsr skipspaces
  1413  888e 20f38b                 jsr chkinstruction
  1414  8891 f00f                   beq +
  1415  8893 ad7c8e             -   lda ptr3
  1416  8896 8d688e                 sta ptr1
  1417  8899 ad7d8e                 lda ptr3+1
  1418  889c 8d698e                 sta ptr1+1
  1419  889f 4c0585                 jmp error
  1420  88a2 200889             +   jsr chkaddressing
  1421  88a5 d0ec                   bne -
  1422  88a7 20288c                 jsr find_inst_and_mode
  1423  88aa d0e7                   bne -
  1424  88ac 20d888                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1425  88af 18                     clc
  1426  88b0 ad9d95                 lda size
  1427  88b3 6d7c8e                 adc ptr3
  1428  88b6 8d688e                 sta ptr1
  1429  88b9 ad7d8e                 lda ptr3+1
  1430  88bc 6900                   adc #0
  1431  88be 8d698e                 sta ptr1+1
  1432                          !ifdef C64SCREEN {
  1433  88c1 20e88d                 jsr newline
  1434                          }
  1435  88c4 ad688e                 lda ptr1
  1436  88c7 ae698e                 ldx ptr1+1
  1437  88ca 201084                 jsr disphexword
  1438  88cd a920                   lda #' '
  1439  88cf 20d2ff                 jsr charout
  1440  88d2 4c6d88                 jmp --
  1441                          ++
  1442                          !ifdef C64SCREEN {
  1443  88d5 4ce88d                 jmp newline
  1444                          } else {
  1445                              rts
  1446                          }
  1447                          
  1448                          store_assembly:
  1449  88d8 ae9a95                 ldx opidx
  1450  88db bd8790                 lda opcodes, x
  1451  88de a000                   ldy #0
  1452  88e0 207b8e                 jsr sta_at_ptr3_y
  1453  88e3 c8                     iny
  1454  88e4 ae9d95                 ldx size
  1455  88e7 e001                   cpx #1
  1456  88e9 f01c                   beq ++
  1457  88eb e002               +   cpx #2
  1458  88ed d007                   bne +
  1459  88ef ada195                 lda tmp2
  1460  88f2 207b8e                 jsr sta_at_ptr3_y
  1461  88f5 60                     rts
  1462  88f6 e003               +   cpx #3
  1463  88f8 d00d                   bne ++
  1464  88fa ad688e                 lda ptr1
  1465  88fd 207b8e                 jsr sta_at_ptr3_y
  1466  8900 c8                     iny
  1467  8901 ad698e                 lda ptr1+1
  1468  8904 207b8e                 jsr sta_at_ptr3_y
  1469  8907 60                 ++  rts
  1470                          
  1471                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1472  8908 20ef8c                 jsr skipspaces
  1473  890b a200                   ldx #0
  1474  890d 8e9c95                 stx mode
  1475  8910 207989                 jsr chkaccumulator
  1476  8913 f05e                   beq +
  1477  8915 ee9c95                 inc mode
  1478  8918 cc9f95                 cpy len ; chknone
  1479  891b f056                   beq +
  1480  891d ee9c95                 inc mode
  1481  8920 209f89                 jsr chkimmediate
  1482  8923 f04e                   beq +
  1483  8925 ee9c95                 inc mode
  1484  8928 20c689                 jsr chkindirectx
  1485  892b f046                   beq +
  1486  892d ee9c95                 inc mode
  1487  8930 200e8a                 jsr chkindirecty
  1488  8933 f03e                   beq +
  1489  8935 ee9c95                 inc mode
  1490  8938 20568a                 jsr chkrelative
  1491  893b f036                   beq +
  1492  893d ee9c95                 inc mode
  1493  8940 20c18a                 jsr chkzeropage
  1494  8943 f02e                   beq +
  1495  8945 ee9c95                 inc mode
  1496  8948 20dd8a                 jsr chkzeropagex
  1497  894b f026                   beq +
  1498  894d ee9c95                 inc mode
  1499  8950 200f8b                 jsr chkzeropagey
  1500  8953 f01e                   beq +
  1501  8955 ee9c95                 inc mode
  1502  8958 20418b                 jsr chkabsolute
  1503  895b f016                   beq +
  1504  895d ee9c95                 inc mode
  1505  8960 205d8b                 jsr chkabsolutex
  1506  8963 f00e                   beq +
  1507  8965 ee9c95                 inc mode
  1508  8968 208f8b                 jsr chkabsolutey
  1509  896b f006                   beq +
  1510  896d ee9c95                 inc mode
  1511  8970 20c18b                 jsr chkindirect
  1512  8973 08                 +   php ; save Z
  1513  8974 ad9c95                 lda mode
  1514  8977 28                     plp ; restore Z
  1515  8978 60                     rts
  1516                          
  1517                          chkaccumulator:
  1518  8979 cc9f95                 cpy len
  1519  897c d014                   bne +
  1520  897e ad9b95                 lda inidx
  1521  8981 c902                   cmp #2 ; ASL
  1522  8983 f019                   beq ++
  1523  8985 c920                   cmp #32 ; LSR
  1524  8987 f015                   beq ++
  1525  8989 c927                   cmp #39 ; ROL
  1526  898b f011                   beq ++
  1527  898d c928                   cmp #40 ; ROR
  1528  898f 4c9e89                 jmp ++
  1529  8992 b90002             +   lda inputbuf, y
  1530  8995 c941                   cmp #'A'
  1531  8997 d005                   bne ++
  1532  8999 b90102                 lda inputbuf+1,y
  1533  899c c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1534  899e 60                 ++  rts
  1535                          
  1536                          chkimmediate:
  1537  899f 8ca095                 sty savepos
  1538  89a2 b90002                 lda inputbuf, y
  1539  89a5 c923                   cmp #'#'
  1540  89a7 d017                   bne ++
  1541  89a9 c8                     iny
  1542  89aa 20ef8c                 jsr skipspaces
  1543  89ad b90002                 lda inputbuf, y
  1544  89b0 c924                   cmp #'$'
  1545  89b2 d001                   bne +
  1546  89b4 c8                     iny
  1547  89b5 20458d             +   jsr chkhexbyte
  1548  89b8 d006                   bne ++
  1549  89ba cc9f95             +   cpy len
  1550  89bd d001                   bne ++
  1551  89bf 60                     rts
  1552  89c0 aca095             ++  ldy savepos
  1553  89c3 a201                   ldx #1 ; Z false (NE)
  1554  89c5 60                     rts
  1555                          
  1556                          chkindirectx:
  1557  89c6 8ca095                 sty savepos
  1558  89c9 b90002                 lda inputbuf, y
  1559  89cc c928                   cmp #'('
  1560  89ce d038                   bne ++
  1561  89d0 c8                     iny
  1562  89d1 20ef8c                 jsr skipspaces
  1563  89d4 b90002                 lda inputbuf, y
  1564  89d7 c924                   cmp #'$'
  1565  89d9 d001                   bne +
  1566  89db c8                     iny
  1567  89dc 20458d             +   jsr chkhexbyte
  1568  89df d027                   bne ++
  1569  89e1 20ef8c                 jsr skipspaces
  1570  89e4 b90002                 lda inputbuf, y
  1571  89e7 c92c                   cmp #','
  1572  89e9 d01d                   bne ++
  1573  89eb c8                     iny
  1574  89ec 20ef8c                 jsr skipspaces
  1575  89ef b90002                 lda inputbuf, y
  1576  89f2 c958                   cmp #'X'
  1577  89f4 d012                   bne ++
  1578  89f6 c8                     iny
  1579  89f7 20ef8c                 jsr skipspaces
  1580  89fa b90002                 lda inputbuf, y
  1581  89fd c929                   cmp #')'
  1582  89ff d007                   bne ++
  1583  8a01 c8                     iny
  1584  8a02 cc9f95                 cpy len
  1585  8a05 d001                   bne ++
  1586  8a07 60                     rts
  1587  8a08 aca095             ++  ldy savepos
  1588  8a0b a201                   ldx #1 ; Z false (NE)
  1589  8a0d 60                     rts
  1590                          
  1591                          chkindirecty:
  1592  8a0e 8ca095                 sty savepos
  1593  8a11 b90002                 lda inputbuf, y
  1594  8a14 c928                   cmp #'('
  1595  8a16 d038                   bne ++
  1596  8a18 c8                     iny
  1597  8a19 20ef8c                 jsr skipspaces
  1598  8a1c b90002                 lda inputbuf, y
  1599  8a1f c924                   cmp #'$'
  1600  8a21 d001                   bne +
  1601  8a23 c8                     iny
  1602  8a24 20458d             +   jsr chkhexbyte
  1603  8a27 d027                   bne ++
  1604  8a29 20ef8c                 jsr skipspaces
  1605  8a2c b90002                 lda inputbuf, y
  1606  8a2f c929                   cmp #')'
  1607  8a31 d01d                   bne ++
  1608  8a33 c8                     iny
  1609  8a34 20ef8c                 jsr skipspaces
  1610  8a37 b90002                 lda inputbuf, y
  1611  8a3a c92c                   cmp #','
  1612  8a3c d012                   bne ++
  1613  8a3e c8                     iny
  1614  8a3f 20ef8c                 jsr skipspaces
  1615  8a42 b90002                 lda inputbuf, y
  1616  8a45 c959                   cmp #'Y'
  1617  8a47 d007                   bne ++
  1618  8a49 c8                     iny
  1619  8a4a cc9f95                 cpy len
  1620  8a4d d001                   bne ++
  1621  8a4f 60                     rts
  1622  8a50 aca095             ++  ldy savepos
  1623  8a53 a201                   ldx #1 ; Z false (NE)
  1624  8a55 60                     rts
  1625                          
  1626                          chkrelative:
  1627  8a56 8ca095                 sty savepos
  1628  8a59 ae9b95                 ldx inidx
  1629  8a5c e006                   cpx #6 ; BIT
  1630  8a5e f01f                   beq ++
  1631  8a60 bdc68e                 lda inst0, x
  1632  8a63 c942                   cmp #'B'
  1633  8a65 d018                   bne ++
  1634  8a67 b90002                 lda inputbuf, y
  1635  8a6a c924                   cmp #'$'
  1636  8a6c d001                   bne +
  1637  8a6e c8                     iny
  1638  8a6f 203c8d             +   jsr chkhexword
  1639  8a72 d00b                   bne ++
  1640  8a74 cc9f95                 cpy len
  1641  8a77 d006                   bne ++
  1642  8a79 20858a                 jsr computeoffset
  1643  8a7c d001                   bne ++
  1644  8a7e 60                     rts ; Z true (EQ)
  1645  8a7f aca095             ++  ldy savepos
  1646  8a82 a201                   ldx #1 ; Z false (NE)
  1647  8a84 60                     rts
  1648                          
  1649                          computeoffset:
  1650                          ;   compute next address
  1651  8a85 ad7d8e                 lda ptr3+1
  1652  8a88 8da595                 sta ptr2+1
  1653  8a8b ad7c8e                 lda ptr3
  1654  8a8e 18                     clc
  1655  8a8f 6902                   adc #2
  1656  8a91 8da495                 sta ptr2
  1657  8a94 9003                   bcc +
  1658  8a96 eea595                 inc ptr2+1
  1659                          +  ; subtract argument
  1660  8a99 38                     sec
  1661  8a9a ad688e                 lda ptr1
  1662  8a9d eda495                 sbc ptr2
  1663  8aa0 8da195                 sta tmp2
  1664  8aa3 ad698e                 lda ptr1+1
  1665  8aa6 eda595                 sbc ptr2+1
  1666  8aa9 f00b                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1667  8aab c9ff                   cmp #$FF
  1668  8aad d00f                   bne failedoffset ; 0 and FF were only options so fail
  1669                              ; chkeck negative offset
  1670  8aaf ada195                 lda tmp2
  1671  8ab2 3007                   bmi successoffset ; branch if signed byte is negative
  1672  8ab4 1008                   bpl failedoffset ; otherwise fail
  1673                          chkoffsetto127:
  1674  8ab6 ada195                 lda tmp2
  1675  8ab9 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1676                          successoffset:
  1677  8abb a900                   lda #0 ; Z true (EQ)
  1678  8abd 60                     rts
  1679                          failedoffset:
  1680  8abe a901                   lda #1 ; Z false (NE)
  1681  8ac0 60                     rts
  1682                          
  1683                          chkzeropage:
  1684  8ac1 8ca095                 sty savepos
  1685  8ac4 b90002                 lda inputbuf, y
  1686  8ac7 c924                   cmp #'$'
  1687  8ac9 d001                   bne +
  1688  8acb c8                     iny
  1689  8acc 20458d             +   jsr chkhexbyte
  1690  8acf d006                   bne ++
  1691  8ad1 cc9f95                 cpy len
  1692  8ad4 d001                   bne ++
  1693  8ad6 60                     rts ; Z true (EQ)
  1694  8ad7 aca095             ++  ldy savepos
  1695  8ada a201                   ldx #1 ; Z false (NE)
  1696  8adc 60                     rts
  1697                          
  1698                          chkzeropagex:
  1699  8add 8ca095                 sty savepos
  1700  8ae0 b90002                 lda inputbuf, y
  1701  8ae3 c924                   cmp #'$'
  1702  8ae5 d001                   bne +
  1703  8ae7 c8                     iny
  1704  8ae8 20458d             +   jsr chkhexbyte
  1705  8aeb d01c                   bne ++
  1706  8aed 20ef8c                 jsr skipspaces
  1707  8af0 b90002                 lda inputbuf, y
  1708  8af3 c92c                   cmp #','
  1709  8af5 d012                   bne ++
  1710  8af7 c8                     iny
  1711  8af8 20ef8c                 jsr skipspaces
  1712  8afb b90002                 lda inputbuf, y
  1713  8afe c958                   cmp #'X'
  1714  8b00 d007                   bne ++
  1715  8b02 c8                     iny
  1716  8b03 cc9f95                 cpy len
  1717  8b06 d001                   bne ++
  1718  8b08 60                     rts ; Z true (EQ)
  1719  8b09 aca095             ++  ldy savepos
  1720  8b0c a201                   ldx #1 ; Z false (NE)
  1721  8b0e 60                     rts
  1722                          
  1723                          chkzeropagey:
  1724  8b0f 8ca095                 sty savepos
  1725  8b12 b90002                 lda inputbuf, y
  1726  8b15 c924                   cmp #'$'
  1727  8b17 d001                   bne +
  1728  8b19 c8                     iny
  1729  8b1a 20458d             +   jsr chkhexbyte
  1730  8b1d d01c                   bne ++
  1731  8b1f 20ef8c                 jsr skipspaces
  1732  8b22 b90002                 lda inputbuf, y
  1733  8b25 c92c                   cmp #','
  1734  8b27 d012                   bne ++
  1735  8b29 c8                     iny
  1736  8b2a 20ef8c                 jsr skipspaces
  1737  8b2d b90002                 lda inputbuf, y
  1738  8b30 c959                   cmp #'Y'
  1739  8b32 d007                   bne ++
  1740  8b34 c8                     iny
  1741  8b35 cc9f95                 cpy len
  1742  8b38 d001                   bne ++
  1743  8b3a 60                     rts ; Z true (EQ)
  1744  8b3b aca095             ++  ldy savepos
  1745  8b3e a201                   ldx #1 ; Z false (NE)
  1746  8b40 60                     rts
  1747                          
  1748                          chkabsolute:
  1749  8b41 8ca095                 sty savepos
  1750  8b44 b90002                 lda inputbuf, y
  1751  8b47 c924                   cmp #'$'
  1752  8b49 d001                   bne +
  1753  8b4b c8                     iny
  1754  8b4c 203c8d             +   jsr chkhexword
  1755  8b4f d006                   bne ++
  1756  8b51 cc9f95                 cpy len
  1757  8b54 d001                   bne ++
  1758  8b56 60                     rts ; Z true (EQ)
  1759  8b57 aca095             ++  ldy savepos
  1760  8b5a a201                   ldx #1 ; Z false (NE)
  1761  8b5c 60                     rts
  1762                          
  1763                          chkabsolutex:
  1764  8b5d 8ca095                 sty savepos
  1765  8b60 b90002                 lda inputbuf, y
  1766  8b63 c924                   cmp #'$'
  1767  8b65 d001                   bne +
  1768  8b67 c8                     iny
  1769  8b68 203c8d             +   jsr chkhexword
  1770  8b6b d01c                   bne ++
  1771  8b6d 20ef8c                 jsr skipspaces
  1772  8b70 b90002                 lda inputbuf, y
  1773  8b73 c92c                   cmp #','
  1774  8b75 d012                   bne ++
  1775  8b77 c8                     iny
  1776  8b78 20ef8c                 jsr skipspaces
  1777  8b7b b90002                 lda inputbuf, y
  1778  8b7e c958                   cmp #'X'
  1779  8b80 d007                   bne ++
  1780  8b82 c8                     iny
  1781  8b83 cc9f95                 cpy len
  1782  8b86 d001                   bne ++
  1783  8b88 60                     rts ; Z true (EQ)
  1784  8b89 aca095             ++  ldy savepos
  1785  8b8c a201                   ldx #1 ; Z false (NE)
  1786  8b8e 60                     rts
  1787                          
  1788                          chkabsolutey:
  1789  8b8f 8ca095                 sty savepos
  1790  8b92 b90002                 lda inputbuf, y
  1791  8b95 c924                   cmp #'$'
  1792  8b97 d001                   bne +
  1793  8b99 c8                     iny
  1794  8b9a 203c8d             +   jsr chkhexword
  1795  8b9d d01c                   bne ++
  1796  8b9f 20ef8c                 jsr skipspaces
  1797  8ba2 b90002                 lda inputbuf, y
  1798  8ba5 c92c                   cmp #','
  1799  8ba7 d012                   bne ++
  1800  8ba9 c8                     iny
  1801  8baa 20ef8c                 jsr skipspaces
  1802  8bad b90002                 lda inputbuf, y
  1803  8bb0 c959                   cmp #'Y'
  1804  8bb2 d007                   bne ++
  1805  8bb4 c8                     iny
  1806  8bb5 cc9f95                 cpy len
  1807  8bb8 d001                   bne ++
  1808  8bba 60                     rts ; Z true (EQ)
  1809  8bbb aca095             ++  ldy savepos
  1810  8bbe a201                   ldx #1 ; Z false (NE)
  1811  8bc0 60                     rts
  1812                          
  1813                          chkindirect:
  1814  8bc1 8ca095                 sty savepos
  1815  8bc4 b90002                 lda inputbuf, y
  1816  8bc7 c928                   cmp #'('
  1817  8bc9 d022                   bne ++
  1818  8bcb c8                     iny
  1819  8bcc 20ef8c                 jsr skipspaces
  1820  8bcf b90002                 lda inputbuf, y
  1821  8bd2 c924                   cmp #'$'
  1822  8bd4 d001                   bne +
  1823  8bd6 c8                     iny
  1824  8bd7 203c8d             +   jsr chkhexword
  1825  8bda d011                   bne ++
  1826  8bdc 20ef8c                 jsr skipspaces
  1827  8bdf b90002                 lda inputbuf, y
  1828  8be2 c929                   cmp #')'
  1829  8be4 d007                   bne ++
  1830  8be6 c8                     iny
  1831  8be7 cc9f95                 cpy len
  1832  8bea d001                   bne ++
  1833  8bec 60                     rts ; Z true (EQ)
  1834  8bed aca095             ++  ldy savepos
  1835  8bf0 a201                   ldx #1 ; Z false (NE)
  1836  8bf2 60                     rts
  1837                          
  1838                          chkinstruction:
  1839  8bf3 cc9f95                 cpy len
  1840  8bf6 f02d                   beq ++
  1841  8bf8 8ca395                 sty tmp
  1842  8bfb a237                   ldx #(ninst-1)
  1843  8bfd b90002             -   lda inputbuf,y
  1844  8c00 ddc68e                 cmp inst0,x
  1845  8c03 d01a                   bne +
  1846  8c05 c8                     iny
  1847  8c06 b90002                 lda inputbuf,y
  1848  8c09 ddfe8e                 cmp inst1,x
  1849  8c0c d011                   bne +
  1850  8c0e c8                     iny
  1851  8c0f b90002                 lda inputbuf,y
  1852  8c12 dd368f                 cmp inst2,x
  1853  8c15 d008                   bne +
  1854  8c17 c8                     iny
  1855  8c18 8a                     txa
  1856  8c19 8d9b95                 sta inidx
  1857  8c1c a200                   ldx #0
  1858  8c1e 60                     rts
  1859  8c1f aca395             +   ldy tmp
  1860  8c22 ca                     dex
  1861  8c23 10d8                   bpl -
  1862  8c25 a201               ++  ldx #1 ; Z false (NE)
  1863  8c27 60                     rts
  1864                          
  1865                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1866                              ; and allows mode promotion
  1867  8c28 20518c                 jsr find_inst_and_mode2
  1868  8c2b f023                   beq ++
  1869  8c2d ad9c95                 lda mode
  1870  8c30 c906                   cmp #6
  1871  8c32 901c                   bcc ++
  1872  8c34 c90a                   cmp #10
  1873  8c36 b016                   bcs +
  1874  8c38 6903                   adc #3
  1875  8c3a 8d9c95                 sta mode ; promote ZeroPage modes to Absolute modes
  1876  8c3d 20518c                 jsr find_inst_and_mode2 ; try again once
  1877  8c40 d00e                   bne ++
  1878  8c42 ada195                 lda tmp2
  1879  8c45 8d688e                 sta ptr1
  1880  8c48 a900                   lda #0
  1881  8c4a 8d698e                 sta ptr1+1
  1882  8c4d 60                     rts ; Z true (EQ)
  1883  8c4e a201               +   ldx #1 ; Z false (NE)
  1884  8c50 60                 ++  rts
  1885                          
  1886                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1887  8c51 a296                   ldx #nopcodes-1
  1888  8c53 bd1e91             -   lda instidx, x
  1889  8c56 bcb591                 ldy modeidx, x
  1890  8c59 cd9b95                 cmp inidx
  1891  8c5c d00e                   bne +
  1892  8c5e cc9c95                 cpy mode
  1893  8c61 d009                   bne +
  1894  8c63 8e9a95                 stx opidx
  1895  8c66 206b82                 jsr getsize
  1896  8c69 a200                   ldx #0 ; Z true (EQ)
  1897  8c6b 60                     rts
  1898  8c6c ca                 +   dex
  1899  8c6d e0ff                   cpx #$ff
  1900  8c6f d0e2                   bne -
  1901  8c71 a201                   ldx #1 ; Z false (NE)
  1902  8c73 60                     rts
  1903                          
  1904                          executerun:
  1905  8c74 68                     pla ; remove low byte return address
  1906  8c75 68                     pla ; return high byte return address
  1907  8c76 68                     pla ; again, we're really not returning
  1908  8c77 68                     pla ; again, we're really not returning
  1909  8c78 20e88d                 jsr newline
  1910                          !ifndef MINIMUM {
  1911                          ; any C64
  1912  8c7b 207280                 jsr install_nmi64
  1913                          }
  1914                          +   ; restore registers
  1915  8c7e aeae95                 ldx registerSP
  1916  8c81 9a                     txs
  1917  8c82 adaf95                 lda registerSR
  1918  8c85 48                     pha
  1919  8c86 adab95                 lda registerA
  1920  8c89 aeac95                 ldx registerX
  1921  8c8c acad95                 ldy registerY
  1922  8c8f 28                     plp
  1923  8c90 6cb095                 jmp (registerPC)
  1924                          
  1925                          chkcontinuedis:
  1926  8c93 b90002                 lda inputbuf,y
  1927  8c96 c944                   cmp #'D'
  1928  8c98 d00a                   bne +
  1929  8c9a b90102                 lda inputbuf+1,y
  1930  8c9d c90d                   cmp #13
  1931  8c9f d003                   bne +
  1932  8ca1 c8                     iny
  1933  8ca2 a200                   ldx #0 ; restore Z set
  1934  8ca4 60                 +   rts
  1935                          
  1936                          chkcontinueasm:
  1937  8ca5 b90002                 lda inputbuf,y
  1938  8ca8 c941                   cmp #'A'
  1939  8caa d00a                   bne +
  1940  8cac b90102                 lda inputbuf+1,y
  1941  8caf c90d                   cmp #13
  1942  8cb1 d003                   bne +
  1943  8cb3 c8                     iny
  1944  8cb4 a200                   ldx #0 ; restore Z set
  1945  8cb6 60                 +   rts
  1946                          
  1947                          executedisassemble:
  1948  8cb7 68                     pla ; remove low byte return address
  1949  8cb8 68                     pla ; return high byte return address
  1950  8cb9 20e88d                 jsr newline
  1951  8cbc 4c0482                 jmp disassemble
  1952                          
  1953                          reportnotimplemented:
  1954  8cbf a937                   lda #<notimplemented
  1955  8cc1 a293                   ldx #>notimplemented
  1956  8cc3 4c9a84                 jmp strout
  1957                          
  1958                          reporterr:
  1959  8cc6 c000                   cpy #0
  1960  8cc8 f008                   beq +
  1961  8cca a920                   lda #' '
  1962  8ccc 20d2ff             -   jsr charout
  1963  8ccf 88                     dey
  1964  8cd0 d0fa                   bne -
  1965  8cd2 a93f               +   lda #'?'
  1966  8cd4 20d2ff                 jsr charout
  1967  8cd7 a90d                   lda #13
  1968  8cd9 20d2ff                 jsr charout
  1969  8cdc 60                     rts
  1970                          
  1971                          chkspace:
  1972  8cdd b90002                 lda inputbuf, y
  1973                          !ifndef MINIMUM {
  1974                              ; skip SHIFT-SPACES too on Commodore
  1975  8ce0 c9a0                   cmp #$A0
  1976  8ce2 f004                   beq +
  1977                          }
  1978  8ce4 c920                   cmp #$20
  1979  8ce6 d006                   bne ++
  1980  8ce8 c8                 +   iny
  1981  8ce9 20ef8c                 jsr skipspaces
  1982  8cec a900                   lda #0 ; set Z
  1983  8cee 60                 ++  rts
  1984                          
  1985                          skipspaces:
  1986  8cef b90002             -   lda inputbuf, y
  1987                          !ifndef MINIMUM {
  1988                              ; skip SHIFT-SPACES too on Commodore
  1989  8cf2 c9a0                   cmp #$A0
  1990  8cf4 f004                   beq +
  1991                          }
  1992  8cf6 c920                   cmp #$20
  1993  8cf8 d003                   bne ++
  1994  8cfa c8                 +   iny
  1995  8cfb d0f2                   bne -
  1996  8cfd 60                 ++  rts
  1997                          
  1998                          chkdot:
  1999  8cfe b90002                 lda inputbuf, y
  2000  8d01 c92e                   cmp #'.'
  2001  8d03 d003                   bne +
  2002  8d05 c8                     iny
  2003  8d06 a900                   lda #0 ; Z true (EQ)
  2004  8d08 60                 +   rts
  2005                          
  2006                          chkhelp:
  2007  8d09 b90002                 lda inputbuf, y
  2008  8d0c c93f                   cmp #'?'
  2009  8d0e d003                   bne +
  2010  8d10 c8                     iny
  2011  8d11 a900                   lda #0 ; Z true (EQ)
  2012  8d13 60                 +   rts
  2013                          
  2014                          chkcolon:
  2015  8d14 b90002                 lda inputbuf, y
  2016  8d17 c93a                   cmp #':'
  2017  8d19 d003                   bne +
  2018  8d1b c8                     iny
  2019  8d1c a900                   lda #0 ; Z true (EQ)
  2020  8d1e 60                 +   rts
  2021                          
  2022                          chkhexbyteofsequence:
  2023  8d1f 205984                 jsr inputhexbyte
  2024  8d22 203f8d                 jsr +
  2025  8d25 d014                   bne ++ ; Z false (NE) if failed checks
  2026  8d27 cc9f95                 cpy len
  2027  8d2a f00f                   beq ++ ; Z true (EQ) if end of input
  2028  8d2c 8da395                 sta tmp
  2029  8d2f b90002                 lda inputbuf,y
  2030  8d32 c920                   cmp #$20
  2031  8d34 d005                   bne ++ ; Z false (NE) if not space
  2032  8d36 ada395                 lda tmp
  2033  8d39 a200                   ldx #0 ; Z true (EQ) is space delimeter
  2034  8d3b 60                 ++  rts
  2035                          
  2036                          chkhexword:
  2037                          chkhexaddr1:
  2038  8d3c 202c84                 jsr inputhexword
  2039  8d3f a200               +   ldx #0 ; Z true (EQ)
  2040  8d41 9001                   bcc +
  2041  8d43 e8                     inx ; Z false (NE)
  2042  8d44 60                 +   rts
  2043                          
  2044                          chkhexbyte:
  2045  8d45 98                     tya
  2046  8d46 48                     pha ; save y
  2047  8d47 205984                 jsr inputhexbyte
  2048  8d4a b00f                   bcs +
  2049  8d4c 8da195                 sta tmp2
  2050  8d4f 207c84                 jsr inputhexnybble
  2051  8d52 9007                   bcc +
  2052  8d54 68                     pla ; throw away saved y
  2053  8d55 ada195                 lda tmp2
  2054  8d58 a200                   ldx #0 ; Z true (EQ)
  2055  8d5a 60                     rts
  2056  8d5b 68                 +   pla
  2057  8d5c a8                     tay ; won't be zero, so Z false (NE)
  2058  8d5d 60                     rts
  2059                          
  2060                          chkhexaddr2:
  2061  8d5e ad688e                 lda ptr1
  2062  8d61 48                     pha
  2063  8d62 ad698e                 lda ptr1+1
  2064  8d65 48                     pha
  2065  8d66 203c8d                 jsr chkhexaddr1
  2066  8d69 f005                   beq +
  2067  8d6b 68                     pla
  2068  8d6c 68                     pla
  2069  8d6d a901                   lda #1 ; Z false (NE)
  2070  8d6f 60                     rts
  2071  8d70 ad688e             +   lda ptr1
  2072  8d73 8da495                 sta ptr2
  2073  8d76 ad698e                 lda ptr1+1
  2074  8d79 8da595                 sta ptr2+1
  2075  8d7c 68                     pla
  2076  8d7d 8d698e                 sta ptr1+1
  2077  8d80 68                     pla
  2078  8d81 8d688e                 sta ptr1
  2079  8d84 a900                   lda #0 ; Z true (EQ)
  2080  8d86 60                     rts
  2081                          
  2082                          chkbinbyte:
  2083  8d87 a208                   ldx #8
  2084  8d89 20978d             -   jsr chkbindigit
  2085  8d8c d008                   bne +
  2086  8d8e ca                     dex
  2087  8d8f d0f8                   bne -
  2088  8d91 08                     php ; save Z true
  2089  8d92 ada195                 lda tmp2
  2090  8d95 28                     plp ; restore Z true
  2091  8d96 60                 +   rts
  2092                          
  2093                          chkbindigit:
  2094  8d97 b90002                 lda inputbuf, y
  2095  8d9a 38                     sec
  2096  8d9b e930                   sbc #$30
  2097  8d9d 900b                   bcc +
  2098  8d9f c902                   cmp #$02
  2099  8da1 b007                   bcs +
  2100  8da3 4a                     lsr ; rotate bit value into C
  2101  8da4 2ea195                 rol tmp2 ; rotate bit value into tmp2
  2102  8da7 c8                     iny ; advance in buffer
  2103  8da8 a900                   lda #0 ; set Z
  2104  8daa 60                 +   rts
  2105                          
  2106                          chkaddr1cmd:
  2107  8dab b90002                 lda inputbuf, y
  2108  8dae c941               +   cmp #'A'
  2109  8db0 d00b                   bne +
  2110  8db2 be0102                 ldx inputbuf+1, y
  2111  8db5 e00d                   cpx #13
  2112  8db7 d004                   bne +
  2113  8db9 c8                     iny
  2114  8dba 4c6388                 jmp executeassemble
  2115  8dbd c944               +   cmp #'D'
  2116  8dbf d00b                   bne +
  2117  8dc1 be0102                 ldx inputbuf+1, y
  2118  8dc4 e00d                   cpx #13
  2119  8dc6 d004                   bne +
  2120  8dc8 c8                     iny
  2121  8dc9 4cb78c                 jmp executedisassemble
  2122  8dcc c952               +   cmp #'R'
  2123  8dce d017                   bne +
  2124  8dd0 be0102                 ldx inputbuf+1, y
  2125  8dd3 e00d                   cpx #13
  2126  8dd5 d010                   bne +
  2127  8dd7 c8                     iny
  2128  8dd8 ad688e                 lda ptr1
  2129  8ddb 8db095                 sta registerPC
  2130  8dde ad698e                 lda ptr1+1
  2131  8de1 8db195                 sta registerPC+1
  2132  8de4 4c748c                 jmp executerun
  2133  8de7 60                 +   rts
  2134                          
  2135                          newline:
  2136  8de8 a90d                   lda #13
  2137  8dea 4cd2ff                 jmp charout
  2138                          
  2139                          space:
  2140  8ded a920                   lda #32
  2141  8def 4cd2ff                 jmp charout
  2142                          
  2143                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  2144                          ;     jsr $ffd2
  2145                          ;     pha
  2146                          ; -   lda $d011
  2147                          ;     bpl -
  2148                          ; -   lda $d011
  2149                          ;     bmi -
  2150                          ; -   lda $d011
  2151                          ;     bpl -
  2152                          ; -   lda $d011
  2153                          ;     bmi -
  2154                          ;     pla
  2155                          ;     rts
  2156                          
  2157                          save_registers:
  2158  8df2 08                     php
  2159  8df3 8dab95                 sta registerA
  2160  8df6 8eac95                 stx registerX
  2161  8df9 8cad95                 sty registerY
  2162  8dfc 68                     pla
  2163  8dfd 8daf95                 sta registerSR
  2164  8e00 ba                     tsx
  2165  8e01 8eae95                 stx registerSP
  2166  8e04 4c098e                 jmp +
  2167                          
  2168                          execute_display_registers:
  2169  8e07 68                     pla ; remove return address
  2170  8e08 68                     pla
  2171                          +
  2172                              ; need some normality
  2173  8e09 58                     cli
  2174  8e0a d8                     cld
  2175                          
  2176  8e0b 20e88d                 jsr newline
  2177  8e0e 20178e                 jsr display_registers
  2178                          !ifndef MINIMUM {
  2179                              ; any C64
  2180  8e11 208d80                 jsr uninstall_nmi64
  2181                          }
  2182  8e14 4c6980                 jmp input_loop
  2183                          
  2184                          ; PC   NV-BDIZC .A .X .Y .S
  2185                          ; 1234 10111011 01 02 03 FF
  2186                          display_registers:
  2187  8e17 a97d                   lda #<reg_header
  2188  8e19 a295                   ldx #>reg_header
  2189  8e1b 209a84                 jsr strout
  2190  8e1e adb095                 lda registerPC
  2191  8e21 aeb195                 ldx registerPC+1
  2192  8e24 201084                 jsr disphexword
  2193  8e27 20ed8d                 jsr space
  2194  8e2a adaf95                 lda registerSR
  2195  8e2d 20fb83                 jsr dispbinbyte
  2196  8e30 20ed8d                 jsr space
  2197  8e33 adab95                 lda registerA
  2198  8e36 201684                 jsr disphexbyte
  2199  8e39 20ed8d                 jsr space
  2200  8e3c adac95                 lda registerX
  2201  8e3f 201684                 jsr disphexbyte
  2202  8e42 20ed8d                 jsr space
  2203  8e45 adad95                 lda registerY
  2204  8e48 201684                 jsr disphexbyte
  2205  8e4b 20ed8d                 jsr space
  2206  8e4e adae95                 lda registerSP
  2207  8e51 201684                 jsr disphexbyte
  2208  8e54 4ce88d                 jmp newline
  2209                          
  2210                          !ifdef MINIMUM {
  2211                          
  2212                          lda_at_ptr1_y:
  2213                              lda (ptr1),y
  2214                              rts
  2215                          
  2216                          sta_at_ptr1_y:
  2217                              sta (ptr1),y
  2218                              rts
  2219                          
  2220                          lda_at_ptr3_y:
  2221                              lda (ptr3),y
  2222                              rts
  2223                          
  2224                          sta_at_ptr3_y:
  2225                              sta (ptr3),y
  2226                              rts
  2227                          
  2228                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2229                          ;; MC6850
  2230                          UART_DATA=$FFF8
  2231                          UART_STCR=$FFF9
  2232                          
  2233                          UART_INIT:
  2234                          	ldx #0b00000111 ; 11=reset device
  2235                          	stx UART_STCR
  2236                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  2237                          	sta UART_STCR
  2238                          	rts
  2239                          UART_OUT:
  2240                          	pha
  2241                          -	lda UART_STCR
  2242                          	and #2
  2243                          	beq - ; branch if TDRE=0, not finished transmitting
  2244                          	pla
  2245                          	pha
  2246                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  2247                          	sta UART_DATA
  2248                          	pla
  2249                          	rts
  2250                          UART_IN:
  2251                          -	lda UART_STCR
  2252                          	and #1
  2253                          	beq - ; branch if TDRF=0, not received
  2254                          	lda UART_DATA
  2255                          	; software "CAPS LOCK" because wozmon expects only uppercase
  2256                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  2257                          	beq BREAK
  2258                              ; force lowercase alphabet to uppercase
  2259                              cmp #'a'
  2260                          	bcc +
  2261                          	cmp #'z'+1
  2262                          	bcs +
  2263                          	eor #$20
  2264                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  2265                           	rts
  2266                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  2267                          	pha ; save A
  2268                          	lda UART_STCR
  2269                          	lsr ; put rightmost bit in carry
  2270                          	pla ; restore A affects flags
  2271                          	ror ; move carry to left bit, right bit to carry
  2272                          	php ; push processor to save N
  2273                          	rol ; restore A affects flags
  2274                          	plp ; pull processor to restore N
  2275                          	rts
  2276                          
  2277                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2278                          ; Processor start and interrupts
  2279                          
  2280                          NMI: ; unused on minimum (no source of interrupt)
  2281                              rti
  2282                          
  2283                          IRQ:
  2284                              pha
  2285                              php
  2286                              pla
  2287                              and #$10
  2288                              beq ++ ; not break
  2289                          ;BREAK HANDLER
  2290                              pla
  2291                              sta registerA
  2292                              pla
  2293                              sta registerSR
  2294                              pla
  2295                              cld
  2296                              sec
  2297                              sbc #2
  2298                              sta registerPC
  2299                              pla
  2300                              sbc #0
  2301                              sta registerPC+1
  2302                              lda #>save_registers
  2303                              pha
  2304                              lda #<save_registers
  2305                              pha
  2306                              lda registerSR
  2307                              pha
  2308                              lda registerA
  2309                              pha
  2310                          ++  pla
  2311                              rti
  2312                          
  2313                          BREAK:
  2314                              jmp RESET
  2315                          
  2316                          RESET:
  2317                              cld
  2318                              ldx #$FF
  2319                              txs
  2320                              jsr JUART_INIT
  2321                              cli
  2322                              jmp start
  2323                          ; !ifdef MINIMUM
  2324                          } else { ; not MINIMUM
  2325                          
  2326                          ptr1 = sta_at_ptr1_y + 1 ; and + 2
  2327                          
  2328                          lda_at_ptr1_y:
  2329  8e57 ad688e                 lda ptr1
  2330  8e5a 8d648e                 sta lda_ptr1_op+1
  2331  8e5d ad698e                 lda ptr1+1
  2332  8e60 8d658e                 sta lda_ptr1_op+2
  2333                          lda_ptr1_op:
  2334  8e63 b9ffff                 lda $ffff, y
  2335  8e66 60                     rts
  2336                          
  2337                          sta_at_ptr1_y:
  2338  8e67 99ffff                 sta $ffff, y
  2339  8e6a 60                     rts
  2340                          
  2341                          ptr3 = sta_at_ptr3_y + 1 ; and + 2
  2342                          
  2343                          lda_at_ptr3_y:
  2344  8e6b ad7c8e                 lda ptr3
  2345  8e6e 8d788e                 sta lda_ptr3_op+1
  2346  8e71 ad7d8e                 lda ptr3+1
  2347  8e74 8d798e                 sta lda_ptr3_op+2
  2348                          lda_ptr3_op:
  2349  8e77 b9ffff                 lda $ffff, y
  2350  8e7a 60                     rts
  2351                          
  2352                          sta_at_ptr3_y:
  2353  8e7b 99ffff                 sta $ffff, y
  2354  8e7e 60                     rts
  2355                          
  2356                          nmi64:
  2357  8e7f 78                     sei
  2358  8e80 8dab95                 sta registerA
  2359  8e83 68                     pla
  2360  8e84 8daf95                 sta registerSR
  2361  8e87 68                     pla
  2362  8e88 d8                     cld
  2363  8e89 8db095                 sta registerPC
  2364  8e8c 68                     pla
  2365  8e8d 8db195                 sta registerPC+1
  2366  8e90 a98d                   lda #>save_registers
  2367  8e92 48                     pha
  2368  8e93 a9f2                   lda #<save_registers
  2369  8e95 48                     pha
  2370  8e96 adaf95                 lda registerSR
  2371  8e99 48                     pha
  2372  8e9a adab95                 lda registerA
  2373  8e9d 40                     rti
  2374                          
  2375                          brk64:
  2376  8e9e 68                     pla
  2377  8e9f a8                     tay
  2378  8ea0 68                     pla
  2379  8ea1 aa                     tax
  2380  8ea2 68                     pla
  2381  8ea3 8dab95                 sta registerA
  2382  8ea6 68                     pla
  2383  8ea7 8daf95                 sta registerSR
  2384  8eaa 68                     pla
  2385  8eab d8                     cld
  2386  8eac 38                     sec
  2387  8ead e902                   sbc #2
  2388  8eaf 8db095                 sta registerPC
  2389  8eb2 68                     pla
  2390  8eb3 e900                   sbc #0
  2391  8eb5 8db195                 sta registerPC+1
  2392  8eb8 a98d                   lda #>save_registers
  2393  8eba 48                     pha
  2394  8ebb a9f2                   lda #<save_registers
  2395  8ebd 48                     pha
  2396  8ebe adaf95                 lda registerSR
  2397  8ec1 48                     pha
  2398  8ec2 adab95                 lda registerA
  2399  8ec5 40                     rti
  2400                          }
  2401                          
  2402                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2403                          ; data
  2404                          
  2405                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  2406                          ninst = 56
  2407  8ec6 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  2408  8efe 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  2409  8f36 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  2410                          
  2411                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  2412                          mode_jmptable:
  2413  8f6e 0083               !word dispModeAcc-1; 0 Accumulator 1
  2414  8f70 0583               !word dispModeNone-1 ; 1 None 1
  2415  8f72 0683               !word dispModeImm-1 ; 2 Immediate 2
  2416  8f74 1883               !word dispModeIndX-1 ; 3 IndirectX 2
  2417  8f76 3983               !word dispModeIndY-1 ; 4 IndirectY 2
  2418  8f78 5a83               !word dispModeRel-1 ; 5 Relative 2
  2419  8f7a 0b83               !word dispModeZP-1 ; 6 ZeroPage 2
  2420  8f7c a583               !word dispModeZPX-1 ; 7 ZeroPageX 2
  2421  8f7e b283               !word dispModeZPY-1 ; 8 ZeroPageY 2
  2422  8f80 bf83               !word dispModeAbs-1 ; 9 Absolute 3
  2423  8f82 d383               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  2424  8f84 e083               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  2425  8f86 ed83               !word dispModeInd-1 ; 12 Indirect 3
  2426                          
  2427                          nmodes = 13
  2428                          
  2429                          mode_sorted:
  2430  8f88 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  2431                          
  2432                          !ifdef MINIMUM {
  2433                          mode_0: !text "Accumulator", 0, "A", 0
  2434                          mode_1: !text "None", 0, 8, 0
  2435                          mode_2: !text "Immediate", 0, "#$12", 0
  2436                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  2437                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  2438                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  2439                          mode_6: !text "ZeroPage", 0, "$12", 0
  2440                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  2441                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  2442                          mode_9: !text "Absolute", 0, "$1234", 0
  2443                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  2444                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  2445                          mode_12: !text "Indirect", 0, "($1234)", 0
  2446                          } else {
  2447  8f95 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2448  8fa3 4e4f4e45001400     mode_1: !text "NONE", 0, 20, 0
  2449  8faa 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2450  8fb9 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2451  8fcb 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2452  8fdd 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2453  8ffc 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2454  9009 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2455  9019 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2456  9029 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2457  9038 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2458  904a 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2459  905c 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2460                          }
  2461                          
  2462                          modes: ; table for easily displaying each mode_example
  2463  906d 958f               !word mode_0
  2464  906f a38f               !word mode_1
  2465  9071 aa8f               !word mode_2
  2466  9073 b98f               !word mode_3
  2467  9075 cb8f               !word mode_4
  2468  9077 dd8f               !word mode_5
  2469  9079 fc8f               !word mode_6
  2470  907b 0990               !word mode_7
  2471  907d 1990               !word mode_8
  2472  907f 2990               !word mode_9
  2473  9081 3890               !word mode_10
  2474  9083 4a90               !word mode_11
  2475  9085 5c90               !word mode_12
  2476                          
  2477                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2478                          nopcodes = 151
  2479  9087 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2480  911e 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2481  91b5 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2482                          
  2483                          copyright
  2484                          ;                  1         2         3         4
  2485                          ;         1234567890123456789012345678901234567890
  2486  924c 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2487                          !ifdef C64TERMINAL {
  2488                              !text 13, "(TERMINAL VERSION)"
  2489                          }
  2490  926c 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2491  9292 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2492  92a9 00                 !text 0
  2493                          
  2494                          firsthelp
  2495                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2496  92aa 0d0d               !text 13, 13
  2497  92ac 54595045203f2046...!text "TYPE ? FOR HELP"
  2498  92bb 0d00               !text 13, 0
  2499                          
  2500                          !ifndef MINIMUM {
  2501                          ; C64 only
  2502                          extra_help:
  2503  92bd 5820202020202020...    !text "X           (EXIT MONITOR)", 13
  2504  92d8 3130303020224649...    !text "1000 ", 34, "FILENAME", 34, " 08 L             (LOAD)", 13
  2505  9300 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S        (SAVE)", 13
  2506  9328 00                     !text 0
  2507                          
  2508                          !ifdef C64SCREEN {
  2509  9329 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  2510  9330 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  2511                          }
  2512                          
  2513                          }
  2514                          
  2515  9337 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2516                          
  2517                          generalhelp
  2518  9348 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2519  936e 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2520  9393 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2521  93b6 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2522  93de 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2523  93fa 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2524  941a 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2525  943c 00                 !text 0
  2526                          generalhelp2
  2527  943d 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2528  9462 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2529  947e 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2530  949d 3f41202020202020...!text "?A          (LIST 6502 INSTRUCTIONS)", 13
  2531  94c2 3f41444320202020...!text "?ADC        (/ADC/ ADDRESSING MODES)", 13
  2532  94e7 3f4d4f4445202020...!text "?MODE       (ADDRESSING MODES)", 13
  2533  9506 00                 !text 0
  2534                          generalhelp3
  2535  9507 3f2e202020202020...!text "?.          (DISPLAY REGISTERS)", 13
  2536  9527 2e31323334202020...!text ".1234       (MODIFY PC,FLAGS,REGISTERS)", 13
  2537  954f 2e413a3031202020...!text ".A:01       (MODIFY REGISTER A,X,Y,S,P)", 13
  2538  9577 00                 !text 0
  2539                          
  2540  9578 4d4f444500         modes_keyword !text "MODE", 0
  2541                          
  2542  957d 2050432020204e56...reg_header !text " PC   NV-BDIZC .A .X .Y .S", 13, '.', 0
  2543                          
  2544                          !ifdef MINIMUM {
  2545                          opidx=$dfed
  2546                          inidx=$dfee
  2547                          mode=$dfef
  2548                          size=$dff0
  2549                          count=$dff1
  2550                          len=$dff2
  2551                          savepos=$dff3
  2552                          tmp2=$dff4
  2553                          flag=$dff5
  2554                          ptr2=$dff6;/7
  2555                          tmp=$dff8
  2556                          registerA = $dff9
  2557                          registerX = $dffa
  2558                          registerY = $dffb
  2559                          registerSP = $dffc
  2560                          registerSR = $dffd
  2561                          registerPC = $dffe;/f
  2562                          } else {
  2563  959a 00                 opidx !byte 0
  2564  959b 00                 inidx !byte 0
  2565  959c 00                 mode !byte 0
  2566  959d 00                 size !byte 0
  2567  959e 00                 count !byte 0
  2568  959f 00                 len !byte 0
  2569  95a0 00                 savepos !byte 0
  2570  95a1 00                 tmp2 !byte 0
  2571  95a2 00                 flag !byte 0
  2572  95a3 00                 tmp !byte 0
  2573  95a4 0000               ptr2 !word 0
  2574  95a6 0000               savebrkvector !word 0
  2575  95a8 0000               savenmivector !word 0
  2576  95aa 00                 drive !byte 0
  2577  95ab 00                 registerA !byte 0
  2578  95ac 00                 registerX !byte 0
  2579  95ad 00                 registerY !byte 0
  2580  95ae 00                 registerSP !byte 0
  2581  95af 00                 registerSR !byte 0
  2582  95b0 0000               registerPC !word 0
  2583                          }
  2584                          
  2585                          !ifdef MINIMUM {
  2586                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2587                          ; JUMP table for some stability
  2588                          * = $FFEB
  2589                          JUART_CHK: JMP UART_CHK
  2590                          JUART_INIT: JMP UART_INIT
  2591                          JUART_OUT: JMP UART_OUT
  2592                          JUART_IN: JMP UART_IN
  2593                          
  2594                          !if * > $fff8 {
  2595                              !error "code overran MC6850 UART"
  2596                          }
  2597                          
  2598                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2599                          ; 6502 vectors
  2600                          * = $fffa
  2601                              !word NMI
  2602                              !word RESET
  2603                              !word IRQ
  2604                          } else { // C64
  2605                              !if * > $a000 {
  2606                                  !error "code/data overran $a000"
  2607                              }
  2608                          }
  2609                          
  2610                          finish = *
