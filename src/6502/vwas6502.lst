
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGET  C64 and...                    *        <<<
     7                          ;; >>>       ** INCLUDES VERSION FOR 6502+MC6850 minimum system *        <<<
     8                          ;; >>>       *   60K(RAM),4K(ROM), 2 bytes IO for MC6850 UART   *        <<<
     9                          ;; >>>       ****************************************************        <<<
    10                          ;;
    11                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    12                          ;; MIT License
    13                          ;;
    14                          ;; Copyright (c) 2024 David R. Van Wagner
    15                          ;; davevw.com
    16                          ;;
    17                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    18                          ;; of this software and associated documentation files (the "Software"), to deal
    19                          ;; in the Software without restriction, including without limitation the rights
    20                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    21                          ;; copies of the Software, and to permit persons to whom the Software is
    22                          ;; furnished to do so, subject to the following conditions:
    23                          ;;
    24                          ;; The above copyright notice and this permission notice shall be included in all
    25                          ;; copies or substantial portions of the Software.
    26                          ;;
    27                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    28                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    29                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    30                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    31                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    32                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    33                          ;; SOFTWARE.
    34                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    35                          
    36                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ; Important! define exactly ONE target (set in build.sh)
    39                          ;C64SCREEN = 1
    40                          ;C64TERMINAL = 1
    41                          ;MINIMUM = 1
    42                          
    43                          ; options (set in build.sh)
    44                          ;NEEDECHO = 0
    45                          
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;; _
    49                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    50                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    51                          ;; 1000 (display memory at $1000)
    52                          ;; 1000.2000 (display memory range $1000 to $2000)
    53                          ;; 1000. (display next screenful of memory starting at $1000)
    54                          ;; . (display next screenful of memory)
    55                          ;; 1000 r (JMP $1000)
    56                          ;; 1000: 01 02 03 (modify memory)
    57                          ;; (NEW SYNTAX)
    58                          ;; 1000 d (disassemble starting at address, for screenful)
    59                          ;; d (continue disassembling from last address)
    60                          ;; 1000 a (assemble starting at, interactive until empty line) 
    61                          ;; (FUTURE SYNTAX, not implemented)
    62                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    63                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    64                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    65                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    66                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    67                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    68                          ;; 1000.2000 "filename" 08 save (save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, can abbreviate to s)
    69                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    70                          ;; ? (commands help)
    71                          ;; ? a (list instructions available)
    72                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    73                          ;; ? mode (show addressing modes example syntax for 6502)
    74                          ;;
    75                          ;; (INTERACTIVE ASSEMBLER)
    76                          ;; 1000 _
    77                          ;;      ADC #$12
    78                          ;; 1000 69 12    ADC #$12
    79                          ;; 1002 _
    80                          ;;      JSR $1234
    81                          ;; 1002 20 34 12 JSR $1234
    82                          ;; 1005 _
    83                          ;;      RTS
    84                          ;; 1005 60       RTS
    85                          ;; 1006 _
    86                          ;;      XYZ
    87                          ;;      XYZ ?
    88                          ;; 1006 _
    89                          ;; _
    90                          ;;
    91                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    92                          ;; and can cursor up to revise, 
    93                          ;;
    94                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    95                          ;;
    96                          
    97                          ; global
    98                          inputbuf=$0200
    99                          
   100                          
   101                          ; kernal/system calls
   102                          
   103                          !ifdef MINIMUM {
   104                          charout=JUART_OUT
   105                          getkey=JUART_IN
   106                          }
   107                          
   108                          !ifdef C64SCREEN {
   109                          charin=$ffcf ; screen editor
   110                          charout=$ffd2
   111                          getkey=$ffe4
   112                          }
   113                          
   114                          !ifdef C64TERMINAL {
   115                          charout=$ffd2
   116                          getkey=$ffe4
   117                          }
   118                          
   119                          ; zeropage
   120                          !ifdef MINIMUM {
   121                          opidx=$f0
   122                          inidx=$f1
   123                          mode=$f2
   124                          size=$f3
   125                          ptr3=$f4 ; and $f5
   126                          count=$f6
   127                          len=$f7
   128                          savepos=$f8
   129                          tmp2=$f9
   130                          flag=$fa
   131                          ptr1=$fb ; and $fc
   132                          ptr2=$fd ; and $fe
   133                          tmp=$ff
   134                          } else {
   135                          ptr1=$fb ; and $fc
   136                          ptr2=$fd ; and $fe
   137                          tmp=$ff
   138                          opidx=$22
   139                          inidx=$23
   140                          mode=$24
   141                          size=$25
   142                          ptr3=$26 ; and $27
   143                          count=$a3
   144                          len=$a4
   145                          savepos=$a5
   146                          tmp2=$a6
   147                          flag=$a7
   148                          }
   149                          
   150                          !ifdef MINIMUM {
   151                          *=$f000
   152                          } else {
   153                          *=$c000
   154                          }
   155                          start:
   156  c000 a953                   lda #<copyright
   157  c002 a2cd                   ldx #>copyright
   158  c004 2087c2                 jsr strout
   159  c007 a9b1                   lda #<firsthelp
   160  c009 a2cd                   ldx #>firsthelp
   161  c00b 2087c2                 jsr strout
   162  c00e 20a2c2             -   jsr inputline
   163  c011 20b0c2                 jsr parseline
   164  c014 4c0ec0                 jmp -
   165                          
   166                          test: ; all the addressing modes here for testing disassembly
   167  c017 ea                     nop
   168  c018 ad3412                 lda $1234
   169  c01b bd3412                 lda $1234,x
   170  c01e b93412                 lda $1234,y
   171  c021 0a                     asl
   172  c022 a912                   lda #$12
   173  c024 a112                   lda ($12,x)
   174  c026 b112                   lda ($12),y
   175  c028 6c3412                 jmp ($1234)
   176  c02b d0fe               -   bne -
   177  c02d a512                   lda $12
   178  c02f b512                   lda $12,x
   179  c031 b612                   ldx $12,y
   180  c033 ff                     !byte $FF ; unknown
   181                          
   182                          disassemble:
   183  c034 a917                   lda #23
   184  c036 85a3                   sta count
   185  c038 a000               -   ldy #0
   186  c03a b1fb                   lda (ptr1),y
   187  c03c 206ec0                 jsr find_opcode
   188  c03f 20d1c0                 jsr disp_current
   189  c042 a525                   lda size
   190  c044 1002                   bpl +
   191  c046 a901                   lda #1
   192  c048 18                 +   clc
   193  c049 65fb                   adc ptr1
   194  c04b 85fb                   sta ptr1
   195  c04d 9002                   bcc +
   196  c04f e6fc                   inc ptr1+1
   197  c051 c6a3               +   dec count
   198  c053 d0e3                   bne -
   199                          !ifdef C64SCREEN {
   200  c055 a5fb                   lda ptr1
   201  c057 a6fc                   ldx ptr1+1
   202  c059 200ac2                 jsr disphexword
   203  c05c a971                   lda #<page_disassemble
   204  c05e a2cf                   ldx #>page_disassemble
   205  c060 4c87c2                 jmp strout
   206                          } else {    
   207                              rts
   208                          }
   209                          
   210                          compareptrs:
   211  c063 a5fc                   lda ptr1+1
   212  c065 c5fe                   cmp ptr2+1
   213  c067 d004                   bne +
   214  c069 a5fb                   lda ptr1
   215  c06b c5fd                   cmp ptr2
   216  c06d 60                 +   rts
   217                          
   218                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   219                          ; and properties updated in ZP globals size,inidx,opidx,mode
   220  c06e a097                   ldy #nopcodes
   221  c070 a296                   ldx #nopcodes-1
   222  c072 dd8ecb             -   cmp opcodes,x
   223  c075 f00f                   beq +
   224  c077 ca                     dex
   225  c078 88                     dey
   226  c079 d0f7                   bne -
   227  c07b 18                     clc
   228  c07c a901                   lda #1
   229  c07e 8525                   sta size
   230  c080 a9ff                   lda #$FF
   231  c082 aa                     tax
   232  c083 a8                     tay
   233  c084 900a                   bcc ++
   234  c086 bd25cc             +   lda instidx, x
   235  c089 bcbccc                 ldy modeidx, x
   236  c08c 2097c0                 jsr getsize
   237  c08f 38                     sec
   238  c090 8523               ++  sta inidx
   239  c092 8622                   stx opidx
   240  c094 8424                   sty mode
   241  c096 60                     rts
   242                          
   243                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   244                              ; result returned in size
   245  c097 48                     pha
   246  c098 a901                   lda #1
   247  c09a 8525                   sta size
   248  c09c 68                     pla
   249  c09d c002                   cpy #2 // Immediate
   250  c09f 9008                   bcc +
   251  c0a1 e625                   inc size
   252  c0a3 c009                   cpy #9 // Absolute
   253  c0a5 9002                   bcc +
   254  c0a7 e625                   inc size
   255  c0a9 60                 +   rts
   256                          
   257                          disp_opcode: ; .A opcode byte
   258  c0aa 206ec0                 jsr find_opcode
   259  c0ad 8a                     txa
   260                              ; fall through to display instruction
   261                          
   262                          dispinst: ; .A instruction index 0..55, note modifies A and X
   263  c0ae aa                     tax
   264  c0af e038                   cpx #ninst
   265  c0b1 b012                   bcs +
   266  c0b3 bdcec9                 lda inst0, x
   267  c0b6 20d2ff                 jsr charout
   268  c0b9 bd06ca                 lda inst1, x
   269  c0bc 20d2ff                 jsr charout
   270  c0bf bd3eca                 lda inst2, x
   271  c0c2 4cd2ff                 jmp charout
   272  c0c5 a93f               +   lda #'?'
   273  c0c7 20d2ff                 jsr charout
   274  c0ca 20d2ff                 jsr charout
   275  c0cd 20d2ff                 jsr charout
   276  c0d0 60                     rts
   277                          
   278                          disp_current:
   279  c0d1 a5fb                   lda ptr1
   280  c0d3 a6fc                   ldx ptr1+1
   281  c0d5 200ac2                 jsr disphexword
   282  c0d8 a920                   lda #$20
   283  c0da 20d2ff                 jsr charout
   284  c0dd a000                   ldy #0
   285  c0df a625                   ldx size
   286  c0e1 b1fb               -   lda (ptr1),y
   287  c0e3 2010c2                 jsr disphexbyte
   288  c0e6 a920                   lda #$20
   289  c0e8 20d2ff                 jsr charout
   290  c0eb c8                     iny
   291  c0ec ca                     dex
   292  c0ed d0f2                   bne -
   293  c0ef c003               -   cpy #3
   294  c0f1 f00e                   beq +
   295  c0f3 a920                   lda #$20
   296  c0f5 20d2ff                 jsr charout
   297  c0f8 20d2ff                 jsr charout
   298  c0fb 20d2ff                 jsr charout
   299  c0fe c8                     iny
   300  c0ff d0ee                   bne -
   301  c101 a523               +   lda inidx
   302  c103 20aec0                 jsr dispinst
   303  c106 a920                   lda #$20
   304  c108 20d2ff                 jsr charout
   305  c10b 2013c1                 jsr disp_mode
   306  c10e a90d                   lda #13
   307  c110 4cd2ff                 jmp charout
   308                          
   309                          disp_mode
   310  c113 a524                   lda mode
   311  c115 c90d                   cmp #13
   312  c117 b00a                   bcs +
   313  c119 0a                     asl
   314  c11a aa                     tax
   315  c11b bd77ca                 lda mode_jmptable+1,x
   316  c11e 48                     pha
   317  c11f bd76ca                 lda mode_jmptable,x
   318  c122 48                     pha
   319  c123 60                 +   rts
   320                          
   321                          dispModeAcc:
   322  c124 a941                   lda #'A'
   323  c126 4cd2ff                 jmp charout
   324                          
   325                          dispModeNone:
   326  c129 60                     rts
   327                          
   328                          dispModeImm:
   329  c12a a923                   lda #'#'
   330  c12c 20d2ff                 jsr charout
   331                          dispModeZP:
   332  c12f a924                   lda #'$'
   333  c131 20d2ff                 jsr charout
   334  c134 a001                   ldy #1
   335  c136 b1fb                   lda (ptr1),y
   336  c138 4c10c2                 jmp disphexbyte
   337                          
   338                          dispModeIndX:
   339  c13b a928                   lda #'('
   340  c13d 20d2ff                 jsr charout
   341  c140 a924                   lda #'$'
   342  c142 20d2ff                 jsr charout
   343  c145 a001                   ldy #1
   344  c147 b1fb                   lda (ptr1),y
   345  c149 2010c2                 jsr disphexbyte
   346  c14c a92c                   lda #','
   347  c14e 20d2ff                 jsr charout
   348  c151 a958                   lda #'X'
   349  c153 20d2ff                 jsr charout
   350  c156 a929                   lda #')'
   351  c158 4cd2ff                 jmp charout
   352                          
   353                          dispModeIndY:
   354  c15b a928                   lda #'('
   355  c15d 20d2ff                 jsr charout
   356  c160 a924                   lda #'$'
   357  c162 20d2ff                 jsr charout
   358  c165 a001                   ldy #1
   359  c167 b1fb                   lda (ptr1),y
   360  c169 2010c2                 jsr disphexbyte
   361  c16c a929                   lda #')'
   362  c16e 20d2ff                 jsr charout
   363  c171 a92c                   lda #','
   364  c173 20d2ff                 jsr charout
   365  c176 a959                   lda #'Y'
   366  c178 4cd2ff                 jmp charout
   367                          
   368                          dispModeRel:
   369  c17b a924                   lda #'$'
   370  c17d 20d2ff                 jsr charout
   371  c180 18                     clc
   372  c181 a5fb                   lda ptr1
   373  c183 6902                   adc #2
   374  c185 8526                   sta ptr3
   375  c187 a5fc                   lda ptr1+1
   376  c189 6900                   adc #0
   377  c18b 8527                   sta ptr3+1
   378  c18d a001                   ldy #1
   379  c18f b1fb                   lda (ptr1),y
   380  c191 1014                   bpl +
   381                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   382  c193 49ff                   eor #$FF ; inverse
   383  c195 18                     clc
   384  c196 6901                   adc #1 ; complete getting absolute value from two's complement
   385  c198 85ff                   sta tmp
   386  c19a 38                     sec
   387  c19b a526                   lda ptr3
   388  c19d e5ff                   sbc tmp
   389  c19f 8526                   sta ptr3
   390  c1a1 b00d                   bcs ++
   391  c1a3 c627                   dec ptr3+1
   392  c1a5 9009                   bcc ++
   393  c1a7 18                 +   clc ; simple case of adding
   394  c1a8 6526                   adc ptr3
   395  c1aa 8526                   sta ptr3
   396  c1ac 9002                   bcc ++
   397  c1ae e627                   inc ptr3+1
   398  c1b0 a526               ++  lda ptr3
   399  c1b2 a627                   ldx ptr3+1
   400  c1b4 4c0ac2                 jmp disphexword
   401                          
   402                          dispModeZPX:
   403  c1b7 202fc1                 jsr dispModeZP
   404  c1ba a92c                   lda #','
   405  c1bc 20d2ff                 jsr charout
   406  c1bf a958                   lda #'X'
   407  c1c1 4cd2ff                 jmp charout
   408                          
   409                          dispModeZPY:
   410  c1c4 202fc1                 jsr dispModeZP
   411  c1c7 a92c                   lda #','
   412  c1c9 20d2ff                 jsr charout
   413  c1cc a959                   lda #'Y'
   414  c1ce 4cd2ff                 jmp charout
   415                          
   416                          dispModeAbs:
   417  c1d1 a924                   lda #'$'
   418  c1d3 20d2ff                 jsr charout
   419  c1d6 a001                   ldy #1
   420  c1d8 b1fb                   lda (ptr1),y
   421  c1da 48                     pha
   422  c1db c8                     iny
   423  c1dc b1fb                   lda (ptr1),y
   424  c1de aa                     tax
   425  c1df 68                     pla
   426  c1e0 4c0ac2                 jmp disphexword
   427                          
   428                          dispModeAbsX:
   429  c1e3 20d1c1                 jsr dispModeAbs
   430  c1e6 a92c                   lda #','
   431  c1e8 20d2ff                 jsr charout
   432  c1eb a958                   lda #'X'
   433  c1ed 4cd2ff                 jmp charout
   434                          
   435                          dispModeAbsY:
   436  c1f0 20d1c1                 jsr dispModeAbs
   437  c1f3 a92c                   lda #','
   438  c1f5 20d2ff                 jsr charout
   439  c1f8 a959                   lda #'Y'
   440  c1fa 4cd2ff                 jmp charout
   441                          
   442                          dispModeInd:
   443  c1fd a928                   lda #'('
   444  c1ff 20d2ff                 jsr charout
   445  c202 20d1c1                 jsr dispModeAbs
   446  c205 a929                   lda #')'
   447  c207 4cd2ff                 jmp charout
   448                          
   449                          disphexword: ; .A low, .X high, 0000..FFFF
   450  c20a 48                     pha
   451  c20b 8a                     txa
   452  c20c 2010c2                 jsr disphexbyte
   453  c20f 68                     pla
   454                              ;fall through to call again
   455                          
   456                          disphexbyte: ; .A 00..FF
   457  c210 48                     pha
   458  c211 4a                     lsr
   459  c212 4a                     lsr
   460  c213 4a                     lsr
   461  c214 4a                     lsr
   462  c215 2019c2                 jsr disphexnybble
   463  c218 68                     pla
   464                              ;fall through to call again
   465                          
   466                          disphexnybble: ; .A 0..F
   467  c219 290f                   and #$0F
   468  c21b 0930                   ora #$30
   469  c21d c93a                   cmp #$3A
   470  c21f 9002                   bcc +
   471  c221 6906                   adc #$06
   472  c223 4cd2ff             +   jmp charout
   473                          
   474                          inputhexword: ; C set if fails
   475  c226 a900                   lda #0
   476  c228 85fb                   sta ptr1
   477  c22a 85fc                   sta ptr1+1
   478                          
   479  c22c a904                   lda #4 ; word is at most 4 nybbles
   480  c22e 85a3                   sta count
   481  c230 2069c2             --  jsr inputhexnybble
   482  c233 b012                   bcs +
   483                          
   484                              ; shift nibble up
   485  c235 0a                     asl
   486  c236 0a                     asl
   487  c237 0a                     asl
   488  c238 0a                     asl
   489                          
   490  c239 a204                   ldx #4 ; 4 bits rotated into word
   491  c23b 2a                 -   rol
   492  c23c 26fb                   rol ptr1
   493  c23e 26fc                   rol ptr1+1
   494  c240 ca                     dex
   495  c241 d0f8                   bne - ; repeat bits
   496                          
   497  c243 c6a3                   dec count
   498  c245 d0e9                   bne -- ; repeat nybbles
   499                          
   500  c247 a5a3               +   lda count
   501  c249 c904                   cmp #4
   502  c24b f0ee                   beq - ; fail if none parsed
   503  c24d 18                 +   clc ; any nybbles parsed (0..4 is fine)
   504  c24e 60                     rts
   505                          
   506                          inputhexbyte:
   507  c24f 2069c2                 jsr inputhexnybble
   508  c252 b014                   bcs ++
   509  c254 85ff                   sta tmp
   510  c256 2069c2                 jsr inputhexnybble
   511  c259 9005                   bcc +
   512  c25b 18                     clc ; allow single digit as byte
   513  c25c a5ff                   lda tmp
   514  c25e 9008                   bcc ++
   515  c260 06ff               +   asl tmp
   516  c262 06ff                   asl tmp
   517  c264 06ff                   asl tmp
   518  c266 06ff                   asl tmp
   519  c268 60                 ++  rts
   520                          
   521                          inputhexnybble:
   522  c269 b90002                 lda $0200,y
   523  c26c 297f                   and #$7F
   524  c26e 38                     sec
   525  c26f e930                   sbc #$30
   526  c271 9012                   bcc ++
   527  c273 c90a                   cmp #10
   528  c275 900c                   bcc +
   529  c277 e907                   sbc #7
   530  c279 900a                   bcc ++
   531  c27b c90a                   cmp #10
   532  c27d 9006                   bcc ++
   533  c27f c910                   cmp #16
   534  c281 b002                   bcs ++
   535  c283 c8                 +   iny
   536  c284 60                     rts
   537  c285 38                 ++  sec
   538  c286 60                     rts
   539                          
   540                          strout:
   541  c287 8526                   sta ptr3
   542  c289 8627                   stx ptr3+1
   543                          strout2:    
   544  c28b a000                   ldy #0
   545  c28d b126               -   lda (ptr3),y
   546  c28f f006                   beq +
   547  c291 20d2ff                 jsr charout
   548  c294 c8                     iny
   549  c295 d0f6                   bne -
   550  c297 98                 +   tya
   551  c298 38                     sec
   552  c299 6526                   adc ptr3
   553  c29b 8526                   sta ptr3
   554  c29d 9002                   bcc +
   555  c29f e627                   inc ptr3+1
   556  c2a1 60                 +   rts
   557                          
   558                          inputline:
   559                          !ifdef C64SCREEN {
   560  c2a2 a000                   ldy #0
   561  c2a4 20cfff             -   jsr charin
   562  c2a7 990002                 sta inputbuf,y
   563  c2aa c8                     iny
   564  c2ab c90d                   cmp #13
   565  c2ad d0f5                   bne -
   566  c2af 60                     rts
   567                          } else {
   568                              ldy #0
   569                          --  sty count
   570                          -   jsr getkey
   571                              beq -
   572                              ldy count
   573                          !ifdef MINIMUM {
   574                              cmp #8 ; backspace
   575                          } else {
   576                              cmp #20
   577                          }
   578                              bne +
   579                              cpy #0
   580                              beq -
   581                              dey
   582                          !if NEEDECHO = 1 {    
   583                              jsr charout
   584                          }
   585                              jmp --
   586                          +   cmp #13
   587                              beq +
   588                              cmp #' '
   589                              bcc -
   590                              cmp #128
   591                              bcs -
   592                          +
   593                          !if NEEDECHO = 1 {    
   594                              jsr charout
   595                          }
   596                              sta inputbuf,y
   597                              iny
   598                              cmp #13
   599                              bne --
   600                              rts
   601                          }
   602                          
   603                          parseline:
   604  c2b0 c001                   cpy #1
   605  c2b2 d003                   bne +
   606                          -
   607                          !ifdef C64SCREEN {   
   608  c2b4 4cc9c9                 jmp newline
   609                          } else {
   610                              rts
   611                          }
   612  c2b7 88                 +   dey
   613  c2b8 84a4                   sty len
   614                              ; skip whitespace
   615                              ; check for address, put in ptr1
   616                              ; or check for dot, then require address put in ptr2
   617                              ; or check for ?, and optional parameter, execute help
   618                              ; check for whitespace
   619                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   620                              ; check for string, store at start of inputbuf
   621                              ; check for drive number
   622                              ; check for whitespace
   623                              ; check command ":rda?mls", execute command
   624  c2ba a000                   ldy #0
   625  c2bc 200cc9                 jsr skipspaces
   626  c2bf c4a4                   cpy len
   627  c2c1 f0f1                   beq -
   628  c2c3 20d4c8                 jsr chkcontinuedis
   629  c2c6 d003                   bne +
   630  c2c8 20e6c8                 jsr executedisassemble ; note won't return
   631  c2cb 2017c9             +   jsr chkdot
   632  c2ce d003                   bne +
   633  c2d0 4cb8c3                 jmp executedot
   634  c2d3 2022c9             +   jsr chkhelp
   635  c2d6 d003                   bne +
   636  c2d8 4cc2c3                 jmp executehelp
   637  c2db 206cc9             +   jsr chkhexaddr1
   638  c2de d003                   bne error
   639  c2e0 4ce6c2                 jmp executeaddr1
   640                          error:
   641  c2e3 4cf5c8                 jmp reporterr
   642                          
   643                          executeaddr1:
   644  c2e6 c4a4                   cpy len
   645  c2e8 d003                   bne +
   646  c2ea 4c39c3                 jmp executedisplay1
   647  c2ed 2017c9             +   jsr chkdot
   648  c2f0 d00f                   bne +
   649  c2f2 c4a4                   cpy len
   650  c2f4 f021                   beq executepagedisplay
   651  c2f6 208cc9                 jsr chkhexaddr2
   652  c2f9 d0e8                   bne error
   653  c2fb 18                     clc
   654  c2fc 66a7                   ror flag
   655  c2fe 4c2fc3                 jmp executeaddr12
   656  c301 200cc9             +   jsr skipspaces
   657  c304 202dc9                 jsr chkcolon
   658  c307 d003                   bne +
   659  c309 4c96c3                 jmp executemodify
   660  c30c 20adc9             +   jsr chkaddr1cmd ; rda, will not return here if cmd
   661  c30f 2038c9                 jsr chkfilename
   662  c312 d0cf                   bne error
   663  c314 4cbfc3                 jmp executeloadfilename
   664                          
   665                          executepagedisplay:
   666  c317 a5fb                   lda ptr1
   667  c319 18                     clc
   668                          !ifdef MINIMUM {
   669                              adc #$5f
   670                          } else {
   671  c31a 69b7                   adc #$b7
   672                          }
   673  c31c 85fd                   sta ptr2
   674  c31e a5fc                   lda ptr1+1
   675                          !ifdef MINIMUM {
   676                              adc #$01
   677                          } else {
   678  c320 6900                   adc #$00
   679                          }
   680  c322 85fe                   sta ptr2+1
   681  c324 9006                   bcc +
   682  c326 a9ff                   lda #$ff
   683  c328 85fd                   sta ptr2
   684  c32a 85fe                   sta ptr2+1
   685  c32c 38                 +   sec
   686  c32d 66a7                   ror flag
   687                              ; fall through to executeaddr12
   688                          
   689                          executeaddr12:
   690  c32f c4a4                   cpy len
   691  c331 d003                   bne +
   692  c333 4c41c3                 jmp executedisplay12
   693  c336 4ceec8             +   jmp reportnotimplemented
   694                          
   695                          executedisplay1:
   696  c339 a5fb                   lda ptr1
   697  c33b 85fd                   sta ptr2
   698  c33d a5fc                   lda ptr1+1
   699  c33f 85fe                   sta ptr2+1
   700                              ; fall through executedisplay12
   701                          
   702                          executedisplay12:
   703  c341 a9ff                   lda #$ff
   704  c343 85a3                   sta count
   705  c345 e6a3               -   inc count
   706  c347 a5a3                   lda count
   707                          !ifdef MINIMUM {    
   708                              and #$0f
   709                          } else {
   710  c349 2907                   and #$07
   711                          }
   712  c34b d016                   bne +
   713  c34d a90d                   lda #13
   714  c34f 20d2ff                 jsr charout
   715  c352 a5fb                   lda ptr1
   716  c354 a6fc                   ldx ptr1+1
   717  c356 200ac2                 jsr disphexword
   718  c359 a93a                   lda #':'
   719  c35b 20d2ff                 jsr charout
   720  c35e a920                   lda #' '
   721  c360 20d2ff                 jsr charout
   722  c363 a000               +   ldy #0
   723  c365 b1fb                   lda (ptr1),y
   724  c367 2010c2                 jsr disphexbyte
   725  c36a a920                   lda #' '
   726  c36c 20d2ff                 jsr charout
   727  c36f e6fb                   inc ptr1
   728  c371 d004                   bne +
   729  c373 e6fc                   inc ptr1+1
   730  c375 f01c                   beq ++
   731  c377 2063c0             +   jsr compareptrs
   732  c37a 90c9                   bcc -
   733  c37c f0c7                   beq -
   734  c37e 24a7                   bit flag
   735  c380 1011                   bpl ++
   736                          !ifdef C64SCREEN {
   737  c382 20c9c9                 jsr newline
   738  c385 a5fb                   lda ptr1
   739  c387 a6fc                   ldx ptr1+1
   740  c389 200ac2                 jsr disphexword
   741  c38c a978                   lda #<page_displaymemory
   742  c38e a2cf                   ldx #>page_displaymemory
   743  c390 4c87c2                 jmp strout
   744                          }
   745  c393 4cc9c9             ++  jmp newline
   746                          
   747                          executemodify:
   748  c396 200cc9                 jsr skipspaces
   749  c399 c4a4                   cpy len
   750  c39b f018                   beq ++
   751  c39d 2052c9                 jsr chkhexbyteofsequence
   752  c3a0 f003                   beq +
   753  c3a2 4ce3c2                 jmp error
   754  c3a5 84ff               +   sty tmp
   755  c3a7 a000                   ldy #0
   756  c3a9 91fb                   sta (ptr1),y
   757  c3ab e6fb                   inc ptr1
   758  c3ad d002                   bne +
   759  c3af e6fc                   inc ptr1+1
   760  c3b1 a4ff               +   ldy tmp
   761  c3b3 d0e1                   bne executemodify
   762  c3b5 4cc9c9             ++  jmp newline
   763                          
   764                          executedot:
   765  c3b8 c4a4                   cpy len
   766  c3ba d003                   bne +
   767  c3bc 4c17c3                 jmp executepagedisplay
   768                          
   769                          executeloadfilename:
   770                          executeaddr1cmd:
   771  c3bf 4ceec8             +   jmp reportnotimplemented
   772                          
   773                          executehelp:
   774                          !ifdef C64SCREEN {
   775  c3c2 20c9c9                 jsr newline
   776                          }
   777  c3c5 c4a4                   cpy len
   778  c3c7 d003                   bne +
   779  c3c9 4ceac3                 jmp displayhelp
   780  c3cc 200cc9             +   jsr skipspaces
   781  c3cf 20ffc3                 jsr chkhelpinstructions
   782  c3d2 d003                   bne +
   783  c3d4 4c2ec4                 jmp displayinstructions
   784  c3d7 200cc4             +   jsr chkhelpmodes
   785  c3da d003                   bne +
   786  c3dc 4c45c4                 jmp displaymodes
   787  c3df 2051c8             +   jsr chkinstruction
   788  c3e2 d003                   bne +
   789  c3e4 4cf5c4                 jmp executehelpinstruction
   790  c3e7 4ceec8             +   jmp reportnotimplemented
   791                          
   792                          displayhelp:
   793  c3ea a932                   lda #<generalhelp
   794  c3ec a2ce                   ldx #>generalhelp
   795  c3ee 2087c2                 jsr strout
   796  c3f1 a9a1                   lda #<generalhelp2
   797  c3f3 a2ce                   ldx #>generalhelp2
   798  c3f5 2087c2                 jsr strout
   799  c3f8 a9b1                   lda #<firsthelp
   800  c3fa a2cd                   ldx #>firsthelp
   801  c3fc 4c87c2                 jmp strout
   802                          
   803                          chkhelpinstructions:
   804  c3ff b90002                 lda inputbuf, y
   805  c402 c941                   cmp #'A'
   806  c404 d005                   bne +
   807  c406 b90102                 lda inputbuf+1, y
   808  c409 c90d                   cmp #13
   809                              ; no need to increment y if found, done parsing line
   810  c40b 60                 +   rts
   811                          
   812                          chkhelpmodes:
   813  c40c a96c                   lda #<modes_keyword
   814  c40e a2cf                   ldx #>modes_keyword
   815                              ; fall through to chkkeyword
   816                          
   817                          chkkeyword:
   818  c410 84a3                   sty count
   819  c412 8526                   sta ptr3
   820  c414 8627                   stx ptr3+1
   821  c416 a6a3                   ldx count
   822  c418 a000                   ldy #0
   823  c41a bd0002             -   lda inputbuf, x
   824  c41d d126                   cmp (ptr3),y
   825  c41f d008                   bne +
   826  c421 e8                     inx
   827  c422 c8                     iny
   828  c423 e4a4                   cpx len
   829  c425 d0f3                   bne -
   830  c427 b126                   lda (ptr3),y ; matched if end of string, will set Z
   831  c429 08                 +   php ; save Z
   832  c42a a4a3                   ldy count
   833  c42c 28                     plp ; restore Z
   834  c42d 60                     rts
   835                          
   836                          displayinstructions:
   837  c42e a038                   ldy #ninst
   838  c430 a200                   ldx #0
   839  c432 8a                 -   txa
   840  c433 48                     pha
   841  c434 20aec0                 jsr dispinst
   842  c437 a920                   lda #' '
   843  c439 20d2ff                 jsr charout
   844  c43c 68                     pla
   845  c43d aa                     tax
   846  c43e e8                     inx
   847  c43f 88                     dey
   848  c440 d0f0                   bne -
   849  c442 4cc9c9                 jmp newline
   850                          
   851                          displaymodes:
   852  c445 38                     sec
   853  c446 a900                   lda #0
   854  c448 48                 -   pha
   855  c449 aa                     tax
   856  c44a bd90ca                 lda mode_sorted, x
   857  c44d 205ac4                 jsr dispmode
   858  c450 68                     pla
   859  c451 18                     clc
   860  c452 6901                   adc #1
   861  c454 c90d                   cmp #nmodes
   862  c456 90f0                   bcc -
   863  c458 18                     clc
   864  c459 60                     rts
   865                          
   866                          dispmode:
   867  c45a c90d                   cmp #nmodes
   868  c45c b008                   bcs +
   869  c45e 8524                   sta mode
   870  c460 20a2c4                 jsr disp_modename_and_example
   871  c463 4c67c4                 jmp dispmodeinstructions
   872  c466 60                 +   rts
   873                          
   874                          dispmodeinstructions:
   875                          !ifdef C64SCREEN {
   876                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
   877  c467 a524                   lda mode
   878  c469 c903                   cmp #3
   879  c46b d005                   bne +
   880  c46d a920                   lda #' '
   881  c46f 4cd2ff                 jmp charout
   882                          }
   883                              ; display instructions with this mode
   884  c472 a000               +   ldy #0
   885  c474 8423               --  sty inidx
   886  c476 a200                   ldx #0
   887  c478 86ff               -   stx tmp
   888  c47a a523                   lda inidx
   889  c47c dd25cc                 cmp instidx, x
   890  c47f d014                   bne ++
   891  c481 bdbccc                 lda modeidx, x
   892  c484 c524                   cmp mode
   893  c486 d00d                   bne ++
   894  c488 a920                   lda #' '
   895  c48a 20d2ff                 jsr charout
   896  c48d bd25cc                 lda instidx, x
   897  c490 20aec0                 jsr dispinst
   898  c493 a6ff                   ldx tmp
   899  c495 e8                 ++  inx
   900  c496 e097                   cpx #nopcodes
   901  c498 90de                   bcc -
   902  c49a c8                     iny
   903  c49b c038                   cpy #ninst
   904  c49d d0d5                   bne --
   905  c49f 4cc9c9                 jmp newline
   906                          
   907                          disp_modename_and_example:
   908  c4a2 0a                     asl
   909  c4a3 aa                     tax
   910  c4a4 bd74cb                 lda modes, x
   911  c4a7 48                     pha
   912  c4a8 bd75cb                 lda modes+1, x
   913  c4ab aa                     tax
   914                          !ifdef C64SCREEN {
   915  c4ac a912                   lda #18
   916  c4ae 20d2ff                 jsr charout
   917                          }    
   918  c4b1 68                     pla
   919  c4b2 2087c2                 jsr strout
   920  c4b5 a920                   lda #' '
   921  c4b7 20d2ff                 jsr charout
   922  c4ba 208bc2                 jsr strout2
   923                          !ifdef C64SCREEN {    
   924  c4bd a992                   lda #146
   925  c4bf 20d2ff                 jsr charout
   926                          }   
   927  c4c2 60                     rts
   928                          
   929                          disp_modename_instruction_example:
   930  c4c3 0a                     asl
   931  c4c4 aa                     tax
   932  c4c5 bd74cb                 lda modes, x
   933  c4c8 48                     pha
   934  c4c9 bd75cb                 lda modes+1, x
   935  c4cc aa                     tax
   936  c4cd 68                     pla
   937  c4ce 2087c2                 jsr strout ; mode name
   938  c4d1 a526                   lda ptr3
   939  c4d3 48                     pha
   940  c4d4 a527                   lda ptr3+1
   941  c4d6 48                     pha
   942  c4d7 a93a                   lda #':'
   943  c4d9 20d2ff                 jsr charout
   944  c4dc a920                   lda #' '
   945  c4de 20d2ff                 jsr charout
   946  c4e1 a523                   lda inidx
   947  c4e3 20aec0                 jsr dispinst ; instruction
   948  c4e6 a920                   lda #' '
   949  c4e8 20d2ff                 jsr charout
   950  c4eb 68                     pla
   951  c4ec 8527                   sta ptr3+1
   952  c4ee 68                     pla
   953  c4ef 8526                   sta ptr3
   954  c4f1 208bc2                 jsr strout2 ; example
   955  c4f4 60                     rts
   956                          
   957                          
   958                          executehelpinstruction:
   959  c4f5 a000                   ldy #0
   960  c4f7 8422               -   sty opidx
   961  c4f9 b925cc                 lda instidx, y
   962  c4fc c523                   cmp inidx
   963  c4fe d01a                   bne +
   964  c500 b9bccc                 lda modeidx, y
   965  c503 8524                   sta mode
   966  c505 a622                   ldx opidx
   967  c507 bd8ecb                 lda opcodes, x
   968  c50a 2010c2                 jsr disphexbyte
   969  c50d a920                   lda #' '
   970  c50f 20d2ff                 jsr charout
   971  c512 a524                   lda mode
   972  c514 20c3c4                 jsr disp_modename_instruction_example
   973  c517 20c9c9                 jsr newline
   974  c51a a422               +   ldy opidx
   975  c51c c8                     iny
   976  c51d c097                   cpy #nopcodes
   977  c51f 90d6                   bcc -
   978  c521 60                     rts
   979                          
   980                          executeassemble:
   981  c522 68                     pla ; remove low byte return address
   982  c523 68                     pla ; return high byte return address
   983                          !ifdef C64SCREEN {    
   984  c524 a914                   lda #20
   985  c526 20d2ff                 jsr charout
   986  c529 20d2ff                 jsr charout
   987                          } else {
   988                              lda ptr1
   989                              ldx ptr1+1
   990                              jsr disphexword
   991                              lda #' '
   992                              jsr charout
   993                          }
   994                              ; save current pointer
   995  c52c a5fb               --  lda ptr1
   996  c52e a6fc                   ldx ptr1+1
   997  c530 8526                   sta ptr3
   998  c532 8627                   stx ptr3+1
   999  c534 20a2c2                 jsr inputline
  1000  c537 c001                   cpy #1
  1001  c539 f040                   beq ++
  1002  c53b 88                     dey
  1003  c53c 84a4                   sty len
  1004  c53e a000                   ldy #0
  1005  c540 200cc9                 jsr skipspaces
  1006  c543 c4a4                   cpy len
  1007  c545 f034                   beq ++
  1008                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1009                              ;jsr skipspaces
  1010  c547 2051c8                 jsr chkinstruction
  1011  c54a f003                   beq +
  1012  c54c 4ce3c2             -   jmp error    
  1013  c54f 20a5c5             +   jsr chkaddressing
  1014  c552 d0f8                   bne -
  1015  c554 2082c8                 jsr find_inst_and_mode
  1016  c557 d0f3                   bne -
  1017  c559 207ec5                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1018  c55c 18                     clc
  1019  c55d a525                   lda size
  1020  c55f 6526                   adc ptr3
  1021  c561 85fb                   sta ptr1
  1022  c563 a527                   lda ptr3+1
  1023  c565 6900                   adc #0
  1024  c567 85fc                   sta ptr1+1
  1025                          !ifdef C64SCREEN {    
  1026  c569 20c9c9                 jsr newline
  1027                          }
  1028  c56c a5fb                   lda ptr1
  1029  c56e a6fc                   ldx ptr1+1
  1030  c570 200ac2                 jsr disphexword
  1031  c573 a920                   lda #' '
  1032  c575 20d2ff                 jsr charout
  1033  c578 4c2cc5                 jmp --
  1034                          ++  
  1035                          !ifdef C64SCREEN {
  1036  c57b 4cc9c9                 jmp newline
  1037                          } else {
  1038                              rts
  1039                          }
  1040                          
  1041                          store_assembly:
  1042  c57e a622                   ldx opidx
  1043  c580 bd8ecb                 lda opcodes, x
  1044  c583 a000                   ldy #0
  1045  c585 9126                   sta (ptr3), y
  1046  c587 c8                     iny
  1047  c588 a625                   ldx size
  1048  c58a e001                   cpx #1
  1049  c58c f016                   beq ++
  1050  c58e e002               +   cpx #2
  1051  c590 d005                   bne +
  1052  c592 a5a6                   lda tmp2
  1053  c594 9126                   sta (ptr3), y
  1054  c596 60                     rts
  1055  c597 e003               +   cpx #3
  1056  c599 d009                   bne ++
  1057  c59b a5fb                   lda ptr1
  1058  c59d 9126                   sta (ptr3), y
  1059  c59f c8                     iny
  1060  c5a0 a5fc                   lda ptr1+1
  1061  c5a2 9126                   sta (ptr3), y
  1062  c5a4 60                 ++  rts
  1063                          
  1064                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1065  c5a5 200cc9                 jsr skipspaces
  1066  c5a8 a200                   ldx #0
  1067  c5aa 8624                   stx mode
  1068  c5ac 2007c6                 jsr chkaccumulator
  1069  c5af f051                   beq +
  1070  c5b1 e624                   inc mode
  1071  c5b3 c4a4                   cpy len ; chknone
  1072  c5b5 f04b                   beq +
  1073  c5b7 e624                   inc mode
  1074  c5b9 202bc6                 jsr chkimmediate
  1075  c5bc f044                   beq +
  1076  c5be e624                   inc mode
  1077  c5c0 204fc6                 jsr chkindirectx
  1078  c5c3 f03d                   beq +
  1079  c5c5 e624                   inc mode
  1080  c5c7 2094c6                 jsr chkindirecty
  1081  c5ca f036                   beq +
  1082  c5cc e624                   inc mode
  1083  c5ce 20d9c6                 jsr chkrelative
  1084  c5d1 f02f                   beq +
  1085  c5d3 e624                   inc mode
  1086  c5d5 2034c7                 jsr chkzeropage
  1087  c5d8 f028                   beq +
  1088  c5da e624                   inc mode
  1089  c5dc 204dc7                 jsr chkzeropagex
  1090  c5df f021                   beq +
  1091  c5e1 e624                   inc mode
  1092  c5e3 207cc7                 jsr chkzeropagey
  1093  c5e6 f01a                   beq +
  1094  c5e8 e624                   inc mode
  1095  c5ea 20abc7                 jsr chkabsolute
  1096  c5ed f013                   beq +
  1097  c5ef e624                   inc mode
  1098  c5f1 20c4c7                 jsr chkabsolutex
  1099  c5f4 f00c                   beq +
  1100  c5f6 e624                   inc mode
  1101  c5f8 20f3c7                 jsr chkabsolutey
  1102  c5fb f005                   beq +
  1103  c5fd e624                   inc mode
  1104  c5ff 2022c8                 jsr chkindirect
  1105  c602 08                 +   php ; save Z
  1106  c603 a524                   lda mode
  1107  c605 28                     plp ; restore Z 
  1108  c606 60                     rts
  1109                          
  1110                          chkaccumulator:
  1111  c607 c4a4                   cpy len
  1112  c609 d013                   bne +
  1113  c60b a523                   lda inidx
  1114  c60d c902                   cmp #2 ; ASL
  1115  c60f f019                   beq ++
  1116  c611 c920                   cmp #32 ; LSR
  1117  c613 f015                   beq ++
  1118  c615 c927                   cmp #39 ; ROL
  1119  c617 f011                   beq ++
  1120  c619 c928                   cmp #40 ; ROR
  1121  c61b 4c2ac6                 jmp ++
  1122  c61e b90002             +   lda inputbuf, y
  1123  c621 c941                   cmp #'A'
  1124  c623 d005                   bne ++
  1125  c625 b90102                 lda inputbuf+1,y
  1126  c628 c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1127  c62a 60                 ++  rts
  1128                          
  1129                          chkimmediate:
  1130  c62b 84a5                   sty savepos
  1131  c62d b90002                 lda inputbuf, y
  1132  c630 c923                   cmp #'#'
  1133  c632 d016                   bne ++
  1134  c634 c8                     iny
  1135  c635 200cc9                 jsr skipspaces
  1136  c638 b90002                 lda inputbuf, y
  1137  c63b c924                   cmp #'$'
  1138  c63d d001                   bne +
  1139  c63f c8                     iny
  1140  c640 2075c9             +   jsr chkhexbyte
  1141  c643 d005                   bne ++
  1142  c645 c4a4               +   cpy len
  1143  c647 d001                   bne ++
  1144  c649 60                     rts
  1145  c64a a4a5               ++  ldy savepos
  1146  c64c a201                   ldx #1 ; Z false (NE)
  1147  c64e 60                     rts
  1148                          
  1149                          chkindirectx:
  1150  c64f 84a5                   sty savepos
  1151  c651 b90002                 lda inputbuf, y
  1152  c654 c928                   cmp #'('
  1153  c656 d037                   bne ++
  1154  c658 c8                     iny
  1155  c659 200cc9                 jsr skipspaces
  1156  c65c b90002                 lda inputbuf, y
  1157  c65f c924                   cmp #'$'
  1158  c661 d001                   bne +
  1159  c663 c8                     iny
  1160  c664 2075c9             +   jsr chkhexbyte
  1161  c667 d026                   bne ++
  1162  c669 200cc9                 jsr skipspaces
  1163  c66c b90002                 lda inputbuf, y
  1164  c66f c92c                   cmp #','
  1165  c671 d01c                   bne ++
  1166  c673 c8                     iny
  1167  c674 200cc9                 jsr skipspaces
  1168  c677 b90002                 lda inputbuf, y
  1169  c67a c958                   cmp #'X'
  1170  c67c d011                   bne ++
  1171  c67e c8                     iny
  1172  c67f 200cc9                 jsr skipspaces
  1173  c682 b90002                 lda inputbuf, y
  1174  c685 c929                   cmp #')'
  1175  c687 d006                   bne ++
  1176  c689 c8                     iny
  1177  c68a c4a4                   cpy len
  1178  c68c d001                   bne ++
  1179  c68e 60                     rts
  1180  c68f a4a5               ++  ldy savepos
  1181  c691 a201                   ldx #1 ; Z false (NE)
  1182  c693 60                     rts
  1183                          
  1184                          chkindirecty:
  1185  c694 84a5                   sty savepos
  1186  c696 b90002                 lda inputbuf, y
  1187  c699 c928                   cmp #'('
  1188  c69b d037                   bne ++
  1189  c69d c8                     iny
  1190  c69e 200cc9                 jsr skipspaces
  1191  c6a1 b90002                 lda inputbuf, y
  1192  c6a4 c924                   cmp #'$'
  1193  c6a6 d001                   bne +
  1194  c6a8 c8                     iny
  1195  c6a9 2075c9             +   jsr chkhexbyte
  1196  c6ac d026                   bne ++
  1197  c6ae 200cc9                 jsr skipspaces
  1198  c6b1 b90002                 lda inputbuf, y
  1199  c6b4 c929                   cmp #')'
  1200  c6b6 d01c                   bne ++
  1201  c6b8 c8                     iny
  1202  c6b9 200cc9                 jsr skipspaces
  1203  c6bc b90002                 lda inputbuf, y
  1204  c6bf c92c                   cmp #','
  1205  c6c1 d011                   bne ++
  1206  c6c3 c8                     iny
  1207  c6c4 200cc9                 jsr skipspaces
  1208  c6c7 b90002                 lda inputbuf, y
  1209  c6ca c959                   cmp #'Y'
  1210  c6cc d006                   bne ++
  1211  c6ce c8                     iny
  1212  c6cf c4a4                   cpy len
  1213  c6d1 d001                   bne ++
  1214  c6d3 60                     rts
  1215  c6d4 a4a5               ++  ldy savepos
  1216  c6d6 a201                   ldx #1 ; Z false (NE)
  1217  c6d8 60                     rts
  1218                          
  1219                          chkrelative:
  1220  c6d9 84a5                   sty savepos
  1221  c6db a623                   ldx inidx
  1222  c6dd e006                   cpx #6 ; BIT
  1223  c6df f01e                   beq ++
  1224  c6e1 bdcec9                 lda inst0, x
  1225  c6e4 c942                   cmp #'B'
  1226  c6e6 d017                   bne ++
  1227  c6e8 b90002                 lda inputbuf, y
  1228  c6eb c924                   cmp #'$'
  1229  c6ed d001                   bne +
  1230  c6ef c8                     iny
  1231  c6f0 206cc9             +   jsr chkhexword
  1232  c6f3 d00a                   bne ++
  1233  c6f5 c4a4                   cpy len
  1234  c6f7 d006                   bne ++
  1235  c6f9 2004c7                 jsr computeoffset
  1236  c6fc d001                   bne ++
  1237  c6fe 60                     rts ; Z true (EQ)
  1238  c6ff a4a5               ++  ldy savepos
  1239  c701 a201                   ldx #1 ; Z false (NE)
  1240  c703 60                     rts
  1241                          
  1242                          computeoffset:
  1243                          ;   compute next address
  1244  c704 a527                   lda ptr3+1
  1245  c706 85fe                   sta ptr2+1
  1246  c708 a526                   lda ptr3
  1247  c70a 18                     clc
  1248  c70b 6902                   adc #2
  1249  c70d 85fd                   sta ptr2
  1250  c70f 9002                   bcc +
  1251  c711 e6fe                   inc ptr2+1
  1252                          +  ; subtract argument
  1253  c713 38                     sec
  1254  c714 a5fb                   lda ptr1
  1255  c716 e5fd                   sbc ptr2
  1256  c718 85a6                   sta tmp2
  1257  c71a a5fc                   lda ptr1+1
  1258  c71c e5fe                   sbc ptr2+1
  1259  c71e f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1260  c720 c9ff                   cmp #$FF
  1261  c722 d00d                   bne failedoffset ; 0 and FF were only options so fail
  1262                              ; chkeck negative offset
  1263  c724 a5a6                   lda tmp2
  1264  c726 3006                   bmi successoffset ; branch if signed byte is negative
  1265  c728 1007                   bpl failedoffset ; otherwise fail
  1266                          chkoffsetto127:
  1267  c72a a5a6                   lda tmp2
  1268  c72c 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1269                          successoffset:    
  1270  c72e a900                   lda #0 ; Z true (EQ)
  1271  c730 60                     rts
  1272                          failedoffset:
  1273  c731 a901                   lda #1 ; Z false (NE)
  1274  c733 60                     rts
  1275                          
  1276                          chkzeropage:
  1277  c734 84a5                   sty savepos
  1278  c736 b90002                 lda inputbuf, y
  1279  c739 c924                   cmp #'$'
  1280  c73b d001                   bne +
  1281  c73d c8                     iny
  1282  c73e 2075c9             +   jsr chkhexbyte
  1283  c741 d005                   bne ++
  1284  c743 c4a4                   cpy len
  1285  c745 d001                   bne ++
  1286  c747 60                     rts ; Z true (EQ)
  1287  c748 a4a5               ++  ldy savepos
  1288  c74a a201                   ldx #1 ; Z false (NE)
  1289  c74c 60                     rts
  1290                          
  1291                          chkzeropagex:
  1292  c74d 84a5                   sty savepos
  1293  c74f b90002                 lda inputbuf, y
  1294  c752 c924                   cmp #'$'
  1295  c754 d001                   bne +
  1296  c756 c8                     iny
  1297  c757 2075c9             +   jsr chkhexbyte
  1298  c75a d01b                   bne ++
  1299  c75c 200cc9                 jsr skipspaces
  1300  c75f b90002                 lda inputbuf, y
  1301  c762 c92c                   cmp #','
  1302  c764 d011                   bne ++
  1303  c766 c8                     iny
  1304  c767 200cc9                 jsr skipspaces
  1305  c76a b90002                 lda inputbuf, y
  1306  c76d c958                   cmp #'X'
  1307  c76f d006                   bne ++
  1308  c771 c8                     iny
  1309  c772 c4a4                   cpy len
  1310  c774 d001                   bne ++
  1311  c776 60                     rts ; Z true (EQ)
  1312  c777 a4a5               ++  ldy savepos
  1313  c779 a201                   ldx #1 ; Z false (NE)
  1314  c77b 60                     rts
  1315                          
  1316                          chkzeropagey:
  1317  c77c 84a5                   sty savepos
  1318  c77e b90002                 lda inputbuf, y
  1319  c781 c924                   cmp #'$'
  1320  c783 d001                   bne +
  1321  c785 c8                     iny
  1322  c786 2075c9             +   jsr chkhexbyte
  1323  c789 d01b                   bne ++
  1324  c78b 200cc9                 jsr skipspaces
  1325  c78e b90002                 lda inputbuf, y
  1326  c791 c92c                   cmp #','
  1327  c793 d011                   bne ++
  1328  c795 c8                     iny
  1329  c796 200cc9                 jsr skipspaces
  1330  c799 b90002                 lda inputbuf, y
  1331  c79c c959                   cmp #'Y'
  1332  c79e d006                   bne ++
  1333  c7a0 c8                     iny
  1334  c7a1 c4a4                   cpy len
  1335  c7a3 d001                   bne ++
  1336  c7a5 60                     rts ; Z true (EQ)
  1337  c7a6 a4a5               ++  ldy savepos
  1338  c7a8 a201                   ldx #1 ; Z false (NE)
  1339  c7aa 60                     rts
  1340                          
  1341                          chkabsolute:
  1342  c7ab 84a5                   sty savepos
  1343  c7ad b90002                 lda inputbuf, y
  1344  c7b0 c924                   cmp #'$'
  1345  c7b2 d001                   bne +
  1346  c7b4 c8                     iny
  1347  c7b5 206cc9             +   jsr chkhexword
  1348  c7b8 d005                   bne ++
  1349  c7ba c4a4                   cpy len
  1350  c7bc d001                   bne ++
  1351  c7be 60                     rts ; Z true (EQ)
  1352  c7bf a4a5               ++  ldy savepos
  1353  c7c1 a201                   ldx #1 ; Z false (NE)
  1354  c7c3 60                     rts
  1355                          
  1356                          chkabsolutex:
  1357  c7c4 84a5                   sty savepos
  1358  c7c6 b90002                 lda inputbuf, y
  1359  c7c9 c924                   cmp #'$'
  1360  c7cb d001                   bne +
  1361  c7cd c8                     iny
  1362  c7ce 206cc9             +   jsr chkhexword
  1363  c7d1 d01b                   bne ++
  1364  c7d3 200cc9                 jsr skipspaces
  1365  c7d6 b90002                 lda inputbuf, y
  1366  c7d9 c92c                   cmp #','
  1367  c7db d011                   bne ++
  1368  c7dd c8                     iny
  1369  c7de 200cc9                 jsr skipspaces
  1370  c7e1 b90002                 lda inputbuf, y
  1371  c7e4 c958                   cmp #'X'
  1372  c7e6 d006                   bne ++
  1373  c7e8 c8                     iny
  1374  c7e9 c4a4                   cpy len
  1375  c7eb d001                   bne ++
  1376  c7ed 60                     rts ; Z true (EQ)
  1377  c7ee a4a5               ++  ldy savepos
  1378  c7f0 a201                   ldx #1 ; Z false (NE)
  1379  c7f2 60                     rts
  1380                          
  1381                          chkabsolutey:
  1382  c7f3 84a5                   sty savepos
  1383  c7f5 b90002                 lda inputbuf, y
  1384  c7f8 c924                   cmp #'$'
  1385  c7fa d001                   bne +
  1386  c7fc c8                     iny
  1387  c7fd 206cc9             +   jsr chkhexword
  1388  c800 d01b                   bne ++
  1389  c802 200cc9                 jsr skipspaces
  1390  c805 b90002                 lda inputbuf, y
  1391  c808 c92c                   cmp #','
  1392  c80a d011                   bne ++
  1393  c80c c8                     iny
  1394  c80d 200cc9                 jsr skipspaces
  1395  c810 b90002                 lda inputbuf, y
  1396  c813 c959                   cmp #'Y'
  1397  c815 d006                   bne ++
  1398  c817 c8                     iny
  1399  c818 c4a4                   cpy len
  1400  c81a d001                   bne ++
  1401  c81c 60                     rts ; Z true (EQ)
  1402  c81d a4a5               ++  ldy savepos
  1403  c81f a201                   ldx #1 ; Z false (NE)
  1404  c821 60                     rts
  1405                          
  1406                          chkindirect:
  1407  c822 84a5                   sty savepos
  1408  c824 b90002                 lda inputbuf, y
  1409  c827 c928                   cmp #'('
  1410  c829 d021                   bne ++
  1411  c82b c8                     iny
  1412  c82c 200cc9                 jsr skipspaces
  1413  c82f b90002                 lda inputbuf, y
  1414  c832 c924                   cmp #'$'
  1415  c834 d001                   bne +
  1416  c836 c8                     iny
  1417  c837 206cc9             +   jsr chkhexword
  1418  c83a d010                   bne ++
  1419  c83c 200cc9                 jsr skipspaces
  1420  c83f b90002                 lda inputbuf, y
  1421  c842 c929                   cmp #')'
  1422  c844 d006                   bne ++
  1423  c846 c8                     iny
  1424  c847 c4a4                   cpy len
  1425  c849 d001                   bne ++
  1426  c84b 60                     rts ; Z true (EQ)
  1427  c84c a4a5               ++  ldy savepos
  1428  c84e a201                   ldx #1 ; Z false (NE)
  1429  c850 60                     rts
  1430                          
  1431                          chkinstruction:
  1432  c851 c4a4                   cpy len
  1433  c853 f02a                   beq ++
  1434  c855 84ff                   sty tmp
  1435  c857 a237                   ldx #(ninst-1)
  1436  c859 b90002             -   lda inputbuf,y
  1437  c85c ddcec9                 cmp inst0,x
  1438  c85f d019                   bne +
  1439  c861 c8                     iny
  1440  c862 b90002                 lda inputbuf,y
  1441  c865 dd06ca                 cmp inst1,x
  1442  c868 d010                   bne +
  1443  c86a c8                     iny
  1444  c86b b90002                 lda inputbuf,y
  1445  c86e dd3eca                 cmp inst2,x
  1446  c871 d007                   bne +
  1447  c873 c8                     iny
  1448  c874 8a                     txa
  1449  c875 8523                   sta inidx
  1450  c877 a200                   ldx #0
  1451  c879 60                     rts
  1452  c87a a4ff               +   ldy tmp
  1453  c87c ca                     dex
  1454  c87d 10da                   bpl -
  1455  c87f a201               ++  ldx #1 ; Z false (NE)
  1456  c881 60                     rts
  1457                          
  1458                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1459                              ; and allows mode promotion
  1460  c882 209bc8                 jsr find_inst_and_mode2
  1461  c885 f013                   beq ++
  1462  c887 a524                   lda mode
  1463  c889 c906                   cmp #6
  1464  c88b 900d                   bcc ++
  1465  c88d c90a                   cmp #10
  1466  c88f b007                   bcs +
  1467  c891 6903                   adc #3
  1468  c893 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1469  c895 4c9bc8                 jmp find_inst_and_mode2 ; try again once
  1470  c898 a201               +   ldx #1 ; Z false (NE)
  1471  c89a 60                 ++  rts
  1472                          
  1473                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1474  c89b a296                   ldx #nopcodes-1
  1475  c89d bd25cc             -   lda instidx, x
  1476  c8a0 bcbccc                 ldy modeidx, x
  1477  c8a3 c523                   cmp inidx
  1478  c8a5 d00c                   bne +
  1479  c8a7 c424                   cpy mode
  1480  c8a9 d008                   bne +
  1481  c8ab 8622                   stx opidx
  1482  c8ad 2097c0                 jsr getsize
  1483  c8b0 a200                   ldx #0 ; Z true (EQ)
  1484  c8b2 60                     rts
  1485  c8b3 ca                 +   dex
  1486  c8b4 e0ff                   cpx #$ff
  1487  c8b6 d0e5                   bne -
  1488  c8b8 a201                   ldx #1 ; Z false (NE)
  1489  c8ba 60                     rts
  1490                          
  1491                          executerun:
  1492  c8bb 68                     pla ; remove low byte return address
  1493  c8bc 68                     pla ; return high byte return address
  1494  c8bd 68                     pla ; again, we're really not returning
  1495  c8be 68                     pla ; again, we're really not returning
  1496  c8bf 20c9c9                 jsr newline
  1497  c8c2 38                     sec
  1498  c8c3 a5fb                   lda ptr1
  1499  c8c5 e901                   sbc #1
  1500  c8c7 85fb                   sta ptr1
  1501  c8c9 b002                   bcs +
  1502  c8cb c6fc                   dec ptr1+1
  1503  c8cd a5fc               +   lda ptr1+1
  1504  c8cf 48                     pha
  1505  c8d0 a5fb                   lda ptr1
  1506  c8d2 48                     pha
  1507  c8d3 60                     rts
  1508                          
  1509                          chkcontinuedis:
  1510  c8d4 b90002                 lda inputbuf,y
  1511  c8d7 c944                   cmp #'D'
  1512  c8d9 d00a                   bne +
  1513  c8db b90102                 lda inputbuf+1,y
  1514  c8de c90d                   cmp #13
  1515  c8e0 d003                   bne +
  1516  c8e2 c8                     iny
  1517  c8e3 a200                   ldx #0 ; restore Z set
  1518  c8e5 60                 +   rts
  1519                          
  1520                          executedisassemble:
  1521  c8e6 68                     pla ; remove low byte return address
  1522  c8e7 68                     pla ; return high byte return address
  1523  c8e8 20c9c9                 jsr newline
  1524  c8eb 4c34c0                 jmp disassemble
  1525                          
  1526                          reportnotimplemented:
  1527  c8ee a921                   lda #<notimplemented
  1528  c8f0 a2ce                   ldx #>notimplemented
  1529  c8f2 4c87c2                 jmp strout
  1530                          
  1531                          reporterr:
  1532  c8f5 c000                   cpy #0
  1533  c8f7 f008                   beq +
  1534  c8f9 a920                   lda #' '
  1535  c8fb 20d2ff             -   jsr charout
  1536  c8fe 88                     dey
  1537  c8ff d0fa                   bne -
  1538  c901 a93f               +   lda #'?'
  1539  c903 20d2ff                 jsr charout
  1540  c906 a90d                   lda #13
  1541  c908 20d2ff                 jsr charout
  1542  c90b 60                     rts
  1543                          
  1544                          skipspaces:
  1545  c90c b90002             -   lda inputbuf, y
  1546  c90f c920                   cmp #$20
  1547  c911 d003                   bne +
  1548  c913 c8                     iny
  1549  c914 d0f6                   bne -
  1550  c916 60                 +   rts
  1551                          
  1552                          chkdot:
  1553  c917 b90002                 lda inputbuf, y
  1554  c91a c92e                   cmp #'.'
  1555  c91c d003                   bne +
  1556  c91e c8                     iny
  1557  c91f a900                   lda #0 ; Z true (EQ)
  1558  c921 60                 +   rts
  1559                          
  1560                          chkhelp:
  1561  c922 b90002                 lda inputbuf, y
  1562  c925 c93f                   cmp #'?'
  1563  c927 d003                   bne +
  1564  c929 c8                     iny
  1565  c92a a900                   lda #0 ; Z true (EQ)
  1566  c92c 60                 +   rts
  1567                          
  1568                          chkcolon:
  1569  c92d b90002                 lda inputbuf, y
  1570  c930 c93a                   cmp #':'
  1571  c932 d003                   bne +
  1572  c934 c8                     iny
  1573  c935 a900                   lda #0 ; Z true (EQ)
  1574  c937 60                 +   rts
  1575                          
  1576                          chkfilename:
  1577  c938 84ff                   sty tmp
  1578  c93a b90002                 lda inputbuf, y
  1579  c93d c922                   cmp #34
  1580  c93f d010                   bne ++
  1581  c941 c8                 -   iny
  1582  c942 b90002                 lda inputbuf, y
  1583  c945 c90d                   cmp #13
  1584  c947 d004                   bne +
  1585  c949 a4ff                   ldy tmp
  1586  c94b d004                   bne ++
  1587  c94d c922               +   cmp #34
  1588  c94f d0f0                   bne -
  1589  c951 60                 ++  rts
  1590                          
  1591                          chkhexbyteofsequence:
  1592  c952 204fc2                 jsr inputhexbyte
  1593  c955 206fc9                 jsr +
  1594  c958 d011                   bne ++ ; Z false (NE) if failed checks
  1595  c95a c4a4                   cpy len
  1596  c95c f00d                   beq ++ ; Z true (EQ) if end of input
  1597  c95e 85ff                   sta tmp
  1598  c960 b90002                 lda inputbuf,y
  1599  c963 c920                   cmp #$20
  1600  c965 d004                   bne ++ ; Z false (NE) if not space
  1601  c967 a5ff                   lda tmp
  1602  c969 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1603  c96b 60                 ++  rts
  1604                          
  1605                          chkhexword:
  1606                          chkhexaddr1:
  1607  c96c 2026c2                 jsr inputhexword
  1608  c96f a200               +   ldx #0 ; Z true (EQ)
  1609  c971 9001                   bcc +
  1610  c973 e8                     inx ; Z false (NE)
  1611  c974 60                 +   rts
  1612                          
  1613                          chkhexbyte
  1614  c975 98                     tya
  1615  c976 48                     pha ; save y
  1616  c977 204fc2                 jsr inputhexbyte
  1617  c97a b00d                   bcs +
  1618  c97c 85a6                   sta tmp2
  1619  c97e 2069c2                 jsr inputhexnybble
  1620  c981 9006                   bcc +
  1621  c983 68                     pla ; throw away saved y
  1622  c984 a5a6                   lda tmp2
  1623  c986 a200                   ldx #0 ; Z true (EQ)
  1624  c988 60                     rts
  1625  c989 68                 +   pla
  1626  c98a a8                     tay ; won't be zero, so Z false (NE)
  1627  c98b 60                     rts    
  1628                          
  1629                          chkhexaddr2:
  1630  c98c a5fb                   lda ptr1
  1631  c98e 48                     pha
  1632  c98f a5fc                   lda ptr1+1
  1633  c991 48                     pha
  1634  c992 206cc9                 jsr chkhexaddr1
  1635  c995 f005                   beq +
  1636  c997 68                     pla
  1637  c998 68                     pla
  1638  c999 a901                   lda #1 ; Z false (NE)
  1639  c99b 60                     rts
  1640  c99c a5fb               +   lda ptr1
  1641  c99e 85fd                   sta ptr2
  1642  c9a0 a5fc                   lda ptr1+1
  1643  c9a2 85fe                   sta ptr2+1
  1644  c9a4 68                     pla
  1645  c9a5 85fc                   sta ptr1+1
  1646  c9a7 68                     pla
  1647  c9a8 85fb                   sta ptr1
  1648  c9aa a900                   lda #0 ; Z true (EQ)
  1649  c9ac 60                     rts    
  1650                          
  1651                          chkaddr1cmd:
  1652  c9ad b90002                 lda inputbuf, y
  1653  c9b0 c941               +   cmp #'A'
  1654  c9b2 d004                   bne +
  1655  c9b4 c8                     iny
  1656  c9b5 4c22c5                 jmp executeassemble
  1657  c9b8 c944               +   cmp #'D'
  1658  c9ba d004                   bne +
  1659  c9bc c8                     iny
  1660  c9bd 4ce6c8                 jmp executedisassemble
  1661  c9c0 c952               +   cmp #'R'
  1662  c9c2 d004                   bne +
  1663  c9c4 c8                     iny
  1664  c9c5 4cbbc8                 jmp executerun
  1665  c9c8 60                 +   rts
  1666                          
  1667                          newline:
  1668  c9c9 a90d                   lda #13
  1669  c9cb 4cd2ff                 jmp charout
  1670                          
  1671                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1672                          ;     jsr $ffd2
  1673                          ;     pha
  1674                          ; -   lda $d011
  1675                          ;     bpl -
  1676                          ; -   lda $d011
  1677                          ;     bmi -
  1678                          ; -   lda $d011
  1679                          ;     bpl -
  1680                          ; -   lda $d011
  1681                          ;     bmi -
  1682                          ;     pla
  1683                          ;     rts
  1684                          
  1685                          !ifdef MINIMUM {
  1686                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1687                          ;; MC6850
  1688                          UART_DATA=$FFF8
  1689                          UART_STCR=$FFF9
  1690                          
  1691                          UART_INIT:
  1692                          	ldx #0b00000111 ; 11=reset device
  1693                          	stx UART_STCR
  1694                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  1695                          	sta UART_STCR
  1696                          	rts
  1697                          UART_OUT:
  1698                          	pha
  1699                          -	lda UART_STCR
  1700                          	and #2
  1701                          	beq - ; branch if TDRE=0, not finished transmitting
  1702                          	pla
  1703                          	pha
  1704                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  1705                          	sta UART_DATA
  1706                          	pla
  1707                          	rts
  1708                          UART_IN:
  1709                          -	lda UART_STCR
  1710                          	and #1
  1711                          	beq - ; branch if TDRF=0, not received
  1712                          	lda UART_DATA
  1713                          	; software "CAPS LOCK" because wozmon expects only uppercase
  1714                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  1715                          	beq BREAK
  1716                              ; force lowercase alphabet to uppercase
  1717                              cmp #'a'
  1718                          	bcc +
  1719                          	cmp #'z'+1
  1720                          	bcs +
  1721                          	eor #$20
  1722                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  1723                           	rts
  1724                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  1725                          	pha ; save A
  1726                          	lda UART_STCR
  1727                          	lsr ; put rightmost bit in carry
  1728                          	pla ; restore A affects flags
  1729                          	ror ; move carry to left bit, right bit to carry
  1730                          	php ; push processor to save N
  1731                          	rol ; restore A affects flags
  1732                          	plp ; pull processor to restore N
  1733                          	rts
  1734                          
  1735                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1736                          ; Processor start and interrupts
  1737                          
  1738                          NMI: ; unused on minimum (no source of interrupt)
  1739                              rti
  1740                          
  1741                          IRQ:
  1742                              rti ; TODO implement BRK HANDLING in monitor
  1743                          
  1744                          BREAK:
  1745                              jmp RESET
  1746                          
  1747                          RESET:
  1748                              cld
  1749                              ldx #$00
  1750                              txs
  1751                              jsr JUART_INIT
  1752                              cli
  1753                              jmp start
  1754                          } ; !ifdef MINIMUM
  1755                          
  1756                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1757                          ; data
  1758                          
  1759                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  1760                          ninst = 56
  1761  c9ce 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  1762  ca06 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  1763  ca3e 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  1764                          
  1765                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  1766                          mode_jmptable:
  1767  ca76 23c1               !word dispModeAcc-1; 0 Accumulator 1
  1768  ca78 28c1               !word dispModeNone-1 ; 1 None 1
  1769  ca7a 29c1               !word dispModeImm-1 ; 2 Immediate 2
  1770  ca7c 3ac1               !word dispModeIndX-1 ; 3 IndirectX 2
  1771  ca7e 5ac1               !word dispModeIndY-1 ; 4 IndirectY 2
  1772  ca80 7ac1               !word dispModeRel-1 ; 5 Relative 2
  1773  ca82 2ec1               !word dispModeZP-1 ; 6 ZeroPage 2
  1774  ca84 b6c1               !word dispModeZPX-1 ; 7 ZeroPageX 2
  1775  ca86 c3c1               !word dispModeZPY-1 ; 8 ZeroPageY 2
  1776  ca88 d0c1               !word dispModeAbs-1 ; 9 Absolute 3
  1777  ca8a e2c1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  1778  ca8c efc1               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  1779  ca8e fcc1               !word dispModeInd-1 ; 12 Indirect 3
  1780                          
  1781                          nmodes = 13
  1782                          
  1783                          mode_sorted:
  1784  ca90 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  1785                          
  1786                          !ifdef MINIMUM {
  1787                          mode_0: !text "Accumulator", 0, "A", 0
  1788                          mode_1: !text "None", 0, "", 0
  1789                          mode_2: !text "Immediate", 0, "#$12", 0
  1790                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  1791                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  1792                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  1793                          mode_6: !text "ZeroPage", 0, "$12", 0
  1794                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  1795                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  1796                          mode_9: !text "Absolute", 0, "$1234", 0
  1797                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  1798                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  1799                          mode_12: !text "Indirect", 0, "($1234)", 0
  1800                          } else {
  1801  ca9d 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  1802  caab 4e4f4e450000       mode_1: !text "NONE", 0, "", 0
  1803  cab1 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  1804  cac0 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  1805  cad2 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  1806  cae4 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  1807  cb03 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  1808  cb10 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  1809  cb20 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  1810  cb30 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  1811  cb3f 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  1812  cb51 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  1813  cb63 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  1814                          }
  1815                          
  1816                          modes: ; table for easily displaying each mode_example
  1817  cb74 9dca               !word mode_0
  1818  cb76 abca               !word mode_1
  1819  cb78 b1ca               !word mode_2
  1820  cb7a c0ca               !word mode_3
  1821  cb7c d2ca               !word mode_4
  1822  cb7e e4ca               !word mode_5
  1823  cb80 03cb               !word mode_6
  1824  cb82 10cb               !word mode_7
  1825  cb84 20cb               !word mode_8
  1826  cb86 30cb               !word mode_9
  1827  cb88 3fcb               !word mode_10
  1828  cb8a 51cb               !word mode_11
  1829  cb8c 63cb               !word mode_12
  1830                          
  1831                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  1832                          nopcodes = 151
  1833  cb8e 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  1834  cc25 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  1835  ccbc 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  1836                          
  1837                          copyright 
  1838                          ;                  1         2         3         4
  1839                          ;         1234567890123456789012345678901234567890
  1840  cd53 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  1841                          !ifdef C64TERMINAL {
  1842                              !text 13, "(TERMINAL VERSION)"
  1843                          }
  1844  cd73 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  1845  cd99 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  1846  cdb0 00                 !text 0
  1847                          
  1848                          firsthelp
  1849  cdb1 0d3f202020202020...!text 13, "?       (SYNTAX)"
  1850  cdc2 0d3f204120202020...!text 13, "? A     (LIST 6502 INSTRUCTIONS)"
  1851  cde3 0d3f204144432020...!text 13, "? ADC   (/ADC/ ADDRESSING MODES)"
  1852  ce04 0d3f204d4f444520...!text 13, "? MODE  (ADDRESSING MODES)"
  1853                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  1854  ce1f 0d00               !text 13, 0
  1855                          
  1856  ce21 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  1857                          
  1858                          generalhelp
  1859  ce32 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  1860  ce58 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  1861  ce7d 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  1862  cea0 00                 !text 0
  1863                          generalhelp2
  1864  cea1 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  1865  cec9 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  1866  cee5 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  1867  cf05 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  1868  cf27 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  1869  cf4c 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  1870  cf6b 00                 !text 0
  1871                          
  1872  cf6c 4d4f444500         modes_keyword !text "MODE", 0
  1873                          
  1874                          !ifdef C64SCREEN {
  1875  cf71 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  1876  cf78 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  1877                          }
  1878                          
  1879                          !ifdef MINIMUM {
  1880                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1881                          ; JUMP table for some stability
  1882                          * = $FFEE
  1883                          JUART_INIT: JMP UART_INIT
  1884                          JUART_OUT: JMP UART_OUT
  1885                          JUART_IN: JMP UART_IN
  1886                          JUART_CHK: JMP UART_CHK
  1887                          
  1888                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1889                          ; 6502 vectors 
  1890                          * = $fffa
  1891                              !word NMI
  1892                              !word RESET
  1893                              !word IRQ
  1894                          }
  1895                          
  1896                          finish = *
