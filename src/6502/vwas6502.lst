
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<<
     5                          ;; >>>       ****************************************************        <<<
     6                          ;; >>>       **           TARGETS:                              *        <<<
     7                          ;; >>>       ** (1)  C64 8000-9FFF screen editor                *        <<<
     8                          ;; >>>       ** (2)  C64 8000-9FFF terminal edition             *        <<<
     9                          ;; >>>       ** (3)  6502+MC6850 E000-FFFF minimum system       *        <<<
    10                          ;; >>>       *   56K(RAM),8K(ROM), 2 bytes IO for MC6850 UART   *        <<<
    11                          ;; >>>       ****************************************************        <<<
    12                          ;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          ;; MIT License
    15                          ;;
    16                          ;; Copyright (c) 2024 David R. Van Wagner
    17                          ;; davevw.com
    18                          ;;
    19                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    20                          ;; of this software and associated documentation files (the "Software"), to deal
    21                          ;; in the Software without restriction, including without limitation the rights
    22                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    23                          ;; copies of the Software, and to permit persons to whom the Software is
    24                          ;; furnished to do so, subject to the following conditions:
    25                          ;;
    26                          ;; The above copyright notice and this permission notice shall be included in all
    27                          ;; copies or substantial portions of the Software.
    28                          ;;
    29                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    30                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    31                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    32                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    33                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    34                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    35                          ;; SOFTWARE.
    36                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                          
    40                          ; Important! define exactly ONE target (set in build.sh)
    41                          ;C64SCREEN = 1
    42                          ;C64TERMINAL = 1
    43                          ;MINIMUM = 1
    44                          
    45                          ; options (set in build.sh)
    46                          ;NEEDECHO = 0
    47                          
    48                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                          
    50                          ;; _
    51                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    52                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    53                          ;; 1000 (display memory at $1000)
    54                          ;; 1000.2000 (display memory range $1000 to $2000)
    55                          ;; 1000. (display next screenful of memory starting at $1000)
    56                          ;; . (display next screenful of memory)
    57                          ;; 1000 r (JMP $1000)
    58                          ;; 1000: 01 02 03 (modify memory)
    59                          ;; (NEW SYNTAX)
    60                          ;; 1000 d (disassemble starting at address, for screenful)
    61                          ;; d (continue disassembling from last address)
    62                          ;; 1000 a (assemble starting at, interactive until empty line)
    63                          ;; a (continue assembling from last address)
    64                          ;; r (run from PC)
    65                          ;; x (exit monitor -- C64 only)
    66                          ;; ? (commands help)
    67                          ;; ?a (list instructions available)
    68                          ;; ?adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    69                          ;; ?mode (show addressing modes example syntax for 6502)
    70                          ;; 1000 "filename" 08 l (load absolute, address optional, drive address is optional)
    71                          ;; 1000.2000 "filename" 08 s (C64: save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, defaults to 8)
    72                          ;; .? (display registers in format .1234 10110000 01 02 03 f6)
    73                          ;; .1234 10110000 01 02 03 f6 (set registers PC FLAGS A X Y S)
    74                          ;; .A:00 (change register, replace A with X, Y, S, P as appropriate, use space or colon as separator)
    75                          ;; (FUTURE SYNTAX, not implemented)
    76                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    77                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    78                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    79                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    80                          ;;
    81                          ;; (INTERACTIVE ASSEMBLER)
    82                          ;; 1000 _
    83                          ;;      ADC #$12
    84                          ;; 1000 69 12    ADC #$12
    85                          ;; 1002 _
    86                          ;;      JSR $1234
    87                          ;; 1002 20 34 12 JSR $1234
    88                          ;; 1005 _
    89                          ;;      RTS
    90                          ;; 1005 60       RTS
    91                          ;; 1006 _
    92                          ;;      XYZ
    93                          ;;      XYZ ?
    94                          ;; _
    95                          ;;
    96                          
    97                          ; global
    98                          inputbuf=$0200
    99                          
   100                          
   101                          ; kernal/system calls
   102                          
   103                          !ifdef MINIMUM {
   104                          charout=JUART_OUT
   105                          getkey=JUART_IN
   106                          }
   107                          
   108                          !ifdef C64SCREEN {
   109                          setlfs=$ffba
   110                          setnam=$ffbd
   111                          charin=$ffcf ; screen editor
   112                          charout=$ffd2
   113                          fload =$ffd5
   114                          fsave =$ffd8
   115                          getkey=$ffe4
   116                          }
   117                          
   118                          !ifdef C64TERMINAL {
   119                          setlfs=$ffba
   120                          setnam=$ffbd
   121                          charout=$ffd2
   122                          getkey=$ffe4
   123                          fsave =$ffd8
   124                          }
   125                          
   126                          ; zeropage
   127                          !ifdef MINIMUM {
   128                          ptr1=$fc ; and $fd
   129                          ptr3=$fe ; and $ff
   130                          }
   131                          
   132                          !ifdef MINIMUM {
   133                          * = $e000
   134                          first:
   135                              jmp start
   136                          } else { // any C64
   137                          * = $8000
   138                          first:
   139  8000 4c2080                 jmp init64
   140                          }
   141                          
   142                          test: ; all the addressing modes here for testing disassembly
   143  8003 ea                     nop
   144  8004 ad3412                 lda $1234
   145  8007 bd3412                 lda $1234,x
   146  800a b93412                 lda $1234,y
   147  800d 0a                     asl
   148  800e a912                   lda #$12
   149  8010 a112                   lda ($12,x)
   150  8012 b112                   lda ($12),y
   151  8014 6c3412                 jmp ($1234)
   152  8017 d0fe               -   bne -
   153  8019 a512                   lda $12
   154  801b b512                   lda $12,x
   155  801d b612                   ldx $12,y
   156  801f ff                     !byte $FF ; unknown
   157                          
   158                          !ifndef MINIMUM {
   159                              ; any C64
   160                          init64:    
   161                              ; check if irq/brk vector installed
   162  8020 ad1603                 lda $316
   163  8023 ae1703                 ldx $317
   164  8026 e08f                   cpx #>brk64
   165  8028 f010                   beq +
   166  802a 8dcb96                 sta savebrkvector
   167  802d 8ecc96                 stx savebrkvector+1
   168  8030 a9bb                   lda #<brk64
   169  8032 a28f                   ldx #>brk64
   170  8034 8d1603                 sta $316
   171  8037 8e1703                 stx $317
   172  803a 207280             +   jsr install_nmi64
   173                              ; check if BASIC RAM limited to exclude monitor
   174  803d a538                   lda 56
   175  803f c980                   cmp #>first
   176  8041 f00a                   beq +
   177  8043 9008                   bcc +
   178  8045 a980                   lda #>first
   179  8047 8538                   sta 56
   180  8049 a900                   lda #0
   181  804b 8537                   sta 55
   182                          +   ; fall through to start
   183                          }
   184                          
   185                          start:
   186  804d d8                     cld
   187  804e 58                     cli
   188  804f a969                   lda #<copyright
   189  8051 a293                   ldx #>copyright
   190  8053 20c984                 jsr strout
   191  8056 a9c7                   lda #<firsthelp
   192  8058 a293                   ldx #>firsthelp
   193  805a 20c984                 jsr strout
   194  805d a901                   lda #1
   195  805f b8                     clv
   196  8060 08                     php
   197  8061 a900                   lda #0
   198  8063 aa                     tax
   199  8064 a8                     tay
   200  8065 28                     plp
   201  8066 4c288e                 jmp save_registers
   202                          
   203                          input_loop:
   204  8069 20ea84                 jsr inputline
   205  806c 20ed84                 jsr parseline
   206  806f 4c6980                 jmp input_loop
   207                          
   208                          !ifndef MINIMUM {
   209                          ; C64 only
   210                          
   211                          install_nmi64:
   212                              ; check if nmi vector installed
   213  8072 ad1803                 lda $318
   214  8075 ae1903                 ldx $319
   215  8078 e08f                   cpx #>nmi64
   216  807a f010                   beq +
   217  807c 8dcd96                 sta savenmivector
   218  807f 8ece96                 stx savenmivector+1
   219  8082 a99c                   lda #<nmi64
   220  8084 a28f                   ldx #>nmi64
   221  8086 8d1803                 sta $318
   222  8089 8e1903                 stx $319
   223  808c 60                 +   rts
   224                          
   225                          uninstall_nmi64:
   226  808d adcd96                 lda savenmivector
   227  8090 aece96                 ldx savenmivector+1
   228  8093 8d1803                 sta $318
   229  8096 8e1903                 stx $319
   230  8099 60                     rts
   231                          
   232                          chkextrac64:
   233  809a 20a680                 jsr chkexit
   234  809d d003                   bne +
   235  809f 4cbb80                 jmp execute_exit
   236  80a2 18                 +   clc ; no error
   237  80a3 a201                   ldx #1 ; Z false - not consumed
   238  80a5 60                     rts
   239                          
   240                          chkexit:
   241  80a6 b90002                 lda inputbuf, y
   242  80a9 c958                   cmp #'X'
   243  80ab d009                   bne +
   244  80ad c8                     iny
   245  80ae ccc496                 cpy len ; validate no extra characters
   246  80b1 f003                   beq +
   247  80b3 4cb780                 jmp extra_error
   248  80b6 60                 +   rts
   249                          
   250                          extra_error:
   251                              ; pop local return address
   252  80b7 68                     pla
   253  80b8 68                     pla
   254  80b9 38                     sec ; error
   255  80ba 60                     rts
   256                          
   257                          execute_exit:
   258  80bb adcb96                 lda savebrkvector
   259  80be aecc96                 ldx savebrkvector+1
   260  80c1 8d1603                 sta $316
   261  80c4 8e1703                 stx $317
   262  80c7 208d80                 jsr uninstall_nmi64
   263                              ; pop monitor return addresses, so only original caller is left
   264  80ca 68                     pla
   265  80cb 68                     pla
   266  80cc 68                     pla
   267  80cd 68                     pla
   268  80ce 68                     pla
   269  80cf 68                     pla
   270  80d0 60                     rts
   271                          
   272                          display_extra_help:
   273  80d1 a9da                   lda #<extra_help
   274  80d3 a293                   ldx #>extra_help
   275  80d5 4cc984                 jmp strout
   276                          
   277                          !ifdef C64SCREEN {
   278                          display_page_disassemble:
   279  80d8 ad858f                 lda ptr1
   280  80db ae868f                 ldx ptr1+1
   281  80de 201084                 jsr disphexword
   282  80e1 a946                   lda #<page_disassemble
   283  80e3 a294                   ldx #>page_disassemble
   284  80e5 4cc984                 jmp strout
   285                          
   286                          display_page_displaymemory:
   287  80e8 201e8e                 jsr newline
   288  80eb ad858f                 lda ptr1
   289  80ee ae868f                 ldx ptr1+1
   290  80f1 201084                 jsr disphexword
   291  80f4 a94d                   lda #<page_displaymemory
   292  80f6 a294                   ldx #>page_displaymemory
   293  80f8 4cc984                 jmp strout
   294                          
   295                          inputlinec64:
   296  80fb a000                   ldy #0
   297  80fd 20cfff             -   jsr charin
   298  8100 990002                 sta inputbuf,y
   299  8103 c8                     iny
   300  8104 c90d                   cmp #13
   301  8106 d0f5                   bne -
   302  8108 60                     rts
   303                          
   304                          continueassemblec64:
   305  8109 a914                   lda #20
   306  810b 20d2ff                 jsr charout
   307  810e 20d2ff                 jsr charout
   308  8111 ad858f                 lda ptr1
   309  8114 ae868f                 ldx ptr1+1
   310  8117 201084                 jsr disphexword
   311  811a a920                   lda #' '
   312  811c 20d2ff                 jsr charout
   313  811f 20d2ff                 jsr charout
   314  8122 4cd2ff                 jmp charout
   315                          }
   316                          
   317                          chkfilename:
   318  8125 201e8d                 jsr skipspaces
   319  8128 8cc896                 sty tmp
   320  812b b90002                 lda inputbuf, y
   321  812e c922                   cmp #34 ; double quote
   322  8130 d025                   bne ++
   323  8132 c8                 -   iny
   324  8133 b90002                 lda inputbuf, y
   325  8136 c90d                   cmp #13
   326  8138 d005                   bne +
   327  813a acc896                 ldy tmp
   328  813d d018                   bne ++
   329  813f c922               +   cmp #34 ; double quote
   330  8141 d0ef                   bne -
   331  8143 98                     tya ; index of ending double quotes
   332  8144 48                     pha ; save
   333  8145 18                     clc ; will subtract one more
   334  8146 edc896                 sbc tmp ; subtract index of first quote, have filename length
   335  8149 aec896                 ldx tmp
   336  814c e8                     inx ; low address of filename
   337  814d a002                   ldy #>inputbuf ; high address of filename
   338  814f 20bdff                 jsr setnam
   339  8152 68                     pla
   340  8153 a8                     tay
   341  8154 c8                     iny ; advance past ending double quotes
   342  8155 a900                   lda #0 ; set Z true
   343  8157 60                 ++  rts
   344                          
   345                          check_execute_save:
   346  8158 202581             +   jsr chkfilename
   347  815b f006                   beq +
   348  815d 20f58c                 jsr reporterr
   349  8160 a201                   ldx #1 ; set Z false
   350  8162 60                     rts
   351  8163 208a81             +   jsr chkoptionaldrive
   352  8166 20a081                 jsr chksave
   353  8169 d005                   bne +
   354  816b 20b281                 jsr executesave
   355  816e a200                   ldx #0 ; set Z true
   356  8170 60                 +   rts
   357                          
   358                          check_execute_load:
   359  8171 202581             +   jsr chkfilename
   360  8174 f006                   beq +
   361  8176 20f58c                 jsr reporterr
   362  8179 a201                   ldx #1 ; set Z false
   363  817b 60                     rts
   364  817c 208a81             +   jsr chkoptionaldrive
   365  817f 20a981                 jsr chkload
   366  8182 d005                   bne +
   367  8184 20e781                 jsr executeload
   368  8187 a200                   ldx #0 ; set Z true
   369  8189 60                 +   rts
   370                          
   371                          chkoptionaldrive:
   372  818a a908                   lda #8
   373  818c 8dcf96                 sta drive
   374  818f 201e8d                 jsr skipspaces
   375  8192 20748d                 jsr chkhexbyte
   376  8195 d008                   bne +
   377  8197 8dcf96                 sta drive
   378  819a 201e8d                 jsr skipspaces
   379  819d a900                   lda #0 ; set Z true
   380  819f 60                 +   rts
   381                          
   382                          chksave:
   383  81a0 201e8d                 jsr skipspaces
   384  81a3 b90002                 lda inputbuf, y
   385  81a6 c953                   cmp #'S'
   386  81a8 60                     rts
   387                          
   388                          chkload:
   389  81a9 201e8d                 jsr skipspaces
   390  81ac b90002                 lda inputbuf, y
   391  81af c94c                   cmp #'L'
   392  81b1 60                     rts
   393                          
   394                          executesave:
   395  81b2 201e8e                 jsr newline
   396  81b5 a522                   lda $22
   397  81b7 48                     pha
   398  81b8 a523                   lda $23
   399  81ba 48                     pha
   400  81bb ad858f                 lda ptr1
   401  81be 8522                   sta $22
   402  81c0 ad868f                 lda ptr1+1
   403  81c3 8523                   sta $23
   404  81c5 a9c0                   lda #$c0 ; KERNAL control and error messages
   405  81c7 859d                   sta $9d ; set messages to be displayed
   406  81c9 a901                   lda #1
   407  81cb aecf96                 ldx drive
   408  81ce a00f                   ldy #15
   409  81d0 20baff                 jsr setlfs
   410  81d3 a922                   lda #$22
   411  81d5 aec996                 ldx ptr2
   412  81d8 acca96                 ldy ptr2+1
   413  81db 20d8ff                 jsr fsave
   414  81de 68                     pla
   415  81df 8523                   sta $23
   416  81e1 68                     pla
   417  81e2 8522                   sta $22
   418  81e4 4c1e8e                 jmp newline
   419                          
   420                          executeload:
   421  81e7 201e8e                 jsr newline
   422  81ea a9c0                   lda #$c0 ; KERNAL control and error messages
   423  81ec 859d                   sta $9d ; set messages to be displayed
   424  81ee a900                   lda #0 ; load
   425  81f0 aecf96                 ldx drive
   426  81f3 a001                   ldy #1 ; force load at address
   427  81f5 20baff                 jsr setlfs
   428  81f8 ae858f                 ldx ptr1
   429  81fb ac868f                 ldy ptr1+1
   430  81fe 20d5ff                 jsr fload
   431  8201 4c1e8e                 jmp newline
   432                          }
   433                          
   434                          disassemble:
   435  8204 a917                   lda #23
   436  8206 8dc396                 sta count
   437  8209 a000               -   ldy #0
   438  820b 20748f                 jsr lda_at_ptr1_y
   439  820e 203e82                 jsr find_opcode
   440  8211 20a882                 jsr disp_current
   441  8214 adc296                 lda size
   442  8217 1002                   bpl +
   443  8219 a901                   lda #1
   444  821b 18                 +   clc
   445  821c 6d858f                 adc ptr1
   446  821f 8d858f                 sta ptr1
   447  8222 9003                   bcc +
   448  8224 ee868f                 inc ptr1+1
   449  8227 cec396             +   dec count
   450  822a d0dd                   bne -
   451                          !ifdef C64SCREEN {
   452  822c 4cd880                 jmp display_page_disassemble
   453                          } else {
   454                              rts
   455                          }
   456                          
   457                          compareptrs:
   458  822f ad868f                 lda ptr1+1
   459  8232 cdca96                 cmp ptr2+1
   460  8235 d006                   bne +
   461  8237 ad858f                 lda ptr1
   462  823a cdc996                 cmp ptr2
   463  823d 60                 +   rts
   464                          
   465                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   466                          ; and properties updated in ZP globals size,inidx,opidx,mode
   467  823e a097                   ldy #nopcodes
   468  8240 a296                   ldx #nopcodes-1
   469  8242 dda491             -   cmp opcodes,x
   470  8245 f010                   beq +
   471  8247 ca                     dex
   472  8248 88                     dey
   473  8249 d0f7                   bne -
   474  824b 18                     clc
   475  824c a901                   lda #1
   476  824e 8dc296                 sta size
   477  8251 a9ff                   lda #$FF
   478  8253 aa                     tax
   479  8254 a8                     tay
   480  8255 900a                   bcc ++
   481  8257 bd3b92             +   lda instidx, x
   482  825a bcd292                 ldy modeidx, x
   483  825d 206b82                 jsr getsize
   484  8260 38                     sec
   485  8261 8dc096             ++  sta inidx
   486  8264 8ebf96                 stx opidx
   487  8267 8cc196                 sty mode
   488  826a 60                     rts
   489                          
   490                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   491                              ; result returned in size
   492  826b 48                     pha
   493  826c a901                   lda #1
   494  826e 8dc296                 sta size
   495  8271 68                     pla
   496  8272 c002                   cpy #2 // Immediate
   497  8274 900a                   bcc +
   498  8276 eec296                 inc size
   499  8279 c009                   cpy #9 // Absolute
   500  827b 9003                   bcc +
   501  827d eec296                 inc size
   502  8280 60                 +   rts
   503                          
   504                          disp_opcode: ; .A opcode byte
   505  8281 203e82                 jsr find_opcode
   506  8284 8a                     txa
   507                              ; fall through to display instruction
   508                          
   509                          dispinst: ; .A instruction index 0..55, note modifies A and X
   510  8285 aa                     tax
   511  8286 e038                   cpx #ninst
   512  8288 b012                   bcs +
   513  828a bde38f                 lda inst0, x
   514  828d 20d2ff                 jsr charout
   515  8290 bd1b90                 lda inst1, x
   516  8293 20d2ff                 jsr charout
   517  8296 bd5390                 lda inst2, x
   518  8299 4cd2ff                 jmp charout
   519  829c a93f               +   lda #'?'
   520  829e 20d2ff                 jsr charout
   521  82a1 20d2ff                 jsr charout
   522  82a4 20d2ff                 jsr charout
   523  82a7 60                     rts
   524                          
   525                          disp_current:
   526  82a8 ad858f                 lda ptr1
   527  82ab ae868f                 ldx ptr1+1
   528  82ae 201084                 jsr disphexword
   529  82b1 a920                   lda #$20
   530  82b3 20d2ff                 jsr charout
   531  82b6 a000                   ldy #0
   532  82b8 aec296                 ldx size
   533  82bb 20748f             -   jsr lda_at_ptr1_y
   534  82be 201684                 jsr disphexbyte
   535  82c1 a920                   lda #$20
   536  82c3 20d2ff                 jsr charout
   537  82c6 c8                     iny
   538  82c7 ca                     dex
   539  82c8 d0f1                   bne -
   540  82ca c003               -   cpy #3
   541  82cc f00e                   beq +
   542  82ce a920                   lda #$20
   543  82d0 20d2ff                 jsr charout
   544  82d3 20d2ff                 jsr charout
   545  82d6 20d2ff                 jsr charout
   546  82d9 c8                     iny
   547  82da d0ee                   bne -
   548  82dc adc096             +   lda inidx
   549  82df 208582                 jsr dispinst
   550  82e2 a920                   lda #$20
   551  82e4 20d2ff                 jsr charout
   552  82e7 20ef82                 jsr disp_mode
   553  82ea a90d                   lda #13
   554  82ec 4cd2ff                 jmp charout
   555                          
   556                          disp_mode
   557  82ef adc196                 lda mode
   558  82f2 c90d                   cmp #13
   559  82f4 b00a                   bcs +
   560  82f6 0a                     asl
   561  82f7 aa                     tax
   562  82f8 bd8c90                 lda mode_jmptable+1,x
   563  82fb 48                     pha
   564  82fc bd8b90                 lda mode_jmptable,x
   565  82ff 48                     pha
   566  8300 60                 +   rts
   567                          
   568                          dispModeAcc:
   569  8301 a941                   lda #'A'
   570  8303 4cd2ff                 jmp charout
   571                          
   572                          dispModeNone:
   573  8306 60                     rts
   574                          
   575                          dispModeImm:
   576  8307 a923                   lda #'#'
   577  8309 20d2ff                 jsr charout
   578                          dispModeZP:
   579  830c a924                   lda #'$'
   580  830e 20d2ff                 jsr charout
   581  8311 a001                   ldy #1
   582  8313 20748f                 jsr lda_at_ptr1_y
   583  8316 4c1684                 jmp disphexbyte
   584                          
   585                          dispModeIndX:
   586  8319 a928                   lda #'('
   587  831b 20d2ff                 jsr charout
   588  831e a924                   lda #'$'
   589  8320 20d2ff                 jsr charout
   590  8323 a001                   ldy #1
   591  8325 20748f                 jsr lda_at_ptr1_y
   592  8328 201684                 jsr disphexbyte
   593  832b a92c                   lda #','
   594  832d 20d2ff                 jsr charout
   595  8330 a958                   lda #'X'
   596  8332 20d2ff                 jsr charout
   597  8335 a929                   lda #')'
   598  8337 4cd2ff                 jmp charout
   599                          
   600                          dispModeIndY:
   601  833a a928                   lda #'('
   602  833c 20d2ff                 jsr charout
   603  833f a924                   lda #'$'
   604  8341 20d2ff                 jsr charout
   605  8344 a001                   ldy #1
   606  8346 20748f                 jsr lda_at_ptr1_y
   607  8349 201684                 jsr disphexbyte
   608  834c a929                   lda #')'
   609  834e 20d2ff                 jsr charout
   610  8351 a92c                   lda #','
   611  8353 20d2ff                 jsr charout
   612  8356 a959                   lda #'Y'
   613  8358 4cd2ff                 jmp charout
   614                          
   615                          dispModeRel:
   616  835b a924                   lda #'$'
   617  835d 20d2ff                 jsr charout
   618  8360 18                     clc
   619  8361 ad858f                 lda ptr1
   620  8364 6902                   adc #2
   621  8366 8d998f                 sta ptr3
   622  8369 ad868f                 lda ptr1+1
   623  836c 6900                   adc #0
   624  836e 8d9a8f                 sta ptr3+1
   625  8371 a001                   ldy #1
   626  8373 20748f                 jsr lda_at_ptr1_y
   627  8376 1019                   bpl +
   628                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   629  8378 49ff                   eor #$FF ; inverse
   630  837a 18                     clc
   631  837b 6901                   adc #1 ; complete getting absolute value from two's complement
   632  837d 8dc896                 sta tmp
   633  8380 38                     sec
   634  8381 ad998f                 lda ptr3
   635  8384 edc896                 sbc tmp
   636  8387 8d998f                 sta ptr3
   637  838a b011                   bcs ++
   638  838c ce9a8f                 dec ptr3+1
   639  838f 900c                   bcc ++
   640  8391 18                 +   clc ; simple case of adding
   641  8392 6d998f                 adc ptr3
   642  8395 8d998f                 sta ptr3
   643  8398 9003                   bcc ++
   644  839a ee9a8f                 inc ptr3+1
   645  839d ad998f             ++  lda ptr3
   646  83a0 ae9a8f                 ldx ptr3+1
   647  83a3 4c1084                 jmp disphexword
   648                          
   649                          dispModeZPX:
   650  83a6 200c83                 jsr dispModeZP
   651  83a9 a92c                   lda #','
   652  83ab 20d2ff                 jsr charout
   653  83ae a958                   lda #'X'
   654  83b0 4cd2ff                 jmp charout
   655                          
   656                          dispModeZPY:
   657  83b3 200c83                 jsr dispModeZP
   658  83b6 a92c                   lda #','
   659  83b8 20d2ff                 jsr charout
   660  83bb a959                   lda #'Y'
   661  83bd 4cd2ff                 jmp charout
   662                          
   663                          dispModeAbs:
   664  83c0 a924                   lda #'$'
   665  83c2 20d2ff                 jsr charout
   666  83c5 a001                   ldy #1
   667  83c7 20748f                 jsr lda_at_ptr1_y
   668  83ca 48                     pha
   669  83cb c8                     iny
   670  83cc 20748f                 jsr lda_at_ptr1_y
   671  83cf aa                     tax
   672  83d0 68                     pla
   673  83d1 4c1084                 jmp disphexword
   674                          
   675                          dispModeAbsX:
   676  83d4 20c083                 jsr dispModeAbs
   677  83d7 a92c                   lda #','
   678  83d9 20d2ff                 jsr charout
   679  83dc a958                   lda #'X'
   680  83de 4cd2ff                 jmp charout
   681                          
   682                          dispModeAbsY:
   683  83e1 20c083                 jsr dispModeAbs
   684  83e4 a92c                   lda #','
   685  83e6 20d2ff                 jsr charout
   686  83e9 a959                   lda #'Y'
   687  83eb 4cd2ff                 jmp charout
   688                          
   689                          dispModeInd:
   690  83ee a928                   lda #'('
   691  83f0 20d2ff                 jsr charout
   692  83f3 20c083                 jsr dispModeAbs
   693  83f6 a929                   lda #')'
   694  83f8 4cd2ff                 jmp charout
   695                          
   696                          dispbinbyte: ; .A 00..FF
   697  83fb a208                   ldx #8
   698  83fd 8dc896                 sta tmp
   699  8400 a930               -   lda #'0'
   700  8402 2ec896                 rol tmp
   701  8405 9002                   bcc +
   702  8407 a931                   lda #'1'
   703  8409 20d2ff             +   jsr charout
   704  840c ca                     dex
   705  840d d0f1                   bne -
   706  840f 60                     rts
   707                          
   708                          disphexword: ; .A low, .X high, 0000..FFFF
   709  8410 48                     pha
   710  8411 8a                     txa
   711  8412 201684                 jsr disphexbyte
   712  8415 68                     pla
   713                              ;fall through to call again
   714                          
   715                          disphexbyte: ; .A 00..FF
   716  8416 48                     pha
   717  8417 4a                     lsr
   718  8418 4a                     lsr
   719  8419 4a                     lsr
   720  841a 4a                     lsr
   721  841b 201f84                 jsr disphexnybble
   722  841e 68                     pla
   723                              ;fall through to call again
   724                          
   725                          disphexnybble: ; .A 0..F
   726  841f 290f                   and #$0F
   727  8421 0930                   ora #$30
   728  8423 c93a                   cmp #$3A
   729  8425 9002                   bcc +
   730  8427 6906                   adc #$06
   731  8429 4cd2ff             +   jmp charout
   732                          
   733                          inputhexword: ; C set if fails
   734  842c a900                   lda #0
   735  842e 8d858f                 sta ptr1
   736  8431 8d868f                 sta ptr1+1
   737                          
   738  8434 a904                   lda #4 ; word is at most 4 nybbles
   739  8436 8dc396                 sta count
   740  8439 207c84             --  jsr inputhexnybble
   741  843c b015                   bcs +
   742                          
   743                              ; shift nibble up
   744  843e 0a                     asl
   745  843f 0a                     asl
   746  8440 0a                     asl
   747  8441 0a                     asl
   748                          
   749  8442 a204                   ldx #4 ; 4 bits rotated into word
   750  8444 2a                 -   rol
   751  8445 2e858f                 rol ptr1
   752  8448 2e868f                 rol ptr1+1
   753  844b ca                     dex
   754  844c d0f6                   bne - ; repeat bits
   755                          
   756  844e cec396                 dec count
   757  8451 d0e6                   bne -- ; repeat nybbles
   758                          
   759  8453 adc396             +   lda count
   760  8456 c904                   cmp #4 ; set C if 4, otherwise clear
   761  8458 60                     rts
   762                          
   763                          inputhexbyte:
   764  8459 207c84                 jsr inputhexnybble
   765  845c b01d                   bcs ++
   766  845e 8dc896                 sta tmp
   767  8461 207c84                 jsr inputhexnybble
   768  8464 9006                   bcc +
   769  8466 18                     clc ; allow single digit as byte
   770  8467 adc896                 lda tmp
   771  846a 900f                   bcc ++
   772  846c 0ec896             +   asl tmp
   773  846f 0ec896                 asl tmp
   774  8472 0ec896                 asl tmp
   775  8475 0ec896                 asl tmp
   776  8478 0dc896                 ora tmp ; necessary to assemble the two nybbles
   777  847b 60                 ++  rts
   778                          
   779                          inputhexnybble:
   780  847c b90002                 lda $0200,y
   781  847f 297f                   and #$7F
   782  8481 38                     sec
   783  8482 e930                   sbc #$30
   784  8484 9012                   bcc ++
   785  8486 c90a                   cmp #10
   786  8488 900c                   bcc +
   787  848a e907                   sbc #7
   788  848c 900a                   bcc ++
   789  848e c90a                   cmp #10
   790  8490 9006                   bcc ++
   791  8492 c910                   cmp #16
   792  8494 b002                   bcs ++
   793  8496 c8                 +   iny
   794  8497 60                     rts
   795  8498 38                 ++  sec
   796  8499 60                     rts
   797                          
   798                          dispdecword:
   799  849a a004                   ldy #4
   800  849c 8cc496                 sty len
   801  849f a00a               -   ldy #10
   802  84a1 20c88e                 jsr divaxwithy
   803  84a4 48                     pha
   804  84a5 adbb96                 lda remainl
   805  84a8 acc496                 ldy len
   806  84ab 990002                 sta inputbuf,y
   807  84ae cec496                 dec len
   808  84b1 68                     pla
   809  84b2 d0eb                   bne -
   810  84b4 e000                   cpx #0
   811  84b6 d0e7                   bne -
   812  84b8 acc496                 ldy len
   813  84bb c8                 -   iny
   814  84bc b90002                 lda inputbuf,y
   815  84bf 0930                   ora #'0'
   816  84c1 20d2ff                 jsr charout
   817  84c4 c004                   cpy #4
   818  84c6 90f3                   bcc -
   819  84c8 60                     rts
   820                          
   821                          strout:
   822  84c9 8d998f                 sta ptr3
   823  84cc 8e9a8f                 stx ptr3+1
   824                          strout2:
   825  84cf a000                   ldy #0
   826  84d1 20888f             -   jsr lda_at_ptr3_y
   827  84d4 f006                   beq +
   828  84d6 20d2ff                 jsr charout
   829  84d9 c8                     iny
   830  84da d0f5                   bne -
   831  84dc 98                 +   tya
   832  84dd 38                     sec
   833  84de 6d998f                 adc ptr3
   834  84e1 8d998f                 sta ptr3
   835  84e4 9003                   bcc +
   836  84e6 ee9a8f                 inc ptr3+1
   837  84e9 60                 +   rts
   838                          
   839                          inputline:
   840                          !ifdef C64SCREEN {
   841  84ea 4cfb80                 jmp inputlinec64
   842                          } else {
   843                              ldy #0
   844                          --  sty count
   845                          -   jsr getkey
   846                              beq -
   847                              ldy count
   848                          !ifdef MINIMUM {
   849                              cmp #8 ; backspace
   850                          } else {
   851                              cmp #20
   852                          }
   853                              bne +
   854                              cpy #0
   855                              beq -
   856                              dey
   857                          !if NEEDECHO = 1 {
   858                              jsr charout
   859                          }
   860                              jmp --
   861                          +   cmp #13
   862                              beq +
   863                              cmp #' '
   864                              bcc -
   865                              cmp #128
   866                              bcs -
   867                          +
   868                          !if NEEDECHO = 1 {
   869                              jsr charout
   870                          }
   871                              sta inputbuf,y
   872                              iny
   873                              cmp #13
   874                              bne --
   875                              rts
   876                          }
   877                          
   878                          parseline:
   879  84ed c001                   cpy #1
   880  84ef d003                   bne +
   881                          -
   882                          !ifdef C64SCREEN {
   883  84f1 4c1e8e                 jmp newline
   884                          } else {
   885                              rts
   886                          }
   887  84f4 88                 +   dey
   888  84f5 8cc496                 sty len
   889                              ; skip whitespace
   890                              ; check for address, put in ptr1
   891                              ; or check for dot, then require address put in ptr2
   892                              ; or check for ?, and optional parameter, execute help
   893                              ; check for whitespace
   894                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   895                              ; check for string, store at start of inputbuf
   896                              ; check for drive number
   897                              ; check for whitespace
   898                              ; check command ":rda?mls", execute command
   899  84f8 a000                   ldy #0
   900  84fa 201e8d                 jsr skipspaces
   901  84fd ccc496                 cpy len
   902  8500 f0ef                   beq -
   903  8502 20c28c                 jsr chkcontinuedis
   904  8505 d003                   bne +
   905  8507 20e68c                 jsr executedisassemble ; note won't return
   906  850a 20d48c             +   jsr chkcontinueasm
   907  850d d003                   bne +
   908  850f 208f88                 jsr continueassemble ; note won't return
   909  8512 203785             +   jsr chkexecutepc ; not won't return
   910  8515 202d8d                 jsr chkdot
   911  8518 d003                   bne +
   912  851a 4c2f86                 jmp executedot
   913  851d 20388d             +   jsr chkhelp
   914  8520 d003                   bne +
   915  8522 4cf986                 jmp executehelp
   916                          +
   917                          !ifndef MINIMUM {
   918  8525 209a80                 jsr chkextrac64 ; check syntax only available on C64
   919  8528 b01e                   bcs + ; error if C set
   920  852a f005                   beq ++ ; consumed if Z set, skip next test(s)
   921                          }
   922  852c 206b8d                 jsr chkhexaddr1
   923  852f d003                   bne error
   924  8531 4c4985             ++  jmp executeaddr1
   925                          error:
   926  8534 4cf58c                 jmp reporterr
   927                          
   928                          chkexecutepc:
   929  8537 b90002                 lda inputbuf, y
   930  853a c952                   cmp #'R'
   931  853c d00a                   bne +
   932  853e b90102                 lda inputbuf+1, y
   933  8541 c90d                   cmp #13
   934  8543 d003                   bne +
   935  8545 4ca38c                 jmp executerun
   936  8548 60                 +   rts
   937                          
   938                          executeaddr1:
   939  8549 ccc496                 cpy len
   940  854c d003                   bne +
   941  854e 4cab85                 jmp executedisplay1
   942  8551 202d8d             +   jsr chkdot
   943  8554 d011                   bne +
   944  8556 ccc496                 cpy len
   945  8559 f020                   beq executepagedisplay
   946  855b 208d8d                 jsr chkhexaddr2
   947  855e d0d4                   bne error
   948  8560 18                     clc
   949  8561 6ec796                 ror flag
   950  8564 4c9a85                 jmp executeaddr12
   951  8567 201e8d             +   jsr skipspaces
   952  856a 20438d                 jsr chkcolon
   953  856d d003                   bne +
   954  856f 4c0786                 jmp executemodify
   955  8572 20da8d             +   jsr chkaddr1cmd ; r/d/a, will not return here if cmd
   956                          !ifdef MINIMUM {
   957                              jmp reportnotimplemented
   958                          } else {
   959  8575 207181                 jsr check_execute_load
   960  8578 d0ba                   bne error
   961  857a 60                     rts
   962                          }
   963                          
   964                          executepagedisplay:
   965  857b ad858f                 lda ptr1
   966  857e 18                     clc
   967                          !ifdef MINIMUM {
   968                              adc #$5f
   969                          } else {
   970  857f 69b7                   adc #$b7
   971                          }
   972  8581 8dc996                 sta ptr2
   973  8584 ad868f                 lda ptr1+1
   974                          !ifdef MINIMUM {
   975                              adc #$01
   976                          } else {
   977  8587 6900                   adc #$00
   978                          }
   979  8589 8dca96                 sta ptr2+1
   980  858c 9008                   bcc +
   981  858e a9ff                   lda #$ff
   982  8590 8dc996                 sta ptr2
   983  8593 8dca96                 sta ptr2+1
   984  8596 38                 +   sec
   985  8597 6ec796                 ror flag
   986                              ; fall through to executeaddr12
   987                          
   988                          executeaddr12:
   989  859a ccc496                 cpy len
   990  859d d003                   bne +
   991  859f 4cb785                 jmp executedisplay12
   992                          !ifndef MINIMUM { // any C64
   993  85a2 205881             +   jsr check_execute_save
   994  85a5 f003                   beq ++
   995                          }
   996  85a7 4cee8c             +   jmp reportnotimplemented
   997  85aa 60                 ++  rts
   998                          
   999                          executedisplay1:
  1000  85ab ad858f                 lda ptr1
  1001  85ae 8dc996                 sta ptr2
  1002  85b1 ad868f                 lda ptr1+1
  1003  85b4 8dca96                 sta ptr2+1
  1004                              ; fall through executedisplay12
  1005                          
  1006                          executedisplay12:
  1007  85b7 a9ff                   lda #$ff
  1008  85b9 8dc396                 sta count
  1009  85bc eec396             -   inc count
  1010  85bf adc396                 lda count
  1011                          !ifdef MINIMUM {
  1012                              and #$0f
  1013                          } else {
  1014  85c2 2907                   and #$07
  1015                          }
  1016  85c4 d018                   bne +
  1017  85c6 a90d                   lda #13
  1018  85c8 20d2ff                 jsr charout
  1019  85cb ad858f                 lda ptr1
  1020  85ce ae868f                 ldx ptr1+1
  1021  85d1 201084                 jsr disphexword
  1022  85d4 a93a                   lda #':'
  1023  85d6 20d2ff                 jsr charout
  1024  85d9 a920                   lda #' '
  1025  85db 20d2ff                 jsr charout
  1026  85de a000               +   ldy #0
  1027  85e0 20748f                 jsr lda_at_ptr1_y
  1028  85e3 201684                 jsr disphexbyte
  1029  85e6 a920                   lda #' '
  1030  85e8 20d2ff                 jsr charout
  1031  85eb ee858f                 inc ptr1
  1032  85ee d005                   bne +
  1033  85f0 ee868f                 inc ptr1+1
  1034  85f3 f00f                   beq ++
  1035  85f5 202f82             +   jsr compareptrs
  1036  85f8 90c2                   bcc -
  1037  85fa f0c0                   beq -
  1038  85fc 2cc796                 bit flag
  1039  85ff 1003                   bpl ++
  1040                          !ifdef C64SCREEN {
  1041  8601 4ce880                 jmp display_page_displaymemory
  1042                          }
  1043  8604 4c1e8e             ++  jmp newline
  1044                          
  1045                          executemodify:
  1046  8607 201e8d                 jsr skipspaces
  1047  860a ccc496                 cpy len
  1048  860d f01d                   beq ++
  1049  860f 204e8d                 jsr chkhexbyteofsequence
  1050  8612 f003                   beq +
  1051  8614 4c3485                 jmp error
  1052  8617 8cc896             +   sty tmp
  1053  861a a000                   ldy #0
  1054  861c 20848f                 jsr sta_at_ptr1_y
  1055  861f ee858f                 inc ptr1
  1056  8622 d003                   bne +
  1057  8624 ee868f                 inc ptr1+1
  1058  8627 acc896             +   ldy tmp
  1059  862a d0db                   bne executemodify
  1060  862c 4c1e8e             ++  jmp newline
  1061                          
  1062                          executedot:
  1063  862f ccc496                 cpy len
  1064  8632 d003                   bne +
  1065  8634 4c7b85                 jmp executepagedisplay
  1066  8637 203f86             +   jsr chkloadregister
  1067  863a d000                   bne +
  1068  863c 209f86             +   jsr chkloadregisters
  1069                          
  1070                          chkloadregister:
  1071  863f 204986                 jsr chkload_a_x_y_s_p
  1072  8642 209986                 jsr chkload_pc
  1073  8645 209c86                 jsr chkload_n_v_b_d_i_z_c
  1074  8648 60                     rts
  1075                          
  1076                          chkload_a_x_y_s_p:
  1077  8649 8cc896                 sty tmp
  1078  864c b90002                 lda inputbuf, y
  1079  864f a200                   ldx #0
  1080  8651 c941                   cmp #'A'
  1081  8653 f014                   beq +
  1082  8655 e8                     inx
  1083  8656 c958                   cmp #'X'
  1084  8658 f00f                   beq +
  1085  865a e8                     inx
  1086  865b c959                   cmp #'Y'
  1087  865d f00a                   beq +
  1088  865f e8                     inx
  1089  8660 c953                   cmp #'S'
  1090  8662 f005                   beq +
  1091  8664 e8                     inx
  1092  8665 c950                   cmp #'P'
  1093  8667 d02c                   bne ++
  1094  8669 c8                 +   iny
  1095  866a b90002                 lda inputbuf, y
  1096                          !ifndef MINIMUM {
  1097  866d c9a0                   cmp #$A0
  1098  866f f008                   beq +
  1099                          }
  1100  8671 c920                   cmp #' '
  1101  8673 f004                   beq +
  1102  8675 c93a                   cmp #':'
  1103  8677 d01c                   bne ++
  1104  8679 c8                 +   iny
  1105  867a 201e8d                 jsr skipspaces
  1106  867d 8ec196                 stx mode
  1107  8680 20748d                 jsr chkhexbyte
  1108  8683 d010                   bne ++
  1109  8685 aec196                 ldx mode
  1110  8688 9dd096                 sta registerA, x
  1111                          !ifndef MINIMUM {
  1112  868b 201e8e                 jsr newline
  1113                          }
  1114                              ; pop call stack so return to input_loop
  1115  868e 68                     pla
  1116  868f 68                     pla
  1117  8690 68                     pla
  1118  8691 68                     pla
  1119  8692 4c9886                 jmp +++
  1120  8695 acc896             ++  ldy tmp ; not Z (NE)
  1121  8698 60                 +++ rts
  1122                          
  1123                          chkload_pc:
  1124  8699 a901                   lda #1 ; not Z (NE)
  1125  869b 60                     rts
  1126                          
  1127                          chkload_n_v_b_d_i_z_c:
  1128  869c a901                   lda #1 ; not Z (NE)
  1129  869e 60                     rts
  1130                          
  1131                          chkloadregisters:
  1132  869f 206b8d                 jsr chkhexword
  1133  86a2 d054                   bne ++
  1134  86a4 ad858f                 lda ptr1
  1135  86a7 8dd596                 sta registerPC
  1136  86aa ad868f                 lda ptr1+1
  1137  86ad 8dd696                 sta registerPC+1
  1138  86b0 200c8d                 jsr chkspace
  1139  86b3 d03c                   bne +
  1140  86b5 20b68d                 jsr chkbinbyte
  1141  86b8 d037                   bne +
  1142  86ba 8dd496                 sta registerSR
  1143  86bd 200c8d                 jsr chkspace
  1144  86c0 d02f                   bne +
  1145  86c2 20748d                 jsr chkhexbyte
  1146  86c5 d02a                   bne +
  1147  86c7 8dd096                 sta registerA
  1148  86ca 200c8d                 jsr chkspace
  1149  86cd d022                   bne +
  1150  86cf 20748d                 jsr chkhexbyte
  1151  86d2 d01d                   bne +
  1152  86d4 8dd196                 sta registerX
  1153  86d7 200c8d                 jsr chkspace
  1154  86da d015                   bne +
  1155  86dc 20748d                 jsr chkhexbyte
  1156  86df d010                   bne +
  1157  86e1 8dd296                 sta registerY
  1158  86e4 200c8d                 jsr chkspace
  1159  86e7 d008                   bne +
  1160  86e9 20748d                 jsr chkhexbyte
  1161  86ec d003                   bne +
  1162  86ee 8dd396                 sta registerSP
  1163                              ; don't return to executedot
  1164  86f1 68                 +   pla
  1165  86f2 68                     pla
  1166                          !ifdef C64SCREEN {
  1167  86f3 201e8e                 jsr newline
  1168                          }
  1169  86f6 a900                   lda #0 ; set Z
  1170  86f8 60                 ++  rts
  1171                          
  1172                          executehelp:
  1173                          !ifdef C64SCREEN {
  1174  86f9 201e8e                 jsr newline
  1175                          }
  1176  86fc ccc496                 cpy len
  1177  86ff d003                   bne +
  1178  8701 4c2a87                 jmp displayhelp
  1179  8704 201e8d             +   jsr skipspaces
  1180  8707 204587                 jsr chkhelpinstructions
  1181  870a d003                   bne +
  1182  870c 4c8987                 jmp displayinstructions
  1183  870f 205f87             +   jsr chkhelpmodes
  1184  8712 d003                   bne +
  1185  8714 4ca087                 jmp displaymodes
  1186  8717 20228c             +   jsr chkinstruction
  1187  871a d003                   bne +
  1188  871c 4c5c88                 jmp executehelpinstruction
  1189  871f 205287             +   jsr chkhelpregisters
  1190  8722 d003                   bne +
  1191  8724 4c3d8e                 jmp execute_display_registers
  1192  8727 4cee8c             +   jmp reportnotimplemented
  1193                          
  1194                          displayhelp:
  1195  872a a965                   lda #<generalhelp
  1196  872c a294                   ldx #>generalhelp
  1197  872e 20c984                 jsr strout
  1198  8731 a95a                   lda #<generalhelp2
  1199  8733 a295                   ldx #>generalhelp2
  1200  8735 20c984                 jsr strout
  1201  8738 a924                   lda #<generalhelp3
  1202  873a a296                   ldx #>generalhelp3
  1203  873c 20c984                 jsr strout
  1204                          !ifndef MINIMUM { // any C64
  1205  873f 20d180                 jsr display_extra_help
  1206                          }
  1207  8742 4c1e8e                 jmp newline
  1208                          
  1209                          chkhelpinstructions:
  1210  8745 b90002                 lda inputbuf, y
  1211  8748 c941                   cmp #'A'
  1212  874a d005                   bne +
  1213  874c b90102                 lda inputbuf+1, y
  1214  874f c90d                   cmp #13
  1215                              ; no need to increment y if found, done parsing line
  1216  8751 60                 +   rts
  1217                          
  1218                          chkhelpregisters:
  1219  8752 b90002                 lda inputbuf, y
  1220  8755 c92e                   cmp #'.'
  1221  8757 d005                   bne +
  1222  8759 b90102                 lda inputbuf+1, y
  1223  875c c90d                   cmp #13
  1224  875e 60                 +   rts
  1225                          
  1226                          chkhelpmodes:
  1227  875f a995                   lda #<modes_keyword
  1228  8761 a296                   ldx #>modes_keyword
  1229                              ; fall through to chkkeyword
  1230                          
  1231                          chkkeyword:
  1232  8763 8cc396                 sty count
  1233  8766 8d998f                 sta ptr3
  1234  8769 8e9a8f                 stx ptr3+1
  1235  876c aec396                 ldx count
  1236  876f a000                   ldy #0
  1237  8771 20888f             -   jsr lda_at_ptr3_y
  1238  8774 dd0002                 cmp inputbuf, x
  1239  8777 d00a                   bne +
  1240  8779 e8                     inx
  1241  877a c8                     iny
  1242  877b ecc496                 cpx len
  1243  877e d0f1                   bne -
  1244  8780 20888f                 jsr lda_at_ptr3_y ; matched if end of string, will set Z
  1245  8783 08                 +   php ; save Z
  1246  8784 acc396                 ldy count
  1247  8787 28                     plp ; restore Z
  1248  8788 60                     rts
  1249                          
  1250                          displayinstructions:
  1251  8789 a038                   ldy #ninst
  1252  878b a200                   ldx #0
  1253  878d 8a                 -   txa
  1254  878e 48                     pha
  1255  878f 208582                 jsr dispinst
  1256  8792 a920                   lda #' '
  1257  8794 20d2ff                 jsr charout
  1258  8797 68                     pla
  1259  8798 aa                     tax
  1260  8799 e8                     inx
  1261  879a 88                     dey
  1262  879b d0f0                   bne -
  1263  879d 4c1e8e                 jmp newline
  1264                          
  1265                          displaymodes:
  1266  87a0 38                     sec
  1267  87a1 a900                   lda #0
  1268  87a3 48                 -   pha
  1269  87a4 aa                     tax
  1270  87a5 bda590                 lda mode_sorted, x
  1271  87a8 20b587                 jsr dispmode
  1272  87ab 68                     pla
  1273  87ac 18                     clc
  1274  87ad 6901                   adc #1
  1275  87af c90d                   cmp #nmodes
  1276  87b1 90f0                   bcc -
  1277  87b3 18                     clc
  1278  87b4 60                     rts
  1279                          
  1280                          dispmode:
  1281  87b5 c90d                   cmp #nmodes
  1282  87b7 b009                   bcs +
  1283  87b9 8dc196                 sta mode
  1284  87bc 200488                 jsr disp_modename_and_example
  1285  87bf 4cc387                 jmp dispmodeinstructions
  1286  87c2 60                 +   rts
  1287                          
  1288                          dispmodeinstructions:
  1289                          !ifdef C64SCREEN {
  1290                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
  1291  87c3 adc196                 lda mode
  1292  87c6 c903                   cmp #3
  1293  87c8 d005                   bne +
  1294  87ca a920                   lda #' '
  1295  87cc 4cd2ff                 jmp charout
  1296                          }
  1297                              ; display instructions with this mode
  1298  87cf a000               +   ldy #0
  1299  87d1 8cc096             --  sty inidx
  1300  87d4 a200                   ldx #0
  1301  87d6 8ec896             -   stx tmp
  1302  87d9 adc096                 lda inidx
  1303  87dc dd3b92                 cmp instidx, x
  1304  87df d016                   bne ++
  1305  87e1 bdd292                 lda modeidx, x
  1306  87e4 cdc196                 cmp mode
  1307  87e7 d00e                   bne ++
  1308  87e9 a920                   lda #' '
  1309  87eb 20d2ff                 jsr charout
  1310  87ee bd3b92                 lda instidx, x
  1311  87f1 208582                 jsr dispinst
  1312  87f4 aec896                 ldx tmp
  1313  87f7 e8                 ++  inx
  1314  87f8 e097                   cpx #nopcodes
  1315  87fa 90da                   bcc -
  1316  87fc c8                     iny
  1317  87fd c038                   cpy #ninst
  1318  87ff d0d0                   bne --
  1319  8801 4c1e8e                 jmp newline
  1320                          
  1321                          disp_modename_and_example:
  1322  8804 0a                     asl
  1323  8805 aa                     tax
  1324  8806 bd8a91                 lda modes, x
  1325  8809 48                     pha
  1326  880a bd8b91                 lda modes+1, x
  1327  880d aa                     tax
  1328                          !ifdef C64SCREEN {
  1329  880e a912                   lda #18
  1330  8810 20d2ff                 jsr charout
  1331                          }
  1332  8813 68                     pla
  1333  8814 20c984                 jsr strout
  1334  8817 a920                   lda #' '
  1335  8819 20d2ff                 jsr charout
  1336  881c 20cf84                 jsr strout2
  1337                          !ifdef C64SCREEN {
  1338  881f a992                   lda #146
  1339  8821 20d2ff                 jsr charout
  1340                          }
  1341  8824 60                     rts
  1342                          
  1343                          disp_modename_instruction_example:
  1344  8825 0a                     asl
  1345  8826 aa                     tax
  1346  8827 bd8a91                 lda modes, x
  1347  882a 48                     pha
  1348  882b bd8b91                 lda modes+1, x
  1349  882e aa                     tax
  1350  882f 68                     pla
  1351  8830 20c984                 jsr strout ; mode name
  1352  8833 ad998f                 lda ptr3
  1353  8836 48                     pha
  1354  8837 ad9a8f                 lda ptr3+1
  1355  883a 48                     pha
  1356  883b a93a                   lda #':'
  1357  883d 20d2ff                 jsr charout
  1358  8840 a920                   lda #' '
  1359  8842 20d2ff                 jsr charout
  1360  8845 adc096                 lda inidx
  1361  8848 208582                 jsr dispinst ; instruction
  1362  884b a920                   lda #' '
  1363  884d 20d2ff                 jsr charout
  1364  8850 68                     pla
  1365  8851 8d9a8f                 sta ptr3+1
  1366  8854 68                     pla
  1367  8855 8d998f                 sta ptr3
  1368  8858 20cf84                 jsr strout2 ; example
  1369  885b 60                     rts
  1370                          
  1371                          
  1372                          executehelpinstruction:
  1373  885c a000                   ldy #0
  1374  885e 8cbf96             -   sty opidx
  1375  8861 b93b92                 lda instidx, y
  1376  8864 cdc096                 cmp inidx
  1377  8867 d01d                   bne +
  1378  8869 b9d292                 lda modeidx, y
  1379  886c 8dc196                 sta mode
  1380  886f aebf96                 ldx opidx
  1381  8872 bda491                 lda opcodes, x
  1382  8875 201684                 jsr disphexbyte
  1383  8878 a920                   lda #' '
  1384  887a 20d2ff                 jsr charout
  1385  887d adc196                 lda mode
  1386  8880 202588                 jsr disp_modename_instruction_example
  1387  8883 201e8e                 jsr newline
  1388  8886 acbf96             +   ldy opidx
  1389  8889 c8                     iny
  1390  888a c097                   cpy #nopcodes
  1391  888c 90d0                   bcc -
  1392  888e 60                     rts
  1393                          
  1394                          continueassemble:
  1395                          !ifdef C64SCREEN {
  1396  888f 200981                 jsr continueassemblec64
  1397                          }
  1398                              ; continue...
  1399                          
  1400                          executeassemble:
  1401  8892 68                     pla ; remove low byte return address
  1402  8893 68                     pla ; return high byte return address
  1403                          !ifdef C64SCREEN {
  1404  8894 a914                   lda #20
  1405  8896 20d2ff                 jsr charout
  1406  8899 20d2ff                 jsr charout
  1407                          } else {
  1408                              lda ptr1
  1409                              ldx ptr1+1
  1410                              jsr disphexword
  1411                              lda #' '
  1412                              jsr charout
  1413                          }
  1414                              ; save current pointer
  1415  889c ad858f             --  lda ptr1
  1416  889f ae868f                 ldx ptr1+1
  1417  88a2 8d998f                 sta ptr3
  1418  88a5 8e9a8f                 stx ptr3+1
  1419  88a8 20ea84                 jsr inputline
  1420  88ab c001                   cpy #1
  1421  88ad f055                   beq ++
  1422  88af 88                     dey
  1423  88b0 8cc496                 sty len
  1424  88b3 a000                   ldy #0
  1425  88b5 201e8d                 jsr skipspaces
  1426  88b8 ccc496                 cpy len
  1427  88bb f047                   beq ++
  1428                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1429                              ;jsr skipspaces
  1430  88bd 20228c                 jsr chkinstruction
  1431  88c0 f00f                   beq +
  1432  88c2 ad998f             -   lda ptr3
  1433  88c5 8d858f                 sta ptr1
  1434  88c8 ad9a8f                 lda ptr3+1
  1435  88cb 8d868f                 sta ptr1+1
  1436  88ce 4c3485                 jmp error
  1437  88d1 203789             +   jsr chkaddressing
  1438  88d4 d0ec                   bne -
  1439  88d6 20578c                 jsr find_inst_and_mode
  1440  88d9 d0e7                   bne -
  1441  88db 200789                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1442  88de 18                     clc
  1443  88df adc296                 lda size
  1444  88e2 6d998f                 adc ptr3
  1445  88e5 8d858f                 sta ptr1
  1446  88e8 ad9a8f                 lda ptr3+1
  1447  88eb 6900                   adc #0
  1448  88ed 8d868f                 sta ptr1+1
  1449                          !ifdef C64SCREEN {
  1450  88f0 201e8e                 jsr newline
  1451                          }
  1452  88f3 ad858f                 lda ptr1
  1453  88f6 ae868f                 ldx ptr1+1
  1454  88f9 201084                 jsr disphexword
  1455  88fc a920                   lda #' '
  1456  88fe 20d2ff                 jsr charout
  1457  8901 4c9c88                 jmp --
  1458                          ++
  1459                          !ifdef C64SCREEN {
  1460  8904 4c1e8e                 jmp newline
  1461                          } else {
  1462                              rts
  1463                          }
  1464                          
  1465                          store_assembly:
  1466  8907 aebf96                 ldx opidx
  1467  890a bda491                 lda opcodes, x
  1468  890d a000                   ldy #0
  1469  890f 20988f                 jsr sta_at_ptr3_y
  1470  8912 c8                     iny
  1471  8913 aec296                 ldx size
  1472  8916 e001                   cpx #1
  1473  8918 f01c                   beq ++
  1474  891a e002               +   cpx #2
  1475  891c d007                   bne +
  1476  891e adc696                 lda tmp2
  1477  8921 20988f                 jsr sta_at_ptr3_y
  1478  8924 60                     rts
  1479  8925 e003               +   cpx #3
  1480  8927 d00d                   bne ++
  1481  8929 ad858f                 lda ptr1
  1482  892c 20988f                 jsr sta_at_ptr3_y
  1483  892f c8                     iny
  1484  8930 ad868f                 lda ptr1+1
  1485  8933 20988f                 jsr sta_at_ptr3_y
  1486  8936 60                 ++  rts
  1487                          
  1488                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1489  8937 201e8d                 jsr skipspaces
  1490  893a a200                   ldx #0
  1491  893c 8ec196                 stx mode
  1492  893f 20a889                 jsr chkaccumulator
  1493  8942 f05e                   beq +
  1494  8944 eec196                 inc mode
  1495  8947 ccc496                 cpy len ; chknone
  1496  894a f056                   beq +
  1497  894c eec196                 inc mode
  1498  894f 20ce89                 jsr chkimmediate
  1499  8952 f04e                   beq +
  1500  8954 eec196                 inc mode
  1501  8957 20f589                 jsr chkindirectx
  1502  895a f046                   beq +
  1503  895c eec196                 inc mode
  1504  895f 203d8a                 jsr chkindirecty
  1505  8962 f03e                   beq +
  1506  8964 eec196                 inc mode
  1507  8967 20858a                 jsr chkrelative
  1508  896a f036                   beq +
  1509  896c eec196                 inc mode
  1510  896f 20f08a                 jsr chkzeropage
  1511  8972 f02e                   beq +
  1512  8974 eec196                 inc mode
  1513  8977 200c8b                 jsr chkzeropagex
  1514  897a f026                   beq +
  1515  897c eec196                 inc mode
  1516  897f 203e8b                 jsr chkzeropagey
  1517  8982 f01e                   beq +
  1518  8984 eec196                 inc mode
  1519  8987 20708b                 jsr chkabsolute
  1520  898a f016                   beq +
  1521  898c eec196                 inc mode
  1522  898f 208c8b                 jsr chkabsolutex
  1523  8992 f00e                   beq +
  1524  8994 eec196                 inc mode
  1525  8997 20be8b                 jsr chkabsolutey
  1526  899a f006                   beq +
  1527  899c eec196                 inc mode
  1528  899f 20f08b                 jsr chkindirect
  1529  89a2 08                 +   php ; save Z
  1530  89a3 adc196                 lda mode
  1531  89a6 28                     plp ; restore Z
  1532  89a7 60                     rts
  1533                          
  1534                          chkaccumulator:
  1535  89a8 ccc496                 cpy len
  1536  89ab d014                   bne +
  1537  89ad adc096                 lda inidx
  1538  89b0 c902                   cmp #2 ; ASL
  1539  89b2 f019                   beq ++
  1540  89b4 c920                   cmp #32 ; LSR
  1541  89b6 f015                   beq ++
  1542  89b8 c927                   cmp #39 ; ROL
  1543  89ba f011                   beq ++
  1544  89bc c928                   cmp #40 ; ROR
  1545  89be 4ccd89                 jmp ++
  1546  89c1 b90002             +   lda inputbuf, y
  1547  89c4 c941                   cmp #'A'
  1548  89c6 d005                   bne ++
  1549  89c8 b90102                 lda inputbuf+1,y
  1550  89cb c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1551  89cd 60                 ++  rts
  1552                          
  1553                          chkimmediate:
  1554  89ce 8cc596                 sty savepos
  1555  89d1 b90002                 lda inputbuf, y
  1556  89d4 c923                   cmp #'#'
  1557  89d6 d017                   bne ++
  1558  89d8 c8                     iny
  1559  89d9 201e8d                 jsr skipspaces
  1560  89dc b90002                 lda inputbuf, y
  1561  89df c924                   cmp #'$'
  1562  89e1 d001                   bne +
  1563  89e3 c8                     iny
  1564  89e4 20748d             +   jsr chkhexbyte
  1565  89e7 d006                   bne ++
  1566  89e9 ccc496             +   cpy len
  1567  89ec d001                   bne ++
  1568  89ee 60                     rts
  1569  89ef acc596             ++  ldy savepos
  1570  89f2 a201                   ldx #1 ; Z false (NE)
  1571  89f4 60                     rts
  1572                          
  1573                          chkindirectx:
  1574  89f5 8cc596                 sty savepos
  1575  89f8 b90002                 lda inputbuf, y
  1576  89fb c928                   cmp #'('
  1577  89fd d038                   bne ++
  1578  89ff c8                     iny
  1579  8a00 201e8d                 jsr skipspaces
  1580  8a03 b90002                 lda inputbuf, y
  1581  8a06 c924                   cmp #'$'
  1582  8a08 d001                   bne +
  1583  8a0a c8                     iny
  1584  8a0b 20748d             +   jsr chkhexbyte
  1585  8a0e d027                   bne ++
  1586  8a10 201e8d                 jsr skipspaces
  1587  8a13 b90002                 lda inputbuf, y
  1588  8a16 c92c                   cmp #','
  1589  8a18 d01d                   bne ++
  1590  8a1a c8                     iny
  1591  8a1b 201e8d                 jsr skipspaces
  1592  8a1e b90002                 lda inputbuf, y
  1593  8a21 c958                   cmp #'X'
  1594  8a23 d012                   bne ++
  1595  8a25 c8                     iny
  1596  8a26 201e8d                 jsr skipspaces
  1597  8a29 b90002                 lda inputbuf, y
  1598  8a2c c929                   cmp #')'
  1599  8a2e d007                   bne ++
  1600  8a30 c8                     iny
  1601  8a31 ccc496                 cpy len
  1602  8a34 d001                   bne ++
  1603  8a36 60                     rts
  1604  8a37 acc596             ++  ldy savepos
  1605  8a3a a201                   ldx #1 ; Z false (NE)
  1606  8a3c 60                     rts
  1607                          
  1608                          chkindirecty:
  1609  8a3d 8cc596                 sty savepos
  1610  8a40 b90002                 lda inputbuf, y
  1611  8a43 c928                   cmp #'('
  1612  8a45 d038                   bne ++
  1613  8a47 c8                     iny
  1614  8a48 201e8d                 jsr skipspaces
  1615  8a4b b90002                 lda inputbuf, y
  1616  8a4e c924                   cmp #'$'
  1617  8a50 d001                   bne +
  1618  8a52 c8                     iny
  1619  8a53 20748d             +   jsr chkhexbyte
  1620  8a56 d027                   bne ++
  1621  8a58 201e8d                 jsr skipspaces
  1622  8a5b b90002                 lda inputbuf, y
  1623  8a5e c929                   cmp #')'
  1624  8a60 d01d                   bne ++
  1625  8a62 c8                     iny
  1626  8a63 201e8d                 jsr skipspaces
  1627  8a66 b90002                 lda inputbuf, y
  1628  8a69 c92c                   cmp #','
  1629  8a6b d012                   bne ++
  1630  8a6d c8                     iny
  1631  8a6e 201e8d                 jsr skipspaces
  1632  8a71 b90002                 lda inputbuf, y
  1633  8a74 c959                   cmp #'Y'
  1634  8a76 d007                   bne ++
  1635  8a78 c8                     iny
  1636  8a79 ccc496                 cpy len
  1637  8a7c d001                   bne ++
  1638  8a7e 60                     rts
  1639  8a7f acc596             ++  ldy savepos
  1640  8a82 a201                   ldx #1 ; Z false (NE)
  1641  8a84 60                     rts
  1642                          
  1643                          chkrelative:
  1644  8a85 8cc596                 sty savepos
  1645  8a88 aec096                 ldx inidx
  1646  8a8b e006                   cpx #6 ; BIT
  1647  8a8d f01f                   beq ++
  1648  8a8f bde38f                 lda inst0, x
  1649  8a92 c942                   cmp #'B'
  1650  8a94 d018                   bne ++
  1651  8a96 b90002                 lda inputbuf, y
  1652  8a99 c924                   cmp #'$'
  1653  8a9b d001                   bne +
  1654  8a9d c8                     iny
  1655  8a9e 206b8d             +   jsr chkhexword
  1656  8aa1 d00b                   bne ++
  1657  8aa3 ccc496                 cpy len
  1658  8aa6 d006                   bne ++
  1659  8aa8 20b48a                 jsr computeoffset
  1660  8aab d001                   bne ++
  1661  8aad 60                     rts ; Z true (EQ)
  1662  8aae acc596             ++  ldy savepos
  1663  8ab1 a201                   ldx #1 ; Z false (NE)
  1664  8ab3 60                     rts
  1665                          
  1666                          computeoffset:
  1667                          ;   compute next address
  1668  8ab4 ad9a8f                 lda ptr3+1
  1669  8ab7 8dca96                 sta ptr2+1
  1670  8aba ad998f                 lda ptr3
  1671  8abd 18                     clc
  1672  8abe 6902                   adc #2
  1673  8ac0 8dc996                 sta ptr2
  1674  8ac3 9003                   bcc +
  1675  8ac5 eeca96                 inc ptr2+1
  1676                          +  ; subtract argument
  1677  8ac8 38                     sec
  1678  8ac9 ad858f                 lda ptr1
  1679  8acc edc996                 sbc ptr2
  1680  8acf 8dc696                 sta tmp2
  1681  8ad2 ad868f                 lda ptr1+1
  1682  8ad5 edca96                 sbc ptr2+1
  1683  8ad8 f00b                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1684  8ada c9ff                   cmp #$FF
  1685  8adc d00f                   bne failedoffset ; 0 and FF were only options so fail
  1686                              ; chkeck negative offset
  1687  8ade adc696                 lda tmp2
  1688  8ae1 3007                   bmi successoffset ; branch if signed byte is negative
  1689  8ae3 1008                   bpl failedoffset ; otherwise fail
  1690                          chkoffsetto127:
  1691  8ae5 adc696                 lda tmp2
  1692  8ae8 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1693                          successoffset:
  1694  8aea a900                   lda #0 ; Z true (EQ)
  1695  8aec 60                     rts
  1696                          failedoffset:
  1697  8aed a901                   lda #1 ; Z false (NE)
  1698  8aef 60                     rts
  1699                          
  1700                          chkzeropage:
  1701  8af0 8cc596                 sty savepos
  1702  8af3 b90002                 lda inputbuf, y
  1703  8af6 c924                   cmp #'$'
  1704  8af8 d001                   bne +
  1705  8afa c8                     iny
  1706  8afb 20748d             +   jsr chkhexbyte
  1707  8afe d006                   bne ++
  1708  8b00 ccc496                 cpy len
  1709  8b03 d001                   bne ++
  1710  8b05 60                     rts ; Z true (EQ)
  1711  8b06 acc596             ++  ldy savepos
  1712  8b09 a201                   ldx #1 ; Z false (NE)
  1713  8b0b 60                     rts
  1714                          
  1715                          chkzeropagex:
  1716  8b0c 8cc596                 sty savepos
  1717  8b0f b90002                 lda inputbuf, y
  1718  8b12 c924                   cmp #'$'
  1719  8b14 d001                   bne +
  1720  8b16 c8                     iny
  1721  8b17 20748d             +   jsr chkhexbyte
  1722  8b1a d01c                   bne ++
  1723  8b1c 201e8d                 jsr skipspaces
  1724  8b1f b90002                 lda inputbuf, y
  1725  8b22 c92c                   cmp #','
  1726  8b24 d012                   bne ++
  1727  8b26 c8                     iny
  1728  8b27 201e8d                 jsr skipspaces
  1729  8b2a b90002                 lda inputbuf, y
  1730  8b2d c958                   cmp #'X'
  1731  8b2f d007                   bne ++
  1732  8b31 c8                     iny
  1733  8b32 ccc496                 cpy len
  1734  8b35 d001                   bne ++
  1735  8b37 60                     rts ; Z true (EQ)
  1736  8b38 acc596             ++  ldy savepos
  1737  8b3b a201                   ldx #1 ; Z false (NE)
  1738  8b3d 60                     rts
  1739                          
  1740                          chkzeropagey:
  1741  8b3e 8cc596                 sty savepos
  1742  8b41 b90002                 lda inputbuf, y
  1743  8b44 c924                   cmp #'$'
  1744  8b46 d001                   bne +
  1745  8b48 c8                     iny
  1746  8b49 20748d             +   jsr chkhexbyte
  1747  8b4c d01c                   bne ++
  1748  8b4e 201e8d                 jsr skipspaces
  1749  8b51 b90002                 lda inputbuf, y
  1750  8b54 c92c                   cmp #','
  1751  8b56 d012                   bne ++
  1752  8b58 c8                     iny
  1753  8b59 201e8d                 jsr skipspaces
  1754  8b5c b90002                 lda inputbuf, y
  1755  8b5f c959                   cmp #'Y'
  1756  8b61 d007                   bne ++
  1757  8b63 c8                     iny
  1758  8b64 ccc496                 cpy len
  1759  8b67 d001                   bne ++
  1760  8b69 60                     rts ; Z true (EQ)
  1761  8b6a acc596             ++  ldy savepos
  1762  8b6d a201                   ldx #1 ; Z false (NE)
  1763  8b6f 60                     rts
  1764                          
  1765                          chkabsolute:
  1766  8b70 8cc596                 sty savepos
  1767  8b73 b90002                 lda inputbuf, y
  1768  8b76 c924                   cmp #'$'
  1769  8b78 d001                   bne +
  1770  8b7a c8                     iny
  1771  8b7b 206b8d             +   jsr chkhexword
  1772  8b7e d006                   bne ++
  1773  8b80 ccc496                 cpy len
  1774  8b83 d001                   bne ++
  1775  8b85 60                     rts ; Z true (EQ)
  1776  8b86 acc596             ++  ldy savepos
  1777  8b89 a201                   ldx #1 ; Z false (NE)
  1778  8b8b 60                     rts
  1779                          
  1780                          chkabsolutex:
  1781  8b8c 8cc596                 sty savepos
  1782  8b8f b90002                 lda inputbuf, y
  1783  8b92 c924                   cmp #'$'
  1784  8b94 d001                   bne +
  1785  8b96 c8                     iny
  1786  8b97 206b8d             +   jsr chkhexword
  1787  8b9a d01c                   bne ++
  1788  8b9c 201e8d                 jsr skipspaces
  1789  8b9f b90002                 lda inputbuf, y
  1790  8ba2 c92c                   cmp #','
  1791  8ba4 d012                   bne ++
  1792  8ba6 c8                     iny
  1793  8ba7 201e8d                 jsr skipspaces
  1794  8baa b90002                 lda inputbuf, y
  1795  8bad c958                   cmp #'X'
  1796  8baf d007                   bne ++
  1797  8bb1 c8                     iny
  1798  8bb2 ccc496                 cpy len
  1799  8bb5 d001                   bne ++
  1800  8bb7 60                     rts ; Z true (EQ)
  1801  8bb8 acc596             ++  ldy savepos
  1802  8bbb a201                   ldx #1 ; Z false (NE)
  1803  8bbd 60                     rts
  1804                          
  1805                          chkabsolutey:
  1806  8bbe 8cc596                 sty savepos
  1807  8bc1 b90002                 lda inputbuf, y
  1808  8bc4 c924                   cmp #'$'
  1809  8bc6 d001                   bne +
  1810  8bc8 c8                     iny
  1811  8bc9 206b8d             +   jsr chkhexword
  1812  8bcc d01c                   bne ++
  1813  8bce 201e8d                 jsr skipspaces
  1814  8bd1 b90002                 lda inputbuf, y
  1815  8bd4 c92c                   cmp #','
  1816  8bd6 d012                   bne ++
  1817  8bd8 c8                     iny
  1818  8bd9 201e8d                 jsr skipspaces
  1819  8bdc b90002                 lda inputbuf, y
  1820  8bdf c959                   cmp #'Y'
  1821  8be1 d007                   bne ++
  1822  8be3 c8                     iny
  1823  8be4 ccc496                 cpy len
  1824  8be7 d001                   bne ++
  1825  8be9 60                     rts ; Z true (EQ)
  1826  8bea acc596             ++  ldy savepos
  1827  8bed a201                   ldx #1 ; Z false (NE)
  1828  8bef 60                     rts
  1829                          
  1830                          chkindirect:
  1831  8bf0 8cc596                 sty savepos
  1832  8bf3 b90002                 lda inputbuf, y
  1833  8bf6 c928                   cmp #'('
  1834  8bf8 d022                   bne ++
  1835  8bfa c8                     iny
  1836  8bfb 201e8d                 jsr skipspaces
  1837  8bfe b90002                 lda inputbuf, y
  1838  8c01 c924                   cmp #'$'
  1839  8c03 d001                   bne +
  1840  8c05 c8                     iny
  1841  8c06 206b8d             +   jsr chkhexword
  1842  8c09 d011                   bne ++
  1843  8c0b 201e8d                 jsr skipspaces
  1844  8c0e b90002                 lda inputbuf, y
  1845  8c11 c929                   cmp #')'
  1846  8c13 d007                   bne ++
  1847  8c15 c8                     iny
  1848  8c16 ccc496                 cpy len
  1849  8c19 d001                   bne ++
  1850  8c1b 60                     rts ; Z true (EQ)
  1851  8c1c acc596             ++  ldy savepos
  1852  8c1f a201                   ldx #1 ; Z false (NE)
  1853  8c21 60                     rts
  1854                          
  1855                          chkinstruction:
  1856  8c22 ccc496                 cpy len
  1857  8c25 f02d                   beq ++
  1858  8c27 8cc896                 sty tmp
  1859  8c2a a237                   ldx #(ninst-1)
  1860  8c2c b90002             -   lda inputbuf,y
  1861  8c2f dde38f                 cmp inst0,x
  1862  8c32 d01a                   bne +
  1863  8c34 c8                     iny
  1864  8c35 b90002                 lda inputbuf,y
  1865  8c38 dd1b90                 cmp inst1,x
  1866  8c3b d011                   bne +
  1867  8c3d c8                     iny
  1868  8c3e b90002                 lda inputbuf,y
  1869  8c41 dd5390                 cmp inst2,x
  1870  8c44 d008                   bne +
  1871  8c46 c8                     iny
  1872  8c47 8a                     txa
  1873  8c48 8dc096                 sta inidx
  1874  8c4b a200                   ldx #0
  1875  8c4d 60                     rts
  1876  8c4e acc896             +   ldy tmp
  1877  8c51 ca                     dex
  1878  8c52 10d8                   bpl -
  1879  8c54 a201               ++  ldx #1 ; Z false (NE)
  1880  8c56 60                     rts
  1881                          
  1882                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1883                              ; and allows mode promotion
  1884  8c57 20808c                 jsr find_inst_and_mode2
  1885  8c5a f023                   beq ++
  1886  8c5c adc196                 lda mode
  1887  8c5f c906                   cmp #6
  1888  8c61 901c                   bcc ++
  1889  8c63 c90a                   cmp #10
  1890  8c65 b016                   bcs +
  1891  8c67 6903                   adc #3
  1892  8c69 8dc196                 sta mode ; promote ZeroPage modes to Absolute modes
  1893  8c6c 20808c                 jsr find_inst_and_mode2 ; try again once
  1894  8c6f d00e                   bne ++
  1895  8c71 adc696                 lda tmp2
  1896  8c74 8d858f                 sta ptr1
  1897  8c77 a900                   lda #0
  1898  8c79 8d868f                 sta ptr1+1
  1899  8c7c 60                     rts ; Z true (EQ)
  1900  8c7d a201               +   ldx #1 ; Z false (NE)
  1901  8c7f 60                 ++  rts
  1902                          
  1903                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1904  8c80 a296                   ldx #nopcodes-1
  1905  8c82 bd3b92             -   lda instidx, x
  1906  8c85 bcd292                 ldy modeidx, x
  1907  8c88 cdc096                 cmp inidx
  1908  8c8b d00e                   bne +
  1909  8c8d ccc196                 cpy mode
  1910  8c90 d009                   bne +
  1911  8c92 8ebf96                 stx opidx
  1912  8c95 206b82                 jsr getsize
  1913  8c98 a200                   ldx #0 ; Z true (EQ)
  1914  8c9a 60                     rts
  1915  8c9b ca                 +   dex
  1916  8c9c e0ff                   cpx #$ff
  1917  8c9e d0e2                   bne -
  1918  8ca0 a201                   ldx #1 ; Z false (NE)
  1919  8ca2 60                     rts
  1920                          
  1921                          executerun:
  1922  8ca3 68                     pla ; remove low byte return address
  1923  8ca4 68                     pla ; return high byte return address
  1924  8ca5 68                     pla ; again, we're really not returning
  1925  8ca6 68                     pla ; again, we're really not returning
  1926  8ca7 201e8e                 jsr newline
  1927                          !ifndef MINIMUM {
  1928                          ; any C64
  1929  8caa 207280                 jsr install_nmi64
  1930                          }
  1931                          +   ; restore registers
  1932  8cad aed396                 ldx registerSP
  1933  8cb0 9a                     txs
  1934  8cb1 add496                 lda registerSR
  1935  8cb4 48                     pha
  1936  8cb5 add096                 lda registerA
  1937  8cb8 aed196                 ldx registerX
  1938  8cbb acd296                 ldy registerY
  1939  8cbe 28                     plp
  1940  8cbf 6cd596                 jmp (registerPC)
  1941                          
  1942                          chkcontinuedis:
  1943  8cc2 b90002                 lda inputbuf,y
  1944  8cc5 c944                   cmp #'D'
  1945  8cc7 d00a                   bne +
  1946  8cc9 b90102                 lda inputbuf+1,y
  1947  8ccc c90d                   cmp #13
  1948  8cce d003                   bne +
  1949  8cd0 c8                     iny
  1950  8cd1 a200                   ldx #0 ; restore Z set
  1951  8cd3 60                 +   rts
  1952                          
  1953                          chkcontinueasm:
  1954  8cd4 b90002                 lda inputbuf,y
  1955  8cd7 c941                   cmp #'A'
  1956  8cd9 d00a                   bne +
  1957  8cdb b90102                 lda inputbuf+1,y
  1958  8cde c90d                   cmp #13
  1959  8ce0 d003                   bne +
  1960  8ce2 c8                     iny
  1961  8ce3 a200                   ldx #0 ; restore Z set
  1962  8ce5 60                 +   rts
  1963                          
  1964                          executedisassemble:
  1965  8ce6 68                     pla ; remove low byte return address
  1966  8ce7 68                     pla ; return high byte return address
  1967  8ce8 201e8e                 jsr newline
  1968  8ceb 4c0482                 jmp disassemble
  1969                          
  1970                          reportnotimplemented:
  1971  8cee a954                   lda #<notimplemented
  1972  8cf0 a294                   ldx #>notimplemented
  1973  8cf2 4cc984                 jmp strout
  1974                          
  1975                          reporterr:
  1976  8cf5 c000                   cpy #0
  1977  8cf7 f008                   beq +
  1978  8cf9 a920                   lda #' '
  1979  8cfb 20d2ff             -   jsr charout
  1980  8cfe 88                     dey
  1981  8cff d0fa                   bne -
  1982  8d01 a93f               +   lda #'?'
  1983  8d03 20d2ff                 jsr charout
  1984  8d06 a90d                   lda #13
  1985  8d08 20d2ff                 jsr charout
  1986  8d0b 60                     rts
  1987                          
  1988                          chkspace:
  1989  8d0c b90002                 lda inputbuf, y
  1990                          !ifndef MINIMUM {
  1991                              ; skip SHIFT-SPACES too on Commodore
  1992  8d0f c9a0                   cmp #$A0
  1993  8d11 f004                   beq +
  1994                          }
  1995  8d13 c920                   cmp #$20
  1996  8d15 d006                   bne ++
  1997  8d17 c8                 +   iny
  1998  8d18 201e8d                 jsr skipspaces
  1999  8d1b a900                   lda #0 ; set Z
  2000  8d1d 60                 ++  rts
  2001                          
  2002                          skipspaces:
  2003  8d1e b90002             -   lda inputbuf, y
  2004                          !ifndef MINIMUM {
  2005                              ; skip SHIFT-SPACES too on Commodore
  2006  8d21 c9a0                   cmp #$A0
  2007  8d23 f004                   beq +
  2008                          }
  2009  8d25 c920                   cmp #$20
  2010  8d27 d003                   bne ++
  2011  8d29 c8                 +   iny
  2012  8d2a d0f2                   bne -
  2013  8d2c 60                 ++  rts
  2014                          
  2015                          chkdot:
  2016  8d2d b90002                 lda inputbuf, y
  2017  8d30 c92e                   cmp #'.'
  2018  8d32 d003                   bne +
  2019  8d34 c8                     iny
  2020  8d35 a900                   lda #0 ; Z true (EQ)
  2021  8d37 60                 +   rts
  2022                          
  2023                          chkhelp:
  2024  8d38 b90002                 lda inputbuf, y
  2025  8d3b c93f                   cmp #'?'
  2026  8d3d d003                   bne +
  2027  8d3f c8                     iny
  2028  8d40 a900                   lda #0 ; Z true (EQ)
  2029  8d42 60                 +   rts
  2030                          
  2031                          chkcolon:
  2032  8d43 b90002                 lda inputbuf, y
  2033  8d46 c93a                   cmp #':'
  2034  8d48 d003                   bne +
  2035  8d4a c8                     iny
  2036  8d4b a900                   lda #0 ; Z true (EQ)
  2037  8d4d 60                 +   rts
  2038                          
  2039                          chkhexbyteofsequence:
  2040  8d4e 205984                 jsr inputhexbyte
  2041  8d51 206e8d                 jsr +
  2042  8d54 d014                   bne ++ ; Z false (NE) if failed checks
  2043  8d56 ccc496                 cpy len
  2044  8d59 f00f                   beq ++ ; Z true (EQ) if end of input
  2045  8d5b 8dc896                 sta tmp
  2046  8d5e b90002                 lda inputbuf,y
  2047  8d61 c920                   cmp #$20
  2048  8d63 d005                   bne ++ ; Z false (NE) if not space
  2049  8d65 adc896                 lda tmp
  2050  8d68 a200                   ldx #0 ; Z true (EQ) is space delimeter
  2051  8d6a 60                 ++  rts
  2052                          
  2053                          chkhexword:
  2054                          chkhexaddr1:
  2055  8d6b 202c84                 jsr inputhexword
  2056  8d6e a200               +   ldx #0 ; Z true (EQ)
  2057  8d70 9001                   bcc +
  2058  8d72 e8                     inx ; Z false (NE)
  2059  8d73 60                 +   rts
  2060                          
  2061                          chkhexbyte:
  2062  8d74 98                     tya
  2063  8d75 48                     pha ; save y
  2064  8d76 205984                 jsr inputhexbyte
  2065  8d79 b00f                   bcs +
  2066  8d7b 8dc696                 sta tmp2
  2067  8d7e 207c84                 jsr inputhexnybble
  2068  8d81 9007                   bcc +
  2069  8d83 68                     pla ; throw away saved y
  2070  8d84 adc696                 lda tmp2
  2071  8d87 a200                   ldx #0 ; Z true (EQ)
  2072  8d89 60                     rts
  2073  8d8a 68                 +   pla
  2074  8d8b a8                     tay ; won't be zero, so Z false (NE)
  2075  8d8c 60                     rts
  2076                          
  2077                          chkhexaddr2:
  2078  8d8d ad858f                 lda ptr1
  2079  8d90 48                     pha
  2080  8d91 ad868f                 lda ptr1+1
  2081  8d94 48                     pha
  2082  8d95 206b8d                 jsr chkhexaddr1
  2083  8d98 f005                   beq +
  2084  8d9a 68                     pla
  2085  8d9b 68                     pla
  2086  8d9c a901                   lda #1 ; Z false (NE)
  2087  8d9e 60                     rts
  2088  8d9f ad858f             +   lda ptr1
  2089  8da2 8dc996                 sta ptr2
  2090  8da5 ad868f                 lda ptr1+1
  2091  8da8 8dca96                 sta ptr2+1
  2092  8dab 68                     pla
  2093  8dac 8d868f                 sta ptr1+1
  2094  8daf 68                     pla
  2095  8db0 8d858f                 sta ptr1
  2096  8db3 a900                   lda #0 ; Z true (EQ)
  2097  8db5 60                     rts
  2098                          
  2099                          chkbinbyte:
  2100  8db6 a208                   ldx #8
  2101  8db8 20c68d             -   jsr chkbindigit
  2102  8dbb d008                   bne +
  2103  8dbd ca                     dex
  2104  8dbe d0f8                   bne -
  2105  8dc0 08                     php ; save Z true
  2106  8dc1 adc696                 lda tmp2
  2107  8dc4 28                     plp ; restore Z true
  2108  8dc5 60                 +   rts
  2109                          
  2110                          chkbindigit:
  2111  8dc6 b90002                 lda inputbuf, y
  2112  8dc9 38                     sec
  2113  8dca e930                   sbc #$30
  2114  8dcc 900b                   bcc +
  2115  8dce c902                   cmp #$02
  2116  8dd0 b007                   bcs +
  2117  8dd2 4a                     lsr ; rotate bit value into C
  2118  8dd3 2ec696                 rol tmp2 ; rotate bit value into tmp2
  2119  8dd6 c8                     iny ; advance in buffer
  2120  8dd7 a900                   lda #0 ; set Z
  2121  8dd9 60                 +   rts
  2122                          
  2123                          chkaddr1cmd:
  2124  8dda b90002                 lda inputbuf, y
  2125  8ddd c941               +   cmp #'A'
  2126  8ddf d00b                   bne +
  2127  8de1 be0102                 ldx inputbuf+1, y
  2128  8de4 e00d                   cpx #13
  2129  8de6 d004                   bne +
  2130  8de8 c8                     iny
  2131  8de9 4c9288                 jmp executeassemble
  2132  8dec c944               +   cmp #'D'
  2133  8dee d00b                   bne +
  2134  8df0 be0102                 ldx inputbuf+1, y
  2135  8df3 e00d                   cpx #13
  2136  8df5 d004                   bne +
  2137  8df7 c8                     iny
  2138  8df8 4ce68c                 jmp executedisassemble
  2139  8dfb c952               +   cmp #'R'
  2140  8dfd d017                   bne +
  2141  8dff be0102                 ldx inputbuf+1, y
  2142  8e02 e00d                   cpx #13
  2143  8e04 d010                   bne +
  2144  8e06 c8                     iny
  2145  8e07 ad858f                 lda ptr1
  2146  8e0a 8dd596                 sta registerPC
  2147  8e0d ad868f                 lda ptr1+1
  2148  8e10 8dd696                 sta registerPC+1
  2149  8e13 4ca38c                 jmp executerun
  2150  8e16 c93d               +   cmp #'='
  2151  8e18 d003                   bne +
  2152  8e1a 4c8d8e                 jmp executevalues
  2153  8e1d 60                 +   rts
  2154                          
  2155                          newline:
  2156  8e1e a90d                   lda #13
  2157  8e20 4cd2ff                 jmp charout
  2158                          
  2159                          space:
  2160  8e23 a920                   lda #32
  2161  8e25 4cd2ff                 jmp charout
  2162                          
  2163                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  2164                          ;     jsr $ffd2
  2165                          ;     pha
  2166                          ; -   lda $d011
  2167                          ;     bpl -
  2168                          ; -   lda $d011
  2169                          ;     bmi -
  2170                          ; -   lda $d011
  2171                          ;     bpl -
  2172                          ; -   lda $d011
  2173                          ;     bmi -
  2174                          ;     pla
  2175                          ;     rts
  2176                          
  2177                          save_registers:
  2178  8e28 08                     php
  2179  8e29 8dd096                 sta registerA
  2180  8e2c 8ed196                 stx registerX
  2181  8e2f 8cd296                 sty registerY
  2182  8e32 68                     pla
  2183  8e33 8dd496                 sta registerSR
  2184  8e36 ba                     tsx
  2185  8e37 8ed396                 stx registerSP
  2186  8e3a 4c3f8e                 jmp +
  2187                          
  2188                          execute_display_registers:
  2189  8e3d 68                     pla ; remove return address
  2190  8e3e 68                     pla
  2191                          +
  2192                              ; need some normality
  2193  8e3f 58                     cli
  2194  8e40 d8                     cld
  2195                          
  2196  8e41 201e8e                 jsr newline
  2197  8e44 204d8e                 jsr display_registers
  2198                          !ifndef MINIMUM {
  2199                              ; any C64
  2200  8e47 208d80                 jsr uninstall_nmi64
  2201                          }
  2202  8e4a 4c6980                 jmp input_loop
  2203                          
  2204                          ; PC   NV-BDIZC .A .X .Y .S
  2205                          ; 1234 10111011 01 02 03 FF
  2206                          display_registers:
  2207  8e4d a99a                   lda #<reg_header
  2208  8e4f a296                   ldx #>reg_header
  2209  8e51 20c984                 jsr strout
  2210  8e54 add596                 lda registerPC
  2211  8e57 aed696                 ldx registerPC+1
  2212  8e5a 201084                 jsr disphexword
  2213  8e5d 20238e                 jsr space
  2214  8e60 add496                 lda registerSR
  2215  8e63 20fb83                 jsr dispbinbyte
  2216  8e66 20238e                 jsr space
  2217  8e69 add096                 lda registerA
  2218  8e6c 201684                 jsr disphexbyte
  2219  8e6f 20238e                 jsr space
  2220  8e72 add196                 lda registerX
  2221  8e75 201684                 jsr disphexbyte
  2222  8e78 20238e                 jsr space
  2223  8e7b add296                 lda registerY
  2224  8e7e 201684                 jsr disphexbyte
  2225  8e81 20238e                 jsr space
  2226  8e84 add396                 lda registerSP
  2227  8e87 201684                 jsr disphexbyte
  2228  8e8a 4c1e8e                 jmp newline
  2229                          
  2230                          executevalues:
  2231  8e8d 68                     pla ; pull return address, so will return to parse's caller instead
  2232  8e8e 68                     pla
  2233                          !ifndef MINIMUM {
  2234  8e8f 201e8e                 jsr newline
  2235                          }
  2236  8e92 a92b                   lda #'+'
  2237  8e94 20d2ff                 jsr charout
  2238  8e97 ad858f                 lda ptr1
  2239  8e9a ae868f                 ldx ptr1+1
  2240  8e9d 209a84                 jsr dispdecword
  2241  8ea0 201e8e                 jsr newline
  2242  8ea3 a924                   lda #'$'
  2243  8ea5 20d2ff                 jsr charout
  2244  8ea8 ad858f                 lda ptr1
  2245  8eab ae868f                 ldx ptr1+1
  2246  8eae 201084                 jsr disphexword
  2247  8eb1 201e8e                 jsr newline
  2248  8eb4 a925                   lda #'%'
  2249  8eb6 20d2ff                 jsr charout
  2250  8eb9 ad868f                 lda ptr1+1
  2251  8ebc 20fb83                 jsr dispbinbyte
  2252  8ebf ad858f                 lda ptr1
  2253  8ec2 20fb83                 jsr dispbinbyte
  2254  8ec5 4c1e8e                 jmp newline
  2255                          
  2256                          ;divide by shift/subtract
  2257                          ;input: a (low), x (high), y (divisor)
  2258                          ;output: a (low), x (high), remainder in global remainl/remainh
  2259                          ;algorithm: 
  2260                          ; shift contains bit (0 to 15, starts right-most [1]) to add to answer in sum (starts at 0)
  2261                          ; y saved to divisor (16-bit), shifted in loop to match shift
  2262                          ; workarea starts with a/x, subtracted by shift as appropriate, reduced to remainder
  2263                          ; shift advanced to left as high as possible at first, then shifted right as loops, until shifts out
  2264                          
  2265                          divaxwithy:
  2266                          ; initialize members
  2267  8ec8 8cb796                 sty divisorl
  2268  8ecb a000                   ldy #0
  2269  8ecd 8cb896                 sty divisorh
  2270  8ed0 8cb996                 sty shiftl
  2271  8ed3 eeb996                 inc shiftl
  2272  8ed6 8cba96                 sty shifth
  2273  8ed9 8cbd96                 sty suml
  2274  8edc 8cbe96                 sty sumh
  2275  8edf 8dbb96                 sta remainl
  2276  8ee2 8ebc96                 stx remainh
  2277                          
  2278                              ; x is high byte of workarea
  2279  8ee5 ecb896                 cpx divisorh
  2280  8ee8 9060                   bcc ++ ; branch if workarea < shift, already done
  2281  8eea d007                   bne + ; branch if workarea > shift
  2282                              ; high bytes equal
  2283                              ; a is low byte of workarea
  2284  8eec cdb796                 cmp divisorl
  2285  8eef 9059                   bcc ++ ; branch if workarea < shift, already done
  2286  8ef1 f032                   beq +++ ; workarea == shift, guaranteed we have the right shift bit to work with   
  2287                              ; workarea > shift, so shift some more
  2288                          +
  2289  8ef3 0eb996             -   asl shiftl
  2290  8ef6 2eba96                 rol shifth
  2291  8ef9 b022                   bcs ++++ ; shifted too far, bit 16 fell out of shift
  2292  8efb 0eb796                 asl divisorl
  2293  8efe 2eb896                 rol divisorh
  2294  8f01 b005                   bcs +++++ ; shifted too far, divisor shifted out
  2295                              ; x is high byte of workarea
  2296  8f03 ecb896                 cpx divisorh
  2297  8f06 b009                   bcs +
  2298                              ; shifted too far
  2299                          +++++
  2300                          --
  2301  8f08 6eb896                 ror divisorh
  2302  8f0b 6eb796                 ror divisorl
  2303  8f0e 900d                   bcc ++++
  2304  8f10 00                     brk ; shouldn't happen
  2305  8f11 d0e0               +   bne - ; branch if remain > than shift
  2306                              ; low bytes equal
  2307                              ; a is low byte of workarea
  2308  8f13 cdb796                 cmp divisorl
  2309  8f16 90f0                   bcc -- ; remain < remain, shifted too far
  2310  8f18 d0d9                   bne - ; remain > shift, so shift some more
  2311  8f1a f009                   beq +++ ; workarea == shift, guaranteed we have the right shift bit to work with   
  2312  8f1c 00                     brk ; assert should never get here
  2313                          
  2314                              ; shifted too far, carry set only if rotated out of high byte
  2315                          ++++
  2316  8f1d 6eba96                 ror shifth
  2317  8f20 6eb996                 ror shiftl
  2318  8f23 b048                   bcs + ; lowest bit shifted out, nothing more to do
  2319                          
  2320                          +++ ; shift is just right, add to sum, subtract from workarea 
  2321  8f25 adb996             --  lda shiftl
  2322  8f28 0dbd96                 ora suml
  2323  8f2b 8dbd96                 sta suml
  2324  8f2e adba96                 lda shifth
  2325  8f31 0dbe96                 ora sumh
  2326  8f34 8dbe96                 sta sumh
  2327  8f37 38                     sec
  2328  8f38 adbb96                 lda remainl
  2329  8f3b edb796                 sbc divisorl
  2330  8f3e 8dbb96                 sta remainl
  2331  8f41 adbc96                 lda remainh
  2332  8f44 edb896                 sbc divisorh
  2333  8f47 8dbc96                 sta remainh
  2334  8f4a adbb96             ++  lda remainl ; restore .A
  2335  8f4d aebc96                 ldx remainh ; restore .X
  2336  8f50 4eb896             -   lsr divisorh
  2337  8f53 6eb796                 ror divisorl
  2338  8f56 4eba96                 lsr shifth
  2339  8f59 6eb996                 ror shiftl
  2340  8f5c b00f                   bcs + ; done
  2341  8f5e ecb896                 cpx divisorh
  2342  8f61 90ed                   bcc - ; remain < divisor
  2343  8f63 d0c0                   bne -- ; branch if remain > divisor
  2344                              ; low bytes equal
  2345                              ; a is low byte of workarea
  2346  8f65 cdb796                 cmp divisorl
  2347  8f68 90e6                   bcc - ; remain < divisor
  2348  8f6a b0b9                   bcs -- ; branch if remain >= divisor
  2349  8f6c 00                     brk ; not possible to get here
  2350                          
  2351  8f6d adbd96             +   lda suml
  2352  8f70 aebe96                 ldx sumh
  2353  8f73 60                     rts
  2354                          
  2355                          !ifdef MINIMUM {
  2356                          
  2357                          lda_at_ptr1_y:
  2358                              lda (ptr1),y
  2359                              rts
  2360                          
  2361                          sta_at_ptr1_y:
  2362                              sta (ptr1),y
  2363                              rts
  2364                          
  2365                          lda_at_ptr3_y:
  2366                              lda (ptr3),y
  2367                              rts
  2368                          
  2369                          sta_at_ptr3_y:
  2370                              sta (ptr3),y
  2371                              rts
  2372                          
  2373                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2374                          ;; MC6850
  2375                          UART_DATA=$FFF8
  2376                          UART_STCR=$FFF9
  2377                          
  2378                          UART_INIT:
  2379                          	ldx #0b00000111 ; 11=reset device
  2380                          	stx UART_STCR
  2381                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  2382                          	sta UART_STCR
  2383                          	rts
  2384                          UART_OUT:
  2385                          	pha
  2386                          -	lda UART_STCR
  2387                          	and #2
  2388                          	beq - ; branch if TDRE=0, not finished transmitting
  2389                          	pla
  2390                          	pha
  2391                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  2392                          	sta UART_DATA
  2393                          	pla
  2394                          	rts
  2395                          UART_IN:
  2396                          -	lda UART_STCR
  2397                          	and #1
  2398                          	beq - ; branch if TDRF=0, not received
  2399                          	lda UART_DATA
  2400                          	; software "CAPS LOCK" because wozmon expects only uppercase
  2401                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  2402                          	beq BREAK
  2403                              ; force lowercase alphabet to uppercase
  2404                              cmp #'a'
  2405                          	bcc +
  2406                          	cmp #'z'+1
  2407                          	bcs +
  2408                          	eor #$20
  2409                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  2410                           	rts
  2411                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  2412                          	pha ; save A
  2413                          	lda UART_STCR
  2414                          	lsr ; put rightmost bit in carry
  2415                          	pla ; restore A affects flags
  2416                          	ror ; move carry to left bit, right bit to carry
  2417                          	php ; push processor to save N
  2418                          	rol ; restore A affects flags
  2419                          	plp ; pull processor to restore N
  2420                          	rts
  2421                          
  2422                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2423                          ; Processor start and interrupts
  2424                          
  2425                          NMI: ; unused on minimum (no source of interrupt)
  2426                              rti
  2427                          
  2428                          IRQ:
  2429                              pha
  2430                              php
  2431                              pla
  2432                              and #$10
  2433                              beq ++ ; not break
  2434                          ;BREAK HANDLER
  2435                              pla
  2436                              sta registerA
  2437                              pla
  2438                              sta registerSR
  2439                              pla
  2440                              cld
  2441                              sec
  2442                              sbc #2
  2443                              sta registerPC
  2444                              pla
  2445                              sbc #0
  2446                              sta registerPC+1
  2447                              lda #>save_registers
  2448                              pha
  2449                              lda #<save_registers
  2450                              pha
  2451                              lda registerSR
  2452                              pha
  2453                              lda registerA
  2454                              pha
  2455                          ++  pla
  2456                              rti
  2457                          
  2458                          BREAK:
  2459                              jmp RESET
  2460                          
  2461                          RESET:
  2462                              cld
  2463                              ldx #$FF
  2464                              txs
  2465                              jsr JUART_INIT
  2466                              cli
  2467                              jmp start
  2468                          ; !ifdef MINIMUM
  2469                          } else { ; not MINIMUM
  2470                          
  2471                          ptr1 = sta_at_ptr1_y + 1 ; and + 2
  2472                          
  2473                          lda_at_ptr1_y:
  2474  8f74 ad858f                 lda ptr1
  2475  8f77 8d818f                 sta lda_ptr1_op+1
  2476  8f7a ad868f                 lda ptr1+1
  2477  8f7d 8d828f                 sta lda_ptr1_op+2
  2478                          lda_ptr1_op:
  2479  8f80 b9ffff                 lda $ffff, y
  2480  8f83 60                     rts
  2481                          
  2482                          sta_at_ptr1_y:
  2483  8f84 99ffff                 sta $ffff, y
  2484  8f87 60                     rts
  2485                          
  2486                          ptr3 = sta_at_ptr3_y + 1 ; and + 2
  2487                          
  2488                          lda_at_ptr3_y:
  2489  8f88 ad998f                 lda ptr3
  2490  8f8b 8d958f                 sta lda_ptr3_op+1
  2491  8f8e ad9a8f                 lda ptr3+1
  2492  8f91 8d968f                 sta lda_ptr3_op+2
  2493                          lda_ptr3_op:
  2494  8f94 b9ffff                 lda $ffff, y
  2495  8f97 60                     rts
  2496                          
  2497                          sta_at_ptr3_y:
  2498  8f98 99ffff                 sta $ffff, y
  2499  8f9b 60                     rts
  2500                          
  2501                          nmi64:
  2502  8f9c 78                     sei
  2503  8f9d 8dd096                 sta registerA
  2504  8fa0 68                     pla
  2505  8fa1 8dd496                 sta registerSR
  2506  8fa4 68                     pla
  2507  8fa5 d8                     cld
  2508  8fa6 8dd596                 sta registerPC
  2509  8fa9 68                     pla
  2510  8faa 8dd696                 sta registerPC+1
  2511  8fad a98e                   lda #>save_registers
  2512  8faf 48                     pha
  2513  8fb0 a928                   lda #<save_registers
  2514  8fb2 48                     pha
  2515  8fb3 add496                 lda registerSR
  2516  8fb6 48                     pha
  2517  8fb7 add096                 lda registerA
  2518  8fba 40                     rti
  2519                          
  2520                          brk64:
  2521  8fbb 68                     pla
  2522  8fbc a8                     tay
  2523  8fbd 68                     pla
  2524  8fbe aa                     tax
  2525  8fbf 68                     pla
  2526  8fc0 8dd096                 sta registerA
  2527  8fc3 68                     pla
  2528  8fc4 8dd496                 sta registerSR
  2529  8fc7 68                     pla
  2530  8fc8 d8                     cld
  2531  8fc9 38                     sec
  2532  8fca e902                   sbc #2
  2533  8fcc 8dd596                 sta registerPC
  2534  8fcf 68                     pla
  2535  8fd0 e900                   sbc #0
  2536  8fd2 8dd696                 sta registerPC+1
  2537  8fd5 a98e                   lda #>save_registers
  2538  8fd7 48                     pha
  2539  8fd8 a928                   lda #<save_registers
  2540  8fda 48                     pha
  2541  8fdb add496                 lda registerSR
  2542  8fde 48                     pha
  2543  8fdf add096                 lda registerA
  2544  8fe2 40                     rti
  2545                          }
  2546                          
  2547                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2548                          ; data
  2549                          
  2550                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  2551                          ninst = 56
  2552  8fe3 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  2553  901b 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  2554  9053 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  2555                          
  2556                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  2557                          mode_jmptable:
  2558  908b 0083               !word dispModeAcc-1; 0 Accumulator 1
  2559  908d 0583               !word dispModeNone-1 ; 1 None 1
  2560  908f 0683               !word dispModeImm-1 ; 2 Immediate 2
  2561  9091 1883               !word dispModeIndX-1 ; 3 IndirectX 2
  2562  9093 3983               !word dispModeIndY-1 ; 4 IndirectY 2
  2563  9095 5a83               !word dispModeRel-1 ; 5 Relative 2
  2564  9097 0b83               !word dispModeZP-1 ; 6 ZeroPage 2
  2565  9099 a583               !word dispModeZPX-1 ; 7 ZeroPageX 2
  2566  909b b283               !word dispModeZPY-1 ; 8 ZeroPageY 2
  2567  909d bf83               !word dispModeAbs-1 ; 9 Absolute 3
  2568  909f d383               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  2569  90a1 e083               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  2570  90a3 ed83               !word dispModeInd-1 ; 12 Indirect 3
  2571                          
  2572                          nmodes = 13
  2573                          
  2574                          mode_sorted:
  2575  90a5 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  2576                          
  2577                          !ifdef MINIMUM {
  2578                          mode_0: !text "Accumulator", 0, "A", 0
  2579                          mode_1: !text "None", 0, 8, 0
  2580                          mode_2: !text "Immediate", 0, "#$12", 0
  2581                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  2582                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  2583                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  2584                          mode_6: !text "ZeroPage", 0, "$12", 0
  2585                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  2586                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  2587                          mode_9: !text "Absolute", 0, "$1234", 0
  2588                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  2589                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  2590                          mode_12: !text "Indirect", 0, "($1234)", 0
  2591                          } else {
  2592  90b2 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  2593  90c0 4e4f4e45001400     mode_1: !text "NONE", 0, 20, 0
  2594  90c7 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  2595  90d6 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  2596  90e8 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  2597  90fa 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  2598  9119 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  2599  9126 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  2600  9136 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  2601  9146 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  2602  9155 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  2603  9167 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  2604  9179 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  2605                          }
  2606                          
  2607                          modes: ; table for easily displaying each mode_example
  2608  918a b290               !word mode_0
  2609  918c c090               !word mode_1
  2610  918e c790               !word mode_2
  2611  9190 d690               !word mode_3
  2612  9192 e890               !word mode_4
  2613  9194 fa90               !word mode_5
  2614  9196 1991               !word mode_6
  2615  9198 2691               !word mode_7
  2616  919a 3691               !word mode_8
  2617  919c 4691               !word mode_9
  2618  919e 5591               !word mode_10
  2619  91a0 6791               !word mode_11
  2620  91a2 7991               !word mode_12
  2621                          
  2622                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  2623                          nopcodes = 151
  2624  91a4 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  2625  923b 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  2626  92d2 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  2627                          
  2628                          copyright
  2629                          ;                  1         2         3         4
  2630                          ;         1234567890123456789012345678901234567890
  2631  9369 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  2632                          !ifdef C64TERMINAL {
  2633                              !text 13, "(TERMINAL VERSION)"
  2634                          }
  2635  9389 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  2636  93af 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  2637  93c6 00                 !text 0
  2638                          
  2639                          firsthelp
  2640                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  2641  93c7 0d0d               !text 13, 13
  2642  93c9 54595045203f2046...!text "TYPE ? FOR HELP"
  2643  93d8 0d00               !text 13, 0
  2644                          
  2645                          !ifndef MINIMUM {
  2646                          ; C64 only
  2647                          extra_help:
  2648  93da 5820202020202020...    !text "X           (EXIT MONITOR)", 13
  2649  93f5 3130303020224649...    !text "1000 ", 34, "FILENAME", 34, " 08 L             (LOAD)", 13
  2650  941d 313030302e323030...    !text "1000.2000 ", 34, "FILENAME", 34, " 08 S        (SAVE)", 13
  2651  9445 00                     !text 0
  2652                          
  2653                          !ifdef C64SCREEN {
  2654  9446 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  2655  944d 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  2656                          }
  2657                          
  2658                          }
  2659                          
  2660  9454 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  2661                          
  2662                          generalhelp
  2663  9465 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  2664  948b 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  2665  94b0 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  2666  94d3 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  2667  94fb 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  2668  9517 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  2669  9537 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  2670  9559 00                 !text 0
  2671                          generalhelp2
  2672  955a 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  2673  957f 4120202020202020...!text "A           (ASSEMBLE MORE)", 13
  2674  959b 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  2675  95ba 3f41202020202020...!text "?A          (LIST 6502 INSTRUCTIONS)", 13
  2676  95df 3f41444320202020...!text "?ADC        (/ADC/ ADDRESSING MODES)", 13
  2677  9604 3f4d4f4445202020...!text "?MODE       (ADDRESSING MODES)", 13
  2678  9623 00                 !text 0
  2679                          generalhelp3
  2680  9624 3f2e202020202020...!text "?.          (DISPLAY REGISTERS)", 13
  2681  9644 2e31323334202020...!text ".1234       (MODIFY PC,FLAGS,REGISTERS)", 13
  2682  966c 2e413a3031202020...!text ".A:01       (MODIFY REGISTER A,X,Y,S,P)", 13
  2683  9694 00                 !text 0
  2684                          
  2685  9695 4d4f444500         modes_keyword !text "MODE", 0
  2686                          
  2687  969a 2050432020204e56...reg_header !text " PC   NV-BDIZC .A .X .Y .S", 13, '.', 0
  2688                          
  2689                          !ifdef MINIMUM {
  2690                          divisorl=$dfe5
  2691                          divisorh=$dfe6
  2692                          shiftl=$dfe7
  2693                          shifth=$dfe8
  2694                          remainl=$dfe9
  2695                          remainh=$dfea
  2696                          suml=$dfeb
  2697                          sumh=$dfec
  2698                          opidx=$dfed
  2699                          inidx=$dfee
  2700                          mode=$dfef
  2701                          size=$dff0
  2702                          count=$dff1
  2703                          len=$dff2
  2704                          savepos=$dff3
  2705                          tmp2=$dff4
  2706                          flag=$dff5
  2707                          ptr2=$dff6;/7
  2708                          tmp=$dff8
  2709                          registerA = $dff9
  2710                          registerX = $dffa
  2711                          registerY = $dffb
  2712                          registerSP = $dffc
  2713                          registerSR = $dffd
  2714                          registerPC = $dffe;/f
  2715                          } else {
  2716  96b7 00                 divisorl !byte 0
  2717  96b8 00                 divisorh !byte 0
  2718  96b9 00                 shiftl !byte 0
  2719  96ba 00                 shifth !byte 0
  2720  96bb 00                 remainl !byte 0
  2721  96bc 00                 remainh !byte 0
  2722  96bd 00                 suml !byte 0
  2723  96be 00                 sumh !byte 0
  2724  96bf 00                 opidx !byte 0
  2725  96c0 00                 inidx !byte 0
  2726  96c1 00                 mode !byte 0
  2727  96c2 00                 size !byte 0
  2728  96c3 00                 count !byte 0
  2729  96c4 00                 len !byte 0
  2730  96c5 00                 savepos !byte 0
  2731  96c6 00                 tmp2 !byte 0
  2732  96c7 00                 flag !byte 0
  2733  96c8 00                 tmp !byte 0
  2734  96c9 0000               ptr2 !word 0
  2735  96cb 0000               savebrkvector !word 0
  2736  96cd 0000               savenmivector !word 0
  2737  96cf 00                 drive !byte 0
  2738  96d0 00                 registerA !byte 0
  2739  96d1 00                 registerX !byte 0
  2740  96d2 00                 registerY !byte 0
  2741  96d3 00                 registerSP !byte 0
  2742  96d4 00                 registerSR !byte 0
  2743  96d5 0000               registerPC !word 0
  2744                          }
  2745                          
  2746                          !ifdef MINIMUM {
  2747                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2748                          ; JUMP table for some stability
  2749                          * = $FFEB
  2750                          JUART_CHK: JMP UART_CHK
  2751                          JUART_INIT: JMP UART_INIT
  2752                          JUART_OUT: JMP UART_OUT
  2753                          JUART_IN: JMP UART_IN
  2754                          
  2755                          !if * > $fff8 {
  2756                              !error "code overran MC6850 UART"
  2757                          }
  2758                          
  2759                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2760                          ; 6502 vectors
  2761                          * = $fffa
  2762                              !word NMI
  2763                              !word RESET
  2764                              !word IRQ
  2765                          } else { // C64
  2766                              !if * > $a000 {
  2767                                  !error "code/data overran $a000"
  2768                              }
  2769                          }
  2770                          
  2771                          finish = *
