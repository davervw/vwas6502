
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: display/edit memory + run(JMP) + disassembler + assembler <<<
     4                          ;; >>>                     *** MULTIPLATFORM ***                         <<< 
     5                          ;; >>>       ****************************************************        <<< 
     6                          ;; >>>       **           TARGET  C64 and...                    *        <<<
     7                          ;; >>>       ** INCLUDES VERSION FOR 6502+MC6850 minimum system *        <<<
     8                          ;; >>>       *   60K(RAM),4K(ROM), 2 bytes IO for MC6850 UART   *        <<<
     9                          ;; >>>       ****************************************************        <<<
    10                          ;;
    11                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    12                          ;; MIT License
    13                          ;;
    14                          ;; Copyright (c) 2024 David R. Van Wagner
    15                          ;; davevw.com
    16                          ;;
    17                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    18                          ;; of this software and associated documentation files (the "Software"), to deal
    19                          ;; in the Software without restriction, including without limitation the rights
    20                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    21                          ;; copies of the Software, and to permit persons to whom the Software is
    22                          ;; furnished to do so, subject to the following conditions:
    23                          ;;
    24                          ;; The above copyright notice and this permission notice shall be included in all
    25                          ;; copies or substantial portions of the Software.
    26                          ;;
    27                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    28                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    29                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    30                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    31                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    32                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    33                          ;; SOFTWARE.
    34                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    35                          
    36                          ;; DEFINES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                          
    38                          ; Important! define exactly ONE target (set in build.sh)
    39                          ;C64SCREEN = 1
    40                          ;C64TERMINAL = 1
    41                          ;MINIMUM = 1
    42                          
    43                          ; options (set in build.sh)
    44                          ;NEEDECHO = 0
    45                          
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;; _
    49                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    50                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    51                          ;; 1000 (display memory at $1000)
    52                          ;; 1000.2000 (display memory range $1000 to $2000)
    53                          ;; 1000. (display next screenful of memory starting at $1000)
    54                          ;; . (display next screenful of memory)
    55                          ;; 1000 r (JMP $1000)
    56                          ;; 1000: 01 02 03 (modify memory)
    57                          ;; (NEW SYNTAX)
    58                          ;; 1000 d (disassemble starting at address, for screenful)
    59                          ;; d (continue disassembling from last address)
    60                          ;; 1000 a (assemble starting at, interactive until empty line) 
    61                          ;; (FUTURE SYNTAX, not implemented)
    62                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    63                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    64                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    65                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    66                          ;; .? (display registers, VICE format or custom? screen editor changeable?)
    67                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    68                          ;; 1000.2000 "filename" 08 save (save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, can abbreviate to s)
    69                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    70                          ;; ? (commands help)
    71                          ;; ? a (list instructions available)
    72                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    73                          ;; ? mode (show addressing modes example syntax for 6502)
    74                          ;;
    75                          ;; (INTERACTIVE ASSEMBLER)
    76                          ;; 1000 _
    77                          ;;      ADC #$12
    78                          ;; 1000 69 12    ADC #$12
    79                          ;; 1002 _
    80                          ;;      JSR $1234
    81                          ;; 1002 20 34 12 JSR $1234
    82                          ;; 1005 _
    83                          ;;      RTS
    84                          ;; 1005 60       RTS
    85                          ;; 1006 _
    86                          ;;      XYZ
    87                          ;;      XYZ ?
    88                          ;; 1006 _
    89                          ;; _
    90                          ;;
    91                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    92                          ;; and can cursor up to revise, 
    93                          ;;
    94                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    95                          ;;
    96                          
    97                          ; global
    98                          inputbuf=$0200
    99                          
   100                          
   101                          ; kernal/system calls
   102                          
   103                          !ifdef MINIMUM {
   104                          charout=JUART_OUT
   105                          getkey=JUART_IN
   106                          }
   107                          
   108                          !ifdef C64SCREEN {
   109                          charin=$ffcf ; screen editor
   110                          charout=$ffd2
   111                          getkey=$ffe4
   112                          }
   113                          
   114                          !ifdef C64TERMINAL {
   115                          charout=$ffd2
   116                          getkey=$ffe4
   117                          }
   118                          
   119                          ; zeropage
   120                          !ifdef MINIMUM {
   121                          opidx=$f0
   122                          inidx=$f1
   123                          mode=$f2
   124                          size=$f3
   125                          ptr3=$f4 ; and $f5
   126                          count=$f6
   127                          len=$f7
   128                          savepos=$f8
   129                          tmp2=$f9
   130                          flag=$fa
   131                          ptr1=$fb ; and $fc
   132                          ptr2=$fd ; and $fe
   133                          tmp=$ff
   134                          } else {
   135                          ptr1=$fb ; and $fc
   136                          ptr2=$fd ; and $fe
   137                          tmp=$ff
   138                          opidx=$22
   139                          inidx=$23
   140                          mode=$24
   141                          size=$25
   142                          ptr3=$26 ; and $27
   143                          count=$a3
   144                          len=$a4
   145                          savepos=$a5
   146                          tmp2=$a6
   147                          flag=$a7
   148                          }
   149                          
   150                          !ifdef MINIMUM {
   151                          *=$f000
   152                          } else {
   153                          *=$c000
   154                          }
   155                          start:
   156  c000 a991                   lda #<copyright
   157  c002 a2cd                   ldx #>copyright
   158  c004 2086c2                 jsr strout
   159  c007 a9ef                   lda #<firsthelp
   160  c009 a2cd                   ldx #>firsthelp
   161  c00b 2086c2                 jsr strout
   162  c00e 20a1c2             -   jsr inputline
   163  c011 20afc2                 jsr parseline
   164  c014 4c0ec0                 jmp -
   165                          
   166                          test: ; all the addressing modes here for testing disassembly
   167  c017 ea                     nop
   168  c018 ad3412                 lda $1234
   169  c01b bd3412                 lda $1234,x
   170  c01e b93412                 lda $1234,y
   171  c021 0a                     asl
   172  c022 a912                   lda #$12
   173  c024 a112                   lda ($12,x)
   174  c026 b112                   lda ($12),y
   175  c028 6c3412                 jmp ($1234)
   176  c02b d0fe               -   bne -
   177  c02d a512                   lda $12
   178  c02f b512                   lda $12,x
   179  c031 b612                   ldx $12,y
   180  c033 ff                     !byte $FF ; unknown
   181                          
   182                          disassemble:
   183  c034 a917                   lda #23
   184  c036 85a3                   sta count
   185  c038 a000               -   ldy #0
   186  c03a b1fb                   lda (ptr1),y
   187  c03c 206ec0                 jsr find_opcode
   188  c03f 20d1c0                 jsr disp_current
   189  c042 a525                   lda size
   190  c044 1002                   bpl +
   191  c046 a901                   lda #1
   192  c048 18                 +   clc
   193  c049 65fb                   adc ptr1
   194  c04b 85fb                   sta ptr1
   195  c04d 9002                   bcc +
   196  c04f e6fc                   inc ptr1+1
   197  c051 c6a3               +   dec count
   198  c053 d0e3                   bne -
   199                          !ifdef C64SCREEN {
   200  c055 a5fb                   lda ptr1
   201  c057 a6fc                   ldx ptr1+1
   202  c059 200ac2                 jsr disphexword
   203  c05c a9af                   lda #<page_disassemble
   204  c05e a2cf                   ldx #>page_disassemble
   205  c060 4c86c2                 jmp strout
   206                          } else {    
   207                              rts
   208                          }
   209                          
   210                          compareptrs:
   211  c063 a5fc                   lda ptr1+1
   212  c065 c5fe                   cmp ptr2+1
   213  c067 d004                   bne +
   214  c069 a5fb                   lda ptr1
   215  c06b c5fd                   cmp ptr2
   216  c06d 60                 +   rts
   217                          
   218                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   219                          ; and properties updated in ZP globals size,inidx,opidx,mode
   220  c06e a097                   ldy #nopcodes
   221  c070 a296                   ldx #nopcodes-1
   222  c072 ddcccb             -   cmp opcodes,x
   223  c075 f00f                   beq +
   224  c077 ca                     dex
   225  c078 88                     dey
   226  c079 d0f7                   bne -
   227  c07b 18                     clc
   228  c07c a901                   lda #1
   229  c07e 8525                   sta size
   230  c080 a9ff                   lda #$FF
   231  c082 aa                     tax
   232  c083 a8                     tay
   233  c084 900a                   bcc ++
   234  c086 bd63cc             +   lda instidx, x
   235  c089 bcfacc                 ldy modeidx, x
   236  c08c 2097c0                 jsr getsize
   237  c08f 38                     sec
   238  c090 8523               ++  sta inidx
   239  c092 8622                   stx opidx
   240  c094 8424                   sty mode
   241  c096 60                     rts
   242                          
   243                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   244                              ; result returned in size
   245  c097 48                     pha
   246  c098 a901                   lda #1
   247  c09a 8525                   sta size
   248  c09c 68                     pla
   249  c09d c002                   cpy #2 // Immediate
   250  c09f 9008                   bcc +
   251  c0a1 e625                   inc size
   252  c0a3 c009                   cpy #9 // Absolute
   253  c0a5 9002                   bcc +
   254  c0a7 e625                   inc size
   255  c0a9 60                 +   rts
   256                          
   257                          disp_opcode: ; .A opcode byte
   258  c0aa 206ec0                 jsr find_opcode
   259  c0ad 8a                     txa
   260                              ; fall through to display instruction
   261                          
   262                          dispinst: ; .A instruction index 0..55, note modifies A and X
   263  c0ae aa                     tax
   264  c0af e038                   cpx #ninst
   265  c0b1 b012                   bcs +
   266  c0b3 bd0cca                 lda inst0, x
   267  c0b6 20d2ff                 jsr charout
   268  c0b9 bd44ca                 lda inst1, x
   269  c0bc 20d2ff                 jsr charout
   270  c0bf bd7cca                 lda inst2, x
   271  c0c2 4cd2ff                 jmp charout
   272  c0c5 a93f               +   lda #'?'
   273  c0c7 20d2ff                 jsr charout
   274  c0ca 20d2ff                 jsr charout
   275  c0cd 20d2ff                 jsr charout
   276  c0d0 60                     rts
   277                          
   278                          disp_current:
   279  c0d1 a5fb                   lda ptr1
   280  c0d3 a6fc                   ldx ptr1+1
   281  c0d5 200ac2                 jsr disphexword
   282  c0d8 a920                   lda #$20
   283  c0da 20d2ff                 jsr charout
   284  c0dd a000                   ldy #0
   285  c0df a625                   ldx size
   286  c0e1 b1fb               -   lda (ptr1),y
   287  c0e3 2010c2                 jsr disphexbyte
   288  c0e6 a920                   lda #$20
   289  c0e8 20d2ff                 jsr charout
   290  c0eb c8                     iny
   291  c0ec ca                     dex
   292  c0ed d0f2                   bne -
   293  c0ef c003               -   cpy #3
   294  c0f1 f00e                   beq +
   295  c0f3 a920                   lda #$20
   296  c0f5 20d2ff                 jsr charout
   297  c0f8 20d2ff                 jsr charout
   298  c0fb 20d2ff                 jsr charout
   299  c0fe c8                     iny
   300  c0ff d0ee                   bne -
   301  c101 a523               +   lda inidx
   302  c103 20aec0                 jsr dispinst
   303  c106 a920                   lda #$20
   304  c108 20d2ff                 jsr charout
   305  c10b 2013c1                 jsr disp_mode
   306  c10e a90d                   lda #13
   307  c110 4cd2ff                 jmp charout
   308                          
   309                          disp_mode
   310  c113 a524                   lda mode
   311  c115 c90d                   cmp #13
   312  c117 b00a                   bcs +
   313  c119 0a                     asl
   314  c11a aa                     tax
   315  c11b bdb5ca                 lda mode_jmptable+1,x
   316  c11e 48                     pha
   317  c11f bdb4ca                 lda mode_jmptable,x
   318  c122 48                     pha
   319  c123 60                 +   rts
   320                          
   321                          dispModeAcc:
   322  c124 a941                   lda #'A'
   323  c126 4cd2ff                 jmp charout
   324                          
   325                          dispModeNone:
   326  c129 60                     rts
   327                          
   328                          dispModeImm:
   329  c12a a923                   lda #'#'
   330  c12c 20d2ff                 jsr charout
   331                          dispModeZP:
   332  c12f a924                   lda #'$'
   333  c131 20d2ff                 jsr charout
   334  c134 a001                   ldy #1
   335  c136 b1fb                   lda (ptr1),y
   336  c138 4c10c2                 jmp disphexbyte
   337                          
   338                          dispModeIndX:
   339  c13b a928                   lda #'('
   340  c13d 20d2ff                 jsr charout
   341  c140 a924                   lda #'$'
   342  c142 20d2ff                 jsr charout
   343  c145 a001                   ldy #1
   344  c147 b1fb                   lda (ptr1),y
   345  c149 2010c2                 jsr disphexbyte
   346  c14c a92c                   lda #','
   347  c14e 20d2ff                 jsr charout
   348  c151 a958                   lda #'X'
   349  c153 20d2ff                 jsr charout
   350  c156 a929                   lda #')'
   351  c158 4cd2ff                 jmp charout
   352                          
   353                          dispModeIndY:
   354  c15b a928                   lda #'('
   355  c15d 20d2ff                 jsr charout
   356  c160 a924                   lda #'$'
   357  c162 20d2ff                 jsr charout
   358  c165 a001                   ldy #1
   359  c167 b1fb                   lda (ptr1),y
   360  c169 2010c2                 jsr disphexbyte
   361  c16c a929                   lda #')'
   362  c16e 20d2ff                 jsr charout
   363  c171 a92c                   lda #','
   364  c173 20d2ff                 jsr charout
   365  c176 a959                   lda #'Y'
   366  c178 4cd2ff                 jmp charout
   367                          
   368                          dispModeRel:
   369  c17b a924                   lda #'$'
   370  c17d 20d2ff                 jsr charout
   371  c180 18                     clc
   372  c181 a5fb                   lda ptr1
   373  c183 6902                   adc #2
   374  c185 8526                   sta ptr3
   375  c187 a5fc                   lda ptr1+1
   376  c189 6900                   adc #0
   377  c18b 8527                   sta ptr3+1
   378  c18d a001                   ldy #1
   379  c18f b1fb                   lda (ptr1),y
   380  c191 1014                   bpl +
   381                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   382  c193 49ff                   eor #$FF ; inverse
   383  c195 18                     clc
   384  c196 6901                   adc #1 ; complete getting absolute value from two's complement
   385  c198 85ff                   sta tmp
   386  c19a 38                     sec
   387  c19b a526                   lda ptr3
   388  c19d e5ff                   sbc tmp
   389  c19f 8526                   sta ptr3
   390  c1a1 b00d                   bcs ++
   391  c1a3 c627                   dec ptr3+1
   392  c1a5 9009                   bcc ++
   393  c1a7 18                 +   clc ; simple case of adding
   394  c1a8 6526                   adc ptr3
   395  c1aa 8526                   sta ptr3
   396  c1ac 9002                   bcc ++
   397  c1ae e627                   inc ptr3+1
   398  c1b0 a526               ++  lda ptr3
   399  c1b2 a627                   ldx ptr3+1
   400  c1b4 4c0ac2                 jmp disphexword
   401                          
   402                          dispModeZPX:
   403  c1b7 202fc1                 jsr dispModeZP
   404  c1ba a92c                   lda #','
   405  c1bc 20d2ff                 jsr charout
   406  c1bf a958                   lda #'X'
   407  c1c1 4cd2ff                 jmp charout
   408                          
   409                          dispModeZPY:
   410  c1c4 202fc1                 jsr dispModeZP
   411  c1c7 a92c                   lda #','
   412  c1c9 20d2ff                 jsr charout
   413  c1cc a959                   lda #'Y'
   414  c1ce 4cd2ff                 jmp charout
   415                          
   416                          dispModeAbs:
   417  c1d1 a924                   lda #'$'
   418  c1d3 20d2ff                 jsr charout
   419  c1d6 a001                   ldy #1
   420  c1d8 b1fb                   lda (ptr1),y
   421  c1da 48                     pha
   422  c1db c8                     iny
   423  c1dc b1fb                   lda (ptr1),y
   424  c1de aa                     tax
   425  c1df 68                     pla
   426  c1e0 4c0ac2                 jmp disphexword
   427                          
   428                          dispModeAbsX:
   429  c1e3 20d1c1                 jsr dispModeAbs
   430  c1e6 a92c                   lda #','
   431  c1e8 20d2ff                 jsr charout
   432  c1eb a958                   lda #'X'
   433  c1ed 4cd2ff                 jmp charout
   434                          
   435                          dispModeAbsY:
   436  c1f0 20d1c1                 jsr dispModeAbs
   437  c1f3 a92c                   lda #','
   438  c1f5 20d2ff                 jsr charout
   439  c1f8 a959                   lda #'Y'
   440  c1fa 4cd2ff                 jmp charout
   441                          
   442                          dispModeInd:
   443  c1fd a928                   lda #'('
   444  c1ff 20d2ff                 jsr charout
   445  c202 20d1c1                 jsr dispModeAbs
   446  c205 a929                   lda #')'
   447  c207 4cd2ff                 jmp charout
   448                          
   449                          disphexword: ; .A low, .X high, 0000..FFFF
   450  c20a 48                     pha
   451  c20b 8a                     txa
   452  c20c 2010c2                 jsr disphexbyte
   453  c20f 68                     pla
   454                              ;fall through to call again
   455                          
   456                          disphexbyte: ; .A 00..FF
   457  c210 48                     pha
   458  c211 4a                     lsr
   459  c212 4a                     lsr
   460  c213 4a                     lsr
   461  c214 4a                     lsr
   462  c215 2019c2                 jsr disphexnybble
   463  c218 68                     pla
   464                              ;fall through to call again
   465                          
   466                          disphexnybble: ; .A 0..F
   467  c219 290f                   and #$0F
   468  c21b 0930                   ora #$30
   469  c21d c93a                   cmp #$3A
   470  c21f 9002                   bcc +
   471  c221 6906                   adc #$06
   472  c223 4cd2ff             +   jmp charout
   473                          
   474                          inputhexword: ; C set if fails
   475  c226 a900                   lda #0
   476  c228 85fb                   sta ptr1
   477  c22a 85fc                   sta ptr1+1
   478                          
   479  c22c a904                   lda #4 ; word is at most 4 nybbles
   480  c22e 85a3                   sta count
   481  c230 2068c2             --  jsr inputhexnybble
   482  c233 b012                   bcs +
   483                          
   484                              ; shift nibble up
   485  c235 0a                     asl
   486  c236 0a                     asl
   487  c237 0a                     asl
   488  c238 0a                     asl
   489                          
   490  c239 a204                   ldx #4 ; 4 bits rotated into word
   491  c23b 2a                 -   rol
   492  c23c 26fb                   rol ptr1
   493  c23e 26fc                   rol ptr1+1
   494  c240 ca                     dex
   495  c241 d0f8                   bne - ; repeat bits
   496                          
   497  c243 c6a3                   dec count
   498  c245 d0e9                   bne -- ; repeat nybbles
   499                          
   500  c247 a5a3               +   lda count
   501  c249 c904                   cmp #4 ; set C if 4, otherwise clear
   502  c24b 60                     rts
   503                          
   504                          inputhexbyte:
   505  c24c 2068c2                 jsr inputhexnybble
   506  c24f b016                   bcs ++
   507  c251 85ff                   sta tmp
   508  c253 2068c2                 jsr inputhexnybble
   509  c256 9005                   bcc +
   510  c258 18                     clc ; allow single digit as byte
   511  c259 a5ff                   lda tmp
   512  c25b 900a                   bcc ++
   513  c25d 06ff               +   asl tmp
   514  c25f 06ff                   asl tmp
   515  c261 06ff                   asl tmp
   516  c263 06ff                   asl tmp
   517  c265 05ff                   ora tmp ; necessary to assemble the two nybbles
   518  c267 60                 ++  rts
   519                          
   520                          inputhexnybble:
   521  c268 b90002                 lda $0200,y
   522  c26b 297f                   and #$7F
   523  c26d 38                     sec
   524  c26e e930                   sbc #$30
   525  c270 9012                   bcc ++
   526  c272 c90a                   cmp #10
   527  c274 900c                   bcc +
   528  c276 e907                   sbc #7
   529  c278 900a                   bcc ++
   530  c27a c90a                   cmp #10
   531  c27c 9006                   bcc ++
   532  c27e c910                   cmp #16
   533  c280 b002                   bcs ++
   534  c282 c8                 +   iny
   535  c283 60                     rts
   536  c284 38                 ++  sec
   537  c285 60                     rts
   538                          
   539                          strout:
   540  c286 8526                   sta ptr3
   541  c288 8627                   stx ptr3+1
   542                          strout2:    
   543  c28a a000                   ldy #0
   544  c28c b126               -   lda (ptr3),y
   545  c28e f006                   beq +
   546  c290 20d2ff                 jsr charout
   547  c293 c8                     iny
   548  c294 d0f6                   bne -
   549  c296 98                 +   tya
   550  c297 38                     sec
   551  c298 6526                   adc ptr3
   552  c29a 8526                   sta ptr3
   553  c29c 9002                   bcc +
   554  c29e e627                   inc ptr3+1
   555  c2a0 60                 +   rts
   556                          
   557                          inputline:
   558                          !ifdef C64SCREEN {
   559  c2a1 a000                   ldy #0
   560  c2a3 20cfff             -   jsr charin
   561  c2a6 990002                 sta inputbuf,y
   562  c2a9 c8                     iny
   563  c2aa c90d                   cmp #13
   564  c2ac d0f5                   bne -
   565  c2ae 60                     rts
   566                          } else {
   567                              ldy #0
   568                          --  sty count
   569                          -   jsr getkey
   570                              beq -
   571                              ldy count
   572                          !ifdef MINIMUM {
   573                              cmp #8 ; backspace
   574                          } else {
   575                              cmp #20
   576                          }
   577                              bne +
   578                              cpy #0
   579                              beq -
   580                              dey
   581                          !if NEEDECHO = 1 {    
   582                              jsr charout
   583                          }
   584                              jmp --
   585                          +   cmp #13
   586                              beq +
   587                              cmp #' '
   588                              bcc -
   589                              cmp #128
   590                              bcs -
   591                          +
   592                          !if NEEDECHO = 1 {    
   593                              jsr charout
   594                          }
   595                              sta inputbuf,y
   596                              iny
   597                              cmp #13
   598                              bne --
   599                              rts
   600                          }
   601                          
   602                          parseline:
   603  c2af c001                   cpy #1
   604  c2b1 d003                   bne +
   605                          -
   606                          !ifdef C64SCREEN {   
   607  c2b3 4c07ca                 jmp newline
   608                          } else {
   609                              rts
   610                          }
   611  c2b6 88                 +   dey
   612  c2b7 84a4                   sty len
   613                              ; skip whitespace
   614                              ; check for address, put in ptr1
   615                              ; or check for dot, then require address put in ptr2
   616                              ; or check for ?, and optional parameter, execute help
   617                              ; check for whitespace
   618                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   619                              ; check for string, store at start of inputbuf
   620                              ; check for drive number
   621                              ; check for whitespace
   622                              ; check command ":rda?mls", execute command
   623  c2b9 a000                   ldy #0
   624  c2bb 204ac9                 jsr skipspaces
   625  c2be c4a4                   cpy len
   626  c2c0 f0f1                   beq -
   627  c2c2 2000c9                 jsr chkcontinuedis
   628  c2c5 d003                   bne +
   629  c2c7 2024c9                 jsr executedisassemble ; note won't return
   630  c2ca 2012c9             +   jsr chkcontinueasm
   631  c2cd d003                   bne +
   632  c2cf 2029c5                 jsr continueassemble ; note won't return
   633  c2d2 2055c9             +   jsr chkdot
   634  c2d5 d003                   bne +
   635  c2d7 4cbfc3                 jmp executedot
   636  c2da 2060c9             +   jsr chkhelp
   637  c2dd d003                   bne +
   638  c2df 4cc9c3                 jmp executehelp
   639  c2e2 20aac9             +   jsr chkhexaddr1
   640  c2e5 d003                   bne error
   641  c2e7 4cedc2                 jmp executeaddr1
   642                          error:
   643  c2ea 4c33c9                 jmp reporterr
   644                          
   645                          executeaddr1:
   646  c2ed c4a4                   cpy len
   647  c2ef d003                   bne +
   648  c2f1 4c40c3                 jmp executedisplay1
   649  c2f4 2055c9             +   jsr chkdot
   650  c2f7 d00f                   bne +
   651  c2f9 c4a4                   cpy len
   652  c2fb f021                   beq executepagedisplay
   653  c2fd 20cac9                 jsr chkhexaddr2
   654  c300 d0e8                   bne error
   655  c302 18                     clc
   656  c303 66a7                   ror flag
   657  c305 4c36c3                 jmp executeaddr12
   658  c308 204ac9             +   jsr skipspaces
   659  c30b 206bc9                 jsr chkcolon
   660  c30e d003                   bne +
   661  c310 4c9dc3                 jmp executemodify
   662  c313 20ebc9             +   jsr chkaddr1cmd ; rda, will not return here if cmd
   663  c316 2076c9                 jsr chkfilename
   664  c319 d0cf                   bne error
   665  c31b 4cc6c3                 jmp executeloadfilename
   666                          
   667                          executepagedisplay:
   668  c31e a5fb                   lda ptr1
   669  c320 18                     clc
   670                          !ifdef MINIMUM {
   671                              adc #$5f
   672                          } else {
   673  c321 69b7                   adc #$b7
   674                          }
   675  c323 85fd                   sta ptr2
   676  c325 a5fc                   lda ptr1+1
   677                          !ifdef MINIMUM {
   678                              adc #$01
   679                          } else {
   680  c327 6900                   adc #$00
   681                          }
   682  c329 85fe                   sta ptr2+1
   683  c32b 9006                   bcc +
   684  c32d a9ff                   lda #$ff
   685  c32f 85fd                   sta ptr2
   686  c331 85fe                   sta ptr2+1
   687  c333 38                 +   sec
   688  c334 66a7                   ror flag
   689                              ; fall through to executeaddr12
   690                          
   691                          executeaddr12:
   692  c336 c4a4                   cpy len
   693  c338 d003                   bne +
   694  c33a 4c48c3                 jmp executedisplay12
   695  c33d 4c2cc9             +   jmp reportnotimplemented
   696                          
   697                          executedisplay1:
   698  c340 a5fb                   lda ptr1
   699  c342 85fd                   sta ptr2
   700  c344 a5fc                   lda ptr1+1
   701  c346 85fe                   sta ptr2+1
   702                              ; fall through executedisplay12
   703                          
   704                          executedisplay12:
   705  c348 a9ff                   lda #$ff
   706  c34a 85a3                   sta count
   707  c34c e6a3               -   inc count
   708  c34e a5a3                   lda count
   709                          !ifdef MINIMUM {    
   710                              and #$0f
   711                          } else {
   712  c350 2907                   and #$07
   713                          }
   714  c352 d016                   bne +
   715  c354 a90d                   lda #13
   716  c356 20d2ff                 jsr charout
   717  c359 a5fb                   lda ptr1
   718  c35b a6fc                   ldx ptr1+1
   719  c35d 200ac2                 jsr disphexword
   720  c360 a93a                   lda #':'
   721  c362 20d2ff                 jsr charout
   722  c365 a920                   lda #' '
   723  c367 20d2ff                 jsr charout
   724  c36a a000               +   ldy #0
   725  c36c b1fb                   lda (ptr1),y
   726  c36e 2010c2                 jsr disphexbyte
   727  c371 a920                   lda #' '
   728  c373 20d2ff                 jsr charout
   729  c376 e6fb                   inc ptr1
   730  c378 d004                   bne +
   731  c37a e6fc                   inc ptr1+1
   732  c37c f01c                   beq ++
   733  c37e 2063c0             +   jsr compareptrs
   734  c381 90c9                   bcc -
   735  c383 f0c7                   beq -
   736  c385 24a7                   bit flag
   737  c387 1011                   bpl ++
   738                          !ifdef C64SCREEN {
   739  c389 2007ca                 jsr newline
   740  c38c a5fb                   lda ptr1
   741  c38e a6fc                   ldx ptr1+1
   742  c390 200ac2                 jsr disphexword
   743  c393 a9b6                   lda #<page_displaymemory
   744  c395 a2cf                   ldx #>page_displaymemory
   745  c397 4c86c2                 jmp strout
   746                          }
   747  c39a 4c07ca             ++  jmp newline
   748                          
   749                          executemodify:
   750  c39d 204ac9                 jsr skipspaces
   751  c3a0 c4a4                   cpy len
   752  c3a2 f018                   beq ++
   753  c3a4 2090c9                 jsr chkhexbyteofsequence
   754  c3a7 f003                   beq +
   755  c3a9 4ceac2                 jmp error
   756  c3ac 84ff               +   sty tmp
   757  c3ae a000                   ldy #0
   758  c3b0 91fb                   sta (ptr1),y
   759  c3b2 e6fb                   inc ptr1
   760  c3b4 d002                   bne +
   761  c3b6 e6fc                   inc ptr1+1
   762  c3b8 a4ff               +   ldy tmp
   763  c3ba d0e1                   bne executemodify
   764  c3bc 4c07ca             ++  jmp newline
   765                          
   766                          executedot:
   767  c3bf c4a4                   cpy len
   768  c3c1 d003                   bne +
   769  c3c3 4c1ec3                 jmp executepagedisplay
   770                          
   771                          executeloadfilename:
   772                          executeaddr1cmd:
   773  c3c6 4c2cc9             +   jmp reportnotimplemented
   774                          
   775                          executehelp:
   776                          !ifdef C64SCREEN {
   777  c3c9 2007ca                 jsr newline
   778                          }
   779  c3cc c4a4                   cpy len
   780  c3ce d003                   bne +
   781  c3d0 4cf1c3                 jmp displayhelp
   782  c3d3 204ac9             +   jsr skipspaces
   783  c3d6 2006c4                 jsr chkhelpinstructions
   784  c3d9 d003                   bne +
   785  c3db 4c35c4                 jmp displayinstructions
   786  c3de 2013c4             +   jsr chkhelpmodes
   787  c3e1 d003                   bne +
   788  c3e3 4c4cc4                 jmp displaymodes
   789  c3e6 2072c8             +   jsr chkinstruction
   790  c3e9 d003                   bne +
   791  c3eb 4cfcc4                 jmp executehelpinstruction
   792  c3ee 4c2cc9             +   jmp reportnotimplemented
   793                          
   794                          displayhelp:
   795  c3f1 a970                   lda #<generalhelp
   796  c3f3 a2ce                   ldx #>generalhelp
   797  c3f5 2086c2                 jsr strout
   798  c3f8 a9df                   lda #<generalhelp2
   799  c3fa a2ce                   ldx #>generalhelp2
   800  c3fc 2086c2                 jsr strout
   801  c3ff a9ef                   lda #<firsthelp
   802  c401 a2cd                   ldx #>firsthelp
   803  c403 4c86c2                 jmp strout
   804                          
   805                          chkhelpinstructions:
   806  c406 b90002                 lda inputbuf, y
   807  c409 c941                   cmp #'A'
   808  c40b d005                   bne +
   809  c40d b90102                 lda inputbuf+1, y
   810  c410 c90d                   cmp #13
   811                              ; no need to increment y if found, done parsing line
   812  c412 60                 +   rts
   813                          
   814                          chkhelpmodes:
   815  c413 a9aa                   lda #<modes_keyword
   816  c415 a2cf                   ldx #>modes_keyword
   817                              ; fall through to chkkeyword
   818                          
   819                          chkkeyword:
   820  c417 84a3                   sty count
   821  c419 8526                   sta ptr3
   822  c41b 8627                   stx ptr3+1
   823  c41d a6a3                   ldx count
   824  c41f a000                   ldy #0
   825  c421 bd0002             -   lda inputbuf, x
   826  c424 d126                   cmp (ptr3),y
   827  c426 d008                   bne +
   828  c428 e8                     inx
   829  c429 c8                     iny
   830  c42a e4a4                   cpx len
   831  c42c d0f3                   bne -
   832  c42e b126                   lda (ptr3),y ; matched if end of string, will set Z
   833  c430 08                 +   php ; save Z
   834  c431 a4a3                   ldy count
   835  c433 28                     plp ; restore Z
   836  c434 60                     rts
   837                          
   838                          displayinstructions:
   839  c435 a038                   ldy #ninst
   840  c437 a200                   ldx #0
   841  c439 8a                 -   txa
   842  c43a 48                     pha
   843  c43b 20aec0                 jsr dispinst
   844  c43e a920                   lda #' '
   845  c440 20d2ff                 jsr charout
   846  c443 68                     pla
   847  c444 aa                     tax
   848  c445 e8                     inx
   849  c446 88                     dey
   850  c447 d0f0                   bne -
   851  c449 4c07ca                 jmp newline
   852                          
   853                          displaymodes:
   854  c44c 38                     sec
   855  c44d a900                   lda #0
   856  c44f 48                 -   pha
   857  c450 aa                     tax
   858  c451 bdceca                 lda mode_sorted, x
   859  c454 2061c4                 jsr dispmode
   860  c457 68                     pla
   861  c458 18                     clc
   862  c459 6901                   adc #1
   863  c45b c90d                   cmp #nmodes
   864  c45d 90f0                   bcc -
   865  c45f 18                     clc
   866  c460 60                     rts
   867                          
   868                          dispmode:
   869  c461 c90d                   cmp #nmodes
   870  c463 b008                   bcs +
   871  c465 8524                   sta mode
   872  c467 20a9c4                 jsr disp_modename_and_example
   873  c46a 4c6ec4                 jmp dispmodeinstructions
   874  c46d 60                 +   rts
   875                          
   876                          dispmodeinstructions:
   877                          !ifdef C64SCREEN {
   878                              ; 3 IndirectX and 4 IndirectY are the same, so compact them together to fit on screen
   879  c46e a524                   lda mode
   880  c470 c903                   cmp #3
   881  c472 d005                   bne +
   882  c474 a920                   lda #' '
   883  c476 4cd2ff                 jmp charout
   884                          }
   885                              ; display instructions with this mode
   886  c479 a000               +   ldy #0
   887  c47b 8423               --  sty inidx
   888  c47d a200                   ldx #0
   889  c47f 86ff               -   stx tmp
   890  c481 a523                   lda inidx
   891  c483 dd63cc                 cmp instidx, x
   892  c486 d014                   bne ++
   893  c488 bdfacc                 lda modeidx, x
   894  c48b c524                   cmp mode
   895  c48d d00d                   bne ++
   896  c48f a920                   lda #' '
   897  c491 20d2ff                 jsr charout
   898  c494 bd63cc                 lda instidx, x
   899  c497 20aec0                 jsr dispinst
   900  c49a a6ff                   ldx tmp
   901  c49c e8                 ++  inx
   902  c49d e097                   cpx #nopcodes
   903  c49f 90de                   bcc -
   904  c4a1 c8                     iny
   905  c4a2 c038                   cpy #ninst
   906  c4a4 d0d5                   bne --
   907  c4a6 4c07ca                 jmp newline
   908                          
   909                          disp_modename_and_example:
   910  c4a9 0a                     asl
   911  c4aa aa                     tax
   912  c4ab bdb2cb                 lda modes, x
   913  c4ae 48                     pha
   914  c4af bdb3cb                 lda modes+1, x
   915  c4b2 aa                     tax
   916                          !ifdef C64SCREEN {
   917  c4b3 a912                   lda #18
   918  c4b5 20d2ff                 jsr charout
   919                          }    
   920  c4b8 68                     pla
   921  c4b9 2086c2                 jsr strout
   922  c4bc a920                   lda #' '
   923  c4be 20d2ff                 jsr charout
   924  c4c1 208ac2                 jsr strout2
   925                          !ifdef C64SCREEN {    
   926  c4c4 a992                   lda #146
   927  c4c6 20d2ff                 jsr charout
   928                          }   
   929  c4c9 60                     rts
   930                          
   931                          disp_modename_instruction_example:
   932  c4ca 0a                     asl
   933  c4cb aa                     tax
   934  c4cc bdb2cb                 lda modes, x
   935  c4cf 48                     pha
   936  c4d0 bdb3cb                 lda modes+1, x
   937  c4d3 aa                     tax
   938  c4d4 68                     pla
   939  c4d5 2086c2                 jsr strout ; mode name
   940  c4d8 a526                   lda ptr3
   941  c4da 48                     pha
   942  c4db a527                   lda ptr3+1
   943  c4dd 48                     pha
   944  c4de a93a                   lda #':'
   945  c4e0 20d2ff                 jsr charout
   946  c4e3 a920                   lda #' '
   947  c4e5 20d2ff                 jsr charout
   948  c4e8 a523                   lda inidx
   949  c4ea 20aec0                 jsr dispinst ; instruction
   950  c4ed a920                   lda #' '
   951  c4ef 20d2ff                 jsr charout
   952  c4f2 68                     pla
   953  c4f3 8527                   sta ptr3+1
   954  c4f5 68                     pla
   955  c4f6 8526                   sta ptr3
   956  c4f8 208ac2                 jsr strout2 ; example
   957  c4fb 60                     rts
   958                          
   959                          
   960                          executehelpinstruction:
   961  c4fc a000                   ldy #0
   962  c4fe 8422               -   sty opidx
   963  c500 b963cc                 lda instidx, y
   964  c503 c523                   cmp inidx
   965  c505 d01a                   bne +
   966  c507 b9facc                 lda modeidx, y
   967  c50a 8524                   sta mode
   968  c50c a622                   ldx opidx
   969  c50e bdcccb                 lda opcodes, x
   970  c511 2010c2                 jsr disphexbyte
   971  c514 a920                   lda #' '
   972  c516 20d2ff                 jsr charout
   973  c519 a524                   lda mode
   974  c51b 20cac4                 jsr disp_modename_instruction_example
   975  c51e 2007ca                 jsr newline
   976  c521 a422               +   ldy opidx
   977  c523 c8                     iny
   978  c524 c097                   cpy #nopcodes
   979  c526 90d6                   bcc -
   980  c528 60                     rts
   981                          
   982                          continueassemble:
   983                          !ifdef C64SCREEN {   
   984  c529 a914                   lda #20
   985  c52b 20d2ff                 jsr charout
   986  c52e 20d2ff                 jsr charout
   987  c531 a5fb                   lda ptr1
   988  c533 a6fc                   ldx ptr1+1
   989  c535 200ac2                 jsr disphexword
   990  c538 a920                   lda #' '
   991  c53a 20d2ff                 jsr charout
   992  c53d 20d2ff                 jsr charout
   993  c540 20d2ff                 jsr charout
   994                          }
   995                              ; continue...
   996                          
   997                          executeassemble:
   998  c543 68                     pla ; remove low byte return address
   999  c544 68                     pla ; return high byte return address
  1000                          !ifdef C64SCREEN {    
  1001  c545 a914                   lda #20
  1002  c547 20d2ff                 jsr charout
  1003  c54a 20d2ff                 jsr charout
  1004                          } else {
  1005                              lda ptr1
  1006                              ldx ptr1+1
  1007                              jsr disphexword
  1008                              lda #' '
  1009                              jsr charout
  1010                          }
  1011                              ; save current pointer
  1012  c54d a5fb               --  lda ptr1
  1013  c54f a6fc                   ldx ptr1+1
  1014  c551 8526                   sta ptr3
  1015  c553 8627                   stx ptr3+1
  1016  c555 20a1c2                 jsr inputline
  1017  c558 c001                   cpy #1
  1018  c55a f040                   beq ++
  1019  c55c 88                     dey
  1020  c55d 84a4                   sty len
  1021  c55f a000                   ldy #0
  1022  c561 204ac9                 jsr skipspaces
  1023  c564 c4a4                   cpy len
  1024  c566 f034                   beq ++
  1025                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
  1026                              ;jsr skipspaces
  1027  c568 2072c8                 jsr chkinstruction
  1028  c56b f003                   beq +
  1029  c56d 4ceac2             -   jmp error    
  1030  c570 20c6c5             +   jsr chkaddressing
  1031  c573 d0f8                   bne -
  1032  c575 20a3c8                 jsr find_inst_and_mode
  1033  c578 d0f3                   bne -
  1034  c57a 209fc5                 jsr store_assembly ; TODO disassemble on screen as assemble for validation
  1035  c57d 18                     clc
  1036  c57e a525                   lda size
  1037  c580 6526                   adc ptr3
  1038  c582 85fb                   sta ptr1
  1039  c584 a527                   lda ptr3+1
  1040  c586 6900                   adc #0
  1041  c588 85fc                   sta ptr1+1
  1042                          !ifdef C64SCREEN {    
  1043  c58a 2007ca                 jsr newline
  1044                          }
  1045  c58d a5fb                   lda ptr1
  1046  c58f a6fc                   ldx ptr1+1
  1047  c591 200ac2                 jsr disphexword
  1048  c594 a920                   lda #' '
  1049  c596 20d2ff                 jsr charout
  1050  c599 4c4dc5                 jmp --
  1051                          ++  
  1052                          !ifdef C64SCREEN {
  1053  c59c 4c07ca                 jmp newline
  1054                          } else {
  1055                              rts
  1056                          }
  1057                          
  1058                          store_assembly:
  1059  c59f a622                   ldx opidx
  1060  c5a1 bdcccb                 lda opcodes, x
  1061  c5a4 a000                   ldy #0
  1062  c5a6 9126                   sta (ptr3), y
  1063  c5a8 c8                     iny
  1064  c5a9 a625                   ldx size
  1065  c5ab e001                   cpx #1
  1066  c5ad f016                   beq ++
  1067  c5af e002               +   cpx #2
  1068  c5b1 d005                   bne +
  1069  c5b3 a5a6                   lda tmp2
  1070  c5b5 9126                   sta (ptr3), y
  1071  c5b7 60                     rts
  1072  c5b8 e003               +   cpx #3
  1073  c5ba d009                   bne ++
  1074  c5bc a5fb                   lda ptr1
  1075  c5be 9126                   sta (ptr3), y
  1076  c5c0 c8                     iny
  1077  c5c1 a5fc                   lda ptr1+1
  1078  c5c3 9126                   sta (ptr3), y
  1079  c5c5 60                 ++  rts
  1080                          
  1081                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
  1082  c5c6 204ac9                 jsr skipspaces
  1083  c5c9 a200                   ldx #0
  1084  c5cb 8624                   stx mode
  1085  c5cd 2028c6                 jsr chkaccumulator
  1086  c5d0 f051                   beq +
  1087  c5d2 e624                   inc mode
  1088  c5d4 c4a4                   cpy len ; chknone
  1089  c5d6 f04b                   beq +
  1090  c5d8 e624                   inc mode
  1091  c5da 204cc6                 jsr chkimmediate
  1092  c5dd f044                   beq +
  1093  c5df e624                   inc mode
  1094  c5e1 2070c6                 jsr chkindirectx
  1095  c5e4 f03d                   beq +
  1096  c5e6 e624                   inc mode
  1097  c5e8 20b5c6                 jsr chkindirecty
  1098  c5eb f036                   beq +
  1099  c5ed e624                   inc mode
  1100  c5ef 20fac6                 jsr chkrelative
  1101  c5f2 f02f                   beq +
  1102  c5f4 e624                   inc mode
  1103  c5f6 2055c7                 jsr chkzeropage
  1104  c5f9 f028                   beq +
  1105  c5fb e624                   inc mode
  1106  c5fd 206ec7                 jsr chkzeropagex
  1107  c600 f021                   beq +
  1108  c602 e624                   inc mode
  1109  c604 209dc7                 jsr chkzeropagey
  1110  c607 f01a                   beq +
  1111  c609 e624                   inc mode
  1112  c60b 20ccc7                 jsr chkabsolute
  1113  c60e f013                   beq +
  1114  c610 e624                   inc mode
  1115  c612 20e5c7                 jsr chkabsolutex
  1116  c615 f00c                   beq +
  1117  c617 e624                   inc mode
  1118  c619 2014c8                 jsr chkabsolutey
  1119  c61c f005                   beq +
  1120  c61e e624                   inc mode
  1121  c620 2043c8                 jsr chkindirect
  1122  c623 08                 +   php ; save Z
  1123  c624 a524                   lda mode
  1124  c626 28                     plp ; restore Z 
  1125  c627 60                     rts
  1126                          
  1127                          chkaccumulator:
  1128  c628 c4a4                   cpy len
  1129  c62a d013                   bne +
  1130  c62c a523                   lda inidx
  1131  c62e c902                   cmp #2 ; ASL
  1132  c630 f019                   beq ++
  1133  c632 c920                   cmp #32 ; LSR
  1134  c634 f015                   beq ++
  1135  c636 c927                   cmp #39 ; ROL
  1136  c638 f011                   beq ++
  1137  c63a c928                   cmp #40 ; ROR
  1138  c63c 4c4bc6                 jmp ++
  1139  c63f b90002             +   lda inputbuf, y
  1140  c642 c941                   cmp #'A'
  1141  c644 d005                   bne ++
  1142  c646 b90102                 lda inputbuf+1,y
  1143  c649 c90d                   cmp #13 ; Z set true/false whether parsed exactly
  1144  c64b 60                 ++  rts
  1145                          
  1146                          chkimmediate:
  1147  c64c 84a5                   sty savepos
  1148  c64e b90002                 lda inputbuf, y
  1149  c651 c923                   cmp #'#'
  1150  c653 d016                   bne ++
  1151  c655 c8                     iny
  1152  c656 204ac9                 jsr skipspaces
  1153  c659 b90002                 lda inputbuf, y
  1154  c65c c924                   cmp #'$'
  1155  c65e d001                   bne +
  1156  c660 c8                     iny
  1157  c661 20b3c9             +   jsr chkhexbyte
  1158  c664 d005                   bne ++
  1159  c666 c4a4               +   cpy len
  1160  c668 d001                   bne ++
  1161  c66a 60                     rts
  1162  c66b a4a5               ++  ldy savepos
  1163  c66d a201                   ldx #1 ; Z false (NE)
  1164  c66f 60                     rts
  1165                          
  1166                          chkindirectx:
  1167  c670 84a5                   sty savepos
  1168  c672 b90002                 lda inputbuf, y
  1169  c675 c928                   cmp #'('
  1170  c677 d037                   bne ++
  1171  c679 c8                     iny
  1172  c67a 204ac9                 jsr skipspaces
  1173  c67d b90002                 lda inputbuf, y
  1174  c680 c924                   cmp #'$'
  1175  c682 d001                   bne +
  1176  c684 c8                     iny
  1177  c685 20b3c9             +   jsr chkhexbyte
  1178  c688 d026                   bne ++
  1179  c68a 204ac9                 jsr skipspaces
  1180  c68d b90002                 lda inputbuf, y
  1181  c690 c92c                   cmp #','
  1182  c692 d01c                   bne ++
  1183  c694 c8                     iny
  1184  c695 204ac9                 jsr skipspaces
  1185  c698 b90002                 lda inputbuf, y
  1186  c69b c958                   cmp #'X'
  1187  c69d d011                   bne ++
  1188  c69f c8                     iny
  1189  c6a0 204ac9                 jsr skipspaces
  1190  c6a3 b90002                 lda inputbuf, y
  1191  c6a6 c929                   cmp #')'
  1192  c6a8 d006                   bne ++
  1193  c6aa c8                     iny
  1194  c6ab c4a4                   cpy len
  1195  c6ad d001                   bne ++
  1196  c6af 60                     rts
  1197  c6b0 a4a5               ++  ldy savepos
  1198  c6b2 a201                   ldx #1 ; Z false (NE)
  1199  c6b4 60                     rts
  1200                          
  1201                          chkindirecty:
  1202  c6b5 84a5                   sty savepos
  1203  c6b7 b90002                 lda inputbuf, y
  1204  c6ba c928                   cmp #'('
  1205  c6bc d037                   bne ++
  1206  c6be c8                     iny
  1207  c6bf 204ac9                 jsr skipspaces
  1208  c6c2 b90002                 lda inputbuf, y
  1209  c6c5 c924                   cmp #'$'
  1210  c6c7 d001                   bne +
  1211  c6c9 c8                     iny
  1212  c6ca 20b3c9             +   jsr chkhexbyte
  1213  c6cd d026                   bne ++
  1214  c6cf 204ac9                 jsr skipspaces
  1215  c6d2 b90002                 lda inputbuf, y
  1216  c6d5 c929                   cmp #')'
  1217  c6d7 d01c                   bne ++
  1218  c6d9 c8                     iny
  1219  c6da 204ac9                 jsr skipspaces
  1220  c6dd b90002                 lda inputbuf, y
  1221  c6e0 c92c                   cmp #','
  1222  c6e2 d011                   bne ++
  1223  c6e4 c8                     iny
  1224  c6e5 204ac9                 jsr skipspaces
  1225  c6e8 b90002                 lda inputbuf, y
  1226  c6eb c959                   cmp #'Y'
  1227  c6ed d006                   bne ++
  1228  c6ef c8                     iny
  1229  c6f0 c4a4                   cpy len
  1230  c6f2 d001                   bne ++
  1231  c6f4 60                     rts
  1232  c6f5 a4a5               ++  ldy savepos
  1233  c6f7 a201                   ldx #1 ; Z false (NE)
  1234  c6f9 60                     rts
  1235                          
  1236                          chkrelative:
  1237  c6fa 84a5                   sty savepos
  1238  c6fc a623                   ldx inidx
  1239  c6fe e006                   cpx #6 ; BIT
  1240  c700 f01e                   beq ++
  1241  c702 bd0cca                 lda inst0, x
  1242  c705 c942                   cmp #'B'
  1243  c707 d017                   bne ++
  1244  c709 b90002                 lda inputbuf, y
  1245  c70c c924                   cmp #'$'
  1246  c70e d001                   bne +
  1247  c710 c8                     iny
  1248  c711 20aac9             +   jsr chkhexword
  1249  c714 d00a                   bne ++
  1250  c716 c4a4                   cpy len
  1251  c718 d006                   bne ++
  1252  c71a 2025c7                 jsr computeoffset
  1253  c71d d001                   bne ++
  1254  c71f 60                     rts ; Z true (EQ)
  1255  c720 a4a5               ++  ldy savepos
  1256  c722 a201                   ldx #1 ; Z false (NE)
  1257  c724 60                     rts
  1258                          
  1259                          computeoffset:
  1260                          ;   compute next address
  1261  c725 a527                   lda ptr3+1
  1262  c727 85fe                   sta ptr2+1
  1263  c729 a526                   lda ptr3
  1264  c72b 18                     clc
  1265  c72c 6902                   adc #2
  1266  c72e 85fd                   sta ptr2
  1267  c730 9002                   bcc +
  1268  c732 e6fe                   inc ptr2+1
  1269                          +  ; subtract argument
  1270  c734 38                     sec
  1271  c735 a5fb                   lda ptr1
  1272  c737 e5fd                   sbc ptr2
  1273  c739 85a6                   sta tmp2
  1274  c73b a5fc                   lda ptr1+1
  1275  c73d e5fe                   sbc ptr2+1
  1276  c73f f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
  1277  c741 c9ff                   cmp #$FF
  1278  c743 d00d                   bne failedoffset ; 0 and FF were only options so fail
  1279                              ; chkeck negative offset
  1280  c745 a5a6                   lda tmp2
  1281  c747 3006                   bmi successoffset ; branch if signed byte is negative
  1282  c749 1007                   bpl failedoffset ; otherwise fail
  1283                          chkoffsetto127:
  1284  c74b a5a6                   lda tmp2
  1285  c74d 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
  1286                          successoffset:    
  1287  c74f a900                   lda #0 ; Z true (EQ)
  1288  c751 60                     rts
  1289                          failedoffset:
  1290  c752 a901                   lda #1 ; Z false (NE)
  1291  c754 60                     rts
  1292                          
  1293                          chkzeropage:
  1294  c755 84a5                   sty savepos
  1295  c757 b90002                 lda inputbuf, y
  1296  c75a c924                   cmp #'$'
  1297  c75c d001                   bne +
  1298  c75e c8                     iny
  1299  c75f 20b3c9             +   jsr chkhexbyte
  1300  c762 d005                   bne ++
  1301  c764 c4a4                   cpy len
  1302  c766 d001                   bne ++
  1303  c768 60                     rts ; Z true (EQ)
  1304  c769 a4a5               ++  ldy savepos
  1305  c76b a201                   ldx #1 ; Z false (NE)
  1306  c76d 60                     rts
  1307                          
  1308                          chkzeropagex:
  1309  c76e 84a5                   sty savepos
  1310  c770 b90002                 lda inputbuf, y
  1311  c773 c924                   cmp #'$'
  1312  c775 d001                   bne +
  1313  c777 c8                     iny
  1314  c778 20b3c9             +   jsr chkhexbyte
  1315  c77b d01b                   bne ++
  1316  c77d 204ac9                 jsr skipspaces
  1317  c780 b90002                 lda inputbuf, y
  1318  c783 c92c                   cmp #','
  1319  c785 d011                   bne ++
  1320  c787 c8                     iny
  1321  c788 204ac9                 jsr skipspaces
  1322  c78b b90002                 lda inputbuf, y
  1323  c78e c958                   cmp #'X'
  1324  c790 d006                   bne ++
  1325  c792 c8                     iny
  1326  c793 c4a4                   cpy len
  1327  c795 d001                   bne ++
  1328  c797 60                     rts ; Z true (EQ)
  1329  c798 a4a5               ++  ldy savepos
  1330  c79a a201                   ldx #1 ; Z false (NE)
  1331  c79c 60                     rts
  1332                          
  1333                          chkzeropagey:
  1334  c79d 84a5                   sty savepos
  1335  c79f b90002                 lda inputbuf, y
  1336  c7a2 c924                   cmp #'$'
  1337  c7a4 d001                   bne +
  1338  c7a6 c8                     iny
  1339  c7a7 20b3c9             +   jsr chkhexbyte
  1340  c7aa d01b                   bne ++
  1341  c7ac 204ac9                 jsr skipspaces
  1342  c7af b90002                 lda inputbuf, y
  1343  c7b2 c92c                   cmp #','
  1344  c7b4 d011                   bne ++
  1345  c7b6 c8                     iny
  1346  c7b7 204ac9                 jsr skipspaces
  1347  c7ba b90002                 lda inputbuf, y
  1348  c7bd c959                   cmp #'Y'
  1349  c7bf d006                   bne ++
  1350  c7c1 c8                     iny
  1351  c7c2 c4a4                   cpy len
  1352  c7c4 d001                   bne ++
  1353  c7c6 60                     rts ; Z true (EQ)
  1354  c7c7 a4a5               ++  ldy savepos
  1355  c7c9 a201                   ldx #1 ; Z false (NE)
  1356  c7cb 60                     rts
  1357                          
  1358                          chkabsolute:
  1359  c7cc 84a5                   sty savepos
  1360  c7ce b90002                 lda inputbuf, y
  1361  c7d1 c924                   cmp #'$'
  1362  c7d3 d001                   bne +
  1363  c7d5 c8                     iny
  1364  c7d6 20aac9             +   jsr chkhexword
  1365  c7d9 d005                   bne ++
  1366  c7db c4a4                   cpy len
  1367  c7dd d001                   bne ++
  1368  c7df 60                     rts ; Z true (EQ)
  1369  c7e0 a4a5               ++  ldy savepos
  1370  c7e2 a201                   ldx #1 ; Z false (NE)
  1371  c7e4 60                     rts
  1372                          
  1373                          chkabsolutex:
  1374  c7e5 84a5                   sty savepos
  1375  c7e7 b90002                 lda inputbuf, y
  1376  c7ea c924                   cmp #'$'
  1377  c7ec d001                   bne +
  1378  c7ee c8                     iny
  1379  c7ef 20aac9             +   jsr chkhexword
  1380  c7f2 d01b                   bne ++
  1381  c7f4 204ac9                 jsr skipspaces
  1382  c7f7 b90002                 lda inputbuf, y
  1383  c7fa c92c                   cmp #','
  1384  c7fc d011                   bne ++
  1385  c7fe c8                     iny
  1386  c7ff 204ac9                 jsr skipspaces
  1387  c802 b90002                 lda inputbuf, y
  1388  c805 c958                   cmp #'X'
  1389  c807 d006                   bne ++
  1390  c809 c8                     iny
  1391  c80a c4a4                   cpy len
  1392  c80c d001                   bne ++
  1393  c80e 60                     rts ; Z true (EQ)
  1394  c80f a4a5               ++  ldy savepos
  1395  c811 a201                   ldx #1 ; Z false (NE)
  1396  c813 60                     rts
  1397                          
  1398                          chkabsolutey:
  1399  c814 84a5                   sty savepos
  1400  c816 b90002                 lda inputbuf, y
  1401  c819 c924                   cmp #'$'
  1402  c81b d001                   bne +
  1403  c81d c8                     iny
  1404  c81e 20aac9             +   jsr chkhexword
  1405  c821 d01b                   bne ++
  1406  c823 204ac9                 jsr skipspaces
  1407  c826 b90002                 lda inputbuf, y
  1408  c829 c92c                   cmp #','
  1409  c82b d011                   bne ++
  1410  c82d c8                     iny
  1411  c82e 204ac9                 jsr skipspaces
  1412  c831 b90002                 lda inputbuf, y
  1413  c834 c959                   cmp #'Y'
  1414  c836 d006                   bne ++
  1415  c838 c8                     iny
  1416  c839 c4a4                   cpy len
  1417  c83b d001                   bne ++
  1418  c83d 60                     rts ; Z true (EQ)
  1419  c83e a4a5               ++  ldy savepos
  1420  c840 a201                   ldx #1 ; Z false (NE)
  1421  c842 60                     rts
  1422                          
  1423                          chkindirect:
  1424  c843 84a5                   sty savepos
  1425  c845 b90002                 lda inputbuf, y
  1426  c848 c928                   cmp #'('
  1427  c84a d021                   bne ++
  1428  c84c c8                     iny
  1429  c84d 204ac9                 jsr skipspaces
  1430  c850 b90002                 lda inputbuf, y
  1431  c853 c924                   cmp #'$'
  1432  c855 d001                   bne +
  1433  c857 c8                     iny
  1434  c858 20aac9             +   jsr chkhexword
  1435  c85b d010                   bne ++
  1436  c85d 204ac9                 jsr skipspaces
  1437  c860 b90002                 lda inputbuf, y
  1438  c863 c929                   cmp #')'
  1439  c865 d006                   bne ++
  1440  c867 c8                     iny
  1441  c868 c4a4                   cpy len
  1442  c86a d001                   bne ++
  1443  c86c 60                     rts ; Z true (EQ)
  1444  c86d a4a5               ++  ldy savepos
  1445  c86f a201                   ldx #1 ; Z false (NE)
  1446  c871 60                     rts
  1447                          
  1448                          chkinstruction:
  1449  c872 c4a4                   cpy len
  1450  c874 f02a                   beq ++
  1451  c876 84ff                   sty tmp
  1452  c878 a237                   ldx #(ninst-1)
  1453  c87a b90002             -   lda inputbuf,y
  1454  c87d dd0cca                 cmp inst0,x
  1455  c880 d019                   bne +
  1456  c882 c8                     iny
  1457  c883 b90002                 lda inputbuf,y
  1458  c886 dd44ca                 cmp inst1,x
  1459  c889 d010                   bne +
  1460  c88b c8                     iny
  1461  c88c b90002                 lda inputbuf,y
  1462  c88f dd7cca                 cmp inst2,x
  1463  c892 d007                   bne +
  1464  c894 c8                     iny
  1465  c895 8a                     txa
  1466  c896 8523                   sta inidx
  1467  c898 a200                   ldx #0
  1468  c89a 60                     rts
  1469  c89b a4ff               +   ldy tmp
  1470  c89d ca                     dex
  1471  c89e 10da                   bpl -
  1472  c8a0 a201               ++  ldx #1 ; Z false (NE)
  1473  c8a2 60                     rts
  1474                          
  1475                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1476                              ; and allows mode promotion
  1477  c8a3 20c7c8                 jsr find_inst_and_mode2
  1478  c8a6 f01e                   beq ++
  1479  c8a8 a524                   lda mode
  1480  c8aa c906                   cmp #6
  1481  c8ac 9018                   bcc ++
  1482  c8ae c90a                   cmp #10
  1483  c8b0 b012                   bcs +
  1484  c8b2 6903                   adc #3
  1485  c8b4 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1486  c8b6 20c7c8                 jsr find_inst_and_mode2 ; try again once
  1487  c8b9 d00b                   bne ++
  1488  c8bb a5a6                   lda tmp2
  1489  c8bd 85fb                   sta ptr1
  1490  c8bf a900                   lda #0
  1491  c8c1 85fc                   sta ptr1+1
  1492  c8c3 60                     rts ; Z true (EQ)
  1493  c8c4 a201               +   ldx #1 ; Z false (NE)
  1494  c8c6 60                 ++  rts
  1495                          
  1496                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1497  c8c7 a296                   ldx #nopcodes-1
  1498  c8c9 bd63cc             -   lda instidx, x
  1499  c8cc bcfacc                 ldy modeidx, x
  1500  c8cf c523                   cmp inidx
  1501  c8d1 d00c                   bne +
  1502  c8d3 c424                   cpy mode
  1503  c8d5 d008                   bne +
  1504  c8d7 8622                   stx opidx
  1505  c8d9 2097c0                 jsr getsize
  1506  c8dc a200                   ldx #0 ; Z true (EQ)
  1507  c8de 60                     rts
  1508  c8df ca                 +   dex
  1509  c8e0 e0ff                   cpx #$ff
  1510  c8e2 d0e5                   bne -
  1511  c8e4 a201                   ldx #1 ; Z false (NE)
  1512  c8e6 60                     rts
  1513                          
  1514                          executerun:
  1515  c8e7 68                     pla ; remove low byte return address
  1516  c8e8 68                     pla ; return high byte return address
  1517  c8e9 68                     pla ; again, we're really not returning
  1518  c8ea 68                     pla ; again, we're really not returning
  1519  c8eb 2007ca                 jsr newline
  1520  c8ee 38                     sec
  1521  c8ef a5fb                   lda ptr1
  1522  c8f1 e901                   sbc #1
  1523  c8f3 85fb                   sta ptr1
  1524  c8f5 b002                   bcs +
  1525  c8f7 c6fc                   dec ptr1+1
  1526  c8f9 a5fc               +   lda ptr1+1
  1527  c8fb 48                     pha
  1528  c8fc a5fb                   lda ptr1
  1529  c8fe 48                     pha
  1530  c8ff 60                     rts
  1531                          
  1532                          chkcontinuedis:
  1533  c900 b90002                 lda inputbuf,y
  1534  c903 c944                   cmp #'D'
  1535  c905 d00a                   bne +
  1536  c907 b90102                 lda inputbuf+1,y
  1537  c90a c90d                   cmp #13
  1538  c90c d003                   bne +
  1539  c90e c8                     iny
  1540  c90f a200                   ldx #0 ; restore Z set
  1541  c911 60                 +   rts
  1542                          
  1543                          chkcontinueasm:
  1544  c912 b90002                 lda inputbuf,y
  1545  c915 c941                   cmp #'A'
  1546  c917 d00a                   bne +
  1547  c919 b90102                 lda inputbuf+1,y
  1548  c91c c90d                   cmp #13
  1549  c91e d003                   bne +
  1550  c920 c8                     iny
  1551  c921 a200                   ldx #0 ; restore Z set
  1552  c923 60                 +   rts
  1553                          
  1554                          executedisassemble:
  1555  c924 68                     pla ; remove low byte return address
  1556  c925 68                     pla ; return high byte return address
  1557  c926 2007ca                 jsr newline
  1558  c929 4c34c0                 jmp disassemble
  1559                          
  1560                          reportnotimplemented:
  1561  c92c a95f                   lda #<notimplemented
  1562  c92e a2ce                   ldx #>notimplemented
  1563  c930 4c86c2                 jmp strout
  1564                          
  1565                          reporterr:
  1566  c933 c000                   cpy #0
  1567  c935 f008                   beq +
  1568  c937 a920                   lda #' '
  1569  c939 20d2ff             -   jsr charout
  1570  c93c 88                     dey
  1571  c93d d0fa                   bne -
  1572  c93f a93f               +   lda #'?'
  1573  c941 20d2ff                 jsr charout
  1574  c944 a90d                   lda #13
  1575  c946 20d2ff                 jsr charout
  1576  c949 60                     rts
  1577                          
  1578                          skipspaces:
  1579  c94a b90002             -   lda inputbuf, y
  1580  c94d c920                   cmp #$20
  1581  c94f d003                   bne +
  1582  c951 c8                     iny
  1583  c952 d0f6                   bne -
  1584  c954 60                 +   rts
  1585                          
  1586                          chkdot:
  1587  c955 b90002                 lda inputbuf, y
  1588  c958 c92e                   cmp #'.'
  1589  c95a d003                   bne +
  1590  c95c c8                     iny
  1591  c95d a900                   lda #0 ; Z true (EQ)
  1592  c95f 60                 +   rts
  1593                          
  1594                          chkhelp:
  1595  c960 b90002                 lda inputbuf, y
  1596  c963 c93f                   cmp #'?'
  1597  c965 d003                   bne +
  1598  c967 c8                     iny
  1599  c968 a900                   lda #0 ; Z true (EQ)
  1600  c96a 60                 +   rts
  1601                          
  1602                          chkcolon:
  1603  c96b b90002                 lda inputbuf, y
  1604  c96e c93a                   cmp #':'
  1605  c970 d003                   bne +
  1606  c972 c8                     iny
  1607  c973 a900                   lda #0 ; Z true (EQ)
  1608  c975 60                 +   rts
  1609                          
  1610                          chkfilename:
  1611  c976 84ff                   sty tmp
  1612  c978 b90002                 lda inputbuf, y
  1613  c97b c922                   cmp #34
  1614  c97d d010                   bne ++
  1615  c97f c8                 -   iny
  1616  c980 b90002                 lda inputbuf, y
  1617  c983 c90d                   cmp #13
  1618  c985 d004                   bne +
  1619  c987 a4ff                   ldy tmp
  1620  c989 d004                   bne ++
  1621  c98b c922               +   cmp #34
  1622  c98d d0f0                   bne -
  1623  c98f 60                 ++  rts
  1624                          
  1625                          chkhexbyteofsequence:
  1626  c990 204cc2                 jsr inputhexbyte
  1627  c993 20adc9                 jsr +
  1628  c996 d011                   bne ++ ; Z false (NE) if failed checks
  1629  c998 c4a4                   cpy len
  1630  c99a f00d                   beq ++ ; Z true (EQ) if end of input
  1631  c99c 85ff                   sta tmp
  1632  c99e b90002                 lda inputbuf,y
  1633  c9a1 c920                   cmp #$20
  1634  c9a3 d004                   bne ++ ; Z false (NE) if not space
  1635  c9a5 a5ff                   lda tmp
  1636  c9a7 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1637  c9a9 60                 ++  rts
  1638                          
  1639                          chkhexword:
  1640                          chkhexaddr1:
  1641  c9aa 2026c2                 jsr inputhexword
  1642  c9ad a200               +   ldx #0 ; Z true (EQ)
  1643  c9af 9001                   bcc +
  1644  c9b1 e8                     inx ; Z false (NE)
  1645  c9b2 60                 +   rts
  1646                          
  1647                          chkhexbyte:
  1648  c9b3 98                     tya
  1649  c9b4 48                     pha ; save y
  1650  c9b5 204cc2                 jsr inputhexbyte
  1651  c9b8 b00d                   bcs +
  1652  c9ba 85a6                   sta tmp2
  1653  c9bc 2068c2                 jsr inputhexnybble
  1654  c9bf 9006                   bcc +
  1655  c9c1 68                     pla ; throw away saved y
  1656  c9c2 a5a6                   lda tmp2
  1657  c9c4 a200                   ldx #0 ; Z true (EQ)
  1658  c9c6 60                     rts
  1659  c9c7 68                 +   pla
  1660  c9c8 a8                     tay ; won't be zero, so Z false (NE)
  1661  c9c9 60                     rts    
  1662                          
  1663                          chkhexaddr2:
  1664  c9ca a5fb                   lda ptr1
  1665  c9cc 48                     pha
  1666  c9cd a5fc                   lda ptr1+1
  1667  c9cf 48                     pha
  1668  c9d0 20aac9                 jsr chkhexaddr1
  1669  c9d3 f005                   beq +
  1670  c9d5 68                     pla
  1671  c9d6 68                     pla
  1672  c9d7 a901                   lda #1 ; Z false (NE)
  1673  c9d9 60                     rts
  1674  c9da a5fb               +   lda ptr1
  1675  c9dc 85fd                   sta ptr2
  1676  c9de a5fc                   lda ptr1+1
  1677  c9e0 85fe                   sta ptr2+1
  1678  c9e2 68                     pla
  1679  c9e3 85fc                   sta ptr1+1
  1680  c9e5 68                     pla
  1681  c9e6 85fb                   sta ptr1
  1682  c9e8 a900                   lda #0 ; Z true (EQ)
  1683  c9ea 60                     rts    
  1684                          
  1685                          chkaddr1cmd:
  1686  c9eb b90002                 lda inputbuf, y
  1687  c9ee c941               +   cmp #'A'
  1688  c9f0 d004                   bne +
  1689  c9f2 c8                     iny
  1690  c9f3 4c43c5                 jmp executeassemble
  1691  c9f6 c944               +   cmp #'D'
  1692  c9f8 d004                   bne +
  1693  c9fa c8                     iny
  1694  c9fb 4c24c9                 jmp executedisassemble
  1695  c9fe c952               +   cmp #'R'
  1696  ca00 d004                   bne +
  1697  ca02 c8                     iny
  1698  ca03 4ce7c8                 jmp executerun
  1699  ca06 60                 +   rts
  1700                          
  1701                          newline:
  1702  ca07 a90d                   lda #13
  1703  ca09 4cd2ff                 jmp charout
  1704                          
  1705                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1706                          ;     jsr $ffd2
  1707                          ;     pha
  1708                          ; -   lda $d011
  1709                          ;     bpl -
  1710                          ; -   lda $d011
  1711                          ;     bmi -
  1712                          ; -   lda $d011
  1713                          ;     bpl -
  1714                          ; -   lda $d011
  1715                          ;     bmi -
  1716                          ;     pla
  1717                          ;     rts
  1718                          
  1719                          !ifdef MINIMUM {
  1720                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1721                          ;; MC6850
  1722                          UART_DATA=$FFF8
  1723                          UART_STCR=$FFF9
  1724                          
  1725                          UART_INIT:
  1726                          	ldx #0b00000111 ; 11=reset device
  1727                          	stx UART_STCR
  1728                          	inx ; #0b00001000 ; 0=rint disabled, 00=rtsn low, tint disabled 010=7e1 00=div 1
  1729                          	sta UART_STCR
  1730                          	rts
  1731                          UART_OUT:
  1732                          	pha
  1733                          -	lda UART_STCR
  1734                          	and #2
  1735                          	beq - ; branch if TDRE=0, not finished transmitting
  1736                          	pla
  1737                          	pha
  1738                          	and #$7F ; force 7-bit ASCII output, mask out any high bit
  1739                          	sta UART_DATA
  1740                          	pla
  1741                          	rts
  1742                          UART_IN:
  1743                          -	lda UART_STCR
  1744                          	and #1
  1745                          	beq - ; branch if TDRF=0, not received
  1746                          	lda UART_DATA
  1747                          	; software "CAPS LOCK" because wozmon expects only uppercase
  1748                          	cmp #$1C ; ^\ to act like a BRK, to return to monitor, if reading keys
  1749                          	beq BREAK
  1750                              ; force lowercase alphabet to uppercase
  1751                              cmp #'a'
  1752                          	bcc +
  1753                          	cmp #'z'+1
  1754                          	bcs +
  1755                          	eor #$20
  1756                          +	;ora #$80 ; Apple Model 1 expects 7-bit with marked parity (8th bit always set)
  1757                           	rts
  1758                          UART_CHK: ; set or clear N flag based on read ready (character waiting)
  1759                          	pha ; save A
  1760                          	lda UART_STCR
  1761                          	lsr ; put rightmost bit in carry
  1762                          	pla ; restore A affects flags
  1763                          	ror ; move carry to left bit, right bit to carry
  1764                          	php ; push processor to save N
  1765                          	rol ; restore A affects flags
  1766                          	plp ; pull processor to restore N
  1767                          	rts
  1768                          
  1769                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1770                          ; Processor start and interrupts
  1771                          
  1772                          NMI: ; unused on minimum (no source of interrupt)
  1773                              rti
  1774                          
  1775                          IRQ:
  1776                              rti ; TODO implement BRK HANDLING in monitor
  1777                          
  1778                          BREAK:
  1779                              jmp RESET
  1780                          
  1781                          RESET:
  1782                              cld
  1783                              ldx #$00
  1784                              txs
  1785                              jsr JUART_INIT
  1786                              cli
  1787                              jmp start
  1788                          } ; !ifdef MINIMUM
  1789                          
  1790                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1791                          ; data
  1792                          
  1793                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  1794                          ninst = 56
  1795  ca0c 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  1796  ca44 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  1797  ca7c 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  1798                          
  1799                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  1800                          mode_jmptable:
  1801  cab4 23c1               !word dispModeAcc-1; 0 Accumulator 1
  1802  cab6 28c1               !word dispModeNone-1 ; 1 None 1
  1803  cab8 29c1               !word dispModeImm-1 ; 2 Immediate 2
  1804  caba 3ac1               !word dispModeIndX-1 ; 3 IndirectX 2
  1805  cabc 5ac1               !word dispModeIndY-1 ; 4 IndirectY 2
  1806  cabe 7ac1               !word dispModeRel-1 ; 5 Relative 2
  1807  cac0 2ec1               !word dispModeZP-1 ; 6 ZeroPage 2
  1808  cac2 b6c1               !word dispModeZPX-1 ; 7 ZeroPageX 2
  1809  cac4 c3c1               !word dispModeZPY-1 ; 8 ZeroPageY 2
  1810  cac6 d0c1               !word dispModeAbs-1 ; 9 Absolute 3
  1811  cac8 e2c1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  1812  caca efc1               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  1813  cacc fcc1               !word dispModeInd-1 ; 12 Indirect 3
  1814                          
  1815                          nmodes = 13
  1816                          
  1817                          mode_sorted:
  1818  cace 090a0b00020c0304...!byte 9, 10, 11, 0, 2, 12, 3, 4, 1, 5, 6, 7, 8
  1819                          
  1820                          !ifdef MINIMUM {
  1821                          mode_0: !text "Accumulator", 0, "A", 0
  1822                          mode_1: !text "None", 0, "", 0
  1823                          mode_2: !text "Immediate", 0, "#$12", 0
  1824                          mode_3: !text "IndirectX", 0, "($12,X)", 0
  1825                          mode_4: !text "IndirectY", 0, "($12),Y", 0
  1826                          mode_5: !text "Relative", 0, "$1234 {-128 to +127}", 0
  1827                          mode_6: !text "ZeroPage", 0, "$12", 0
  1828                          mode_7: !text "ZeroPageX", 0, "$12,X", 0
  1829                          mode_8: !text "ZeroPageY", 0, "$12,Y", 0
  1830                          mode_9: !text "Absolute", 0, "$1234", 0
  1831                          mode_10: !text "AbsoluteX", 0, "$1234,X", 0
  1832                          mode_11: !text "AbsoluteY", 0, "$1234,Y", 0
  1833                          mode_12: !text "Indirect", 0, "($1234)", 0
  1834                          } else {
  1835  cadb 414343554d554c41...mode_0: !text "ACCUMULATOR", 0, "A", 0
  1836  cae9 4e4f4e450000       mode_1: !text "NONE", 0, "", 0
  1837  caef 494d4d4544494154...mode_2: !text "IMMEDIATE", 0, "#$12", 0
  1838  cafe 494e444952454354...mode_3: !text "INDIRECTX", 0, "($12,X)", 0
  1839  cb10 494e444952454354...mode_4: !text "INDIRECTY", 0, "($12),Y", 0
  1840  cb22 52454c4154495645...mode_5: !text "RELATIVE", 0, "$1234", 146, " [-128 TO +127]", 0
  1841  cb41 5a45524f50414745...mode_6: !text "ZEROPAGE", 0, "$12", 0
  1842  cb4e 5a45524f50414745...mode_7: !text "ZEROPAGEX", 0, "$12,X", 0
  1843  cb5e 5a45524f50414745...mode_8: !text "ZEROPAGEY", 0, "$12,Y", 0
  1844  cb6e 4142534f4c555445...mode_9: !text "ABSOLUTE", 0, "$1234", 0
  1845  cb7d 4142534f4c555445...mode_10: !text "ABSOLUTEX", 0, "$1234,X", 0
  1846  cb8f 4142534f4c555445...mode_11: !text "ABSOLUTEY", 0, "$1234,Y", 0
  1847  cba1 494e444952454354...mode_12: !text "INDIRECT", 0, "($1234)", 0
  1848                          }
  1849                          
  1850                          modes: ; table for easily displaying each mode_example
  1851  cbb2 dbca               !word mode_0
  1852  cbb4 e9ca               !word mode_1
  1853  cbb6 efca               !word mode_2
  1854  cbb8 feca               !word mode_3
  1855  cbba 10cb               !word mode_4
  1856  cbbc 22cb               !word mode_5
  1857  cbbe 41cb               !word mode_6
  1858  cbc0 4ecb               !word mode_7
  1859  cbc2 5ecb               !word mode_8
  1860  cbc4 6ecb               !word mode_9
  1861  cbc6 7dcb               !word mode_10
  1862  cbc8 8fcb               !word mode_11
  1863  cbca a1cb               !word mode_12
  1864                          
  1865                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  1866                          nopcodes = 151
  1867  cbcc 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  1868  cc63 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  1869  ccfa 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  1870                          
  1871                          copyright 
  1872                          ;                  1         2         3         4
  1873                          ;         1234567890123456789012345678901234567890
  1874  cd91 0d36353032204d4f...!text 13,"6502 MONITOR AND MINI-ASSEMBLER"
  1875                          !ifdef C64TERMINAL {
  1876                              !text 13, "(TERMINAL VERSION)"
  1877                          }
  1878  cdb1 0d56574153363530...!text 13,"VWAS6502 (C) 2024 DAVID R. VAN WAGNER"
  1879  cdd7 0d4d4954204c4943...!text 13, "MIT LICENSE DAVEVW.COM"
  1880  cdee 00                 !text 0
  1881                          
  1882                          firsthelp
  1883  cdef 0d3f202020202020...!text 13, "?       (SYNTAX)"
  1884  ce00 0d3f204120202020...!text 13, "? A     (LIST 6502 INSTRUCTIONS)"
  1885  ce21 0d3f204144432020...!text 13, "? ADC   (/ADC/ ADDRESSING MODES)"
  1886  ce42 0d3f204d4f444520...!text 13, "? MODE  (ADDRESSING MODES)"
  1887                          ;!text 13, "? KEYWORD FOR EXAMPLE(S)"
  1888  ce5d 0d00               !text 13, 0
  1889                          
  1890  ce5f 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  1891                          
  1892                          generalhelp
  1893  ce70 3130303020202020...!text "1000        (DISPLAY MEMORY CONTENTS)",13
  1894  ce96 313030302e313030...!text "1000.100F   (DISPLAY RANGE CONTENTS)", 13
  1895  cebb 313030302e202020...!text "1000.       (SCREENFULL OF MEMORY)", 13
  1896  cede 00                 !text 0
  1897                          generalhelp2
  1898  cedf 2e20202020202020...!text ".           (NEXT SCREENFULL OF MEMORY)", 13
  1899  cf07 313030303a203031...!text "1000: 01 02 (MODIFY MEMORY)", 13
  1900  cf23 3130303020522020...!text "1000 R      (RUN PROGRAM - JMP)", 13
  1901  cf43 3130303020412020...!text "1000 A      (ASSEMBLE AT ADDRESS)", 13
  1902  cf65 3130303020442020...!text "1000 D      (DISASSEMBLE AT ADDRESS)", 13
  1903  cf8a 4420202020202020...!text "D           (DISASSEMBLE MORE)", 13
  1904  cfa9 00                 !text 0
  1905                          
  1906  cfaa 4d4f444500         modes_keyword !text "MODE", 0
  1907                          
  1908                          !ifdef C64SCREEN {
  1909  cfaf 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  1910  cfb6 2e9d9d9d9d9d00     page_displaymemory !text ".",157,157,157,157,157,0
  1911                          }
  1912                          
  1913                          !ifdef MINIMUM {
  1914                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1915                          ; JUMP table for some stability
  1916                          * = $FFEE
  1917                          JUART_INIT: JMP UART_INIT
  1918                          JUART_OUT: JMP UART_OUT
  1919                          JUART_IN: JMP UART_IN
  1920                          JUART_CHK: JMP UART_CHK
  1921                          
  1922                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1923                          ; 6502 vectors 
  1924                          * = $fffa
  1925                              !word NMI
  1926                              !word RESET
  1927                              !word IRQ
  1928                          }
  1929                          
  1930                          finish = *
