
; ******** Source: vwas6502.asm
     1                          ;; vwas6502.asm - interactive console 6502 assembler
     2                          ;;
     3                          ;; >>> STATUS: work in progress, disassembles itself <<<
     4                          ;;
     5                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     6                          ;; MIT License
     7                          ;;
     8                          ;; Copyright (c) 2024 David R. Van Wagner
     9                          ;; davevw.com
    10                          ;;
    11                          ;; Permission is hereby granted, free of charge, to any person obtaining a copy
    12                          ;; of this software and associated documentation files (the "Software"), to deal
    13                          ;; in the Software without restriction, including without limitation the rights
    14                          ;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    15                          ;; copies of the Software, and to permit persons to whom the Software is
    16                          ;; furnished to do so, subject to the following conditions:
    17                          ;;
    18                          ;; The above copyright notice and this permission notice shall be included in all
    19                          ;; copies or substantial portions of the Software.
    20                          ;;
    21                          ;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    22                          ;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    23                          ;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    24                          ;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    25                          ;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    26                          ;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    27                          ;; SOFTWARE.
    28                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    29                          
    30                          ;; VWAS2024 (C) 2024 DAVID R. VAN WAGNER
    31                          ;; MIT LICENSE DAVEVW.COM
    32                          ;; _
    33                          ;; INTERACTIVE SYNTAX >>> display/edit/run, and assemble/disassemble are working <<<
    34                          ;; (WOZMON SIMILAR - note if wozmon present, could leverage existing code)
    35                          ;; 1000 (display memory at $1000)
    36                          ;; 1000.2000 (display memory range $1000 to $2000)
    37                          ;; 1000. (display page of memory starting at $1000)
    38                          ;; 1000 r (JMP $1000)
    39                          ;; 1000: 01 02 03 (modify memory)
    40                          ;; (NEW SYNTAX)
    41                          ;; 1000 d (disassemble starting at address, for screenful)
    42                          ;; 1000 a (assemble starting at, interactive until empty line) 
    43                          ;; (FUTURE SYNTAX, not implemented)
    44                          ;; 1000.2000 "text" ? (search for text in address range inclusive)
    45                          ;; 1000.2000 A9 FF ? (search for byte sequence in address range inclusive)
    46                          ;; 1000.2000 3000 m (move bytes $1000-$2000 inclusive to $3000, left/right move as appropriate)
    47                          ;; 1000.2000: 01 02 03 (fill bytes to inclusive address range)
    48                          ;; . (display registers, VICE format or custom? screen editor changeable?)
    49                          ;; .A 00 (change register, replace A with X, Y, SP, PC, SR, N, V, B, D, I, Z, C as appropriate)
    50                          ;; 1000.2000 "filename" 08 save (save range of bytes from $1000 up to not including $2000, Commodore drive address is optional, can abbreviate to s)
    51                          ;; 1000 "filename" 08 load (load absolute, address optional, drive address is optional, can abbreviate to l)
    52                          ;; ? (commands help)
    53                          ;; ? a (list instructions available)
    54                          ;; ? adc (assembler addressing modes examples for a specific instruction, replace adc with desired instruction)
    55                          ;; ? mode (show addressing modes example syntax for 6502)
    56                          ;;
    57                          ;; (INTERACTIVE ASSEMBLER)
    58                          ;; 1000 _
    59                          ;;      ADC #$12
    60                          ;; 1000 69 12    ADC #$12
    61                          ;; 1002 _
    62                          ;;      JSR $1234
    63                          ;; 1002 20 34 12 JSR $1234
    64                          ;; 1005 _
    65                          ;;      RTS
    66                          ;; 1005 60       RTS
    67                          ;; 1006 _
    68                          ;;      XYZ
    69                          ;;      XYZ ?
    70                          ;; 1006 _
    71                          ;; _
    72                          ;;
    73                          ;; line editor version (Commodore) can revise address, and can overwrite input line with results of assembly
    74                          ;; and can cursor up to revise, 
    75                          ;;
    76                          ;; can also assume assembler mode on the fly regardless if line editor or raw terminal if see instruction name after address, so a command is superfluous
    77                          ;;
    78                          
    79                          ; global
    80                          inputbuf=$0200
    81                          
    82                          ; kernal/system calls
    83                          charout=$ffd2
    84                          charin=$ffcf ; screen editor
    85                          getkey=$ffe4
    86                          
    87                          ; zeropage
    88                          ptr1=$fb ; and $fc
    89                          ptr2=$fd ; and $fe
    90                          tmp=$ff
    91                          opidx=$22
    92                          inidx=$23
    93                          mode=$24
    94                          size=$25
    95                          ptr3=$26 ; and $27
    96                          count=$a3
    97                          len=$a4
    98                          savepos=$a5
    99                          tmp2=$a6
   100                          flag=$a7
   101                          
   102                          *=$c000
   103                          start:
   104  c000 a91e                   lda #<copyright
   105  c002 a2cb                   ldx #>copyright
   106  c004 2076c2                 jsr strout
   107  c007 2087c2             -   jsr inputline
   108  c00a 2095c2                 jsr parseline
   109  c00d 4c07c0                 jmp -
   110                          
   111                          test: ; all the addressing modes here for testing disassembly
   112  c010 ea                     nop
   113  c011 ad3412                 lda $1234
   114  c014 bd3412                 lda $1234,x
   115  c017 b93412                 lda $1234,y
   116  c01a 0a                     asl
   117  c01b a912                   lda #$12
   118  c01d a112                   lda ($12,x)
   119  c01f b112                   lda ($12),y
   120  c021 6c3412                 jmp ($1234)
   121  c024 d0fe               -   bne -
   122  c026 a512                   lda $12
   123  c028 b512                   lda $12,x
   124  c02a b612                   ldx $12,y
   125  c02c ff                     !byte $FF ; unknown
   126                          
   127                          disassemble:
   128  c02d a917                   lda #23
   129  c02f 85a3                   sta count
   130  c031 a000               -   ldy #0
   131  c033 b1fb                   lda (ptr1),y
   132  c035 2067c0                 jsr find_opcode
   133  c038 20cac0                 jsr disp_current
   134  c03b a525                   lda size
   135  c03d 1002                   bpl +
   136  c03f a901                   lda #1
   137  c041 18                 +   clc
   138  c042 65fb                   adc ptr1
   139  c044 85fb                   sta ptr1
   140  c046 9002                   bcc +
   141  c048 e6fc                   inc ptr1+1
   142  c04a c6a3               +   dec count
   143  c04c d0e3                   bne -
   144  c04e a5fb                   lda ptr1
   145  c050 a6fc                   ldx ptr1+1
   146  c052 2003c2                 jsr disphexword
   147  c055 a970                   lda #<page_disassemble
   148  c057 a2cb                   ldx #>page_disassemble
   149  c059 4c76c2                 jmp strout
   150                          
   151                          compareptrs:
   152  c05c a5fc                   lda ptr1+1
   153  c05e c5fe                   cmp ptr2+1
   154  c060 d004                   bne +
   155  c062 a5fb                   lda ptr1
   156  c064 c5fd                   cmp ptr2
   157  c066 60                 +   rts
   158                          
   159                          find_opcode: ; INPUT: .A opcode byte, OUTPUT: C flag set if found, .A instruction index, .X opcode index, .Y mode, otherwise C clear, and .A/.X/.Y all $FF
   160                          ; and properties updated in ZP globals size,inidx,opidx,mode
   161  c067 a097                   ldy #nopcodes
   162  c069 a296                   ldx #nopcodes-1
   163  c06b dd59c9             -   cmp opcodes,x
   164  c06e f00f                   beq +
   165  c070 ca                     dex
   166  c071 88                     dey
   167  c072 d0f7                   bne -
   168  c074 18                     clc
   169  c075 a901                   lda #1
   170  c077 8525                   sta size
   171  c079 a9ff                   lda #$FF
   172  c07b aa                     tax
   173  c07c a8                     tay
   174  c07d 900a                   bcc ++
   175  c07f bdf0c9             +   lda instidx, x
   176  c082 bc87ca                 ldy modeidx, x
   177  c085 2090c0                 jsr getsize
   178  c088 38                     sec
   179  c089 8523               ++  sta inidx
   180  c08b 8622                   stx opidx
   181  c08d 8424                   sty mode
   182  c08f 60                     rts
   183                          
   184                          getsize: ; y is addressing mode index (0..12), registers untouched except status
   185                              ; result returned in size
   186  c090 48                     pha
   187  c091 a901                   lda #1
   188  c093 8525                   sta size
   189  c095 68                     pla
   190  c096 c002                   cpy #2 // Immediate
   191  c098 9008                   bcc +
   192  c09a e625                   inc size
   193  c09c c009                   cpy #9 // Absolute
   194  c09e 9002                   bcc +
   195  c0a0 e625                   inc size
   196  c0a2 60                 +   rts
   197                          
   198                          disp_opcode: ; .A opcode byte
   199  c0a3 2067c0                 jsr find_opcode
   200  c0a6 8a                     txa
   201                              ; fall through to display instruction
   202                          
   203                          dispinst: ; .A instruction index 0..55
   204  c0a7 aa                     tax
   205  c0a8 e038                   cpx #ninst
   206  c0aa b012                   bcs +
   207  c0ac bd3cc8                 lda inst0, x
   208  c0af 20d2ff                 jsr charout
   209  c0b2 bd74c8                 lda inst1, x
   210  c0b5 20d2ff                 jsr charout
   211  c0b8 bdacc8                 lda inst2, x
   212  c0bb 4cd2ff                 jmp charout
   213  c0be a93f               +   lda #'?'
   214  c0c0 20d2ff                 jsr charout
   215  c0c3 20d2ff                 jsr charout
   216  c0c6 20d2ff                 jsr charout
   217  c0c9 60                     rts
   218                          
   219                          disp_current:
   220  c0ca a5fb                   lda ptr1
   221  c0cc a6fc                   ldx ptr1+1
   222  c0ce 2003c2                 jsr disphexword
   223  c0d1 a920                   lda #$20
   224  c0d3 20d2ff                 jsr charout
   225  c0d6 a000                   ldy #0
   226  c0d8 a625                   ldx size
   227  c0da b1fb               -   lda (ptr1),y
   228  c0dc 2009c2                 jsr disphexbyte
   229  c0df a920                   lda #$20
   230  c0e1 20d2ff                 jsr charout
   231  c0e4 c8                     iny
   232  c0e5 ca                     dex
   233  c0e6 d0f2                   bne -
   234  c0e8 c003               -   cpy #3
   235  c0ea f00e                   beq +
   236  c0ec a920                   lda #$20
   237  c0ee 20d2ff                 jsr charout
   238  c0f1 20d2ff                 jsr charout
   239  c0f4 20d2ff                 jsr charout
   240  c0f7 c8                     iny
   241  c0f8 d0ee                   bne -
   242  c0fa a523               +   lda inidx
   243  c0fc 20a7c0                 jsr dispinst
   244  c0ff a920                   lda #$20
   245  c101 20d2ff                 jsr charout
   246  c104 200cc1                 jsr disp_mode
   247  c107 a90d                   lda #13
   248  c109 4cd2ff                 jmp charout
   249                          
   250                          disp_mode
   251  c10c a524                   lda mode
   252  c10e c90d                   cmp #13
   253  c110 b00a                   bcs +
   254  c112 0a                     asl
   255  c113 aa                     tax
   256  c114 bde5c8                 lda mode_jmptable+1,x
   257  c117 48                     pha
   258  c118 bde4c8                 lda mode_jmptable,x
   259  c11b 48                     pha
   260  c11c 60                 +   rts
   261                          
   262                          dispModeAcc:
   263  c11d a941                   lda #'A'
   264  c11f 4cd2ff                 jmp charout
   265                          
   266                          dispModeNone:
   267  c122 60                     rts
   268                          
   269                          dispModeImm:
   270  c123 a923                   lda #'#'
   271  c125 20d2ff                 jsr charout
   272                          dispModeZP:
   273  c128 a924                   lda #'$'
   274  c12a 20d2ff                 jsr charout
   275  c12d a001                   ldy #1
   276  c12f b1fb                   lda (ptr1),y
   277  c131 4c09c2                 jmp disphexbyte
   278                          
   279                          dispModeIndX:
   280  c134 a928                   lda #'('
   281  c136 20d2ff                 jsr charout
   282  c139 a924                   lda #'$'
   283  c13b 20d2ff                 jsr charout
   284  c13e a001                   ldy #1
   285  c140 b1fb                   lda (ptr1),y
   286  c142 2009c2                 jsr disphexbyte
   287  c145 a92c                   lda #','
   288  c147 20d2ff                 jsr charout
   289  c14a a958                   lda #'X'
   290  c14c 20d2ff                 jsr charout
   291  c14f a929                   lda #')'
   292  c151 4cd2ff                 jmp charout
   293                          
   294                          dispModeIndY:
   295  c154 a928                   lda #'('
   296  c156 20d2ff                 jsr charout
   297  c159 a924                   lda #'$'
   298  c15b 20d2ff                 jsr charout
   299  c15e a001                   ldy #1
   300  c160 b1fb                   lda (ptr1),y
   301  c162 2009c2                 jsr disphexbyte
   302  c165 a929                   lda #')'
   303  c167 20d2ff                 jsr charout
   304  c16a a92c                   lda #','
   305  c16c 20d2ff                 jsr charout
   306  c16f a959                   lda #'Y'
   307  c171 4cd2ff                 jmp charout
   308                          
   309                          dispModeRel:
   310  c174 a924                   lda #'$'
   311  c176 20d2ff                 jsr charout
   312  c179 18                     clc
   313  c17a a5fb                   lda ptr1
   314  c17c 6902                   adc #2
   315  c17e 8526                   sta ptr3
   316  c180 a5fc                   lda ptr1+1
   317  c182 6900                   adc #0
   318  c184 8527                   sta ptr3+1
   319  c186 a001                   ldy #1
   320  c188 b1fb                   lda (ptr1),y
   321  c18a 1014                   bpl +
   322                              ; I'm not sure how to successfully navigate page boundries adding signed byte to unsigned byte, so I'm subtracting unsigned bytes instead
   323  c18c 49ff                   eor #$FF ; inverse
   324  c18e 18                     clc
   325  c18f 6901                   adc #1 ; complete getting absolute value from two's complement
   326  c191 85ff                   sta tmp
   327  c193 38                     sec
   328  c194 a526                   lda ptr3
   329  c196 e5ff                   sbc tmp
   330  c198 8526                   sta ptr3
   331  c19a b00d                   bcs ++
   332  c19c c627                   dec ptr3+1
   333  c19e 9009                   bcc ++
   334  c1a0 18                 +   clc ; simple case of adding
   335  c1a1 6526                   adc ptr3
   336  c1a3 8526                   sta ptr3
   337  c1a5 9002                   bcc ++
   338  c1a7 e627                   inc ptr3+1
   339  c1a9 a526               ++  lda ptr3
   340  c1ab a627                   ldx ptr3+1
   341  c1ad 4c03c2                 jmp disphexword
   342                          
   343                          dispModeZPX:
   344  c1b0 2028c1                 jsr dispModeZP
   345  c1b3 a92c                   lda #','
   346  c1b5 20d2ff                 jsr charout
   347  c1b8 a958                   lda #'X'
   348  c1ba 4cd2ff                 jmp charout
   349                          
   350                          dispModeZPY:
   351  c1bd 2028c1                 jsr dispModeZP
   352  c1c0 a92c                   lda #','
   353  c1c2 20d2ff                 jsr charout
   354  c1c5 a959                   lda #'Y'
   355  c1c7 4cd2ff                 jmp charout
   356                          
   357                          dispModeAbs:
   358  c1ca a924                   lda #'$'
   359  c1cc 20d2ff                 jsr charout
   360  c1cf a001                   ldy #1
   361  c1d1 b1fb                   lda (ptr1),y
   362  c1d3 48                     pha
   363  c1d4 c8                     iny
   364  c1d5 b1fb                   lda (ptr1),y
   365  c1d7 aa                     tax
   366  c1d8 68                     pla
   367  c1d9 4c03c2                 jmp disphexword
   368                          
   369                          dispModeAbsX:
   370  c1dc 20cac1                 jsr dispModeAbs
   371  c1df a92c                   lda #','
   372  c1e1 20d2ff                 jsr charout
   373  c1e4 a958                   lda #'X'
   374  c1e6 4cd2ff                 jmp charout
   375                          
   376                          dispModeAbsY:
   377  c1e9 20cac1                 jsr dispModeAbs
   378  c1ec a92c                   lda #','
   379  c1ee 20d2ff                 jsr charout
   380  c1f1 a959                   lda #'Y'
   381  c1f3 4cd2ff                 jmp charout
   382                          
   383                          dispModeInd:
   384  c1f6 a928                   lda #'('
   385  c1f8 20d2ff                 jsr charout
   386  c1fb 20cac1                 jsr dispModeAbs
   387  c1fe a929                   lda #')'
   388  c200 4cd2ff                 jmp charout
   389                          
   390                          disphexword: ; .A low, .X high, 0000..FFFF
   391  c203 48                     pha
   392  c204 8a                     txa
   393  c205 2009c2                 jsr disphexbyte
   394  c208 68                     pla
   395                              ;fall through to call again
   396                          
   397                          disphexbyte: ; .A 00..FF
   398  c209 48                     pha
   399  c20a 4a                     lsr
   400  c20b 4a                     lsr
   401  c20c 4a                     lsr
   402  c20d 4a                     lsr
   403  c20e 2012c2                 jsr disphexnybble
   404  c211 68                     pla
   405                              ;fall through to call again
   406                          
   407                          disphexnybble: ; .A 0..F
   408  c212 290f                   and #$0F
   409  c214 0930                   ora #$30
   410  c216 c93a                   cmp #$3A
   411  c218 9002                   bcc +
   412  c21a 6906                   adc #$06
   413  c21c 4cd2ff             +   jmp charout
   414                          
   415                          inputhexword: ; C set if fails
   416  c21f 98                     tya
   417  c220 aa                     tax ; save buffer pointer in x
   418  c221 203cc2                 jsr inputhexbyte
   419  c224 b013                   bcs ++ ; failed
   420  c226 85fb               +   sta ptr1 ; assume one byte
   421  c228 a900                   lda #0
   422  c22a 85fc                   sta ptr1+1 ; extend to 16 bits
   423  c22c 203cc2                 jsr inputhexbyte
   424  c22f b006                   bcs + ; failed
   425  c231 a6fb                   ldx ptr1 ; two bytes so shift the bytes
   426  c233 86fc                   stx ptr1+1
   427  c235 85fb                   sta ptr1
   428  c237 18                 +   clc
   429  c238 60                     rts
   430  c239 8a                 ++  txa
   431  c23a a8                     tay ; restore buffer pointer
   432  c23b 60                     rts
   433                          
   434                          inputhexbyte:
   435  c23c 2058c2                 jsr inputhexnybble
   436  c23f b016                   bcs ++
   437  c241 85ff                   sta tmp
   438  c243 2058c2                 jsr inputhexnybble
   439  c246 9005                   bcc +
   440  c248 18                     clc ; allow single digit as byte
   441  c249 a5ff                   lda tmp
   442  c24b 900a                   bcc ++
   443  c24d 06ff               +   asl tmp
   444  c24f 06ff                   asl tmp
   445  c251 06ff                   asl tmp
   446  c253 06ff                   asl tmp
   447  c255 05ff                   ora tmp
   448  c257 60                 ++  rts
   449                          
   450                          inputhexnybble:
   451  c258 b90002                 lda $0200,y
   452  c25b 297f                   and #$7F
   453  c25d 38                     sec
   454  c25e e930                   sbc #$30
   455  c260 9012                   bcc ++
   456  c262 c90a                   cmp #10
   457  c264 900c                   bcc +
   458  c266 e907                   sbc #7
   459  c268 900a                   bcc ++
   460  c26a c90a                   cmp #10
   461  c26c 9006                   bcc ++
   462  c26e c910                   cmp #16
   463  c270 b002                   bcs ++
   464  c272 c8                 +   iny
   465  c273 60                     rts
   466  c274 38                 ++  sec
   467  c275 60                     rts
   468                          
   469                          strout:
   470  c276 8526                   sta ptr3
   471  c278 8627                   stx ptr3+1
   472  c27a a000                   ldy #0
   473  c27c b126               -   lda (ptr3),y
   474  c27e f006                   beq +
   475  c280 20d2ff                 jsr charout
   476  c283 c8                     iny
   477  c284 d0f6                   bne -
   478  c286 60                 +   rts
   479                          
   480                          inputline:
   481  c287 a000                   ldy #0
   482  c289 20cfff             -   jsr charin
   483  c28c 990002                 sta inputbuf,y
   484  c28f c8                     iny
   485  c290 c90d                   cmp #13
   486  c292 d0f5                   bne -
   487  c294 60                 +   rts
   488                          
   489                          parseline:
   490  c295 c001                   cpy #1
   491  c297 d003                   bne +
   492  c299 4c36c8             -   jmp newline
   493  c29c 88                 +   dey
   494  c29d 84a4                   sty len
   495                              ; skip whitespace
   496                              ; check for address, put in ptr1
   497                              ; or check for dot, then require address put in ptr2
   498                              ; or check for ?, and optional parameter, execute help
   499                              ; check for whitespace
   500                              ; check for address, put in ptr3, check if is byte sequence, store at start of inputbuf instead
   501                              ; check for string, store at start of inputbuf
   502                              ; check for drive number
   503                              ; check for whitespace
   504                              ; check command ":rda?mls", execute command
   505  c29f a000                   ldy #0
   506  c2a1 2079c7                 jsr skipspaces
   507  c2a4 c4a4                   cpy len
   508  c2a6 f0f1                   beq -
   509  c2a8 2084c7                 jsr chkdot
   510  c2ab d003                   bne +
   511  c2ad 4c9ec3                 jmp executedot
   512  c2b0 208fc7             +   jsr chkhelp
   513  c2b3 d003                   bne +
   514  c2b5 4c9ec3                 jmp executehelp
   515  c2b8 20d9c7             +   jsr chkhexaddr1
   516  c2bb d003                   bne error
   517  c2bd 4cc3c2                 jmp executeaddr1
   518                          error:
   519  c2c0 4c62c7                 jmp reporterr
   520                          
   521                          executeaddr1:
   522  c2c3 c4a4                   cpy len
   523  c2c5 d003                   bne +
   524  c2c7 4c16c3                 jmp executedisplay1
   525  c2ca 2084c7             +   jsr chkdot
   526  c2cd d00f                   bne +
   527  c2cf c4a4                   cpy len
   528  c2d1 f021                   beq ++
   529  c2d3 20f9c7                 jsr chkhexaddr2
   530  c2d6 d0e8                   bne error
   531  c2d8 18                     clc
   532  c2d9 66a7                   ror flag
   533  c2db 4c0cc3                 jmp executeaddr12
   534  c2de 2079c7             +   jsr skipspaces
   535  c2e1 209ac7                 jsr chkcolon
   536  c2e4 d003                   bne +
   537  c2e6 4c7cc3                 jmp executemodify
   538  c2e9 201ac8             +   jsr chkaddr1cmd ; rda, will not return here if cmd
   539  c2ec 20a5c7                 jsr chkfilename
   540  c2ef d0cf                   bne error
   541  c2f1 4c9ec3                 jmp executeloadfilename
   542  c2f4 a5fb               ++  lda ptr1
   543  c2f6 18                     clc
   544  c2f7 69b7                   adc #$b7
   545  c2f9 85fd                   sta ptr2
   546  c2fb a5fc                   lda ptr1+1
   547  c2fd 6900                   adc #$00
   548  c2ff 85fe                   sta ptr2+1
   549  c301 9006                   bcc +
   550  c303 a9ff                   lda #$ff
   551  c305 85fd                   sta ptr2
   552  c307 85fe                   sta ptr2+1
   553  c309 38                 +   sec
   554  c30a 66a7                   ror flag
   555                              ; fall through to executeaddr12
   556                          
   557                          executeaddr12:
   558  c30c c4a4                   cpy len
   559  c30e d003                   bne +
   560  c310 4c1ec3                 jmp executedisplay12
   561  c313 4c5bc7             +   jmp reportnotimplemented
   562                          
   563                          executedisplay1:
   564  c316 a5fb                   lda ptr1
   565  c318 85fd                   sta ptr2
   566  c31a a5fc                   lda ptr1+1
   567  c31c 85fe                   sta ptr2+1
   568                              ; fall through executedisplay12
   569                          
   570                          executedisplay12:
   571  c31e a9ff                   lda #$ff
   572  c320 85a3                   sta count
   573  c322 e6a3               -   inc count
   574  c324 a5a3                   lda count
   575  c326 2907                   and #$07
   576  c328 d016                   bne +
   577  c32a a90d                   lda #13
   578  c32c 20d2ff                 jsr charout
   579  c32f a5fb                   lda ptr1
   580  c331 a6fc                   ldx ptr1+1
   581  c333 2003c2                 jsr disphexword
   582  c336 a93a                   lda #':'
   583  c338 20d2ff                 jsr charout
   584  c33b a920                   lda #' '
   585  c33d 20d2ff                 jsr charout
   586  c340 a000               +   ldy #0
   587  c342 b1fb                   lda (ptr1),y
   588  c344 2009c2                 jsr disphexbyte
   589  c347 a920                   lda #' '
   590  c349 20d2ff                 jsr charout
   591  c34c e6fb                   inc ptr1
   592  c34e d004                   bne +
   593  c350 e6fc                   inc ptr1+1
   594  c352 f025                   beq ++
   595  c354 205cc0             +   jsr compareptrs
   596  c357 90c9                   bcc -
   597  c359 f0c7                   beq -
   598  c35b 24a7                   bit flag
   599  c35d 101a                   bpl ++
   600  c35f 2036c8                 jsr newline
   601  c362 a5fb                   lda ptr1
   602  c364 a6fc                   ldx ptr1+1
   603  c366 2003c2                 jsr disphexword
   604  c369 a92e                   lda #'.'
   605  c36b 20d2ff                 jsr charout
   606  c36e a205                   ldx #5
   607  c370 a99d                   lda #157
   608  c372 20d2ff             -   jsr charout
   609  c375 ca                     dex
   610  c376 d0fa                   bne -
   611  c378 60                     rts
   612  c379 4c36c8             ++  jmp newline
   613                          
   614                          executemodify:
   615  c37c 2079c7                 jsr skipspaces
   616  c37f c4a4                   cpy len
   617  c381 f018                   beq ++
   618  c383 20bfc7                 jsr chkhexbyteofsequence
   619  c386 f003                   beq +
   620  c388 4cc0c2                 jmp error
   621  c38b 84ff               +   sty tmp
   622  c38d a000                   ldy #0
   623  c38f 91fb                   sta (ptr1),y
   624  c391 e6fb                   inc ptr1
   625  c393 d002                   bne +
   626  c395 e6fc                   inc ptr1+1
   627  c397 a4ff               +   ldy tmp
   628  c399 d0e1                   bne executemodify
   629  c39b 4c36c8             ++  jmp newline
   630                          
   631                          executeloadfilename:
   632                          executedot:
   633                          executeaddr1cmd:
   634                          executehelp:
   635  c39e 4c5bc7                 jmp reportnotimplemented
   636                          
   637                          executeassemble:
   638  c3a1 68                     pla ; remove low byte return address
   639  c3a2 68                     pla ; return high byte return address
   640  c3a3 a914                   lda #20
   641  c3a5 20d2ff                 jsr charout
   642  c3a8 20d2ff                 jsr charout
   643                              ; save current pointer
   644  c3ab a5fb               --  lda ptr1
   645  c3ad a6fc                   ldx ptr1+1
   646  c3af 8526                   sta ptr3
   647  c3b1 8627                   stx ptr3+1
   648  c3b3 2087c2                 jsr inputline
   649  c3b6 c001                   cpy #1
   650  c3b8 f040                   beq ++
   651  c3ba 88                     dey
   652  c3bb 84a4                   sty len
   653  c3bd a000                   ldy #0
   654  c3bf 2079c7                 jsr skipspaces
   655  c3c2 c4a4                   cpy len
   656  c3c4 f034                   beq ++
   657                              ;jsr chkhexaddr1 *** WARNING: interferes with ADC, BCC, DEC because those names are exclusively valid HEX alphabetic characters
   658                              ;jsr skipspaces
   659  c3c6 20d0c6                 jsr chkinstruction
   660  c3c9 f003                   beq +
   661  c3cb 4cc0c2             -   jmp error    
   662  c3ce 2024c4             +   jsr chkaddressing
   663  c3d1 d0f8                   bne -
   664  c3d3 2001c7                 jsr find_inst_and_mode
   665  c3d6 d0f3                   bne -
   666  c3d8 20fdc3                 jsr store_assembly
   667  c3db 18                     clc
   668  c3dc a525                   lda size
   669  c3de 6526                   adc ptr3
   670  c3e0 85fb                   sta ptr1
   671  c3e2 a527                   lda ptr3+1
   672  c3e4 6900                   adc #0
   673  c3e6 85fc                   sta ptr1+1
   674  c3e8 2036c8                 jsr newline ; TODO disassemble on screen as assemble for validation
   675  c3eb a5fb                   lda ptr1
   676  c3ed a6fc                   ldx ptr1+1
   677  c3ef 2003c2                 jsr disphexword
   678  c3f2 a920                   lda #' '
   679  c3f4 20d2ff                 jsr charout
   680  c3f7 4cabc3                 jmp --
   681  c3fa 4c36c8             ++  jmp newline
   682                          
   683                          store_assembly:
   684  c3fd a622                   ldx opidx
   685  c3ff bd59c9                 lda opcodes, x
   686  c402 a000                   ldy #0
   687  c404 9126                   sta (ptr3), y
   688  c406 c8                     iny
   689  c407 a625                   ldx size
   690  c409 e001                   cpx #1
   691  c40b f016                   beq ++
   692  c40d e002               +   cpx #2
   693  c40f d005                   bne +
   694  c411 a5a6                   lda tmp2
   695  c413 9126                   sta (ptr3), y
   696  c415 60                     rts
   697  c416 e003               +   cpx #3
   698  c418 d009                   bne ++
   699  c41a a5fb                   lda ptr1
   700  c41c 9126                   sta (ptr3), y
   701  c41e c8                     iny
   702  c41f a5fc                   lda ptr1+1
   703  c421 9126                   sta (ptr3), y
   704  c423 60                 ++  rts
   705                          
   706                          chkaddressing: ; match input to addressing mode, note caller may need to adjust
   707  c424 2079c7                 jsr skipspaces
   708  c427 a200                   ldx #0
   709  c429 8624                   stx mode
   710  c42b 2086c4                 jsr chkaccumulator
   711  c42e f051                   beq +
   712  c430 e624                   inc mode
   713  c432 c4a4                   cpy len ; chknone
   714  c434 f04b                   beq +
   715  c436 e624                   inc mode
   716  c438 20aac4                 jsr chkimmediate
   717  c43b f044                   beq +
   718  c43d e624                   inc mode
   719  c43f 20cec4                 jsr chkindirectx
   720  c442 f03d                   beq +
   721  c444 e624                   inc mode
   722  c446 2013c5                 jsr chkindirecty
   723  c449 f036                   beq +
   724  c44b e624                   inc mode
   725  c44d 2058c5                 jsr chkrelative
   726  c450 f02f                   beq +
   727  c452 e624                   inc mode
   728  c454 20b3c5                 jsr chkzeropage
   729  c457 f028                   beq +
   730  c459 e624                   inc mode
   731  c45b 20ccc5                 jsr chkzeropagex
   732  c45e f021                   beq +
   733  c460 e624                   inc mode
   734  c462 20fbc5                 jsr chkzeropagey
   735  c465 f01a                   beq +
   736  c467 e624                   inc mode
   737  c469 202ac6                 jsr chkabsolute
   738  c46c f013                   beq +
   739  c46e e624                   inc mode
   740  c470 2043c6                 jsr chkabsolutex
   741  c473 f00c                   beq +
   742  c475 e624                   inc mode
   743  c477 2072c6                 jsr chkabsolutey
   744  c47a f005                   beq +
   745  c47c e624                   inc mode
   746  c47e 20a1c6                 jsr chkindirect
   747  c481 08                 +   php ; save Z
   748  c482 a524                   lda mode
   749  c484 28                     plp ; restore Z 
   750  c485 60                     rts
   751                          
   752                          chkaccumulator:
   753  c486 c4a4                   cpy len
   754  c488 d013                   bne +
   755  c48a a523                   lda inidx
   756  c48c c902                   cmp #2 ; ASL
   757  c48e f019                   beq ++
   758  c490 c920                   cmp #32 ; LSR
   759  c492 f015                   beq ++
   760  c494 c927                   cmp #39 ; ROL
   761  c496 f011                   beq ++
   762  c498 c928                   cmp #40 ; ROR
   763  c49a 4ca9c4                 jmp ++
   764  c49d b90002             +   lda inputbuf, y
   765  c4a0 c941                   cmp #'A'
   766  c4a2 d005                   bne ++
   767  c4a4 b90102                 lda inputbuf+1,y
   768  c4a7 c90d                   cmp #13 ; Z set true/false whether parsed exactly
   769  c4a9 60                 ++  rts
   770                          
   771                          chkimmediate:
   772  c4aa 84a5                   sty savepos
   773  c4ac b90002                 lda inputbuf, y
   774  c4af c923                   cmp #'#'
   775  c4b1 d016                   bne ++
   776  c4b3 c8                     iny
   777  c4b4 2079c7                 jsr skipspaces
   778  c4b7 b90002                 lda inputbuf, y
   779  c4ba c924                   cmp #'$'
   780  c4bc d001                   bne +
   781  c4be c8                     iny
   782  c4bf 20e2c7             +   jsr chkhexbyte
   783  c4c2 d005                   bne ++
   784  c4c4 c4a4               +   cpy len
   785  c4c6 d001                   bne ++
   786  c4c8 60                     rts
   787  c4c9 a4a5               ++  ldy savepos
   788  c4cb a201                   ldx #1 ; Z false (NE)
   789  c4cd 60                     rts
   790                          
   791                          chkindirectx:
   792  c4ce 84a5                   sty savepos
   793  c4d0 b90002                 lda inputbuf, y
   794  c4d3 c928                   cmp #'('
   795  c4d5 d037                   bne ++
   796  c4d7 c8                     iny
   797  c4d8 2079c7                 jsr skipspaces
   798  c4db b90002                 lda inputbuf, y
   799  c4de c924                   cmp #'$'
   800  c4e0 d001                   bne +
   801  c4e2 c8                     iny
   802  c4e3 20e2c7             +   jsr chkhexbyte
   803  c4e6 d026                   bne ++
   804  c4e8 2079c7                 jsr skipspaces
   805  c4eb b90002                 lda inputbuf, y
   806  c4ee c92c                   cmp #','
   807  c4f0 d01c                   bne ++
   808  c4f2 c8                     iny
   809  c4f3 2079c7                 jsr skipspaces
   810  c4f6 b90002                 lda inputbuf, y
   811  c4f9 c958                   cmp #'X'
   812  c4fb d011                   bne ++
   813  c4fd c8                     iny
   814  c4fe 2079c7                 jsr skipspaces
   815  c501 b90002                 lda inputbuf, y
   816  c504 c929                   cmp #')'
   817  c506 d006                   bne ++
   818  c508 c8                     iny
   819  c509 c4a4                   cpy len
   820  c50b d001                   bne ++
   821  c50d 60                     rts
   822  c50e a4a5               ++  ldy savepos
   823  c510 a201                   ldx #1 ; Z false (NE)
   824  c512 60                     rts
   825                          
   826                          chkindirecty:
   827  c513 84a5                   sty savepos
   828  c515 b90002                 lda inputbuf, y
   829  c518 c928                   cmp #'('
   830  c51a d037                   bne ++
   831  c51c c8                     iny
   832  c51d 2079c7                 jsr skipspaces
   833  c520 b90002                 lda inputbuf, y
   834  c523 c924                   cmp #'$'
   835  c525 d001                   bne +
   836  c527 c8                     iny
   837  c528 20e2c7             +   jsr chkhexbyte
   838  c52b d026                   bne ++
   839  c52d 2079c7                 jsr skipspaces
   840  c530 b90002                 lda inputbuf, y
   841  c533 c929                   cmp #')'
   842  c535 d01c                   bne ++
   843  c537 c8                     iny
   844  c538 2079c7                 jsr skipspaces
   845  c53b b90002                 lda inputbuf, y
   846  c53e c92c                   cmp #','
   847  c540 d011                   bne ++
   848  c542 c8                     iny
   849  c543 2079c7                 jsr skipspaces
   850  c546 b90002                 lda inputbuf, y
   851  c549 c959                   cmp #'Y'
   852  c54b d006                   bne ++
   853  c54d c8                     iny
   854  c54e c4a4                   cpy len
   855  c550 d001                   bne ++
   856  c552 60                     rts
   857  c553 a4a5               ++  ldy savepos
   858  c555 a201                   ldx #1 ; Z false (NE)
   859  c557 60                     rts
   860                          
   861                          chkrelative:
   862  c558 84a5                   sty savepos
   863  c55a a623                   ldx inidx
   864  c55c e006                   cpx #6 ; BIT
   865  c55e f01e                   beq ++
   866  c560 bd3cc8                 lda inst0, x
   867  c563 c942                   cmp #'B'
   868  c565 d017                   bne ++
   869  c567 b90002                 lda inputbuf, y
   870  c56a c924                   cmp #'$'
   871  c56c d001                   bne +
   872  c56e c8                     iny
   873  c56f 20d9c7             +   jsr chkhexword
   874  c572 d00a                   bne ++
   875  c574 c4a4                   cpy len
   876  c576 d006                   bne ++
   877  c578 2083c5                 jsr computeoffset
   878  c57b d001                   bne ++
   879  c57d 60                     rts ; Z true (EQ)
   880  c57e a4a5               ++  ldy savepos
   881  c580 a201                   ldx #1 ; Z false (NE)
   882  c582 60                     rts
   883                          
   884                          computeoffset:
   885                          ;   compute next address
   886  c583 a527                   lda ptr3+1
   887  c585 85fe                   sta ptr2+1
   888  c587 a526                   lda ptr3
   889  c589 18                     clc
   890  c58a 6902                   adc #2
   891  c58c 85fd                   sta ptr2
   892  c58e 9002                   bcc +
   893  c590 e6fe                   inc ptr2+1
   894                          +  ; subtract argument
   895  c592 38                     sec
   896  c593 a5fb                   lda ptr1
   897  c595 e5fd                   sbc ptr2
   898  c597 85a6                   sta tmp2
   899  c599 a5fc                   lda ptr1+1
   900  c59b e5fe                   sbc ptr2+1
   901  c59d f00a                   beq chkoffsetto127 ; offset is byte sized, make sure is positive signed byte
   902  c59f c9ff                   cmp #$FF
   903  c5a1 d00d                   bne failedoffset ; 0 and FF were only options so fail
   904                              ; chkeck negative offset
   905  c5a3 a5a6                   lda tmp2
   906  c5a5 3006                   bmi successoffset ; branch if signed byte is negative
   907  c5a7 1007                   bpl failedoffset ; otherwise fail
   908                          chkoffsetto127:
   909  c5a9 a5a6                   lda tmp2
   910  c5ab 3003                   bmi failedoffset ; branch if too large an offset 128 bytes or more
   911                          successoffset:    
   912  c5ad a900                   lda #0 ; Z true (EQ)
   913  c5af 60                     rts
   914                          failedoffset:
   915  c5b0 a901                   lda #1 ; Z false (NE)
   916  c5b2 60                     rts
   917                          
   918                          chkzeropage:
   919  c5b3 84a5                   sty savepos
   920  c5b5 b90002                 lda inputbuf, y
   921  c5b8 c924                   cmp #'$'
   922  c5ba d001                   bne +
   923  c5bc c8                     iny
   924  c5bd 20e2c7             +   jsr chkhexbyte
   925  c5c0 d005                   bne ++
   926  c5c2 c4a4                   cpy len
   927  c5c4 d001                   bne ++
   928  c5c6 60                     rts ; Z true (EQ)
   929  c5c7 a4a5               ++  ldy savepos
   930  c5c9 a201                   ldx #1 ; Z false (NE)
   931  c5cb 60                     rts
   932                          
   933                          chkzeropagex:
   934  c5cc 84a5                   sty savepos
   935  c5ce b90002                 lda inputbuf, y
   936  c5d1 c924                   cmp #'$'
   937  c5d3 d001                   bne +
   938  c5d5 c8                     iny
   939  c5d6 20e2c7             +   jsr chkhexbyte
   940  c5d9 d01b                   bne ++
   941  c5db 2079c7                 jsr skipspaces
   942  c5de b90002                 lda inputbuf, y
   943  c5e1 c92c                   cmp #','
   944  c5e3 d011                   bne ++
   945  c5e5 c8                     iny
   946  c5e6 2079c7                 jsr skipspaces
   947  c5e9 b90002                 lda inputbuf, y
   948  c5ec c958                   cmp #'X'
   949  c5ee d006                   bne ++
   950  c5f0 c8                     iny
   951  c5f1 c4a4                   cpy len
   952  c5f3 d001                   bne ++
   953  c5f5 60                     rts ; Z true (EQ)
   954  c5f6 a4a5               ++  ldy savepos
   955  c5f8 a201                   ldx #1 ; Z false (NE)
   956  c5fa 60                     rts
   957                          
   958                          chkzeropagey:
   959  c5fb 84a5                   sty savepos
   960  c5fd b90002                 lda inputbuf, y
   961  c600 c924                   cmp #'$'
   962  c602 d001                   bne +
   963  c604 c8                     iny
   964  c605 20e2c7             +   jsr chkhexbyte
   965  c608 d01b                   bne ++
   966  c60a 2079c7                 jsr skipspaces
   967  c60d b90002                 lda inputbuf, y
   968  c610 c92c                   cmp #','
   969  c612 d011                   bne ++
   970  c614 c8                     iny
   971  c615 2079c7                 jsr skipspaces
   972  c618 b90002                 lda inputbuf, y
   973  c61b c959                   cmp #'Y'
   974  c61d d006                   bne ++
   975  c61f c8                     iny
   976  c620 c4a4                   cpy len
   977  c622 d001                   bne ++
   978  c624 60                     rts ; Z true (EQ)
   979  c625 a4a5               ++  ldy savepos
   980  c627 a201                   ldx #1 ; Z false (NE)
   981  c629 60                     rts
   982                          
   983                          chkabsolute:
   984  c62a 84a5                   sty savepos
   985  c62c b90002                 lda inputbuf, y
   986  c62f c924                   cmp #'$'
   987  c631 d001                   bne +
   988  c633 c8                     iny
   989  c634 20d9c7             +   jsr chkhexword
   990  c637 d005                   bne ++
   991  c639 c4a4                   cpy len
   992  c63b d001                   bne ++
   993  c63d 60                     rts ; Z true (EQ)
   994  c63e a4a5               ++  ldy savepos
   995  c640 a201                   ldx #1 ; Z false (NE)
   996  c642 60                     rts
   997                          
   998                          chkabsolutex:
   999  c643 84a5                   sty savepos
  1000  c645 b90002                 lda inputbuf, y
  1001  c648 c924                   cmp #'$'
  1002  c64a d001                   bne +
  1003  c64c c8                     iny
  1004  c64d 20d9c7             +   jsr chkhexword
  1005  c650 d01b                   bne ++
  1006  c652 2079c7                 jsr skipspaces
  1007  c655 b90002                 lda inputbuf, y
  1008  c658 c92c                   cmp #','
  1009  c65a d011                   bne ++
  1010  c65c c8                     iny
  1011  c65d 2079c7                 jsr skipspaces
  1012  c660 b90002                 lda inputbuf, y
  1013  c663 c958                   cmp #'X'
  1014  c665 d006                   bne ++
  1015  c667 c8                     iny
  1016  c668 c4a4                   cpy len
  1017  c66a d001                   bne ++
  1018  c66c 60                     rts ; Z true (EQ)
  1019  c66d a4a5               ++  ldy savepos
  1020  c66f a201                   ldx #1 ; Z false (NE)
  1021  c671 60                     rts
  1022                          
  1023                          chkabsolutey:
  1024  c672 84a5                   sty savepos
  1025  c674 b90002                 lda inputbuf, y
  1026  c677 c924                   cmp #'$'
  1027  c679 d001                   bne +
  1028  c67b c8                     iny
  1029  c67c 20d9c7             +   jsr chkhexword
  1030  c67f d01b                   bne ++
  1031  c681 2079c7                 jsr skipspaces
  1032  c684 b90002                 lda inputbuf, y
  1033  c687 c92c                   cmp #','
  1034  c689 d011                   bne ++
  1035  c68b c8                     iny
  1036  c68c 2079c7                 jsr skipspaces
  1037  c68f b90002                 lda inputbuf, y
  1038  c692 c959                   cmp #'Y'
  1039  c694 d006                   bne ++
  1040  c696 c8                     iny
  1041  c697 c4a4                   cpy len
  1042  c699 d001                   bne ++
  1043  c69b 60                     rts ; Z true (EQ)
  1044  c69c a4a5               ++  ldy savepos
  1045  c69e a201                   ldx #1 ; Z false (NE)
  1046  c6a0 60                     rts
  1047                          
  1048                          chkindirect:
  1049  c6a1 84a5                   sty savepos
  1050  c6a3 b90002                 lda inputbuf, y
  1051  c6a6 c928                   cmp #'('
  1052  c6a8 d021                   bne ++
  1053  c6aa c8                     iny
  1054  c6ab 2079c7                 jsr skipspaces
  1055  c6ae b90002                 lda inputbuf, y
  1056  c6b1 c924                   cmp #'$'
  1057  c6b3 d001                   bne +
  1058  c6b5 c8                     iny
  1059  c6b6 20d9c7             +   jsr chkhexword
  1060  c6b9 d010                   bne ++
  1061  c6bb 2079c7                 jsr skipspaces
  1062  c6be b90002                 lda inputbuf, y
  1063  c6c1 c929                   cmp #')'
  1064  c6c3 d006                   bne ++
  1065  c6c5 c8                     iny
  1066  c6c6 c4a4                   cpy len
  1067  c6c8 d001                   bne ++
  1068  c6ca 60                     rts ; Z true (EQ)
  1069  c6cb a4a5               ++  ldy savepos
  1070  c6cd a201                   ldx #1 ; Z false (NE)
  1071  c6cf 60                     rts
  1072                          
  1073                          chkinstruction:
  1074  c6d0 c4a4                   cpy len
  1075  c6d2 f02a                   beq ++
  1076  c6d4 84ff                   sty tmp
  1077  c6d6 a237                   ldx #(ninst-1)
  1078  c6d8 b90002             -   lda inputbuf,y
  1079  c6db dd3cc8                 cmp inst0,x
  1080  c6de d019                   bne +
  1081  c6e0 c8                     iny
  1082  c6e1 b90002                 lda inputbuf,y
  1083  c6e4 dd74c8                 cmp inst1,x
  1084  c6e7 d010                   bne +
  1085  c6e9 c8                     iny
  1086  c6ea b90002                 lda inputbuf,y
  1087  c6ed ddacc8                 cmp inst2,x
  1088  c6f0 d007                   bne +
  1089  c6f2 c8                     iny
  1090  c6f3 8a                     txa
  1091  c6f4 8523                   sta inidx
  1092  c6f6 a200                   ldx #0
  1093  c6f8 60                     rts
  1094  c6f9 a4ff               +   ldy tmp
  1095  c6fb ca                     dex
  1096  c6fc 10da                   bpl -
  1097  c6fe a201               ++  ldx #1 ; Z false (NE)
  1098  c700 60                     rts
  1099                          
  1100                          find_inst_and_mode: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1101                              ; and allows mode promotion
  1102  c701 201ac7                 jsr find_inst_and_mode2
  1103  c704 f013                   beq ++
  1104  c706 a524                   lda mode
  1105  c708 c906                   cmp #6
  1106  c70a 900d                   bcc ++
  1107  c70c c90a                   cmp #10
  1108  c70e b007                   bcs +
  1109  c710 6903                   adc #3
  1110  c712 8524                   sta mode ; promote ZeroPage modes to Absolute modes
  1111  c714 4c1ac7                 jmp find_inst_and_mode2 ; try again once
  1112  c717 a201               +   ldx #1 ; Z false (NE)
  1113  c719 60                 ++  rts
  1114                          
  1115                          find_inst_and_mode2: ; INPUT: inidx & mode, OUTPUT: Z true: opidx & size, otherwise false
  1116  c71a a296                   ldx #nopcodes-1
  1117  c71c bdf0c9             -   lda instidx, x
  1118  c71f bc87ca                 ldy modeidx, x
  1119  c722 c523                   cmp inidx
  1120  c724 d00c                   bne +
  1121  c726 c424                   cpy mode
  1122  c728 d008                   bne +
  1123  c72a 8622                   stx opidx
  1124  c72c 2090c0                 jsr getsize
  1125  c72f a200                   ldx #0 ; Z true (EQ)
  1126  c731 60                     rts
  1127  c732 ca                 +   dex
  1128  c733 e0ff                   cpx #$ff
  1129  c735 d0e5                   bne -
  1130  c737 a201                   ldx #1 ; Z false (NE)
  1131  c739 60                     rts
  1132                          
  1133                          executerun:
  1134  c73a 68                     pla ; remove low byte return address
  1135  c73b 68                     pla ; return high byte return address
  1136  c73c 68                     pla ; again, we're really not returning
  1137  c73d 68                     pla ; again, we're really not returning
  1138  c73e 2036c8                 jsr newline
  1139  c741 38                     sec
  1140  c742 a5fb                   lda ptr1
  1141  c744 e901                   sbc #1
  1142  c746 85fb                   sta ptr1
  1143  c748 b002                   bcs +
  1144  c74a c6fc                   dec ptr1+1
  1145  c74c a5fc               +   lda ptr1+1
  1146  c74e 48                     pha
  1147  c74f a5fb                   lda ptr1
  1148  c751 48                     pha
  1149  c752 60                     rts
  1150                          
  1151                          executedisassemble:
  1152  c753 68                     pla ; remove low byte return address
  1153  c754 68                     pla ; return high byte return address
  1154  c755 2036c8                 jsr newline
  1155  c758 4c2dc0                 jmp disassemble
  1156                          
  1157                          reportnotimplemented:
  1158  c75b a95f                   lda #<notimplemented
  1159  c75d a2cb                   ldx #>notimplemented
  1160  c75f 4c76c2                 jmp strout
  1161                          
  1162                          reporterr:
  1163  c762 c000                   cpy #0
  1164  c764 f008                   beq +
  1165  c766 a920                   lda #' '
  1166  c768 20d2ff             -   jsr charout
  1167  c76b 88                     dey
  1168  c76c d0fa                   bne -
  1169  c76e a93f               +   lda #'?'
  1170  c770 20d2ff                 jsr charout
  1171  c773 a90d                   lda #13
  1172  c775 20d2ff                 jsr charout
  1173  c778 60                     rts
  1174                          
  1175                          skipspaces:
  1176  c779 b90002             -   lda inputbuf, y
  1177  c77c c920                   cmp #$20
  1178  c77e d003                   bne +
  1179  c780 c8                     iny
  1180  c781 d0f6                   bne -
  1181  c783 60                 +   rts
  1182                          
  1183                          chkdot:
  1184  c784 b90002                 lda inputbuf, y
  1185  c787 c92e                   cmp #'.'
  1186  c789 d003                   bne +
  1187  c78b c8                     iny
  1188  c78c a900                   lda #0 ; Z true (EQ)
  1189  c78e 60                 +   rts
  1190                          
  1191                          chkhelp:
  1192  c78f b90002                 lda inputbuf, y
  1193  c792 c93f                   cmp #'?'
  1194  c794 d003                   bne +
  1195  c796 c8                     iny
  1196  c797 a900                   lda #0 ; Z true (EQ)
  1197  c799 60                 +   rts
  1198                          
  1199                          chkcolon:
  1200  c79a b90002                 lda inputbuf, y
  1201  c79d c93a                   cmp #':'
  1202  c79f d003                   bne +
  1203  c7a1 c8                     iny
  1204  c7a2 a900                   lda #0 ; Z true (EQ)
  1205  c7a4 60                 +   rts
  1206                          
  1207                          chkfilename:
  1208  c7a5 84ff                   sty tmp
  1209  c7a7 b90002                 lda inputbuf, y
  1210  c7aa c922                   cmp #34
  1211  c7ac d010                   bne ++
  1212  c7ae c8                 -   iny
  1213  c7af b90002                 lda inputbuf, y
  1214  c7b2 c90d                   cmp #13
  1215  c7b4 d004                   bne +
  1216  c7b6 a4ff                   ldy tmp
  1217  c7b8 d004                   bne ++
  1218  c7ba c922               +   cmp #34
  1219  c7bc d0f0                   bne -
  1220  c7be 60                 ++  rts
  1221                          
  1222                          chkhexbyteofsequence:
  1223  c7bf 203cc2                 jsr inputhexbyte
  1224  c7c2 20dcc7                 jsr +
  1225  c7c5 d011                   bne ++ ; Z false (NE) if failed checks
  1226  c7c7 c4a4                   cpy len
  1227  c7c9 f00d                   beq ++ ; Z true (EQ) if end of input
  1228  c7cb 85ff                   sta tmp
  1229  c7cd b90002                 lda inputbuf,y
  1230  c7d0 c920                   cmp #$20
  1231  c7d2 d004                   bne ++ ; Z false (NE) if not space
  1232  c7d4 a5ff                   lda tmp
  1233  c7d6 a200                   ldx #0 ; Z true (EQ) is space delimeter
  1234  c7d8 60                 ++  rts
  1235                          
  1236                          chkhexword:
  1237                          chkhexaddr1:
  1238  c7d9 201fc2                 jsr inputhexword
  1239  c7dc a200               +   ldx #0 ; Z true (EQ)
  1240  c7de 9001                   bcc +
  1241  c7e0 e8                     inx ; Z false (NE)
  1242  c7e1 60                 +   rts
  1243                          
  1244                          chkhexbyte
  1245  c7e2 98                     tya
  1246  c7e3 48                     pha ; save y
  1247  c7e4 203cc2                 jsr inputhexbyte
  1248  c7e7 b00d                   bcs +
  1249  c7e9 85a6                   sta tmp2
  1250  c7eb 2058c2                 jsr inputhexnybble
  1251  c7ee 9006                   bcc +
  1252  c7f0 68                     pla ; throw away saved y
  1253  c7f1 a5a6                   lda tmp2
  1254  c7f3 a200                   ldx #0 ; Z true (EQ)
  1255  c7f5 60                     rts
  1256  c7f6 68                 +   pla
  1257  c7f7 a8                     tay ; won't be zero, so Z false (NE)
  1258  c7f8 60                     rts    
  1259                          
  1260                          chkhexaddr2:
  1261  c7f9 a5fb                   lda ptr1
  1262  c7fb 48                     pha
  1263  c7fc a5fc                   lda ptr1+1
  1264  c7fe 48                     pha
  1265  c7ff 20d9c7                 jsr chkhexaddr1
  1266  c802 f005                   beq +
  1267  c804 68                     pla
  1268  c805 68                     pla
  1269  c806 a901                   lda #1 ; Z false (NE)
  1270  c808 60                     rts
  1271  c809 a5fb               +   lda ptr1
  1272  c80b 85fd                   sta ptr2
  1273  c80d a5fc                   lda ptr1+1
  1274  c80f 85fe                   sta ptr2+1
  1275  c811 68                     pla
  1276  c812 85fc                   sta ptr1+1
  1277  c814 68                     pla
  1278  c815 85fb                   sta ptr1
  1279  c817 a900                   lda #0 ; Z true (EQ)
  1280  c819 60                     rts    
  1281                          
  1282                          chkaddr1cmd:
  1283  c81a b90002                 lda inputbuf, y
  1284  c81d c941               +   cmp #'A'
  1285  c81f d004                   bne +
  1286  c821 c8                     iny
  1287  c822 4ca1c3                 jmp executeassemble
  1288  c825 c944               +   cmp #'D'
  1289  c827 d004                   bne +
  1290  c829 c8                     iny
  1291  c82a 4c53c7                 jmp executedisassemble
  1292  c82d c952               +   cmp #'R'
  1293  c82f d004                   bne +
  1294  c831 c8                     iny
  1295  c832 4c3ac7                 jmp executerun
  1296  c835 60                 +   rts
  1297                          
  1298                          newline:
  1299  c836 a90d                   lda #13
  1300  c838 4cd2ff                 jmp charout
  1301                          
  1302                          ; charout: ; for debugging, wait for scan line to pass over entire screen at least once
  1303                          ;     jsr $ffd2
  1304                          ;     pha
  1305                          ; -   lda $d011
  1306                          ;     bpl -
  1307                          ; -   lda $d011
  1308                          ;     bmi -
  1309                          ; -   lda $d011
  1310                          ;     bpl -
  1311                          ; -   lda $d011
  1312                          ;     bmi -
  1313                          ;     pla
  1314                          ;     rts
  1315                          
  1316  c83b 00                 end: brk
  1317                          
  1318                          ; instruction textual mnuemonic first, second, third letters (read down in source)
  1319                          ninst = 56
  1320  c83c 4141414242424242...inst0 !text "AAABBBBBBBBBBCCCCCCCDDDEIIIJJLLLLNOPPPPRRRRSSSSSSSTTTTTT"
  1321  c874 444e53434345494d...inst1 !text "DNSCCEIMNPRVVLLLLMPPEEEONNNMSDDDSORHHLLOOTTBEEETTTAASXXY"
  1322  c8ac 43444c4353515449...inst2 !text "CDLCSQTIELKCSCDIVPXYCXYRCXYPRAXYRPAAPAPLRISCCDIAXYXYXASA"
  1323                          
  1324                          ; 6502 addressing modes by index number and number of bytes per instruction shown at end of comment
  1325                          mode_jmptable:
  1326  c8e4 1cc1               !word dispModeAcc-1; 0 Accumulator 1
  1327  c8e6 21c1               !word dispModeNone-1 ; 1 None 1
  1328  c8e8 22c1               !word dispModeImm-1 ; 2 Immediate 2
  1329  c8ea 33c1               !word dispModeIndX-1 ; 3 IndirectX 2
  1330  c8ec 53c1               !word dispModeIndY-1 ; 4 IndirectY 2
  1331  c8ee 73c1               !word dispModeRel-1 ; 5 Relative 2
  1332  c8f0 27c1               !word dispModeZP-1 ; 6 ZeroPage 2
  1333  c8f2 afc1               !word dispModeZPX-1 ; 7 ZeroPageX 2
  1334  c8f4 bcc1               !word dispModeZPY-1 ; 8 ZeroPageY 2
  1335  c8f6 c9c1               !word dispModeAbs-1 ; 9 Absolute 3
  1336  c8f8 dbc1               !word dispModeAbsX-1 ; 10 AbsoluteX 3
  1337  c8fa e8c1               !word dispModeAbsY-1 ; 11 AbsoluteY 3
  1338  c8fc f5c1               !word dispModeInd-1 ; 12 Indirect 3
  1339                          
  1340                          mode_examples:
  1341  c8fe 4100               !text "A", 0 ; 0 Accumulator
  1342  c900 00                 !text "", 0 ; 1 None
  1343  c901 2324313200         !text "#$12", 0 ; 2 Immediate
  1344  c906 282431322c582900   !text "($12,X)", 0 ; 3 IndirectX
  1345  c90e 28243132292c5900   !text "($12),Y", 0 ; 4 IndirectY
  1346  c916 243132333420282d...!text "$1234 (-128 to +127)", 0 ; 5 Relative
  1347  c92b 24313200           !text "$12", 0 ; 6 ZeroPage
  1348  c92f 2431322c5800       !text "$12,X", 0 ; 7 ZeroPageX
  1349  c935 2431322c5900       !text "$12,Y", 0 ; 8 ZeroPageY
  1350  c93b 243132333400       !text "$1234", 0 ; 9 Absolute
  1351  c941 24313233342c5800   !text "$1234,X", 0 ; 10 AbsoluteX
  1352  c949 24313233342c5900   !text "$1234,Y", 0 ; 11 AbsoluteY
  1353  c951 2824313233342900   !text "($1234)", 0 ; 12 Indirect
  1354                          
  1355                          ; opcode table of byte values (opcodes), instructions, and addressing modes
  1356                          nopcodes = 151
  1357  c959 0001050608090a0d...opcodes !byte $00,$01,$05,$06,$08,$09,$0A,$0D,$0E,$10,$11,$15,$16,$18,$19,$1D,$1E,$20,$21,$24,$25,$26,$28,$29,$2A,$2C,$2D,$2E,$30,$31,$35,$36,$38,$39,$3D,$3E,$40,$41,$45,$46,$48,$49,$4A,$4C,$4D,$4E,$50,$51,$55,$56,$58,$59,$5D,$5E,$60,$61,$65,$66,$68,$69,$6A,$6C,$6D,$6E,$70,$71,$75,$76,$78,$79,$7D,$7E,$81,$84,$85,$86,$88,$8A,$8C,$8D,$8E,$90,$91,$94,$95,$96,$98,$99,$9A,$9D,$A0,$A1,$A2,$A4,$A5,$A6,$A8,$A9,$AA,$AC,$AD,$AE,$B0,$B1,$B4,$B5,$B6,$B8,$B9,$BA,$BC,$BD,$BE,$C0,$C1,$C4,$C5,$C6,$C8,$C9,$CA,$CC,$CD,$CE,$D0,$D1,$D5,$D6,$D8,$D9,$DD,$DE,$E0,$E1,$E4,$E5,$E6,$E8,$E9,$EA,$EC,$ED,$EE,$F0,$F1,$F5,$F6,$F8,$F9,$FD,$FE
  1358  c9f0 0a22220224220222...instidx !byte $0A,$22,$22,$02,$24,$22,$02,$22,$02,$09,$22,$22,$02,$0D,$22,$22,$02,$1C,$01,$06,$01,$27,$26,$01,$27,$06,$01,$27,$07,$01,$01,$27,$2C,$01,$01,$27,$29,$17,$17,$20,$23,$17,$20,$1B,$17,$20,$0B,$17,$17,$20,$0F,$17,$17,$20,$2A,$00,$00,$28,$25,$00,$28,$1B,$00,$28,$0C,$00,$00,$28,$2E,$00,$00,$28,$2F,$31,$2F,$30,$16,$35,$31,$2F,$30,$03,$2F,$31,$2F,$30,$37,$2F,$36,$2F,$1F,$1D,$1E,$1F,$1D,$1E,$33,$1D,$32,$1F,$1D,$1E,$04,$1D,$1F,$1D,$1E,$10,$1D,$34,$1F,$1D,$1E,$13,$11,$13,$11,$14,$1A,$11,$15,$13,$11,$14,$08,$11,$11,$14,$0E,$11,$11,$14,$12,$2B,$12,$2B,$18,$19,$2B,$21,$12,$2B,$18,$05,$2B,$2B,$18,$2D,$2B,$2B,$18
  1359  ca87 0103060601020009...modeidx !byte $01,$03,$06,$06,$01,$02,$00,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$09,$03,$06,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$01,$03,$06,$06,$01,$02,$00,$0C,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$03,$06,$06,$06,$01,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$02,$03,$02,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$08,$01,$0B,$01,$0A,$0A,$0B,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A,$02,$03,$06,$06,$06,$01,$02,$01,$09,$09,$09,$05,$04,$07,$07,$01,$0B,$0A,$0A
  1360                          
  1361  cb1e 0d91565741533230...copyright !text 13,145,"VWAS2024 (C) 2024 DAVID R. VAN WAGNER", 13, "MIT LICENSE DAVEVW.COM", 157, 13, 0
  1362  cb5f 4e4f5420494d504c...notimplemented !text "NOT IMPLEMENTED",13,0
  1363  cb70 449d9d9d9d9d00     page_disassemble !text "D",157,157,157,157,157,0
  1364                          
  1365                          finish = *
